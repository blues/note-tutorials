
stm32-with-library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08009fc0  08009fc0  00019fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a584  0800a584  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a58c  0800a58c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a58c  0800a58c  0001a58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a590  0800a590  0001a590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  200001f8  0800a78c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  0800a78c  00020688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001819a  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003406  00000000  00000000  000383c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d0  00000000  00000000  0003b7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e8  00000000  00000000  0003cb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021225  00000000  00000000  0003de80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001003b  00000000  00000000  0005f0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c66c8  00000000  00000000  0006f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001357a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057bc  00000000  00000000  00135824  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fa8 	.word	0x08009fa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08009fa8 	.word	0x08009fa8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_ldivmod>:
 8000b9c:	b97b      	cbnz	r3, 8000bbe <__aeabi_ldivmod+0x22>
 8000b9e:	b972      	cbnz	r2, 8000bbe <__aeabi_ldivmod+0x22>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bfbe      	ittt	lt
 8000ba4:	2000      	movlt	r0, #0
 8000ba6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000baa:	e006      	blt.n	8000bba <__aeabi_ldivmod+0x1e>
 8000bac:	bf08      	it	eq
 8000bae:	2800      	cmpeq	r0, #0
 8000bb0:	bf1c      	itt	ne
 8000bb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bb6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bba:	f000 b9bd 	b.w	8000f38 <__aeabi_idiv0>
 8000bbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	db09      	blt.n	8000bde <__aeabi_ldivmod+0x42>
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db1a      	blt.n	8000c04 <__aeabi_ldivmod+0x68>
 8000bce:	f000 f84d 	bl	8000c6c <__udivmoddi4>
 8000bd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bda:	b004      	add	sp, #16
 8000bdc:	4770      	bx	lr
 8000bde:	4240      	negs	r0, r0
 8000be0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db1b      	blt.n	8000c20 <__aeabi_ldivmod+0x84>
 8000be8:	f000 f840 	bl	8000c6c <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c02:	4770      	bx	lr
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	f000 f82f 	bl	8000c6c <__udivmoddi4>
 8000c0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c16:	b004      	add	sp, #16
 8000c18:	4240      	negs	r0, r0
 8000c1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f821 	bl	8000c6c <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4252      	negs	r2, r2
 8000c36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c50:	f000 b972 	b.w	8000f38 <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f806 	bl	8000c6c <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__udivmoddi4>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	9e08      	ldr	r6, [sp, #32]
 8000c72:	4604      	mov	r4, r0
 8000c74:	4688      	mov	r8, r1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d14b      	bne.n	8000d12 <__udivmoddi4+0xa6>
 8000c7a:	428a      	cmp	r2, r1
 8000c7c:	4615      	mov	r5, r2
 8000c7e:	d967      	bls.n	8000d50 <__udivmoddi4+0xe4>
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	b14a      	cbz	r2, 8000c9a <__udivmoddi4+0x2e>
 8000c86:	f1c2 0720 	rsb	r7, r2, #32
 8000c8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c92:	4095      	lsls	r5, r2
 8000c94:	ea47 0803 	orr.w	r8, r7, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca4:	fa1f fc85 	uxth.w	ip, r5
 8000ca8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cb0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x60>
 8000cb8:	18eb      	adds	r3, r5, r3
 8000cba:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cbe:	f080 811b 	bcs.w	8000ef8 <__udivmoddi4+0x28c>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 8118 	bls.w	8000ef8 <__udivmoddi4+0x28c>
 8000cc8:	3f02      	subs	r7, #2
 8000cca:	442b      	add	r3, r5
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ce0:	45a4      	cmp	ip, r4
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x8c>
 8000ce4:	192c      	adds	r4, r5, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cea:	f080 8107 	bcs.w	8000efc <__udivmoddi4+0x290>
 8000cee:	45a4      	cmp	ip, r4
 8000cf0:	f240 8104 	bls.w	8000efc <__udivmoddi4+0x290>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	442c      	add	r4, r5
 8000cf8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cfc:	eba4 040c 	sub.w	r4, r4, ip
 8000d00:	2700      	movs	r7, #0
 8000d02:	b11e      	cbz	r6, 8000d0c <__udivmoddi4+0xa0>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c6 4300 	strd	r4, r3, [r6]
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xbe>
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	f000 80eb 	beq.w	8000ef2 <__udivmoddi4+0x286>
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d22:	4638      	mov	r0, r7
 8000d24:	4639      	mov	r1, r7
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f783 	clz	r7, r3
 8000d2e:	2f00      	cmp	r7, #0
 8000d30:	d147      	bne.n	8000dc2 <__udivmoddi4+0x156>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd0>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80fa 	bhi.w	8000f30 <__udivmoddi4+0x2c4>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	4698      	mov	r8, r3
 8000d46:	2e00      	cmp	r6, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa0>
 8000d4a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa0>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xe8>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 808f 	bne.w	8000e7c <__udivmoddi4+0x210>
 8000d5e:	1b49      	subs	r1, r1, r5
 8000d60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d64:	fa1f f885 	uxth.w	r8, r5
 8000d68:	2701      	movs	r7, #1
 8000d6a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6e:	0c23      	lsrs	r3, r4, #16
 8000d70:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb08 f10c 	mul.w	r1, r8, ip
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d907      	bls.n	8000d90 <__udivmoddi4+0x124>
 8000d80:	18eb      	adds	r3, r5, r3
 8000d82:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x122>
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	f200 80cd 	bhi.w	8000f28 <__udivmoddi4+0x2bc>
 8000d8e:	4684      	mov	ip, r0
 8000d90:	1a59      	subs	r1, r3, r1
 8000d92:	b2a3      	uxth	r3, r4
 8000d94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d98:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000da0:	fb08 f800 	mul.w	r8, r8, r0
 8000da4:	45a0      	cmp	r8, r4
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x14c>
 8000da8:	192c      	adds	r4, r5, r4
 8000daa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x14a>
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	f200 80b6 	bhi.w	8000f22 <__udivmoddi4+0x2b6>
 8000db6:	4618      	mov	r0, r3
 8000db8:	eba4 0408 	sub.w	r4, r4, r8
 8000dbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dc0:	e79f      	b.n	8000d02 <__udivmoddi4+0x96>
 8000dc2:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc6:	40bb      	lsls	r3, r7
 8000dc8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dcc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dd0:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ddc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000de0:	4325      	orrs	r5, r4
 8000de2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de6:	0c2c      	lsrs	r4, r5, #16
 8000de8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dec:	fa1f fa8e 	uxth.w	sl, lr
 8000df0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df4:	fb09 f40a 	mul.w	r4, r9, sl
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfe:	fa00 f107 	lsl.w	r1, r0, r7
 8000e02:	d90b      	bls.n	8000e1c <__udivmoddi4+0x1b0>
 8000e04:	eb1e 0303 	adds.w	r3, lr, r3
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e0c:	f080 8087 	bcs.w	8000f1e <__udivmoddi4+0x2b2>
 8000e10:	429c      	cmp	r4, r3
 8000e12:	f240 8084 	bls.w	8000f1e <__udivmoddi4+0x2b2>
 8000e16:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1a:	4473      	add	r3, lr
 8000e1c:	1b1b      	subs	r3, r3, r4
 8000e1e:	b2ad      	uxth	r5, r5
 8000e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e24:	fb08 3310 	mls	r3, r8, r0, r3
 8000e28:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e2c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e30:	45a2      	cmp	sl, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1da>
 8000e34:	eb1e 0404 	adds.w	r4, lr, r4
 8000e38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3c:	d26b      	bcs.n	8000f16 <__udivmoddi4+0x2aa>
 8000e3e:	45a2      	cmp	sl, r4
 8000e40:	d969      	bls.n	8000f16 <__udivmoddi4+0x2aa>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4474      	add	r4, lr
 8000e46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	eba4 040a 	sub.w	r4, r4, sl
 8000e52:	454c      	cmp	r4, r9
 8000e54:	46c2      	mov	sl, r8
 8000e56:	464b      	mov	r3, r9
 8000e58:	d354      	bcc.n	8000f04 <__udivmoddi4+0x298>
 8000e5a:	d051      	beq.n	8000f00 <__udivmoddi4+0x294>
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d069      	beq.n	8000f34 <__udivmoddi4+0x2c8>
 8000e60:	ebb1 050a 	subs.w	r5, r1, sl
 8000e64:	eb64 0403 	sbc.w	r4, r4, r3
 8000e68:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e6c:	40fd      	lsrs	r5, r7
 8000e6e:	40fc      	lsrs	r4, r7
 8000e70:	ea4c 0505 	orr.w	r5, ip, r5
 8000e74:	e9c6 5400 	strd	r5, r4, [r6]
 8000e78:	2700      	movs	r7, #0
 8000e7a:	e747      	b.n	8000d0c <__udivmoddi4+0xa0>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f703 	lsr.w	r7, r0, r3
 8000e84:	4095      	lsls	r5, r2
 8000e86:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e92:	4338      	orrs	r0, r7
 8000e94:	0c01      	lsrs	r1, r0, #16
 8000e96:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e9a:	fa1f f885 	uxth.w	r8, r5
 8000e9e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ea2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea6:	fb07 f308 	mul.w	r3, r7, r8
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x256>
 8000eb2:	1869      	adds	r1, r5, r1
 8000eb4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000eb8:	d22f      	bcs.n	8000f1a <__udivmoddi4+0x2ae>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d92d      	bls.n	8000f1a <__udivmoddi4+0x2ae>
 8000ebe:	3f02      	subs	r7, #2
 8000ec0:	4429      	add	r1, r5
 8000ec2:	1acb      	subs	r3, r1, r3
 8000ec4:	b281      	uxth	r1, r0
 8000ec6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eca:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb00 f308 	mul.w	r3, r0, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x27e>
 8000eda:	1869      	adds	r1, r5, r1
 8000edc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ee0:	d217      	bcs.n	8000f12 <__udivmoddi4+0x2a6>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d915      	bls.n	8000f12 <__udivmoddi4+0x2a6>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4429      	add	r1, r5
 8000eea:	1ac9      	subs	r1, r1, r3
 8000eec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ef0:	e73b      	b.n	8000d6a <__udivmoddi4+0xfe>
 8000ef2:	4637      	mov	r7, r6
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	e709      	b.n	8000d0c <__udivmoddi4+0xa0>
 8000ef8:	4607      	mov	r7, r0
 8000efa:	e6e7      	b.n	8000ccc <__udivmoddi4+0x60>
 8000efc:	4618      	mov	r0, r3
 8000efe:	e6fb      	b.n	8000cf8 <__udivmoddi4+0x8c>
 8000f00:	4541      	cmp	r1, r8
 8000f02:	d2ab      	bcs.n	8000e5c <__udivmoddi4+0x1f0>
 8000f04:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f08:	eb69 020e 	sbc.w	r2, r9, lr
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	4613      	mov	r3, r2
 8000f10:	e7a4      	b.n	8000e5c <__udivmoddi4+0x1f0>
 8000f12:	4660      	mov	r0, ip
 8000f14:	e7e9      	b.n	8000eea <__udivmoddi4+0x27e>
 8000f16:	4618      	mov	r0, r3
 8000f18:	e795      	b.n	8000e46 <__udivmoddi4+0x1da>
 8000f1a:	4667      	mov	r7, ip
 8000f1c:	e7d1      	b.n	8000ec2 <__udivmoddi4+0x256>
 8000f1e:	4681      	mov	r9, r0
 8000f20:	e77c      	b.n	8000e1c <__udivmoddi4+0x1b0>
 8000f22:	3802      	subs	r0, #2
 8000f24:	442c      	add	r4, r5
 8000f26:	e747      	b.n	8000db8 <__udivmoddi4+0x14c>
 8000f28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f2c:	442b      	add	r3, r5
 8000f2e:	e72f      	b.n	8000d90 <__udivmoddi4+0x124>
 8000f30:	4638      	mov	r0, r7
 8000f32:	e708      	b.n	8000d46 <__udivmoddi4+0xda>
 8000f34:	4637      	mov	r7, r6
 8000f36:	e6e9      	b.n	8000d0c <__udivmoddi4+0xa0>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f001 fa14 	bl	8002372 <null_ptr_check>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d120      	bne.n	8000f98 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f8ef 	bl	800113a <bme680_soft_reset>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8000f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d117      	bne.n	8000f98 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	20d0      	movs	r0, #208	; 0xd0
 8000f70:	f000 f818 	bl	8000fa4 <bme680_get_regs>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10b      	bne.n	8000f98 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b61      	cmp	r3, #97	; 0x61
 8000f86:	d105      	bne.n	8000f94 <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 fbdf 	bl	800174c <get_calib_data>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e001      	b.n	8000f98 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8000f94:	23fd      	movs	r3, #253	; 0xfd
 8000f96:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f001 f9db 	bl	8002372 <null_ptr_check>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 8000fc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d126      	bne.n	8001016 <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	789b      	ldrb	r3, [r3, #2]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10e      	bne.n	8000fee <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 f8fd 	bl	80021d4 <set_mem_page>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 8000fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d103      	bne.n	8000fee <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fec:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7858      	ldrb	r0, [r3, #1]
 8000ff6:	89bb      	ldrh	r3, [r7, #12]
 8000ff8:	7bf9      	ldrb	r1, [r7, #15]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	47a0      	blx	r4
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 8001012:	23fe      	movs	r3, #254	; 0xfe
 8001014:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001016:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800101a:	4618      	mov	r0, r3
 800101c:	371c      	adds	r7, #28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}

08001022 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 8001022:	b5b0      	push	{r4, r5, r7, lr}
 8001024:	b090      	sub	sp, #64	; 0x40
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4613      	mov	r3, r2
 8001030:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2228      	movs	r2, #40	; 0x28
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f008 fb96 	bl	800976c <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001040:	6838      	ldr	r0, [r7, #0]
 8001042:	f001 f996 	bl	8002372 <null_ptr_check>
 8001046:	4603      	mov	r3, r0
 8001048:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 800104c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001050:	2b00      	cmp	r3, #0
 8001052:	d16c      	bne.n	800112e <bme680_set_regs+0x10c>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d064      	beq.n	8001124 <bme680_set_regs+0x102>
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b13      	cmp	r3, #19
 800105e:	d861      	bhi.n	8001124 <bme680_set_regs+0x102>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8001060:	2300      	movs	r3, #0
 8001062:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001064:	e037      	b.n	80010d6 <bme680_set_regs+0xb4>
				if (dev->intf == BME680_SPI_INTF) {
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	789b      	ldrb	r3, [r3, #2]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d119      	bne.n	80010a2 <bme680_set_regs+0x80>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 800106e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	6839      	ldr	r1, [r7, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f001 f8ab 	bl	80021d4 <set_mem_page>
 800107e:	4603      	mov	r3, r0
 8001080:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8001084:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800109a:	440b      	add	r3, r1
 800109c:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80010a0:	e00a      	b.n	80010b8 <bme680_set_regs+0x96>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 80010a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	441a      	add	r2, r3
 80010a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80010b2:	440b      	add	r3, r1
 80010b4:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 80010b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	441a      	add	r2, r3
 80010be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	3301      	adds	r3, #1
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80010ca:	440b      	add	r3, r1
 80010cc:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 80010d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010d2:	3301      	adds	r3, #1
 80010d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3c2      	bcc.n	8001066 <bme680_set_regs+0x44>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 80010e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d121      	bne.n	800112c <bme680_set_regs+0x10a>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	7858      	ldrb	r0, [r3, #1]
 80010f0:	7d39      	ldrb	r1, [r7, #20]
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b29d      	uxth	r5, r3
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	462b      	mov	r3, r5
 8001106:	47a0      	blx	r4
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001118:	2b00      	cmp	r3, #0
 800111a:	d007      	beq.n	800112c <bme680_set_regs+0x10a>
					rslt = BME680_E_COM_FAIL;
 800111c:	23fe      	movs	r3, #254	; 0xfe
 800111e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 8001122:	e003      	b.n	800112c <bme680_set_regs+0x10a>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8001124:	23fc      	movs	r3, #252	; 0xfc
 8001126:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800112a:	e000      	b.n	800112e <bme680_set_regs+0x10c>
			if (rslt == BME680_OK) {
 800112c:	bf00      	nop
		}
	}

	return rslt;
 800112e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001132:	4618      	mov	r0, r3
 8001134:	3740      	adds	r7, #64	; 0x40
 8001136:	46bd      	mov	sp, r7
 8001138:	bdb0      	pop	{r4, r5, r7, pc}

0800113a <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8001142:	23e0      	movs	r3, #224	; 0xe0
 8001144:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8001146:	23b6      	movs	r3, #182	; 0xb6
 8001148:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f001 f911 	bl	8002372 <null_ptr_check>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d127      	bne.n	80011ac <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	789b      	ldrb	r3, [r3, #2]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d104      	bne.n	800116e <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f001 f89a 	bl	800229e <get_mem_page>
 800116a:	4603      	mov	r3, r0
 800116c:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d11a      	bne.n	80011ac <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001176:	f107 010d 	add.w	r1, r7, #13
 800117a:	f107 000e 	add.w	r0, r7, #14
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f7ff ff4e 	bl	8001022 <bme680_set_regs>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800118e:	200a      	movs	r0, #10
 8001190:	4798      	blx	r3

			if (rslt == BME680_OK) {
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d108      	bne.n	80011ac <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	789b      	ldrb	r3, [r3, #2]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d104      	bne.n	80011ac <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f001 f87b 	bl	800229e <get_mem_page>
 80011a8:	4603      	mov	r3, r0
 80011aa:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 80011ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	809a      	strh	r2, [r3, #4]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	809a      	strh	r2, [r3, #4]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011e6:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	f001 f8c2 	bl	8002372 <null_ptr_check>
 80011ee:	4603      	mov	r3, r0
 80011f0:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 80011f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f040 81ac 	bne.w	8001554 <bme680_set_sensor_settings+0x39c>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <bme680_set_sensor_settings+0x58>
			rslt = set_gas_config(dev);
 8001206:	6838      	ldr	r0, [r7, #0]
 8001208:	f000 fbca 	bl	80019a0 <set_gas_config>
 800120c:	4603      	mov	r3, r0
 800120e:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 8001218:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d104      	bne.n	800122a <bme680_set_sensor_settings+0x72>
			rslt = bme680_set_sensor_mode(dev);
 8001220:	6838      	ldr	r0, [r7, #0]
 8001222:	f000 f99d 	bl	8001560 <bme680_set_sensor_mode>
 8001226:	4603      	mov	r3, r0
 8001228:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	d03f      	beq.n	80012b4 <bme680_set_sensor_settings+0xfc>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2207      	movs	r2, #7
 800123e:	2100      	movs	r1, #0
 8001240:	f001 f85c 	bl	80022fc <boundary_check>
 8001244:	4603      	mov	r3, r0
 8001246:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 8001248:	2375      	movs	r3, #117	; 0x75
 800124a:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800124c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d108      	bne.n	8001266 <bme680_set_sensor_settings+0xae>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001254:	f107 011b 	add.w	r1, r7, #27
 8001258:	7f38      	ldrb	r0, [r7, #28]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	f7ff fea1 	bl	8000fa4 <bme680_get_regs>
 8001262:	4603      	mov	r3, r0
 8001264:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	2b00      	cmp	r3, #0
 800126e:	d010      	beq.n	8001292 <bme680_set_sensor_settings+0xda>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8001270:	7efb      	ldrb	r3, [r7, #27]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	f023 031c 	bic.w	r3, r3, #28
 8001278:	b25a      	sxtb	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	b25b      	sxtb	r3, r3
 8001284:	f003 031c 	and.w	r3, r3, #28
 8001288:	b25b      	sxtb	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b25b      	sxtb	r3, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001292:	7fbb      	ldrb	r3, [r7, #30]
 8001294:	f107 0220 	add.w	r2, r7, #32
 8001298:	4413      	add	r3, r2
 800129a:	7f3a      	ldrb	r2, [r7, #28]
 800129c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80012a0:	7fbb      	ldrb	r3, [r7, #30]
 80012a2:	7efa      	ldrb	r2, [r7, #27]
 80012a4:	f107 0120 	add.w	r1, r7, #32
 80012a8:	440b      	add	r3, r1
 80012aa:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80012ae:	7fbb      	ldrb	r3, [r7, #30]
 80012b0:	3301      	adds	r3, #1
 80012b2:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	f003 0320 	and.w	r3, r3, #32
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d039      	beq.n	8001332 <bme680_set_sensor_settings+0x17a>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2208      	movs	r2, #8
 80012c8:	2100      	movs	r1, #0
 80012ca:	f001 f817 	bl	80022fc <boundary_check>
 80012ce:	4603      	mov	r3, r0
 80012d0:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 80012d2:	2370      	movs	r3, #112	; 0x70
 80012d4:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80012d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d108      	bne.n	80012f0 <bme680_set_sensor_settings+0x138>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80012de:	f107 011b 	add.w	r1, r7, #27
 80012e2:	7f38      	ldrb	r0, [r7, #28]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f7ff fe5c 	bl	8000fa4 <bme680_get_regs>
 80012ec:	4603      	mov	r3, r0
 80012ee:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80012f0:	7efb      	ldrb	r3, [r7, #27]
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	f023 0308 	bic.w	r3, r3, #8
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001300:	b25b      	sxtb	r3, r3
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	b25b      	sxtb	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b25b      	sxtb	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001310:	7fbb      	ldrb	r3, [r7, #30]
 8001312:	f107 0220 	add.w	r2, r7, #32
 8001316:	4413      	add	r3, r2
 8001318:	7f3a      	ldrb	r2, [r7, #28]
 800131a:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800131e:	7fbb      	ldrb	r3, [r7, #30]
 8001320:	7efa      	ldrb	r2, [r7, #27]
 8001322:	f107 0120 	add.w	r1, r7, #32
 8001326:	440b      	add	r3, r1
 8001328:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800132c:	7fbb      	ldrb	r3, [r7, #30]
 800132e:	3301      	adds	r3, #1
 8001330:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d052      	beq.n	80013e2 <bme680_set_sensor_settings+0x22a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2205      	movs	r2, #5
 8001346:	2100      	movs	r1, #0
 8001348:	f000 ffd8 	bl	80022fc <boundary_check>
 800134c:	4603      	mov	r3, r0
 800134e:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8001350:	2374      	movs	r3, #116	; 0x74
 8001352:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001354:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d108      	bne.n	800136e <bme680_set_sensor_settings+0x1b6>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800135c:	f107 011b 	add.w	r1, r7, #27
 8001360:	7f38      	ldrb	r0, [r7, #28]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	f7ff fe1d 	bl	8000fa4 <bme680_get_regs>
 800136a:	4603      	mov	r3, r0
 800136c:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00d      	beq.n	8001394 <bme680_set_sensor_settings+0x1dc>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8001378:	7efb      	ldrb	r3, [r7, #27]
 800137a:	b25b      	sxtb	r3, r3
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	b25a      	sxtb	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	b25b      	sxtb	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b25b      	sxtb	r3, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d010      	beq.n	80013c0 <bme680_set_sensor_settings+0x208>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 800139e:	7efb      	ldrb	r3, [r7, #27]
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	f023 031c 	bic.w	r3, r3, #28
 80013a6:	b25a      	sxtb	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	f003 031c 	and.w	r3, r3, #28
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 80013c0:	7fbb      	ldrb	r3, [r7, #30]
 80013c2:	f107 0220 	add.w	r2, r7, #32
 80013c6:	4413      	add	r3, r2
 80013c8:	7f3a      	ldrb	r2, [r7, #28]
 80013ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80013ce:	7fbb      	ldrb	r3, [r7, #30]
 80013d0:	7efa      	ldrb	r2, [r7, #27]
 80013d2:	f107 0120 	add.w	r1, r7, #32
 80013d6:	440b      	add	r3, r1
 80013d8:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80013dc:	7fbb      	ldrb	r3, [r7, #30]
 80013de:	3301      	adds	r3, #1
 80013e0:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d039      	beq.n	8001460 <bme680_set_sensor_settings+0x2a8>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2205      	movs	r2, #5
 80013f6:	2100      	movs	r1, #0
 80013f8:	f000 ff80 	bl	80022fc <boundary_check>
 80013fc:	4603      	mov	r3, r0
 80013fe:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 8001400:	2372      	movs	r3, #114	; 0x72
 8001402:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001404:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d108      	bne.n	800141e <bme680_set_sensor_settings+0x266>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800140c:	f107 011b 	add.w	r1, r7, #27
 8001410:	7f38      	ldrb	r0, [r7, #28]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	f7ff fdc5 	bl	8000fa4 <bme680_get_regs>
 800141a:	4603      	mov	r3, r0
 800141c:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 800141e:	7efb      	ldrb	r3, [r7, #27]
 8001420:	b25b      	sxtb	r3, r3
 8001422:	f023 0307 	bic.w	r3, r3, #7
 8001426:	b25a      	sxtb	r2, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800142e:	b25b      	sxtb	r3, r3
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	b25b      	sxtb	r3, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	b25b      	sxtb	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 800143e:	7fbb      	ldrb	r3, [r7, #30]
 8001440:	f107 0220 	add.w	r2, r7, #32
 8001444:	4413      	add	r3, r2
 8001446:	7f3a      	ldrb	r2, [r7, #28]
 8001448:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800144c:	7fbb      	ldrb	r3, [r7, #30]
 800144e:	7efa      	ldrb	r2, [r7, #27]
 8001450:	f107 0120 	add.w	r1, r7, #32
 8001454:	440b      	add	r3, r1
 8001456:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800145a:	7fbb      	ldrb	r3, [r7, #30]
 800145c:	3301      	adds	r3, #1
 800145e:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d062      	beq.n	8001530 <bme680_set_sensor_settings+0x378>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2201      	movs	r2, #1
 8001474:	2100      	movs	r1, #0
 8001476:	f000 ff41 	bl	80022fc <boundary_check>
 800147a:	4603      	mov	r3, r0
 800147c:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 800147e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <bme680_set_sensor_settings+0x2e2>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	220a      	movs	r2, #10
 8001490:	2100      	movs	r1, #0
 8001492:	f000 ff33 	bl	80022fc <boundary_check>
 8001496:	4603      	mov	r3, r0
 8001498:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 800149a:	2371      	movs	r3, #113	; 0x71
 800149c:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800149e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d108      	bne.n	80014b8 <bme680_set_sensor_settings+0x300>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80014a6:	f107 011b 	add.w	r1, r7, #27
 80014aa:	7f38      	ldrb	r0, [r7, #28]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f7ff fd78 	bl	8000fa4 <bme680_get_regs>
 80014b4:	4603      	mov	r3, r0
 80014b6:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d010      	beq.n	80014e4 <bme680_set_sensor_settings+0x32c>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80014c2:	7efb      	ldrb	r3, [r7, #27]
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	f023 0310 	bic.w	r3, r3, #16
 80014ca:	b25a      	sxtb	r2, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00f      	beq.n	800150e <bme680_set_sensor_settings+0x356>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80014ee:	7efb      	ldrb	r3, [r7, #27]
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	f023 030f 	bic.w	r3, r3, #15
 80014f6:	b25a      	sxtb	r2, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	b25b      	sxtb	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b25b      	sxtb	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 800150e:	7fbb      	ldrb	r3, [r7, #30]
 8001510:	f107 0220 	add.w	r2, r7, #32
 8001514:	4413      	add	r3, r2
 8001516:	7f3a      	ldrb	r2, [r7, #28]
 8001518:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800151c:	7fbb      	ldrb	r3, [r7, #30]
 800151e:	7efa      	ldrb	r2, [r7, #27]
 8001520:	f107 0120 	add.w	r1, r7, #32
 8001524:	440b      	add	r3, r1
 8001526:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800152a:	7fbb      	ldrb	r3, [r7, #30]
 800152c:	3301      	adds	r3, #1
 800152e:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8001530:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d109      	bne.n	800154c <bme680_set_sensor_settings+0x394>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8001538:	7fba      	ldrb	r2, [r7, #30]
 800153a:	f107 010c 	add.w	r1, r7, #12
 800153e:	f107 0014 	add.w	r0, r7, #20
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	f7ff fd6d 	bl	8001022 <bme680_set_regs>
 8001548:	4603      	mov	r3, r0
 800154a:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	7f7a      	ldrb	r2, [r7, #29]
 8001550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 8001554:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 800156c:	2374      	movs	r3, #116	; 0x74
 800156e:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 fefe 	bl	8002372 <null_ptr_check>
 8001576:	4603      	mov	r3, r0
 8001578:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d14c      	bne.n	800161c <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8001582:	f107 010d 	add.w	r1, r7, #13
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	2074      	movs	r0, #116	; 0x74
 800158c:	f7ff fd0a 	bl	8000fa4 <bme680_get_regs>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d119      	bne.n	80015d0 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 800159c:	7b7b      	ldrb	r3, [r7, #13]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d012      	beq.n	80015d0 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80015aa:	7b7b      	ldrb	r3, [r7, #13]
 80015ac:	f023 0303 	bic.w	r3, r3, #3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80015b4:	f107 010d 	add.w	r1, r7, #13
 80015b8:	f107 000c 	add.w	r0, r7, #12
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f7ff fd2f 	bl	8001022 <bme680_set_regs>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015cc:	200a      	movs	r0, #10
 80015ce:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1d5      	bne.n	8001582 <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01d      	beq.n	800161c <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80015e0:	7b7b      	ldrb	r3, [r7, #13]
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	f023 0303 	bic.w	r3, r3, #3
 80015e8:	b25a      	sxtb	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d109      	bne.n	800161c <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001608:	f107 010d 	add.w	r1, r7, #13
 800160c:	f107 000c 	add.w	r0, r7, #12
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f7ff fd05 	bl	8001022 <bme680_set_regs>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800161c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8001632:	4a2e      	ldr	r2, [pc, #184]	; (80016ec <bme680_get_profile_dur+0xc4>)
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800163c:	6018      	str	r0, [r3, #0]
 800163e:	3304      	adds	r3, #4
 8001640:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001648:	f107 0218 	add.w	r2, r7, #24
 800164c:	4413      	add	r3, r2
 800164e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001652:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800165a:	f107 0218 	add.w	r2, r7, #24
 800165e:	4413      	add	r3, r2
 8001660:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001664:	461a      	mov	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	4413      	add	r3, r2
 800166a:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001672:	f107 0218 	add.w	r2, r7, #24
 8001676:	4413      	add	r3, r2
 8001678:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800167c:	461a      	mov	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4413      	add	r3, r2
 8001682:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f240 72ab 	movw	r2, #1963	; 0x7ab
 800168a:	fb02 f303 	mul.w	r3, r2, r3
 800168e:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8001696:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	f603 1351 	addw	r3, r3, #2385	; 0x951
 800169e:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80016a6:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <bme680_get_profile_dur+0xc8>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	3301      	adds	r3, #1
 80016b8:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <bme680_get_profile_dur+0xb6>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	881a      	ldrh	r2, [r3, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80016d6:	4413      	add	r3, r2
 80016d8:	b29a      	uxth	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	801a      	strh	r2, [r3, #0]
	}
}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	08009fc0 	.word	0x08009fc0
 80016f0:	10624dd3 	.word	0x10624dd3

080016f4 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80016fe:	6838      	ldr	r0, [r7, #0]
 8001700:	f000 fe37 	bl	8002372 <null_ptr_check>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d117      	bne.n	8001740 <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fca5 	bl	8002062 <read_field_data>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 800171c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10d      	bne.n	8001740 <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b25b      	sxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	da04      	bge.n	8001738 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001736:	e003      	b.n	8001740 <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}

	return rslt;
 8001740:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08e      	sub	sp, #56	; 0x38
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2229      	movs	r2, #41	; 0x29
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f008 f805 	bl	800976c <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 8001762:	2300      	movs	r3, #0
 8001764:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fe03 	bl	8002372 <null_ptr_check>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 8001772:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 810c 	bne.w	8001994 <get_calib_data+0x248>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 800177c:	f107 010c 	add.w	r1, r7, #12
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2219      	movs	r2, #25
 8001784:	2089      	movs	r0, #137	; 0x89
 8001786:	f7ff fc0d 	bl	8000fa4 <bme680_get_regs>
 800178a:	4603      	mov	r3, r0
 800178c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 8001790:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10b      	bne.n	80017b0 <get_calib_data+0x64>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	f103 0119 	add.w	r1, r3, #25
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2210      	movs	r2, #16
 80017a4:	20e1      	movs	r0, #225	; 0xe1
 80017a6:	f7ff fbfd 	bl	8000fa4 <bme680_get_regs>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 80017b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b21a      	sxth	r2, r3
 80017b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	b21a      	sxth	r2, r3
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	b25a      	sxtb	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 80017e2:	7cbb      	ldrb	r3, [r7, #18]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	7c7b      	ldrb	r3, [r7, #17]
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 80017f6:	7d3b      	ldrb	r3, [r7, #20]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	7cfb      	ldrb	r3, [r7, #19]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	b21a      	sxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8001808:	7d7b      	ldrb	r3, [r7, #21]
 800180a:	b25a      	sxtb	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8001812:	7e3b      	ldrb	r3, [r7, #24]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b21a      	sxth	r2, r3
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	b21b      	sxth	r3, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	b21a      	sxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8001824:	7ebb      	ldrb	r3, [r7, #26]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	b21a      	sxth	r2, r3
 800182a:	7e7b      	ldrb	r3, [r7, #25]
 800182c:	b21b      	sxth	r3, r3
 800182e:	4313      	orrs	r3, r2
 8001830:	b21a      	sxth	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8001836:	7f3b      	ldrb	r3, [r7, #28]
 8001838:	b25a      	sxtb	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8001840:	7efb      	ldrb	r3, [r7, #27]
 8001842:	b25a      	sxtb	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 800184a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	b21a      	sxth	r2, r3
 8001852:	7ffb      	ldrb	r3, [r7, #31]
 8001854:	b21b      	sxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b21a      	sxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 800185e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b21a      	sxth	r2, r3
 8001866:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800186a:	b21b      	sxth	r3, r3
 800186c:	4313      	orrs	r3, r2
 800186e:	b21a      	sxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8001874:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800187e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001882:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8001884:	b21a      	sxth	r2, r3
 8001886:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800188a:	b21b      	sxth	r3, r3
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800189c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018a0:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80018b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018bc:	b25a      	sxtb	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80018c2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 80018cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80018d0:	b25a      	sxtb	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 80018d6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 80018de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e2:	b25a      	sxtb	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 80018e8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80018ec:	b25a      	sxtb	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80018f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018fe:	b21b      	sxth	r3, r3
 8001900:	4313      	orrs	r3, r2
 8001902:	b21a      	sxth	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8001908:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800190c:	b25a      	sxtb	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8001912:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001916:	2b00      	cmp	r3, #0
 8001918:	d135      	bne.n	8001986 <get_calib_data+0x23a>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 800191a:	f107 010b 	add.w	r1, r7, #11
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	2002      	movs	r0, #2
 8001924:	f7ff fb3e 	bl	8000fa4 <bme680_get_regs>
 8001928:	4603      	mov	r3, r0
 800192a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 800192e:	7afb      	ldrb	r3, [r7, #11]
 8001930:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001934:	2b00      	cmp	r3, #0
 8001936:	da00      	bge.n	800193a <get_calib_data+0x1ee>
 8001938:	330f      	adds	r3, #15
 800193a:	111b      	asrs	r3, r3, #4
 800193c:	b2da      	uxtb	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 8001944:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001948:	2b00      	cmp	r3, #0
 800194a:	d11c      	bne.n	8001986 <get_calib_data+0x23a>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 800194c:	f107 010b 	add.w	r1, r7, #11
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff fb25 	bl	8000fa4 <bme680_get_regs>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 8001960:	7afb      	ldrb	r3, [r7, #11]
 8001962:	b25a      	sxtb	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 800196a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <get_calib_data+0x23a>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8001972:	f107 010b 	add.w	r1, r7, #11
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	2004      	movs	r0, #4
 800197c:	f7ff fb12 	bl	8000fa4 <bme680_get_regs>
 8001980:	4603      	mov	r3, r0
 8001982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	111b      	asrs	r3, r3, #4
 800198c:	b25a      	sxtb	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 8001994:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8001998:	4618      	mov	r0, r3
 800199a:	3738      	adds	r7, #56	; 0x38
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fce2 	bl	8002372 <null_ptr_check>
 80019ae:	4603      	mov	r3, r0
 80019b0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d132      	bne.n	8001a20 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 80019ba:	2300      	movs	r3, #0
 80019bc:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 80019be:	2300      	movs	r3, #0
 80019c0:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d119      	bne.n	8001a00 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80019cc:	235a      	movs	r3, #90	; 0x5a
 80019ce:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fa9f 	bl	8001f1c <calc_heater_res>
 80019de:	4603      	mov	r3, r0
 80019e0:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80019e2:	2364      	movs	r3, #100	; 0x64
 80019e4:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fb13 	bl	8002018 <calc_heater_dur>
 80019f2:	4603      	mov	r3, r0
 80019f4:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80019fe:	e001      	b.n	8001a04 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 8001a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8001a0c:	f107 0108 	add.w	r1, r7, #8
 8001a10:	f107 000c 	add.w	r0, r7, #12
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f7ff fb03 	bl	8001022 <bme680_set_regs>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8001a2c:	b4b0      	push	{r4, r5, r7}
 8001a2e:	b08b      	sub	sp, #44	; 0x2c
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	10da      	asrs	r2, r3, #3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	8adb      	ldrh	r3, [r3, #22]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a46:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a56:	6a3a      	ldr	r2, [r7, #32]
 8001a58:	fb04 f102 	mul.w	r1, r4, r2
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5e:	fb03 f202 	mul.w	r2, r3, r2
 8001a62:	1888      	adds	r0, r1, r2
 8001a64:	6a3a      	ldr	r2, [r7, #32]
 8001a66:	fba2 1203 	umull	r1, r2, r2, r3
 8001a6a:	1883      	adds	r3, r0, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	f04f 0400 	mov.w	r4, #0
 8001a76:	0acb      	lsrs	r3, r1, #11
 8001a78:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001a7c:	12d4      	asrs	r4, r2, #11
 8001a7e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8001a82:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001a86:	1062      	asrs	r2, r4, #1
 8001a88:	ea4f 0133 	mov.w	r1, r3, rrx
 8001a8c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001a90:	1064      	asrs	r4, r4, #1
 8001a92:	ea4f 0333 	mov.w	r3, r3, rrx
 8001a96:	fb03 f502 	mul.w	r5, r3, r2
 8001a9a:	fb01 f004 	mul.w	r0, r1, r4
 8001a9e:	4428      	add	r0, r5
 8001aa0:	fba1 1203 	umull	r1, r2, r1, r3
 8001aa4:	1883      	adds	r3, r0, r2
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	f04f 0400 	mov.w	r4, #0
 8001ab0:	0b0b      	lsrs	r3, r1, #12
 8001ab2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001ab6:	1314      	asrs	r4, r2, #12
 8001ab8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	fb04 f102 	mul.w	r1, r4, r2
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	fb03 f202 	mul.w	r2, r3, r2
 8001ad4:	1888      	adds	r0, r1, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	fba2 1203 	umull	r1, r2, r2, r3
 8001adc:	1883      	adds	r3, r0, r2
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	f04f 0400 	mov.w	r4, #0
 8001ae8:	0b8b      	lsrs	r3, r1, #14
 8001aea:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8001aee:	1394      	asrs	r4, r2, #14
 8001af0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4413      	add	r3, r2
 8001afa:	461a      	mov	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	3380      	adds	r3, #128	; 0x80
 8001b0c:	121b      	asrs	r3, r3, #8
 8001b0e:	81fb      	strh	r3, [r7, #14]

	return calc_temp;
 8001b10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	372c      	adds	r7, #44	; 0x2c
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bcb0      	pop	{r4, r5, r7}
 8001b1c:	4770      	bx	lr

08001b1e <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b087      	sub	sp, #28
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	105b      	asrs	r3, r3, #1
 8001b2e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001b32:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	109b      	asrs	r3, r3, #2
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	1092      	asrs	r2, r2, #2
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	109b      	asrs	r3, r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b56:	461a      	mov	r2, r3
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	fb03 f302 	mul.w	r3, r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	109a      	asrs	r2, r3, #2
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	109b      	asrs	r3, r3, #2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	1092      	asrs	r2, r2, #2
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8001b8a:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001b90:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	fb03 f301 	mul.w	r3, r3, r1
 8001ba0:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001ba2:	4413      	add	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	149b      	asrs	r3, r3, #18
 8001baa:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	8b92      	ldrh	r2, [r2, #28]
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	13db      	asrs	r3, r3, #15
 8001bbc:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001bc4:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	131b      	asrs	r3, r3, #12
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f640 4335 	movw	r3, #3125	; 0xc35
 8001bd4:	fb03 f302 	mul.w	r3, r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be0:	db06      	blt.n	8001bf0 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e005      	b.n	8001bfc <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005a      	lsls	r2, r3, #1
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001c02:	4619      	mov	r1, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001c10:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c12:	fb03 f301 	mul.w	r3, r3, r1
 8001c16:	131b      	asrs	r3, r3, #12
 8001c18:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001c24:	fb02 f303 	mul.w	r3, r2, r3
 8001c28:	135b      	asrs	r3, r3, #13
 8001c2a:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	121b      	asrs	r3, r3, #8
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	1212      	asrs	r2, r2, #8
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001c4a:	145b      	asrs	r3, r3, #17
 8001c4c:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	441a      	add	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 8001c5e:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001c60:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001c62:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	4413      	add	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8001c6a:	697b      	ldr	r3, [r7, #20]

}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b08b      	sub	sp, #44	; 0x2c
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3380      	adds	r3, #128	; 0x80
 8001c90:	121b      	asrs	r3, r3, #8
 8001c92:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001c94:	88fa      	ldrh	r2, [r7, #6]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	891b      	ldrh	r3, [r3, #8]
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	fb03 f301 	mul.w	r3, r3, r1
 8001cac:	493d      	ldr	r1, [pc, #244]	; (8001da4 <calc_humidity+0x12c>)
 8001cae:	fb81 0103 	smull	r0, r1, r1, r3
 8001cb2:	1149      	asrs	r1, r1, #5
 8001cb4:	17db      	asrs	r3, r3, #31
 8001cb6:	1acb      	subs	r3, r1, r3
 8001cb8:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	895b      	ldrh	r3, [r3, #10]
 8001cc2:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	fb03 f302 	mul.w	r3, r3, r2
 8001cd2:	4a34      	ldr	r2, [pc, #208]	; (8001da4 <calc_humidity+0x12c>)
 8001cd4:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd8:	1152      	asrs	r2, r2, #5
 8001cda:	17db      	asrs	r3, r3, #31
 8001cdc:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	fb03 f301 	mul.w	r3, r3, r1
 8001cec:	492d      	ldr	r1, [pc, #180]	; (8001da4 <calc_humidity+0x12c>)
 8001cee:	fb81 c103 	smull	ip, r1, r1, r3
 8001cf2:	1149      	asrs	r1, r1, #5
 8001cf4:	17db      	asrs	r3, r3, #31
 8001cf6:	1acb      	subs	r3, r1, r3
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001d00:	4928      	ldr	r1, [pc, #160]	; (8001da4 <calc_humidity+0x12c>)
 8001d02:	fb81 c103 	smull	ip, r1, r1, r3
 8001d06:	1149      	asrs	r1, r1, #5
 8001d08:	17db      	asrs	r3, r3, #31
 8001d0a:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001d0c:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001d0e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001d12:	fb03 f300 	mul.w	r3, r3, r0
	var2 = ((int32_t) dev->calib.par_h2
 8001d16:	129b      	asrs	r3, r3, #10
 8001d18:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	7bdb      	ldrb	r3, [r3, #15]
 8001d28:	01db      	lsls	r3, r3, #7
 8001d2a:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001d32:	461a      	mov	r2, r3
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	fb03 f302 	mul.w	r3, r3, r2
 8001d3a:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <calc_humidity+0x12c>)
 8001d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d40:	1152      	asrs	r2, r2, #5
 8001d42:	17db      	asrs	r3, r3, #31
 8001d44:	1ad2      	subs	r2, r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	111b      	asrs	r3, r3, #4
 8001d4c:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	139b      	asrs	r3, r3, #14
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	1392      	asrs	r2, r2, #14
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	129b      	asrs	r3, r3, #10
 8001d5c:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	105b      	asrs	r3, r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4413      	add	r3, r2
 8001d70:	129b      	asrs	r3, r3, #10
 8001d72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	131b      	asrs	r3, r3, #12
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <calc_humidity+0x130>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	dd02      	ble.n	8001d8c <calc_humidity+0x114>
		calc_hum = 100000;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <calc_humidity+0x130>)
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8a:	e004      	b.n	8001d96 <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	da01      	bge.n	8001d96 <calc_humidity+0x11e>
		calc_hum = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	372c      	adds	r7, #44	; 0x2c
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	51eb851f 	.word	0x51eb851f
 8001da8:	000186a0 	.word	0x000186a0

08001dac <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8001dac:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001db0:	b0aa      	sub	sp, #168	; 0xa8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	603a      	str	r2, [r7, #0]
 8001db8:	80fb      	strh	r3, [r7, #6]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	717b      	strb	r3, [r7, #5]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8001dbe:	4b55      	ldr	r3, [pc, #340]	; (8001f14 <calc_gas_resistance+0x168>)
 8001dc0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001dc4:	461d      	mov	r5, r3
 8001dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8001dda:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <calc_gas_resistance+0x16c>)
 8001ddc:	f107 040c 	add.w	r4, r7, #12
 8001de0:	461d      	mov	r5, r3
 8001de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 8001dfc:	b25d      	sxtb	r5, r3
 8001dfe:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001e02:	4629      	mov	r1, r5
 8001e04:	4632      	mov	r2, r6
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	f04f 0400 	mov.w	r4, #0
 8001e0e:	0094      	lsls	r4, r2, #2
 8001e10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001e14:	008b      	lsls	r3, r1, #2
 8001e16:	4619      	mov	r1, r3
 8001e18:	4622      	mov	r2, r4
 8001e1a:	194b      	adds	r3, r1, r5
 8001e1c:	eb42 0406 	adc.w	r4, r2, r6
 8001e20:	f240 513c 	movw	r1, #1340	; 0x53c
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	eb11 0b03 	adds.w	fp, r1, r3
 8001e2c:	eb42 0c04 	adc.w	ip, r2, r4
		((int64_t) lookupTable1[gas_range])) >> 16;
 8001e30:	797b      	ldrb	r3, [r7, #5]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e38:	4413      	add	r3, r2
 8001e3a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001e3e:	f04f 0400 	mov.w	r4, #0
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001e42:	fb03 f50c 	mul.w	r5, r3, ip
 8001e46:	fb0b f004 	mul.w	r0, fp, r4
 8001e4a:	4428      	add	r0, r5
 8001e4c:	fbab 1203 	umull	r1, r2, fp, r3
 8001e50:	1883      	adds	r3, r0, r2
 8001e52:	461a      	mov	r2, r3
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	f04f 0400 	mov.w	r4, #0
 8001e5c:	0c0b      	lsrs	r3, r1, #16
 8001e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e62:	1414      	asrs	r4, r2, #16
 8001e64:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8001e68:	88f9      	ldrh	r1, [r7, #6]
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	f04f 0400 	mov.w	r4, #0
 8001e76:	03d4      	lsls	r4, r2, #15
 8001e78:	ea44 4451 	orr.w	r4, r4, r1, lsr #17
 8001e7c:	03cb      	lsls	r3, r1, #15
 8001e7e:	f113 417f 	adds.w	r1, r3, #4278190080	; 0xff000000
 8001e82:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 8001e86:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8001e8a:	185d      	adds	r5, r3, r1
 8001e8c:	eb44 0602 	adc.w	r6, r4, r2
 8001e90:	e9c7 5626 	strd	r5, r6, [r7, #152]	; 0x98
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8001e94:	797b      	ldrb	r3, [r7, #5]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001ea2:	f04f 0400 	mov.w	r4, #0
 8001ea6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001eaa:	fb04 f102 	mul.w	r1, r4, r2
 8001eae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001eb2:	fb03 f202 	mul.w	r2, r3, r2
 8001eb6:	1888      	adds	r0, r1, r2
 8001eb8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001ebc:	fba2 1203 	umull	r1, r2, r2, r3
 8001ec0:	1883      	adds	r3, r0, r2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	f04f 0400 	mov.w	r4, #0
 8001ecc:	0a4b      	lsrs	r3, r1, #9
 8001ece:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8001ed2:	1254      	asrs	r4, r2, #9
 8001ed4:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8001ed8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8001edc:	1062      	asrs	r2, r4, #1
 8001ede:	ea4f 0133 	mov.w	r1, r3, rrx
 8001ee2:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001ee6:	18cd      	adds	r5, r1, r3
 8001ee8:	eb42 0604 	adc.w	r6, r2, r4
 8001eec:	4628      	mov	r0, r5
 8001eee:	4631      	mov	r1, r6
 8001ef0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4623      	mov	r3, r4
 8001ef8:	f7fe fe50 	bl	8000b9c <__aeabi_ldivmod>
 8001efc:	4603      	mov	r3, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	return calc_gas_res;
 8001f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	37a8      	adds	r7, #168	; 0xa8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001f12:	bf00      	nop
 8001f14:	08009fc8 	.word	0x08009fc8
 8001f18:	0800a008 	.word	0x0800a008

08001f1c <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b08b      	sub	sp, #44	; 0x2c
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001f2e:	d902      	bls.n	8001f36 <calc_heater_res+0x1a>
		temp = 400;
 8001f30:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f34:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001f44:	fb03 f302 	mul.w	r3, r3, r2
 8001f48:	4a30      	ldr	r2, [pc, #192]	; (800200c <calc_heater_res+0xf0>)
 8001f4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f4e:	1192      	asrs	r2, r2, #6
 8001f50:	17db      	asrs	r3, r3, #31
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001f5e:	f503 7144 	add.w	r1, r3, #784	; 0x310
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f68:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8001f6c:	f203 1399 	addw	r3, r3, #409	; 0x199
 8001f70:	88fa      	ldrh	r2, [r7, #6]
 8001f72:	fb02 f203 	mul.w	r2, r2, r3
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a24      	ldr	r2, [pc, #144]	; (8002010 <calc_heater_res+0xf4>)
 8001f7e:	fb82 0203 	smull	r0, r2, r2, r3
 8001f82:	1152      	asrs	r2, r2, #5
 8001f84:	17db      	asrs	r3, r3, #31
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 8001f8c:	4a21      	ldr	r2, [pc, #132]	; (8002014 <calc_heater_res+0xf8>)
 8001f8e:	fb82 0203 	smull	r0, r2, r2, r3
 8001f92:	1092      	asrs	r2, r2, #2
 8001f94:	17db      	asrs	r3, r3, #31
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	fb03 f301 	mul.w	r3, r3, r1
 8001f9c:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	0fda      	lsrs	r2, r3, #31
 8001fa2:	4413      	add	r3, r2
 8001fa4:	105b      	asrs	r3, r3, #1
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	4413      	add	r3, r2
 8001fac:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fbc:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	019b      	lsls	r3, r3, #6
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001fd4:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fde:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	3332      	adds	r3, #50	; 0x32
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <calc_heater_res+0xf4>)
 8001ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ff6:	1152      	asrs	r2, r2, #5
 8001ff8:	17db      	asrs	r3, r3, #31
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	372c      	adds	r7, #44	; 0x2c
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	10624dd3 	.word	0x10624dd3
 8002010:	51eb851f 	.word	0x51eb851f
 8002014:	66666667 	.word	0x66666667

08002018 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 800202c:	d308      	bcc.n	8002040 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 800202e:	23ff      	movs	r3, #255	; 0xff
 8002030:	73bb      	strb	r3, [r7, #14]
 8002032:	e00f      	b.n	8002054 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	3301      	adds	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	2b3f      	cmp	r3, #63	; 0x3f
 8002044:	d8f6      	bhi.n	8002034 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	019b      	lsls	r3, r3, #6
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4413      	add	r3, r2
 8002052:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8002054:	7bbb      	ldrb	r3, [r7, #14]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b08a      	sub	sp, #40	; 0x28
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	f8c3 200b 	str.w	r2, [r3, #11]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 800207c:	230a      	movs	r3, #10
 800207e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002082:	6838      	ldr	r0, [r7, #0]
 8002084:	f000 f975 	bl	8002372 <null_ptr_check>
 8002088:	4603      	mov	r3, r0
 800208a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 800208e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 8087 	bne.w	80021a6 <read_field_data+0x144>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8002098:	f107 0108 	add.w	r1, r7, #8
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	220f      	movs	r2, #15
 80020a0:	201d      	movs	r0, #29
 80020a2:	f7fe ff7f 	bl	8000fa4 <bme680_get_regs>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80020ac:	7a3b      	ldrb	r3, [r7, #8]
 80020ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80020b8:	7a3b      	ldrb	r3, [r7, #8]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 80020c4:	7a7a      	ldrb	r2, [r7, #9]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80020ca:	7abb      	ldrb	r3, [r7, #10]
 80020cc:	031a      	lsls	r2, r3, #12
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 80020d4:	7b3a      	ldrb	r2, [r7, #12]
 80020d6:	0912      	lsrs	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80020da:	4313      	orrs	r3, r2
 80020dc:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80020de:	7b7b      	ldrb	r3, [r7, #13]
 80020e0:	031a      	lsls	r2, r3, #12
 80020e2:	7bbb      	ldrb	r3, [r7, #14]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	0912      	lsrs	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80020f2:	7c3b      	ldrb	r3, [r7, #16]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	7c7b      	ldrb	r3, [r7, #17]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8002102:	7d7b      	ldrb	r3, [r7, #21]
 8002104:	b29b      	uxth	r3, r3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	b29a      	uxth	r2, r3
 800210a:	7dbb      	ldrb	r3, [r7, #22]
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	b2db      	uxtb	r3, r3
 8002110:	b29b      	uxth	r3, r3
 8002112:	4313      	orrs	r3, r2
 8002114:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8002116:	7dbb      	ldrb	r3, [r7, #22]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b25a      	sxtb	r2, r3
 8002124:	7dbb      	ldrb	r3, [r7, #22]
 8002126:	b25b      	sxtb	r3, r3
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	b25b      	sxtb	r3, r3
 800212e:	4313      	orrs	r3, r2
 8002130:	b25b      	sxtb	r3, r3
 8002132:	b2da      	uxtb	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b25a      	sxtb	r2, r3
 800213e:	7dbb      	ldrb	r3, [r7, #22]
 8002140:	b25b      	sxtb	r3, r3
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	b25b      	sxtb	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b25b      	sxtb	r3, r3
 800214c:	b2da      	uxtb	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b25b      	sxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	da20      	bge.n	800219e <read_field_data+0x13c>
				data->temperature = calc_temperature(adc_temp, dev);
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	69f8      	ldr	r0, [r7, #28]
 8002160:	f7ff fc64 	bl	8001a2c <calc_temperature>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 800216c:	6839      	ldr	r1, [r7, #0]
 800216e:	6a38      	ldr	r0, [r7, #32]
 8002170:	f7ff fcd5 	bl	8001b1e <calc_pressure>
 8002174:	4602      	mov	r2, r0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 800217a:	8b7b      	ldrh	r3, [r7, #26]
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fd7a 	bl	8001c78 <calc_humidity>
 8002184:	4602      	mov	r2, r0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 800218a:	7df9      	ldrb	r1, [r7, #23]
 800218c:	8b3b      	ldrh	r3, [r7, #24]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fe0b 	bl	8001dac <calc_gas_resistance>
 8002196:	4602      	mov	r2, r0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	611a      	str	r2, [r3, #16]
				break;
 800219c:	e00d      	b.n	80021ba <read_field_data+0x158>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a2:	200a      	movs	r0, #10
 80021a4:	4798      	blx	r3
		}
		tries--;
 80021a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021aa:	3b01      	subs	r3, #1
 80021ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 80021b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f47f af6a 	bne.w	800208e <read_field_data+0x2c>

	if (!tries)
 80021ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <read_field_data+0x166>
		rslt = BME680_W_NO_NEW_DATA;
 80021c2:	2302      	movs	r3, #2
 80021c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 80021c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80021e0:	6838      	ldr	r0, [r7, #0]
 80021e2:	f000 f8c6 	bl	8002372 <null_ptr_check>
 80021e6:	4603      	mov	r3, r0
 80021e8:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80021ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d14f      	bne.n	8002292 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da02      	bge.n	8002200 <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73bb      	strb	r3, [r7, #14]
 80021fe:	e001      	b.n	8002204 <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 8002200:	2310      	movs	r3, #16
 8002202:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	78db      	ldrb	r3, [r3, #3]
 8002208:	7bba      	ldrb	r2, [r7, #14]
 800220a:	429a      	cmp	r2, r3
 800220c:	d041      	beq.n	8002292 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	7bba      	ldrb	r2, [r7, #14]
 8002212:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	7858      	ldrb	r0, [r3, #1]
 800221c:	f107 020d 	add.w	r2, r7, #13
 8002220:	2301      	movs	r3, #1
 8002222:	21f3      	movs	r1, #243	; 0xf3
 8002224:	47a0      	blx	r4
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 800223a:	23fe      	movs	r3, #254	; 0xfe
 800223c:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d125      	bne.n	8002292 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8002246:	7b7b      	ldrb	r3, [r7, #13]
 8002248:	f023 0310 	bic.w	r3, r3, #16
 800224c:	b2db      	uxtb	r3, r3
 800224e:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	78db      	ldrb	r3, [r3, #3]
 8002254:	b25b      	sxtb	r3, r3
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	b25a      	sxtb	r2, r3
 800225c:	7b7b      	ldrb	r3, [r7, #13]
 800225e:	b25b      	sxtb	r3, r3
 8002260:	4313      	orrs	r3, r2
 8002262:	b25b      	sxtb	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	7858      	ldrb	r0, [r3, #1]
 8002270:	f107 020d 	add.w	r2, r7, #13
 8002274:	2301      	movs	r3, #1
 8002276:	2173      	movs	r1, #115	; 0x73
 8002278:	47a0      	blx	r4
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 800228e:	23fe      	movs	r3, #254	; 0xfe
 8002290:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bd90      	pop	{r4, r7, pc}

0800229e <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 800229e:	b590      	push	{r4, r7, lr}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f863 	bl	8002372 <null_ptr_check>
 80022ac:	4603      	mov	r3, r0
 80022ae:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80022b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d11b      	bne.n	80022f0 <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7858      	ldrb	r0, [r3, #1]
 80022c0:	f107 020e 	add.w	r2, r7, #14
 80022c4:	2301      	movs	r3, #1
 80022c6:	21f3      	movs	r1, #243	; 0xf3
 80022c8:	47a0      	blx	r4
 80022ca:	4603      	mov	r3, r0
 80022cc:	461a      	mov	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 80022de:	23fe      	movs	r3, #254	; 0xfe
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	e005      	b.n	80022f0 <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 80022e4:	7bbb      	ldrb	r3, [r7, #14]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 80022f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}

080022fc <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	72fb      	strb	r3, [r7, #11]
 800230a:	4613      	mov	r3, r2
 800230c:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d022      	beq.n	800235e <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	7afa      	ldrb	r2, [r7, #11]
 800231e:	429a      	cmp	r2, r3
 8002320:	d90b      	bls.n	800233a <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	7afa      	ldrb	r2, [r7, #11]
 8002326:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	b2da      	uxtb	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	7aba      	ldrb	r2, [r7, #10]
 8002340:	429a      	cmp	r2, r3
 8002342:	d20e      	bcs.n	8002362 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	7aba      	ldrb	r2, [r7, #10]
 8002348:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	b2da      	uxtb	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800235c:	e001      	b.n	8002362 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 800235e:	23ff      	movs	r3, #255	; 0xff
 8002360:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8002362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002366:	4618      	mov	r0, r3
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <null_ptr_check+0x26>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <null_ptr_check+0x26>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <null_ptr_check+0x26>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 8002398:	23ff      	movs	r3, #255	; 0xff
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e001      	b.n	80023a2 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b09c      	sub	sp, #112	; 0x70
 80023b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ba:	f000 fe8c 	bl	80030d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023be:	f000 f9b5 	bl	800272c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023c2:	f000 faf7 	bl	80029b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80023c6:	f000 fa37 	bl	8002838 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80023ca:	f000 fac3 	bl	8002954 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80023ce:	f000 fa73 	bl	80028b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  gas_sensor.dev_id = BME680_I2C_ADDR_SECONDARY;
 80023d2:	4bb2      	ldr	r3, [pc, #712]	; (800269c <main+0x2e8>)
 80023d4:	2277      	movs	r2, #119	; 0x77
 80023d6:	705a      	strb	r2, [r3, #1]
  gas_sensor.intf = BME680_I2C_INTF;
 80023d8:	4bb0      	ldr	r3, [pc, #704]	; (800269c <main+0x2e8>)
 80023da:	2201      	movs	r2, #1
 80023dc:	709a      	strb	r2, [r3, #2]
  gas_sensor.read = user_i2c_read;
 80023de:	4baf      	ldr	r3, [pc, #700]	; (800269c <main+0x2e8>)
 80023e0:	4aaf      	ldr	r2, [pc, #700]	; (80026a0 <main+0x2ec>)
 80023e2:	649a      	str	r2, [r3, #72]	; 0x48
  gas_sensor.write = user_i2c_write;
 80023e4:	4bad      	ldr	r3, [pc, #692]	; (800269c <main+0x2e8>)
 80023e6:	4aaf      	ldr	r2, [pc, #700]	; (80026a4 <main+0x2f0>)
 80023e8:	64da      	str	r2, [r3, #76]	; 0x4c
  gas_sensor.delay_ms = user_delay_ms;
 80023ea:	4bac      	ldr	r3, [pc, #688]	; (800269c <main+0x2e8>)
 80023ec:	4aae      	ldr	r2, [pc, #696]	; (80026a8 <main+0x2f4>)
 80023ee:	651a      	str	r2, [r3, #80]	; 0x50
  gas_sensor.amb_temp = 25;
 80023f0:	4baa      	ldr	r3, [pc, #680]	; (800269c <main+0x2e8>)
 80023f2:	2219      	movs	r2, #25
 80023f4:	711a      	strb	r2, [r3, #4]

  int8_t rslt = BME680_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  rslt = bme680_init(&gas_sensor);
 80023fc:	48a7      	ldr	r0, [pc, #668]	; (800269c <main+0x2e8>)
 80023fe:	f7fe fd9d 	bl	8000f3c <bme680_init>
 8002402:	4603      	mov	r3, r0
 8002404:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  if (rslt != BME680_OK)
 8002408:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800240c:	2b00      	cmp	r3, #0
 800240e:	d011      	beq.n	8002434 <main+0x80>
  {
	uint8_t bme_msg[] = "BME680 Initialization Error\r\n";
 8002410:	4ba6      	ldr	r3, [pc, #664]	; (80026ac <main+0x2f8>)
 8002412:	f107 0420 	add.w	r4, r7, #32
 8002416:	461d      	mov	r5, r3
 8002418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800241a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800241c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002420:	c407      	stmia	r4!, {r0, r1, r2}
 8002422:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, bme_msg, sizeof(bme_msg), 10);
 8002424:	f107 0120 	add.w	r1, r7, #32
 8002428:	230a      	movs	r3, #10
 800242a:	221e      	movs	r2, #30
 800242c:	48a0      	ldr	r0, [pc, #640]	; (80026b0 <main+0x2fc>)
 800242e:	f003 f9b2 	bl	8005796 <HAL_UART_Transmit>
 8002432:	e011      	b.n	8002458 <main+0xa4>
  }
  else
  {
	uint8_t bme_msg[] = "BME680 Initialized and Ready\r\n";
 8002434:	4b9f      	ldr	r3, [pc, #636]	; (80026b4 <main+0x300>)
 8002436:	463c      	mov	r4, r7
 8002438:	461d      	mov	r5, r3
 800243a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800243c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800243e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002442:	c407      	stmia	r4!, {r0, r1, r2}
 8002444:	8023      	strh	r3, [r4, #0]
 8002446:	3402      	adds	r4, #2
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, bme_msg, sizeof(bme_msg), 10);
 800244c:	4639      	mov	r1, r7
 800244e:	230a      	movs	r3, #10
 8002450:	221f      	movs	r2, #31
 8002452:	4897      	ldr	r0, [pc, #604]	; (80026b0 <main+0x2fc>)
 8002454:	f003 f99f 	bl	8005796 <HAL_UART_Transmit>
  }

  gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8002458:	4b90      	ldr	r3, [pc, #576]	; (800269c <main+0x2e8>)
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 8002460:	4b8e      	ldr	r3, [pc, #568]	; (800269c <main+0x2e8>)
 8002462:	2203      	movs	r2, #3
 8002464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 8002468:	4b8c      	ldr	r3, [pc, #560]	; (800269c <main+0x2e8>)
 800246a:	2204      	movs	r2, #4
 800246c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
 8002470:	4b8a      	ldr	r3, [pc, #552]	; (800269c <main+0x2e8>)
 8002472:	2202      	movs	r2, #2
 8002474:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8002478:	4b88      	ldr	r3, [pc, #544]	; (800269c <main+0x2e8>)
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  gas_sensor.gas_sett.heatr_temp = 320;
 8002480:	4b86      	ldr	r3, [pc, #536]	; (800269c <main+0x2e8>)
 8002482:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002486:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  gas_sensor.gas_sett.heatr_dur = 150;
 800248a:	4b84      	ldr	r3, [pc, #528]	; (800269c <main+0x2e8>)
 800248c:	2296      	movs	r2, #150	; 0x96
 800248e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  gas_sensor.power_mode = BME680_FORCED_MODE;
 8002492:	4b82      	ldr	r3, [pc, #520]	; (800269c <main+0x2e8>)
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  uint8_t set_required_settings = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL
 800249a:	23df      	movs	r3, #223	; 0xdf
 800249c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	        | BME680_GAS_SENSOR_SEL;

  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 80024a0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	497d      	ldr	r1, [pc, #500]	; (800269c <main+0x2e8>)
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fe85 	bl	80011b8 <bme680_set_sensor_settings>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  rslt = bme680_set_sensor_mode(&gas_sensor);
 80024b4:	4879      	ldr	r0, [pc, #484]	; (800269c <main+0x2e8>)
 80024b6:	f7ff f853 	bl	8001560 <bme680_set_sensor_mode>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 80024c0:	f107 0356 	add.w	r3, r7, #86	; 0x56
 80024c4:	4975      	ldr	r1, [pc, #468]	; (800269c <main+0x2e8>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f8ae 	bl	8001628 <bme680_get_profile_dur>

  struct bme680_field_data data;

  NoteSetFn(malloc, free, delay, millis);
 80024cc:	4b7a      	ldr	r3, [pc, #488]	; (80026b8 <main+0x304>)
 80024ce:	4a7b      	ldr	r2, [pc, #492]	; (80026bc <main+0x308>)
 80024d0:	497b      	ldr	r1, [pc, #492]	; (80026c0 <main+0x30c>)
 80024d2:	487c      	ldr	r0, [pc, #496]	; (80026c4 <main+0x310>)
 80024d4:	f006 fcee 	bl	8008eb4 <NoteSetFn>
  NoteSetFnSerial(noteSerialReset, noteSerialTransmit, noteSerialAvailable, noteSerialReceive);
 80024d8:	4b7b      	ldr	r3, [pc, #492]	; (80026c8 <main+0x314>)
 80024da:	4a7c      	ldr	r2, [pc, #496]	; (80026cc <main+0x318>)
 80024dc:	497c      	ldr	r1, [pc, #496]	; (80026d0 <main+0x31c>)
 80024de:	487d      	ldr	r0, [pc, #500]	; (80026d4 <main+0x320>)
 80024e0:	f006 fd0a 	bl	8008ef8 <NoteSetFnSerial>

  J *req = NoteNewRequest("service.set");
 80024e4:	487c      	ldr	r0, [pc, #496]	; (80026d8 <main+0x324>)
 80024e6:	f006 fe79 	bl	80091dc <NoteNewRequest>
 80024ea:	6638      	str	r0, [r7, #96]	; 0x60
  JAddStringToObject(req, "product", myProductUID);
 80024ec:	4a7b      	ldr	r2, [pc, #492]	; (80026dc <main+0x328>)
 80024ee:	497c      	ldr	r1, [pc, #496]	; (80026e0 <main+0x32c>)
 80024f0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80024f2:	f006 fa1d 	bl	8008930 <JAddStringToObject>
  JAddStringToObject(req, "mode", "continuous");
 80024f6:	4a7b      	ldr	r2, [pc, #492]	; (80026e4 <main+0x330>)
 80024f8:	497b      	ldr	r1, [pc, #492]	; (80026e8 <main+0x334>)
 80024fa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80024fc:	f006 fa18 	bl	8008930 <JAddStringToObject>

  NoteRequest(req);
 8002500:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002502:	f006 fe83 	bl	800920c <NoteRequest>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// READ FROM BME680
	user_delay_ms(meas_period);
 8002506:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fb6c 	bl	8002be8 <user_delay_ms>
    rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8002510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002514:	4961      	ldr	r1, [pc, #388]	; (800269c <main+0x2e8>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f8ec 	bl	80016f4 <bme680_get_sensor_data>
 800251c:	4603      	mov	r3, r0
 800251e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    sprintf((char *)i2c_reading_buf,
    		"T: %u.%u degC, H %u.%u %%rH\r\n",
			(unsigned int)data.temperature / 100,
 8002522:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8002526:	461a      	mov	r2, r3
    sprintf((char *)i2c_reading_buf,
 8002528:	4b70      	ldr	r3, [pc, #448]	; (80026ec <main+0x338>)
 800252a:	fba3 2302 	umull	r2, r3, r3, r2
 800252e:	095d      	lsrs	r5, r3, #5
			(unsigned int)data.temperature % 100,
 8002530:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
    sprintf((char *)i2c_reading_buf,
 8002534:	4a6d      	ldr	r2, [pc, #436]	; (80026ec <main+0x338>)
 8002536:	fba2 1203 	umull	r1, r2, r2, r3
 800253a:	0952      	lsrs	r2, r2, #5
 800253c:	2164      	movs	r1, #100	; 0x64
 800253e:	fb01 f202 	mul.w	r2, r1, r2
 8002542:	1a9a      	subs	r2, r3, r2
			(unsigned int)data.humidity / 1000,
 8002544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    sprintf((char *)i2c_reading_buf,
 8002546:	496a      	ldr	r1, [pc, #424]	; (80026f0 <main+0x33c>)
 8002548:	fba1 1303 	umull	r1, r3, r1, r3
 800254c:	0998      	lsrs	r0, r3, #6
			(unsigned int)data.humidity % 1000);
 800254e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    sprintf((char *)i2c_reading_buf,
 8002550:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <main+0x33c>)
 8002552:	fba3 4301 	umull	r4, r3, r3, r1
 8002556:	099b      	lsrs	r3, r3, #6
 8002558:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800255c:	fb04 f303 	mul.w	r3, r4, r3
 8002560:	1acb      	subs	r3, r1, r3
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	9000      	str	r0, [sp, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	462a      	mov	r2, r5
 800256a:	4962      	ldr	r1, [pc, #392]	; (80026f4 <main+0x340>)
 800256c:	4862      	ldr	r0, [pc, #392]	; (80026f8 <main+0x344>)
 800256e:	f007 f9bd 	bl	80098ec <siprintf>
    HAL_UART_Transmit(&huart2, i2c_reading_buf, strlen((char *)i2c_reading_buf), HAL_MAX_DELAY);
 8002572:	4861      	ldr	r0, [pc, #388]	; (80026f8 <main+0x344>)
 8002574:	f7fd fe36 	bl	80001e4 <strlen>
 8002578:	4603      	mov	r3, r0
 800257a:	b29a      	uxth	r2, r3
 800257c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002580:	495d      	ldr	r1, [pc, #372]	; (80026f8 <main+0x344>)
 8002582:	484b      	ldr	r0, [pc, #300]	; (80026b0 <main+0x2fc>)
 8002584:	f003 f907 	bl	8005796 <HAL_UART_Transmit>

    J *req = NoteNewRequest("note.add");
 8002588:	485c      	ldr	r0, [pc, #368]	; (80026fc <main+0x348>)
 800258a:	f006 fe27 	bl	80091dc <NoteNewRequest>
 800258e:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (req != NULL) {
 8002590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002592:	2b00      	cmp	r3, #0
 8002594:	d072      	beq.n	800267c <main+0x2c8>
		JAddStringToObject(req, "file", "sensors.qo");
 8002596:	4a5a      	ldr	r2, [pc, #360]	; (8002700 <main+0x34c>)
 8002598:	495a      	ldr	r1, [pc, #360]	; (8002704 <main+0x350>)
 800259a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800259c:	f006 f9c8 	bl	8008930 <JAddStringToObject>
		JAddBoolToObject(req, "start", true);
 80025a0:	2201      	movs	r2, #1
 80025a2:	4959      	ldr	r1, [pc, #356]	; (8002708 <main+0x354>)
 80025a4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80025a6:	f006 f987 	bl	80088b8 <JAddBoolToObject>
		J *body = JCreateObject();
 80025aa:	f006 fa5c 	bl	8008a66 <JCreateObject>
 80025ae:	65b8      	str	r0, [r7, #88]	; 0x58
		if (body != NULL) {
 80025b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d05f      	beq.n	8002676 <main+0x2c2>
			JAddNumberToObject(body, "temp", data.temperature / 100.0);
 80025b6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd ffc2 	bl	8000544 <__aeabi_i2d>
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	4b51      	ldr	r3, [pc, #324]	; (800270c <main+0x358>)
 80025c6:	f7fe f951 	bl	800086c <__aeabi_ddiv>
 80025ca:	4603      	mov	r3, r0
 80025cc:	460c      	mov	r4, r1
 80025ce:	ec44 3b17 	vmov	d7, r3, r4
 80025d2:	eeb0 0a47 	vmov.f32	s0, s14
 80025d6:	eef0 0a67 	vmov.f32	s1, s15
 80025da:	494d      	ldr	r1, [pc, #308]	; (8002710 <main+0x35c>)
 80025dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80025de:	f006 f988 	bl	80088f2 <JAddNumberToObject>
			JAddNumberToObject(body, "humidity", data.humidity / 1000.0);
 80025e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd ff9d 	bl	8000524 <__aeabi_ui2d>
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	4b49      	ldr	r3, [pc, #292]	; (8002714 <main+0x360>)
 80025f0:	f7fe f93c 	bl	800086c <__aeabi_ddiv>
 80025f4:	4603      	mov	r3, r0
 80025f6:	460c      	mov	r4, r1
 80025f8:	ec44 3b17 	vmov	d7, r3, r4
 80025fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002600:	eef0 0a67 	vmov.f32	s1, s15
 8002604:	4944      	ldr	r1, [pc, #272]	; (8002718 <main+0x364>)
 8002606:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002608:	f006 f973 	bl	80088f2 <JAddNumberToObject>
			JAddNumberToObject(body, "pressure", data.pressure / 1000.0);
 800260c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff88 	bl	8000524 <__aeabi_ui2d>
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <main+0x360>)
 800261a:	f7fe f927 	bl	800086c <__aeabi_ddiv>
 800261e:	4603      	mov	r3, r0
 8002620:	460c      	mov	r4, r1
 8002622:	ec44 3b17 	vmov	d7, r3, r4
 8002626:	eeb0 0a47 	vmov.f32	s0, s14
 800262a:	eef0 0a67 	vmov.f32	s1, s15
 800262e:	493b      	ldr	r1, [pc, #236]	; (800271c <main+0x368>)
 8002630:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002632:	f006 f95e 	bl	80088f2 <JAddNumberToObject>
			if (data.status & BME680_GASM_VALID_MSK)
 8002636:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d014      	beq.n	800266c <main+0x2b8>
				JAddNumberToObject(body, "gas", data.gas_resistance / 1000.0);
 8002642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff6d 	bl	8000524 <__aeabi_ui2d>
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <main+0x360>)
 8002650:	f7fe f90c 	bl	800086c <__aeabi_ddiv>
 8002654:	4603      	mov	r3, r0
 8002656:	460c      	mov	r4, r1
 8002658:	ec44 3b17 	vmov	d7, r3, r4
 800265c:	eeb0 0a47 	vmov.f32	s0, s14
 8002660:	eef0 0a67 	vmov.f32	s1, s15
 8002664:	492e      	ldr	r1, [pc, #184]	; (8002720 <main+0x36c>)
 8002666:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002668:	f006 f943 	bl	80088f2 <JAddNumberToObject>
			JAddItemToObject(req, "body", body);
 800266c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800266e:	492d      	ldr	r1, [pc, #180]	; (8002724 <main+0x370>)
 8002670:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002672:	f006 f911 	bl	8008898 <JAddItemToObject>
		}
		NoteRequest(req);
 8002676:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002678:	f006 fdc8 	bl	800920c <NoteRequest>
	}


	delay(DELAY_PERIOD);
 800267c:	482a      	ldr	r0, [pc, #168]	; (8002728 <main+0x374>)
 800267e:	f000 f9e3 	bl	8002a48 <delay>

	if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <main+0x2e8>)
 8002684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002688:	2b01      	cmp	r3, #1
 800268a:	f47f af3c 	bne.w	8002506 <main+0x152>
		rslt = bme680_set_sensor_mode(&gas_sensor);
 800268e:	4803      	ldr	r0, [pc, #12]	; (800269c <main+0x2e8>)
 8002690:	f7fe ff66 	bl	8001560 <bme680_set_sensor_mode>
 8002694:	4603      	mov	r3, r0
 8002696:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  {
 800269a:	e734      	b.n	8002506 <main+0x152>
 800269c:	20000528 	.word	0x20000528
 80026a0:	08002c01 	.word	0x08002c01
 80026a4:	08002c71 	.word	0x08002c71
 80026a8:	08002be9 	.word	0x08002be9
 80026ac:	0800a0f8 	.word	0x0800a0f8
 80026b0:	20000600 	.word	0x20000600
 80026b4:	0800a118 	.word	0x0800a118
 80026b8:	08002a5f 	.word	0x08002a5f
 80026bc:	08002a49 	.word	0x08002a49
 80026c0:	080096f1 	.word	0x080096f1
 80026c4:	080096e1 	.word	0x080096e1
 80026c8:	08002b95 	.word	0x08002b95
 80026cc:	08002b6d 	.word	0x08002b6d
 80026d0:	08002b41 	.word	0x08002b41
 80026d4:	08002b31 	.word	0x08002b31
 80026d8:	0800a048 	.word	0x0800a048
 80026dc:	0800a054 	.word	0x0800a054
 80026e0:	0800a068 	.word	0x0800a068
 80026e4:	0800a070 	.word	0x0800a070
 80026e8:	0800a07c 	.word	0x0800a07c
 80026ec:	51eb851f 	.word	0x51eb851f
 80026f0:	10624dd3 	.word	0x10624dd3
 80026f4:	0800a084 	.word	0x0800a084
 80026f8:	20000478 	.word	0x20000478
 80026fc:	0800a0a4 	.word	0x0800a0a4
 8002700:	0800a0b0 	.word	0x0800a0b0
 8002704:	0800a0bc 	.word	0x0800a0bc
 8002708:	0800a0c4 	.word	0x0800a0c4
 800270c:	40590000 	.word	0x40590000
 8002710:	0800a0cc 	.word	0x0800a0cc
 8002714:	408f4000 	.word	0x408f4000
 8002718:	0800a0d4 	.word	0x0800a0d4
 800271c:	0800a0e0 	.word	0x0800a0e0
 8002720:	0800a0ec 	.word	0x0800a0ec
 8002724:	0800a0f0 	.word	0x0800a0f0
 8002728:	000493e0 	.word	0x000493e0

0800272c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b0ac      	sub	sp, #176	; 0xb0
 8002730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002732:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002736:	2244      	movs	r2, #68	; 0x44
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f007 f816 	bl	800976c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002740:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	2254      	movs	r2, #84	; 0x54
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f007 f808 	bl	800976c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800275c:	f001 fe0e 	bl	800437c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002760:	4b34      	ldr	r3, [pc, #208]	; (8002834 <SystemClock_Config+0x108>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002766:	4a33      	ldr	r2, [pc, #204]	; (8002834 <SystemClock_Config+0x108>)
 8002768:	f023 0318 	bic.w	r3, r3, #24
 800276c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002770:	2314      	movs	r3, #20
 8002772:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002774:	2301      	movs	r3, #1
 8002776:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002778:	2301      	movs	r3, #1
 800277a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002784:	2360      	movs	r3, #96	; 0x60
 8002786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800278a:	2302      	movs	r3, #2
 800278c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002790:	2301      	movs	r3, #1
 8002792:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002796:	2301      	movs	r3, #1
 8002798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800279c:	2310      	movs	r3, #16
 800279e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027a2:	2307      	movs	r3, #7
 80027a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027a8:	2302      	movs	r3, #2
 80027aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027ae:	2302      	movs	r3, #2
 80027b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 fe53 	bl	8004464 <HAL_RCC_OscConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80027c4:	f000 fa90 	bl	8002ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027c8:	230f      	movs	r3, #15
 80027ca:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027cc:	2303      	movs	r3, #3
 80027ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d0:	2300      	movs	r3, #0
 80027d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027d8:	2300      	movs	r3, #0
 80027da:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027e0:	2101      	movs	r1, #1
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fa5e 	bl	8004ca4 <HAL_RCC_ClockConfig>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80027ee:	f000 fa7b 	bl	8002ce8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80027f2:	2343      	movs	r3, #67	; 0x43
 80027f4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027fe:	2300      	movs	r3, #0
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	4618      	mov	r0, r3
 8002806:	f002 fc51 	bl	80050ac <HAL_RCCEx_PeriphCLKConfig>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8002810:	f000 fa6a 	bl	8002ce8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002814:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002818:	f001 fdce 	bl	80043b8 <HAL_PWREx_ControlVoltageScaling>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8002822:	f000 fa61 	bl	8002ce8 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002826:	f002 fe33 	bl	8005490 <HAL_RCCEx_EnableMSIPLLMode>
}
 800282a:	bf00      	nop
 800282c:	37b0      	adds	r7, #176	; 0xb0
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000

08002838 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <MX_I2C1_Init+0x74>)
 800283e:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <MX_I2C1_Init+0x78>)
 8002840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <MX_I2C1_Init+0x74>)
 8002844:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <MX_I2C1_Init+0x7c>)
 8002846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <MX_I2C1_Init+0x74>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <MX_I2C1_Init+0x74>)
 8002850:	2201      	movs	r2, #1
 8002852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <MX_I2C1_Init+0x74>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800285a:	4b14      	ldr	r3, [pc, #80]	; (80028ac <MX_I2C1_Init+0x74>)
 800285c:	2200      	movs	r2, #0
 800285e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <MX_I2C1_Init+0x74>)
 8002862:	2200      	movs	r2, #0
 8002864:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <MX_I2C1_Init+0x74>)
 8002868:	2200      	movs	r2, #0
 800286a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <MX_I2C1_Init+0x74>)
 800286e:	2200      	movs	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002872:	480e      	ldr	r0, [pc, #56]	; (80028ac <MX_I2C1_Init+0x74>)
 8002874:	f001 f890 	bl	8003998 <HAL_I2C_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800287e:	f000 fa33 	bl	8002ce8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002882:	2100      	movs	r1, #0
 8002884:	4809      	ldr	r0, [pc, #36]	; (80028ac <MX_I2C1_Init+0x74>)
 8002886:	f001 fce1 	bl	800424c <HAL_I2CEx_ConfigAnalogFilter>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002890:	f000 fa2a 	bl	8002ce8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002894:	2100      	movs	r1, #0
 8002896:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_I2C1_Init+0x74>)
 8002898:	f001 fd23 	bl	80042e2 <HAL_I2CEx_ConfigDigitalFilter>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80028a2:	f000 fa21 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200004dc 	.word	0x200004dc
 80028b0:	40005400 	.word	0x40005400
 80028b4:	00707cbb 	.word	0x00707cbb

080028b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  if (uart1Initialized)
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <MX_USART1_UART_Init+0x80>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d137      	bne.n	8002934 <MX_USART1_UART_Init+0x7c>
    return;
  uart1Initialized = true;
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <MX_USART1_UART_Init+0x80>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028ca:	4b1c      	ldr	r3, [pc, #112]	; (800293c <MX_USART1_UART_Init+0x84>)
 80028cc:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <MX_USART1_UART_Init+0x88>)
 80028ce:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80028d0:	4b1a      	ldr	r3, [pc, #104]	; (800293c <MX_USART1_UART_Init+0x84>)
 80028d2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028d6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028d8:	4b18      	ldr	r3, [pc, #96]	; (800293c <MX_USART1_UART_Init+0x84>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <MX_USART1_UART_Init+0x84>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028e4:	4b15      	ldr	r3, [pc, #84]	; (800293c <MX_USART1_UART_Init+0x84>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ea:	4b14      	ldr	r3, [pc, #80]	; (800293c <MX_USART1_UART_Init+0x84>)
 80028ec:	220c      	movs	r2, #12
 80028ee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <MX_USART1_UART_Init+0x84>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_USART1_UART_Init+0x84>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MX_USART1_UART_Init+0x84>)
 80028fe:	2200      	movs	r2, #0
 8002900:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_USART1_UART_Init+0x84>)
 8002904:	2200      	movs	r2, #0
 8002906:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002908:	480c      	ldr	r0, [pc, #48]	; (800293c <MX_USART1_UART_Init+0x84>)
 800290a:	f002 fec1 	bl	8005690 <HAL_UART_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8002914:	f000 f9e8 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  // Reset our buffer management
  serialFillIndex = serialDrainIndex = serialOverruns = 0;
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <MX_USART1_UART_Init+0x8c>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	2300      	movs	r3, #0
 8002920:	4a09      	ldr	r2, [pc, #36]	; (8002948 <MX_USART1_UART_Init+0x90>)
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4a09      	ldr	r2, [pc, #36]	; (800294c <MX_USART1_UART_Init+0x94>)
 8002926:	6013      	str	r3, [r2, #0]

  // Unused, but included for documentation
  ((void)(serialOverruns));

  // Start the inbound receive
  HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 8002928:	2201      	movs	r2, #1
 800292a:	4909      	ldr	r1, [pc, #36]	; (8002950 <MX_USART1_UART_Init+0x98>)
 800292c:	4803      	ldr	r0, [pc, #12]	; (800293c <MX_USART1_UART_Init+0x84>)
 800292e:	f002 ffc5 	bl	80058bc <HAL_UART_Receive_IT>
 8002932:	e000      	b.n	8002936 <MX_USART1_UART_Init+0x7e>
    return;
 8002934:	bf00      	nop

  /* USER CODE END USART1_Init 2 */

}
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000424 	.word	0x20000424
 800293c:	20000580 	.word	0x20000580
 8002940:	40013800 	.word	0x40013800
 8002944:	20000220 	.word	0x20000220
 8002948:	2000021c 	.word	0x2000021c
 800294c:	20000218 	.word	0x20000218
 8002950:	20000214 	.word	0x20000214

08002954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <MX_USART2_UART_Init+0x58>)
 800295a:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <MX_USART2_UART_Init+0x5c>)
 800295c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <MX_USART2_UART_Init+0x58>)
 8002960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <MX_USART2_UART_Init+0x58>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <MX_USART2_UART_Init+0x58>)
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <MX_USART2_UART_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <MX_USART2_UART_Init+0x58>)
 800297a:	220c      	movs	r2, #12
 800297c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <MX_USART2_UART_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <MX_USART2_UART_Init+0x58>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <MX_USART2_UART_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <MX_USART2_UART_Init+0x58>)
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002996:	4805      	ldr	r0, [pc, #20]	; (80029ac <MX_USART2_UART_Init+0x58>)
 8002998:	f002 fe7a 	bl	8005690 <HAL_UART_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80029a2:	f000 f9a1 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000600 	.word	0x20000600
 80029b0:	40004400 	.word	0x40004400

080029b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ba:	f107 030c 	add.w	r3, r7, #12
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	60da      	str	r2, [r3, #12]
 80029c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <MX_GPIO_Init+0x8c>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	4a1c      	ldr	r2, [pc, #112]	; (8002a40 <MX_GPIO_Init+0x8c>)
 80029d0:	f043 0304 	orr.w	r3, r3, #4
 80029d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d6:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <MX_GPIO_Init+0x8c>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <MX_GPIO_Init+0x8c>)
 80029e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e6:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <MX_GPIO_Init+0x8c>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <MX_GPIO_Init+0x8c>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <MX_GPIO_Init+0x8c>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	4a10      	ldr	r2, [pc, #64]	; (8002a40 <MX_GPIO_Init+0x8c>)
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <MX_GPIO_Init+0x8c>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2108      	movs	r1, #8
 8002a16:	480b      	ldr	r0, [pc, #44]	; (8002a44 <MX_GPIO_Init+0x90>)
 8002a18:	f000 ffa6 	bl	8003968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a20:	2301      	movs	r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	4619      	mov	r1, r3
 8002a32:	4804      	ldr	r0, [pc, #16]	; (8002a44 <MX_GPIO_Init+0x90>)
 8002a34:	f000 fd64 	bl	8003500 <HAL_GPIO_Init>

}
 8002a38:	bf00      	nop
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	48000400 	.word	0x48000400

08002a48 <delay>:

/* USER CODE BEGIN 4 */

void delay(uint32_t ms) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fbb1 	bl	80031b8 <HAL_Delay>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <millis>:

long unsigned int millis() {
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	af00      	add	r7, sp, #0
  return (long unsigned int) HAL_GetTick();
 8002a62:	f000 fb9d 	bl	80031a0 <HAL_GetTick>
 8002a66:	4603      	mov	r3, r0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <MY_UART_IRQHandler>:

void MY_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  // See if the transfer is completed
  if (huart->RxXferCount == 0) {
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d12c      	bne.n	8002ada <MY_UART_IRQHandler+0x6e>
      if (serialFillIndex < sizeof(serialBuffer)) {
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <MY_UART_IRQHandler+0x80>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a88:	d216      	bcs.n	8002ab8 <MY_UART_IRQHandler+0x4c>
          if (serialFillIndex+1 == serialDrainIndex)
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <MY_UART_IRQHandler+0x80>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <MY_UART_IRQHandler+0x84>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d105      	bne.n	8002aa4 <MY_UART_IRQHandler+0x38>
              serialOverruns++;
 8002a98:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <MY_UART_IRQHandler+0x88>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <MY_UART_IRQHandler+0x88>)
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e01a      	b.n	8002ada <MY_UART_IRQHandler+0x6e>
          else
              serialBuffer[serialFillIndex++] = serialInterruptBuffer[0];
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <MY_UART_IRQHandler+0x80>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	4910      	ldr	r1, [pc, #64]	; (8002aec <MY_UART_IRQHandler+0x80>)
 8002aac:	600a      	str	r2, [r1, #0]
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <MY_UART_IRQHandler+0x8c>)
 8002ab0:	7811      	ldrb	r1, [r2, #0]
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <MY_UART_IRQHandler+0x90>)
 8002ab4:	54d1      	strb	r1, [r2, r3]
 8002ab6:	e010      	b.n	8002ada <MY_UART_IRQHandler+0x6e>
      } else {
          if (serialDrainIndex == 1)
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <MY_UART_IRQHandler+0x84>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <MY_UART_IRQHandler+0x60>
              serialOverruns++;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <MY_UART_IRQHandler+0x88>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <MY_UART_IRQHandler+0x88>)
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e006      	b.n	8002ada <MY_UART_IRQHandler+0x6e>
          else {
              serialBuffer[0] = serialInterruptBuffer[0];
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <MY_UART_IRQHandler+0x8c>)
 8002ace:	781a      	ldrb	r2, [r3, #0]
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <MY_UART_IRQHandler+0x90>)
 8002ad2:	701a      	strb	r2, [r3, #0]
              serialFillIndex = 1;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <MY_UART_IRQHandler+0x80>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
          }
      }
  }

  // Start another receive
  HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 8002ada:	2201      	movs	r2, #1
 8002adc:	4906      	ldr	r1, [pc, #24]	; (8002af8 <MY_UART_IRQHandler+0x8c>)
 8002ade:	4808      	ldr	r0, [pc, #32]	; (8002b00 <MY_UART_IRQHandler+0x94>)
 8002ae0:	f002 feec 	bl	80058bc <HAL_UART_Receive_IT>

}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000218 	.word	0x20000218
 8002af0:	2000021c 	.word	0x2000021c
 8002af4:	20000220 	.word	0x20000220
 8002af8:	20000214 	.word	0x20000214
 8002afc:	20000224 	.word	0x20000224
 8002b00:	20000580 	.word	0x20000580

08002b04 <MX_USART1_UART_DeInit>:

void MX_USART1_UART_DeInit(void) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  if (!uart1Initialized)
 8002b08:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <MX_USART1_UART_DeInit+0x24>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	f083 0301 	eor.w	r3, r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <MX_USART1_UART_DeInit+0x20>
      return;
  uart1Initialized = false;
 8002b16:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <MX_USART1_UART_DeInit+0x24>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]

  HAL_UART_DeInit(&huart1);
 8002b1c:	4803      	ldr	r0, [pc, #12]	; (8002b2c <MX_USART1_UART_DeInit+0x28>)
 8002b1e:	f002 fe05 	bl	800572c <HAL_UART_DeInit>
 8002b22:	e000      	b.n	8002b26 <MX_USART1_UART_DeInit+0x22>
      return;
 8002b24:	bf00      	nop
}
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000424 	.word	0x20000424
 8002b2c:	20000580 	.word	0x20000580

08002b30 <noteSerialReset>:

void noteSerialReset() {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  MX_USART1_UART_DeInit();
 8002b34:	f7ff ffe6 	bl	8002b04 <MX_USART1_UART_DeInit>
  MX_USART1_UART_Init();
 8002b38:	f7ff febe 	bl	80028b8 <MX_USART1_UART_Init>
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <noteSerialTransmit>:

void noteSerialTransmit(uint8_t *text, size_t len, bool flush) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart1, text, len, 5000);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b56:	68f9      	ldr	r1, [r7, #12]
 8002b58:	4803      	ldr	r0, [pc, #12]	; (8002b68 <noteSerialTransmit+0x28>)
 8002b5a:	f002 fe1c 	bl	8005796 <HAL_UART_Transmit>
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000580 	.word	0x20000580

08002b6c <noteSerialAvailable>:

bool noteSerialAvailable() {
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return (serialFillIndex != serialDrainIndex);
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <noteSerialAvailable+0x20>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <noteSerialAvailable+0x24>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	20000218 	.word	0x20000218
 8002b90:	2000021c 	.word	0x2000021c

08002b94 <noteSerialReceive>:

char noteSerialReceive() {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
  char data;
  while (!noteSerialAvailable()) ;
 8002b9a:	bf00      	nop
 8002b9c:	f7ff ffe6 	bl	8002b6c <noteSerialAvailable>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f083 0301 	eor.w	r3, r3, #1
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f7      	bne.n	8002b9c <noteSerialReceive+0x8>
  if (serialDrainIndex < sizeof(serialBuffer))
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <noteSerialReceive+0x4c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb4:	d208      	bcs.n	8002bc8 <noteSerialReceive+0x34>
      data = serialBuffer[serialDrainIndex++];
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <noteSerialReceive+0x4c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	4908      	ldr	r1, [pc, #32]	; (8002be0 <noteSerialReceive+0x4c>)
 8002bbe:	600a      	str	r2, [r1, #0]
 8002bc0:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <noteSerialReceive+0x50>)
 8002bc2:	5cd3      	ldrb	r3, [r2, r3]
 8002bc4:	71fb      	strb	r3, [r7, #7]
 8002bc6:	e005      	b.n	8002bd4 <noteSerialReceive+0x40>
  else {
      data = serialBuffer[0];
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <noteSerialReceive+0x50>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	71fb      	strb	r3, [r7, #7]
      serialDrainIndex = 1;
 8002bce:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <noteSerialReceive+0x4c>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
  }
  return data;
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000021c 	.word	0x2000021c
 8002be4:	20000224 	.word	0x20000224

08002be8 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fae1 	bl	80031b8 <HAL_Delay>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <user_i2c_read>:

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	603a      	str	r2, [r7, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	71bb      	strb	r3, [r7, #6]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK)
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	b299      	uxth	r1, r3
 8002c1e:	1dba      	adds	r2, r7, #6
 8002c20:	230a      	movs	r3, #10
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	2301      	movs	r3, #1
 8002c26:	4811      	ldr	r0, [pc, #68]	; (8002c6c <user_i2c_read+0x6c>)
 8002c28:	f000 ff46 	bl	8003ab8 <HAL_I2C_Master_Transmit>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <user_i2c_read+0x38>
		return -1;
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c36:	e015      	b.n	8002c64 <user_i2c_read+0x64>

	if (HAL_I2C_Master_Receive (&hi2c1, (dev_id << 1) | 0x01, reg_data, len, 10) != HAL_OK)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	b21b      	sxth	r3, r3
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	b299      	uxth	r1, r3
 8002c46:	88ba      	ldrh	r2, [r7, #4]
 8002c48:	230a      	movs	r3, #10
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	4806      	ldr	r0, [pc, #24]	; (8002c6c <user_i2c_read+0x6c>)
 8002c52:	f001 f825 	bl	8003ca0 <HAL_I2C_Master_Receive>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <user_i2c_read+0x62>
		return -1;
 8002c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c60:	e000      	b.n	8002c64 <user_i2c_read+0x64>

	return 0;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200004dc 	.word	0x200004dc

08002c70 <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	603a      	str	r2, [r7, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	71bb      	strb	r3, [r7, #6]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80bb      	strh	r3, [r7, #4]
	int8_t *buf;
	buf = malloc(len + 1);
 8002c86:	88bb      	ldrh	r3, [r7, #4]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f006 fd28 	bl	80096e0 <malloc>
 8002c90:	4603      	mov	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]
	buf[0] = reg_addr;
 8002c94:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, reg_data, len);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	88ba      	ldrh	r2, [r7, #4]
 8002ca2:	6839      	ldr	r1, [r7, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f006 fd3d 	bl	8009724 <memcpy>

	if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t *) buf, len + 1, HAL_MAX_DELAY) != HAL_OK)
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	b299      	uxth	r1, r3
 8002cb2:	88bb      	ldrh	r3, [r7, #4]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4808      	ldr	r0, [pc, #32]	; (8002ce4 <user_i2c_write+0x74>)
 8002cc4:	f000 fef8 	bl	8003ab8 <HAL_I2C_Master_Transmit>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <user_i2c_write+0x64>
		return -1;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cd2:	e003      	b.n	8002cdc <user_i2c_write+0x6c>

	free(buf);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f006 fd0b 	bl	80096f0 <free>

	return 0;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	200004dc 	.word	0x200004dc

08002ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_MspInit+0x44>)
 8002d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d02:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <HAL_MspInit+0x44>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6613      	str	r3, [r2, #96]	; 0x60
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_MspInit+0x44>)
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_MspInit+0x44>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1a:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <HAL_MspInit+0x44>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d20:	6593      	str	r3, [r2, #88]	; 0x58
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_MspInit+0x44>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000

08002d40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a17      	ldr	r2, [pc, #92]	; (8002dbc <HAL_I2C_MspInit+0x7c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d127      	bne.n	8002db2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_I2C_MspInit+0x80>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <HAL_I2C_MspInit+0x80>)
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <HAL_I2C_MspInit+0x80>)
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d7a:	23c0      	movs	r3, #192	; 0xc0
 8002d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d7e:	2312      	movs	r3, #18
 8002d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d82:	2301      	movs	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d86:	2303      	movs	r3, #3
 8002d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8e:	f107 0314 	add.w	r3, r7, #20
 8002d92:	4619      	mov	r1, r3
 8002d94:	480b      	ldr	r0, [pc, #44]	; (8002dc4 <HAL_I2C_MspInit+0x84>)
 8002d96:	f000 fbb3 	bl	8003500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_I2C_MspInit+0x80>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_I2C_MspInit+0x80>)
 8002da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002da4:	6593      	str	r3, [r2, #88]	; 0x58
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_I2C_MspInit+0x80>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002db2:	bf00      	nop
 8002db4:	3728      	adds	r7, #40	; 0x28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40005400 	.word	0x40005400
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	48000400 	.word	0x48000400

08002dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08c      	sub	sp, #48	; 0x30
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 031c 	add.w	r3, r7, #28
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a3c      	ldr	r2, [pc, #240]	; (8002ed8 <HAL_UART_MspInit+0x110>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d132      	bne.n	8002e50 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dea:	4b3c      	ldr	r3, [pc, #240]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dee:	4a3b      	ldr	r2, [pc, #236]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df4:	6613      	str	r3, [r2, #96]	; 0x60
 8002df6:	4b39      	ldr	r3, [pc, #228]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	4b36      	ldr	r3, [pc, #216]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e06:	4a35      	ldr	r2, [pc, #212]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e0e:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e2c:	2307      	movs	r3, #7
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	f107 031c 	add.w	r3, r7, #28
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3a:	f000 fb61 	bl	8003500 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	2025      	movs	r0, #37	; 0x25
 8002e44:	f000 fad7 	bl	80033f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e48:	2025      	movs	r0, #37	; 0x25
 8002e4a:	f000 faf0 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e4e:	e03f      	b.n	8002ed0 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a22      	ldr	r2, [pc, #136]	; (8002ee0 <HAL_UART_MspInit+0x118>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d13a      	bne.n	8002ed0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e64:	6593      	str	r3, [r2, #88]	; 0x58
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	4a19      	ldr	r2, [pc, #100]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <HAL_UART_MspInit+0x114>)
 8002e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9e:	f107 031c 	add.w	r3, r7, #28
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea8:	f000 fb2a 	bl	8003500 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec2:	f107 031c 	add.w	r3, r7, #28
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ecc:	f000 fb18 	bl	8003500 <HAL_GPIO_Init>
}
 8002ed0:	bf00      	nop
 8002ed2:	3730      	adds	r7, #48	; 0x30
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40013800 	.word	0x40013800
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40004400 	.word	0x40004400

08002ee4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <HAL_UART_MspDeInit+0x5c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10f      	bne.n	8002f16 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <HAL_UART_MspDeInit+0x60>)
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <HAL_UART_MspDeInit+0x60>)
 8002efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f00:	6613      	str	r3, [r2, #96]	; 0x60
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002f02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f0a:	f000 fc63 	bl	80037d4 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002f0e:	2025      	movs	r0, #37	; 0x25
 8002f10:	f000 fa9b 	bl	800344a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002f14:	e010      	b.n	8002f38 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <HAL_UART_MspDeInit+0x64>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10b      	bne.n	8002f38 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_UART_MspDeInit+0x60>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <HAL_UART_MspDeInit+0x60>)
 8002f26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f2a:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_15);
 8002f2c:	f248 0104 	movw	r1, #32772	; 0x8004
 8002f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f34:	f000 fc4e 	bl	80037d4 <HAL_GPIO_DeInit>
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40013800 	.word	0x40013800
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40004400 	.word	0x40004400

08002f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f5e:	e7fe      	b.n	8002f5e <HardFault_Handler+0x4>

08002f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f64:	e7fe      	b.n	8002f64 <MemManage_Handler+0x4>

08002f66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f6a:	e7fe      	b.n	8002f6a <BusFault_Handler+0x4>

08002f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <UsageFault_Handler+0x4>

08002f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa0:	f000 f8ec 	bl	800317c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fac:	4803      	ldr	r0, [pc, #12]	; (8002fbc <USART1_IRQHandler+0x14>)
 8002fae:	f002 fd27 	bl	8005a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  MY_UART_IRQHandler(&huart1);
 8002fb2:	4802      	ldr	r0, [pc, #8]	; (8002fbc <USART1_IRQHandler+0x14>)
 8002fb4:	f7ff fd5a 	bl	8002a6c <MY_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000580 	.word	0x20000580

08002fc0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <_sbrk+0x50>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <_sbrk+0x16>
		heap_end = &end;
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <_sbrk+0x50>)
 8002fd2:	4a10      	ldr	r2, [pc, #64]	; (8003014 <_sbrk+0x54>)
 8002fd4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <_sbrk+0x50>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <_sbrk+0x50>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	466a      	mov	r2, sp
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d907      	bls.n	8002ffa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002fea:	f006 fb41 	bl	8009670 <__errno>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	230c      	movs	r3, #12
 8002ff2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ff8:	e006      	b.n	8003008 <_sbrk+0x48>
	}

	heap_end += incr;
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <_sbrk+0x50>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	4a03      	ldr	r2, [pc, #12]	; (8003010 <_sbrk+0x50>)
 8003004:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000428 	.word	0x20000428
 8003014:	20000688 	.word	0x20000688

08003018 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800301c:	4b17      	ldr	r3, [pc, #92]	; (800307c <SystemInit+0x64>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	4a16      	ldr	r2, [pc, #88]	; (800307c <SystemInit+0x64>)
 8003024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <SystemInit+0x68>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a13      	ldr	r2, [pc, #76]	; (8003080 <SystemInit+0x68>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <SystemInit+0x68>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <SystemInit+0x68>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <SystemInit+0x68>)
 8003044:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003048:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800304c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <SystemInit+0x68>)
 8003050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003054:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <SystemInit+0x68>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a09      	ldr	r2, [pc, #36]	; (8003080 <SystemInit+0x68>)
 800305c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003060:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <SystemInit+0x68>)
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <SystemInit+0x64>)
 800306a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800306e:	609a      	str	r2, [r3, #8]
#endif
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000ed00 	.word	0xe000ed00
 8003080:	40021000 	.word	0x40021000

08003084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003088:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800308a:	e003      	b.n	8003094 <LoopCopyDataInit>

0800308c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800308e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003090:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003092:	3104      	adds	r1, #4

08003094 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003094:	480b      	ldr	r0, [pc, #44]	; (80030c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003098:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800309a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800309c:	d3f6      	bcc.n	800308c <CopyDataInit>
	ldr	r2, =_sbss
 800309e:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80030a0:	e002      	b.n	80030a8 <LoopFillZerobss>

080030a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80030a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80030a4:	f842 3b04 	str.w	r3, [r2], #4

080030a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <LoopForever+0x16>)
	cmp	r2, r3
 80030aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80030ac:	d3f9      	bcc.n	80030a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030ae:	f7ff ffb3 	bl	8003018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030b2:	f006 fae3 	bl	800967c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030b6:	f7ff f97d 	bl	80023b4 <main>

080030ba <LoopForever>:

LoopForever:
    b LoopForever
 80030ba:	e7fe      	b.n	80030ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030bc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80030c0:	0800a594 	.word	0x0800a594
	ldr	r0, =_sdata
 80030c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80030c8:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 80030cc:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 80030d0:	20000688 	.word	0x20000688

080030d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030d4:	e7fe      	b.n	80030d4 <ADC1_IRQHandler>

080030d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e0:	2003      	movs	r0, #3
 80030e2:	f000 f97d 	bl	80033e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030e6:	2000      	movs	r0, #0
 80030e8:	f000 f80e 	bl	8003108 <HAL_InitTick>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	71fb      	strb	r3, [r7, #7]
 80030f6:	e001      	b.n	80030fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030f8:	f7ff fdfe 	bl	8002cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030fc:	79fb      	ldrb	r3, [r7, #7]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_InitTick+0x68>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d022      	beq.n	8003162 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_InitTick+0x6c>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_InitTick+0x68>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003128:	fbb1 f3f3 	udiv	r3, r1, r3
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f998 	bl	8003466 <HAL_SYSTICK_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10f      	bne.n	800315c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b0f      	cmp	r3, #15
 8003140:	d809      	bhi.n	8003156 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003142:	2200      	movs	r2, #0
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800314a:	f000 f954 	bl	80033f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <HAL_InitTick+0x70>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	e007      	b.n	8003166 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
 800315a:	e004      	b.n	8003166 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
 8003160:	e001      	b.n	8003166 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000008 	.word	0x20000008
 8003174:	20000000 	.word	0x20000000
 8003178:	20000004 	.word	0x20000004

0800317c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_IncTick+0x1c>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_IncTick+0x20>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4413      	add	r3, r2
 800318a:	4a03      	ldr	r2, [pc, #12]	; (8003198 <HAL_IncTick+0x1c>)
 800318c:	6013      	str	r3, [r2, #0]
}
 800318e:	bf00      	nop
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	20000680 	.word	0x20000680
 800319c:	20000008 	.word	0x20000008

080031a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return uwTick;
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <HAL_GetTick+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000680 	.word	0x20000680

080031b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c0:	f7ff ffee 	bl	80031a0 <HAL_GetTick>
 80031c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031d0:	d004      	beq.n	80031dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <HAL_Delay+0x40>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031dc:	bf00      	nop
 80031de:	f7ff ffdf 	bl	80031a0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d8f7      	bhi.n	80031de <HAL_Delay+0x26>
  {
  }
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000008 	.word	0x20000008

080031fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003218:	4013      	ands	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322e:	4a04      	ldr	r2, [pc, #16]	; (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	60d3      	str	r3, [r2, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <__NVIC_GetPriorityGrouping+0x18>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	f003 0307 	and.w	r3, r3, #7
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	2b00      	cmp	r3, #0
 8003270:	db0b      	blt.n	800328a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4907      	ldr	r1, [pc, #28]	; (8003298 <__NVIC_EnableIRQ+0x38>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2001      	movs	r0, #1
 8003282:	fa00 f202 	lsl.w	r2, r0, r2
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000e100 	.word	0xe000e100

0800329c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	db10      	blt.n	80032d0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	4909      	ldr	r1, [pc, #36]	; (80032dc <__NVIC_DisableIRQ+0x40>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2001      	movs	r0, #1
 80032be:	fa00 f202 	lsl.w	r2, r0, r2
 80032c2:	3320      	adds	r3, #32
 80032c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80032c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000e100 	.word	0xe000e100

080032e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	6039      	str	r1, [r7, #0]
 80032ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	db0a      	blt.n	800330a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	490c      	ldr	r1, [pc, #48]	; (800332c <__NVIC_SetPriority+0x4c>)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	0112      	lsls	r2, r2, #4
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	440b      	add	r3, r1
 8003304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003308:	e00a      	b.n	8003320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4908      	ldr	r1, [pc, #32]	; (8003330 <__NVIC_SetPriority+0x50>)
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	3b04      	subs	r3, #4
 8003318:	0112      	lsls	r2, r2, #4
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	440b      	add	r3, r1
 800331e:	761a      	strb	r2, [r3, #24]
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000e100 	.word	0xe000e100
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	; 0x24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f1c3 0307 	rsb	r3, r3, #7
 800334e:	2b04      	cmp	r3, #4
 8003350:	bf28      	it	cs
 8003352:	2304      	movcs	r3, #4
 8003354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3304      	adds	r3, #4
 800335a:	2b06      	cmp	r3, #6
 800335c:	d902      	bls.n	8003364 <NVIC_EncodePriority+0x30>
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3b03      	subs	r3, #3
 8003362:	e000      	b.n	8003366 <NVIC_EncodePriority+0x32>
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	401a      	ands	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800337c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	43d9      	mvns	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800338c:	4313      	orrs	r3, r2
         );
}
 800338e:	4618      	mov	r0, r3
 8003390:	3724      	adds	r7, #36	; 0x24
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ac:	d301      	bcc.n	80033b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00f      	b.n	80033d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <SysTick_Config+0x40>)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ba:	210f      	movs	r1, #15
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c0:	f7ff ff8e 	bl	80032e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <SysTick_Config+0x40>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ca:	4b04      	ldr	r3, [pc, #16]	; (80033dc <SysTick_Config+0x40>)
 80033cc:	2207      	movs	r2, #7
 80033ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	e000e010 	.word	0xe000e010

080033e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff ff07 	bl	80031fc <__NVIC_SetPriorityGrouping>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003408:	f7ff ff1c 	bl	8003244 <__NVIC_GetPriorityGrouping>
 800340c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	6978      	ldr	r0, [r7, #20]
 8003414:	f7ff ff8e 	bl	8003334 <NVIC_EncodePriority>
 8003418:	4602      	mov	r2, r0
 800341a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff5d 	bl	80032e0 <__NVIC_SetPriority>
}
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff0f 	bl	8003260 <__NVIC_EnableIRQ>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff1f 	bl	800329c <__NVIC_DisableIRQ>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ff94 	bl	800339c <SysTick_Config>
 8003474:	4603      	mov	r3, r0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d005      	beq.n	80034a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2204      	movs	r2, #4
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	e029      	b.n	80034f6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 020e 	bic.w	r2, r2, #14
 80034b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0201 	bic.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f003 021c 	and.w	r2, r3, #28
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f202 	lsl.w	r2, r1, r2
 80034d4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4798      	blx	r3
    }
  }
  return status;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800350e:	e148      	b.n	80037a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	fa01 f303 	lsl.w	r3, r1, r3
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 813a 	beq.w	800379c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d00b      	beq.n	8003548 <HAL_GPIO_Init+0x48>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d007      	beq.n	8003548 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800353c:	2b11      	cmp	r3, #17
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b12      	cmp	r3, #18
 8003546:	d130      	bne.n	80035aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800357e:	2201      	movs	r2, #1
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 0201 	and.w	r2, r3, #1
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	2203      	movs	r2, #3
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0xea>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b12      	cmp	r3, #18
 80035e8:	d123      	bne.n	8003632 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	08da      	lsrs	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3208      	adds	r2, #8
 80035f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	220f      	movs	r2, #15
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4013      	ands	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	08da      	lsrs	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3208      	adds	r2, #8
 800362c:	6939      	ldr	r1, [r7, #16]
 800362e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 0203 	and.w	r2, r3, #3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8094 	beq.w	800379c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003674:	4b52      	ldr	r3, [pc, #328]	; (80037c0 <HAL_GPIO_Init+0x2c0>)
 8003676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003678:	4a51      	ldr	r2, [pc, #324]	; (80037c0 <HAL_GPIO_Init+0x2c0>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6613      	str	r3, [r2, #96]	; 0x60
 8003680:	4b4f      	ldr	r3, [pc, #316]	; (80037c0 <HAL_GPIO_Init+0x2c0>)
 8003682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800368c:	4a4d      	ldr	r2, [pc, #308]	; (80037c4 <HAL_GPIO_Init+0x2c4>)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	3302      	adds	r3, #2
 8003694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	220f      	movs	r2, #15
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036b6:	d00d      	beq.n	80036d4 <HAL_GPIO_Init+0x1d4>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a43      	ldr	r2, [pc, #268]	; (80037c8 <HAL_GPIO_Init+0x2c8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <HAL_GPIO_Init+0x1d0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a42      	ldr	r2, [pc, #264]	; (80037cc <HAL_GPIO_Init+0x2cc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_GPIO_Init+0x1cc>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e004      	b.n	80036d6 <HAL_GPIO_Init+0x1d6>
 80036cc:	2307      	movs	r3, #7
 80036ce:	e002      	b.n	80036d6 <HAL_GPIO_Init+0x1d6>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <HAL_GPIO_Init+0x1d6>
 80036d4:	2300      	movs	r3, #0
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	f002 0203 	and.w	r2, r2, #3
 80036dc:	0092      	lsls	r2, r2, #2
 80036de:	4093      	lsls	r3, r2
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036e6:	4937      	ldr	r1, [pc, #220]	; (80037c4 <HAL_GPIO_Init+0x2c4>)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	3302      	adds	r3, #2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036f4:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003718:	4a2d      	ldr	r2, [pc, #180]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800371e:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003742:	4a23      	ldr	r2, [pc, #140]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003748:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	43db      	mvns	r3, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800376c:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003772:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	43db      	mvns	r3, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003796:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	3301      	adds	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f47f aeaf 	bne.w	8003510 <HAL_GPIO_Init+0x10>
  }
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40010000 	.word	0x40010000
 80037c8:	48000400 	.word	0x48000400
 80037cc:	48000800 	.word	0x48000800
 80037d0:	40010400 	.word	0x40010400

080037d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80037e2:	e0ab      	b.n	800393c <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80037e4:	2201      	movs	r2, #1
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 809e 	beq.w	8003936 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80037fa:	4a57      	ldr	r2, [pc, #348]	; (8003958 <HAL_GPIO_DeInit+0x184>)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	089b      	lsrs	r3, r3, #2
 8003800:	3302      	adds	r3, #2
 8003802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003806:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	220f      	movs	r2, #15
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003822:	d00d      	beq.n	8003840 <HAL_GPIO_DeInit+0x6c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a4d      	ldr	r2, [pc, #308]	; (800395c <HAL_GPIO_DeInit+0x188>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <HAL_GPIO_DeInit+0x68>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a4c      	ldr	r2, [pc, #304]	; (8003960 <HAL_GPIO_DeInit+0x18c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_GPIO_DeInit+0x64>
 8003834:	2302      	movs	r3, #2
 8003836:	e004      	b.n	8003842 <HAL_GPIO_DeInit+0x6e>
 8003838:	2307      	movs	r3, #7
 800383a:	e002      	b.n	8003842 <HAL_GPIO_DeInit+0x6e>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_GPIO_DeInit+0x6e>
 8003840:	2300      	movs	r3, #0
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	f002 0203 	and.w	r2, r2, #3
 8003848:	0092      	lsls	r2, r2, #2
 800384a:	4093      	lsls	r3, r2
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	429a      	cmp	r2, r3
 8003850:	d132      	bne.n	80038b8 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003852:	4b44      	ldr	r3, [pc, #272]	; (8003964 <HAL_GPIO_DeInit+0x190>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	4942      	ldr	r1, [pc, #264]	; (8003964 <HAL_GPIO_DeInit+0x190>)
 800385c:	4013      	ands	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003860:	4b40      	ldr	r3, [pc, #256]	; (8003964 <HAL_GPIO_DeInit+0x190>)
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	493e      	ldr	r1, [pc, #248]	; (8003964 <HAL_GPIO_DeInit+0x190>)
 800386a:	4013      	ands	r3, r2
 800386c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <HAL_GPIO_DeInit+0x190>)
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	493b      	ldr	r1, [pc, #236]	; (8003964 <HAL_GPIO_DeInit+0x190>)
 8003878:	4013      	ands	r3, r2
 800387a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800387c:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_GPIO_DeInit+0x190>)
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	43db      	mvns	r3, r3
 8003884:	4937      	ldr	r1, [pc, #220]	; (8003964 <HAL_GPIO_DeInit+0x190>)
 8003886:	4013      	ands	r3, r2
 8003888:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	220f      	movs	r2, #15
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800389a:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <HAL_GPIO_DeInit+0x184>)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	3302      	adds	r3, #2
 80038a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43da      	mvns	r2, r3
 80038aa:	482b      	ldr	r0, [pc, #172]	; (8003958 <HAL_GPIO_DeInit+0x184>)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	400a      	ands	r2, r1
 80038b2:	3302      	adds	r3, #2
 80038b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	2103      	movs	r1, #3
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	08da      	lsrs	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3208      	adds	r2, #8
 80038d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	220f      	movs	r2, #15
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	08d2      	lsrs	r2, r2, #3
 80038ec:	4019      	ands	r1, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3208      	adds	r2, #8
 80038f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2103      	movs	r1, #3
 8003900:	fa01 f303 	lsl.w	r3, r1, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	401a      	ands	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	2101      	movs	r1, #1
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	fa01 f303 	lsl.w	r3, r1, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	401a      	ands	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	2103      	movs	r1, #3
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	401a      	ands	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	f47f af4d 	bne.w	80037e4 <HAL_GPIO_DeInit+0x10>
  }
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000
 800395c:	48000400 	.word	0x48000400
 8003960:	48000800 	.word	0x48000800
 8003964:	40010400 	.word	0x40010400

08003968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	807b      	strh	r3, [r7, #2]
 8003974:	4613      	mov	r3, r2
 8003976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003978:	787b      	ldrb	r3, [r7, #1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003984:	e002      	b.n	800398c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e081      	b.n	8003aae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff f9be 	bl	8002d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	e006      	b.n	8003a20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d104      	bne.n	8003a32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	ea42 0103 	orr.w	r1, r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69d9      	ldr	r1, [r3, #28]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	817b      	strh	r3, [r7, #10]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	f040 80da 	bne.w	8003c8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_I2C_Master_Transmit+0x30>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e0d3      	b.n	8003c90 <HAL_I2C_Master_Transmit+0x1d8>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003af0:	f7ff fb56 	bl	80031a0 <HAL_GetTick>
 8003af4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	2319      	movs	r3, #25
 8003afc:	2201      	movs	r2, #1
 8003afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f9e6 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0be      	b.n	8003c90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2221      	movs	r2, #33	; 0x21
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	893a      	ldrh	r2, [r7, #8]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2bff      	cmp	r3, #255	; 0xff
 8003b42:	d90e      	bls.n	8003b62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	22ff      	movs	r2, #255	; 0xff
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	8979      	ldrh	r1, [r7, #10]
 8003b52:	4b51      	ldr	r3, [pc, #324]	; (8003c98 <HAL_I2C_Master_Transmit+0x1e0>)
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fb48 	bl	80041f0 <I2C_TransferConfig>
 8003b60:	e06c      	b.n	8003c3c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	8979      	ldrh	r1, [r7, #10]
 8003b74:	4b48      	ldr	r3, [pc, #288]	; (8003c98 <HAL_I2C_Master_Transmit+0x1e0>)
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fb37 	bl	80041f0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003b82:	e05b      	b.n	8003c3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	6a39      	ldr	r1, [r7, #32]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f9e3 	bl	8003f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e07b      	b.n	8003c90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d034      	beq.n	8003c3c <HAL_I2C_Master_Transmit+0x184>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d130      	bne.n	8003c3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2180      	movs	r1, #128	; 0x80
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f975 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e04d      	b.n	8003c90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2bff      	cmp	r3, #255	; 0xff
 8003bfc:	d90e      	bls.n	8003c1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	22ff      	movs	r2, #255	; 0xff
 8003c02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	8979      	ldrh	r1, [r7, #10]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 faeb 	bl	80041f0 <I2C_TransferConfig>
 8003c1a:	e00f      	b.n	8003c3c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	8979      	ldrh	r1, [r7, #10]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fada 	bl	80041f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d19e      	bne.n	8003b84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	6a39      	ldr	r1, [r7, #32]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f9c2 	bl	8003fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e01a      	b.n	8003c90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_I2C_Master_Transmit+0x1e4>)
 8003c6e:	400b      	ands	r3, r1
 8003c70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e000      	b.n	8003c90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
  }
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	80002000 	.word	0x80002000
 8003c9c:	fe00e800 	.word	0xfe00e800

08003ca0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	461a      	mov	r2, r3
 8003cac:	460b      	mov	r3, r1
 8003cae:	817b      	strh	r3, [r7, #10]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	f040 80db 	bne.w	8003e78 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_I2C_Master_Receive+0x30>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e0d4      	b.n	8003e7a <HAL_I2C_Master_Receive+0x1da>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cd8:	f7ff fa62 	bl	80031a0 <HAL_GetTick>
 8003cdc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2319      	movs	r3, #25
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f8f2 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0bf      	b.n	8003e7a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2222      	movs	r2, #34	; 0x22
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2210      	movs	r2, #16
 8003d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	893a      	ldrh	r2, [r7, #8]
 8003d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2bff      	cmp	r3, #255	; 0xff
 8003d2a:	d90e      	bls.n	8003d4a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	22ff      	movs	r2, #255	; 0xff
 8003d30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	8979      	ldrh	r1, [r7, #10]
 8003d3a:	4b52      	ldr	r3, [pc, #328]	; (8003e84 <HAL_I2C_Master_Receive+0x1e4>)
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa54 	bl	80041f0 <I2C_TransferConfig>
 8003d48:	e06d      	b.n	8003e26 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	8979      	ldrh	r1, [r7, #10]
 8003d5c:	4b49      	ldr	r3, [pc, #292]	; (8003e84 <HAL_I2C_Master_Receive+0x1e4>)
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fa43 	bl	80041f0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003d6a:	e05c      	b.n	8003e26 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	6a39      	ldr	r1, [r7, #32]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f96b 	bl	800404c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e07c      	b.n	8003e7a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d034      	beq.n	8003e26 <HAL_I2C_Master_Receive+0x186>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d130      	bne.n	8003e26 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f880 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e04d      	b.n	8003e7a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2bff      	cmp	r3, #255	; 0xff
 8003de6:	d90e      	bls.n	8003e06 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	22ff      	movs	r2, #255	; 0xff
 8003dec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	8979      	ldrh	r1, [r7, #10]
 8003df6:	2300      	movs	r3, #0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f9f6 	bl	80041f0 <I2C_TransferConfig>
 8003e04:	e00f      	b.n	8003e26 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	8979      	ldrh	r1, [r7, #10]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f9e5 	bl	80041f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d19d      	bne.n	8003d6c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	6a39      	ldr	r1, [r7, #32]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f8cd 	bl	8003fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e01a      	b.n	8003e7a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <HAL_I2C_Master_Receive+0x1e8>)
 8003e58:	400b      	ands	r3, r1
 8003e5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	80002400 	.word	0x80002400
 8003e88:	fe00e800 	.word	0xfe00e800

08003e8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d103      	bne.n	8003eaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d007      	beq.n	8003ec8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	619a      	str	r2, [r3, #24]
  }
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee4:	e022      	b.n	8003f2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eec:	d01e      	beq.n	8003f2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7ff f957 	bl	80031a0 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d113      	bne.n	8003f2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e00f      	b.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d0cd      	beq.n	8003ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f60:	e02c      	b.n	8003fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f8dc 	bl	8004124 <I2C_IsAcknowledgeFailed>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e02a      	b.n	8003fcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f7c:	d01e      	beq.n	8003fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7ff f90f 	bl	80031a0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d113      	bne.n	8003fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e007      	b.n	8003fcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d1cb      	bne.n	8003f62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe0:	e028      	b.n	8004034 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f89c 	bl	8004124 <I2C_IsAcknowledgeFailed>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e026      	b.n	8004044 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff6:	f7ff f8d3 	bl	80031a0 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	d302      	bcc.n	800400c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d113      	bne.n	8004034 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e007      	b.n	8004044 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b20      	cmp	r3, #32
 8004040:	d1cf      	bne.n	8003fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004058:	e055      	b.n	8004106 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f860 	bl	8004124 <I2C_IsAcknowledgeFailed>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e053      	b.n	8004116 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b20      	cmp	r3, #32
 800407a:	d129      	bne.n	80040d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b04      	cmp	r3, #4
 8004088:	d105      	bne.n	8004096 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e03f      	b.n	8004116 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2220      	movs	r2, #32
 800409c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80040aa:	400b      	ands	r3, r1
 80040ac:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e022      	b.n	8004116 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d0:	f7ff f866 	bl	80031a0 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d302      	bcc.n	80040e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10f      	bne.n	8004106 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e007      	b.n	8004116 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b04      	cmp	r3, #4
 8004112:	d1a2      	bne.n	800405a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	fe00e800 	.word	0xfe00e800

08004124 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b10      	cmp	r3, #16
 800413c:	d151      	bne.n	80041e2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800413e:	e022      	b.n	8004186 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004146:	d01e      	beq.n	8004186 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004148:	f7ff f82a 	bl	80031a0 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <I2C_IsAcknowledgeFailed+0x3a>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d113      	bne.n	8004186 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f043 0220 	orr.w	r2, r3, #32
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e02e      	b.n	80041e4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b20      	cmp	r3, #32
 8004192:	d1d5      	bne.n	8004140 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2210      	movs	r2, #16
 800419a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2220      	movs	r2, #32
 80041a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff fe71 	bl	8003e8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <I2C_IsAcknowledgeFailed+0xc8>)
 80041b6:	400b      	ands	r3, r1
 80041b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	f043 0204 	orr.w	r2, r3, #4
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	fe00e800 	.word	0xfe00e800

080041f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	460b      	mov	r3, r1
 80041fc:	817b      	strh	r3, [r7, #10]
 80041fe:	4613      	mov	r3, r2
 8004200:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	0d5b      	lsrs	r3, r3, #21
 800420c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004210:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <I2C_TransferConfig+0x58>)
 8004212:	430b      	orrs	r3, r1
 8004214:	43db      	mvns	r3, r3
 8004216:	ea02 0103 	and.w	r1, r2, r3
 800421a:	897b      	ldrh	r3, [r7, #10]
 800421c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004220:	7a7b      	ldrb	r3, [r7, #9]
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	431a      	orrs	r2, r3
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	431a      	orrs	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	03ff63ff 	.word	0x03ff63ff

0800424c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b20      	cmp	r3, #32
 8004260:	d138      	bne.n	80042d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800426c:	2302      	movs	r3, #2
 800426e:	e032      	b.n	80042d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	; 0x24
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800429e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6819      	ldr	r1, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d139      	bne.n	800436c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004302:	2302      	movs	r3, #2
 8004304:	e033      	b.n	800436e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2224      	movs	r2, #36	; 0x24
 8004312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0201 	bic.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004334:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e000      	b.n	800436e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a04      	ldr	r2, [pc, #16]	; (8004398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438a:	6013      	str	r3, [r2, #0]
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40007000 	.word	0x40007000

0800439c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40007000 	.word	0x40007000

080043b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c6:	d130      	bne.n	800442a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c8:	4b23      	ldr	r3, [pc, #140]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d4:	d038      	beq.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2232      	movs	r2, #50	; 0x32
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	0c9b      	lsrs	r3, r3, #18
 80043f8:	3301      	adds	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fc:	e002      	b.n	8004404 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3b01      	subs	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004404:	4b14      	ldr	r3, [pc, #80]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004410:	d102      	bne.n	8004418 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f2      	bne.n	80043fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004424:	d110      	bne.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e00f      	b.n	800444a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004436:	d007      	beq.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004440:	4a05      	ldr	r2, [pc, #20]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004446:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40007000 	.word	0x40007000
 800445c:	20000000 	.word	0x20000000
 8004460:	431bde83 	.word	0x431bde83

08004464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d102      	bne.n	8004478 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f000 bc11 	b.w	8004c9a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004478:	4ba0      	ldr	r3, [pc, #640]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 030c 	and.w	r3, r3, #12
 8004480:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004482:	4b9e      	ldr	r3, [pc, #632]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80e4 	beq.w	8004662 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <HAL_RCC_OscConfig+0x4c>
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b0c      	cmp	r3, #12
 80044a4:	f040 808b 	bne.w	80045be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	f040 8087 	bne.w	80045be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044b0:	4b92      	ldr	r3, [pc, #584]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_OscConfig+0x64>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e3e8      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1a      	ldr	r2, [r3, #32]
 80044cc:	4b8b      	ldr	r3, [pc, #556]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d004      	beq.n	80044e2 <HAL_RCC_OscConfig+0x7e>
 80044d8:	4b88      	ldr	r3, [pc, #544]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e0:	e005      	b.n	80044ee <HAL_RCC_OscConfig+0x8a>
 80044e2:	4b86      	ldr	r3, [pc, #536]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80044e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d223      	bcs.n	800453a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fd78 	bl	8004fec <RCC_SetFlashLatencyFromMSIRange>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e3c9      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004506:	4b7d      	ldr	r3, [pc, #500]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7c      	ldr	r2, [pc, #496]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800450c:	f043 0308 	orr.w	r3, r3, #8
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b7a      	ldr	r3, [pc, #488]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4977      	ldr	r1, [pc, #476]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004524:	4b75      	ldr	r3, [pc, #468]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	4972      	ldr	r1, [pc, #456]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004534:	4313      	orrs	r3, r2
 8004536:	604b      	str	r3, [r1, #4]
 8004538:	e025      	b.n	8004586 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800453a:	4b70      	ldr	r3, [pc, #448]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a6f      	ldr	r2, [pc, #444]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004540:	f043 0308 	orr.w	r3, r3, #8
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4b6d      	ldr	r3, [pc, #436]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	496a      	ldr	r1, [pc, #424]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004558:	4b68      	ldr	r3, [pc, #416]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	4965      	ldr	r1, [pc, #404]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fd38 	bl	8004fec <RCC_SetFlashLatencyFromMSIRange>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e389      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004586:	f000 fc6f 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 800458a:	4601      	mov	r1, r0
 800458c:	4b5b      	ldr	r3, [pc, #364]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	4a5a      	ldr	r2, [pc, #360]	; (8004700 <HAL_RCC_OscConfig+0x29c>)
 8004598:	5cd3      	ldrb	r3, [r2, r3]
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	fa21 f303 	lsr.w	r3, r1, r3
 80045a2:	4a58      	ldr	r2, [pc, #352]	; (8004704 <HAL_RCC_OscConfig+0x2a0>)
 80045a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045a6:	4b58      	ldr	r3, [pc, #352]	; (8004708 <HAL_RCC_OscConfig+0x2a4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe fdac 	bl	8003108 <HAL_InitTick>
 80045b0:	4603      	mov	r3, r0
 80045b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d052      	beq.n	8004660 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	e36d      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d032      	beq.n	800462c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045c6:	4b4d      	ldr	r3, [pc, #308]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a4c      	ldr	r2, [pc, #304]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045d2:	f7fe fde5 	bl	80031a0 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045da:	f7fe fde1 	bl	80031a0 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e356      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045ec:	4b43      	ldr	r3, [pc, #268]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f8:	4b40      	ldr	r3, [pc, #256]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3f      	ldr	r2, [pc, #252]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80045fe:	f043 0308 	orr.w	r3, r3, #8
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	4b3d      	ldr	r3, [pc, #244]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	493a      	ldr	r1, [pc, #232]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004616:	4b39      	ldr	r3, [pc, #228]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	4935      	ldr	r1, [pc, #212]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004626:	4313      	orrs	r3, r2
 8004628:	604b      	str	r3, [r1, #4]
 800462a:	e01a      	b.n	8004662 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800462c:	4b33      	ldr	r3, [pc, #204]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a32      	ldr	r2, [pc, #200]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004638:	f7fe fdb2 	bl	80031a0 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004640:	f7fe fdae 	bl	80031a0 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e323      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004652:	4b2a      	ldr	r3, [pc, #168]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x1dc>
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004660:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d073      	beq.n	8004756 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b08      	cmp	r3, #8
 8004672:	d005      	beq.n	8004680 <HAL_RCC_OscConfig+0x21c>
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d10e      	bne.n	8004698 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d10b      	bne.n	8004698 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004680:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d063      	beq.n	8004754 <HAL_RCC_OscConfig+0x2f0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d15f      	bne.n	8004754 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e300      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a0:	d106      	bne.n	80046b0 <HAL_RCC_OscConfig+0x24c>
 80046a2:	4b16      	ldr	r3, [pc, #88]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a15      	ldr	r2, [pc, #84]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e01d      	b.n	80046ec <HAL_RCC_OscConfig+0x288>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCC_OscConfig+0x270>
 80046ba:	4b10      	ldr	r3, [pc, #64]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a0f      	ldr	r2, [pc, #60]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a0c      	ldr	r2, [pc, #48]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e00b      	b.n	80046ec <HAL_RCC_OscConfig+0x288>
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a08      	ldr	r2, [pc, #32]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a05      	ldr	r2, [pc, #20]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01b      	beq.n	800472c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fe fd54 	bl	80031a0 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046fa:	e010      	b.n	800471e <HAL_RCC_OscConfig+0x2ba>
 80046fc:	40021000 	.word	0x40021000
 8004700:	0800a3f8 	.word	0x0800a3f8
 8004704:	20000000 	.word	0x20000000
 8004708:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800470c:	f7fe fd48 	bl	80031a0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e2bd      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800471e:	4baf      	ldr	r3, [pc, #700]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x2a8>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fe fd38 	bl	80031a0 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004734:	f7fe fd34 	bl	80031a0 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e2a9      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004746:	4ba5      	ldr	r3, [pc, #660]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x2d0>
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d060      	beq.n	8004824 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d005      	beq.n	8004774 <HAL_RCC_OscConfig+0x310>
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d119      	bne.n	80047a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d116      	bne.n	80047a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004774:	4b99      	ldr	r3, [pc, #612]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_OscConfig+0x328>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e286      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b93      	ldr	r3, [pc, #588]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	4990      	ldr	r1, [pc, #576]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a0:	e040      	b.n	8004824 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d023      	beq.n	80047f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047aa:	4b8c      	ldr	r3, [pc, #560]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a8b      	ldr	r2, [pc, #556]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fe fcf3 	bl	80031a0 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047be:	f7fe fcef 	bl	80031a0 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e264      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d0:	4b82      	ldr	r3, [pc, #520]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b7f      	ldr	r3, [pc, #508]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	497c      	ldr	r1, [pc, #496]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
 80047f0:	e018      	b.n	8004824 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f2:	4b7a      	ldr	r3, [pc, #488]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a79      	ldr	r2, [pc, #484]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fe fccf 	bl	80031a0 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004806:	f7fe fccb 	bl	80031a0 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e240      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004818:	4b70      	ldr	r3, [pc, #448]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f0      	bne.n	8004806 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d03c      	beq.n	80048aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01c      	beq.n	8004872 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004838:	4b68      	ldr	r3, [pc, #416]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800483a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483e:	4a67      	ldr	r2, [pc, #412]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004848:	f7fe fcaa 	bl	80031a0 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004850:	f7fe fca6 	bl	80031a0 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e21b      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004862:	4b5e      	ldr	r3, [pc, #376]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ef      	beq.n	8004850 <HAL_RCC_OscConfig+0x3ec>
 8004870:	e01b      	b.n	80048aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004872:	4b5a      	ldr	r3, [pc, #360]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004878:	4a58      	ldr	r2, [pc, #352]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004882:	f7fe fc8d 	bl	80031a0 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488a:	f7fe fc89 	bl	80031a0 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e1fe      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800489c:	4b4f      	ldr	r3, [pc, #316]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800489e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1ef      	bne.n	800488a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 80a6 	beq.w	8004a04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b8:	2300      	movs	r3, #0
 80048ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048bc:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10d      	bne.n	80048e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c8:	4b44      	ldr	r3, [pc, #272]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	4a43      	ldr	r2, [pc, #268]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d2:	6593      	str	r3, [r2, #88]	; 0x58
 80048d4:	4b41      	ldr	r3, [pc, #260]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048e0:	2301      	movs	r3, #1
 80048e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e4:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d118      	bne.n	8004922 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048f0:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a3a      	ldr	r2, [pc, #232]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 80048f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fc:	f7fe fc50 	bl	80031a0 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004904:	f7fe fc4c 	bl	80031a0 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e1c1      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004916:	4b32      	ldr	r3, [pc, #200]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d108      	bne.n	800493c <HAL_RCC_OscConfig+0x4d8>
 800492a:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004930:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800493a:	e024      	b.n	8004986 <HAL_RCC_OscConfig+0x522>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b05      	cmp	r3, #5
 8004942:	d110      	bne.n	8004966 <HAL_RCC_OscConfig+0x502>
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494a:	4a24      	ldr	r2, [pc, #144]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800494c:	f043 0304 	orr.w	r3, r3, #4
 8004950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004954:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495a:	4a20      	ldr	r2, [pc, #128]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004964:	e00f      	b.n	8004986 <HAL_RCC_OscConfig+0x522>
 8004966:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004976:	4b19      	ldr	r3, [pc, #100]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800497e:	f023 0304 	bic.w	r3, r3, #4
 8004982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498e:	f7fe fc07 	bl	80031a0 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004994:	e00a      	b.n	80049ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fe fc03 	bl	80031a0 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e176      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0ed      	beq.n	8004996 <HAL_RCC_OscConfig+0x532>
 80049ba:	e01a      	b.n	80049f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fe fbf0 	bl	80031a0 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049c2:	e00f      	b.n	80049e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c4:	f7fe fbec 	bl	80031a0 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d906      	bls.n	80049e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e15f      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049e4:	4baa      	ldr	r3, [pc, #680]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e8      	bne.n	80049c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f2:	7ffb      	ldrb	r3, [r7, #31]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d105      	bne.n	8004a04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f8:	4ba5      	ldr	r3, [pc, #660]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 80049fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fc:	4aa4      	ldr	r2, [pc, #656]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 80049fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d03c      	beq.n	8004a8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01c      	beq.n	8004a52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a18:	4b9d      	ldr	r3, [pc, #628]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a1e:	4a9c      	ldr	r2, [pc, #624]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fe fbba 	bl	80031a0 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a30:	f7fe fbb6 	bl	80031a0 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e12b      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a42:	4b93      	ldr	r3, [pc, #588]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0ef      	beq.n	8004a30 <HAL_RCC_OscConfig+0x5cc>
 8004a50:	e01b      	b.n	8004a8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a52:	4b8f      	ldr	r3, [pc, #572]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a58:	4a8d      	ldr	r2, [pc, #564]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a62:	f7fe fb9d 	bl	80031a0 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a6a:	f7fe fb99 	bl	80031a0 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e10e      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a7c:	4b84      	ldr	r3, [pc, #528]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1ef      	bne.n	8004a6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8102 	beq.w	8004c98 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	f040 80c5 	bne.w	8004c28 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a9e:	4b7c      	ldr	r3, [pc, #496]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f003 0203 	and.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d12c      	bne.n	8004b0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	3b01      	subs	r3, #1
 8004abe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d123      	bne.n	8004b0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d11b      	bne.n	8004b0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d113      	bne.n	8004b0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	3b01      	subs	r3, #1
 8004af2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d109      	bne.n	8004b0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	085b      	lsrs	r3, r3, #1
 8004b04:	3b01      	subs	r3, #1
 8004b06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d067      	beq.n	8004bdc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d062      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b12:	4b5f      	ldr	r3, [pc, #380]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e0bb      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b22:	4b5b      	ldr	r3, [pc, #364]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a5a      	ldr	r2, [pc, #360]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b2e:	f7fe fb37 	bl	80031a0 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fe fb33 	bl	80031a0 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e0a8      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b48:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1f0      	bne.n	8004b36 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b54:	4b4e      	ldr	r3, [pc, #312]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	4b4e      	ldr	r3, [pc, #312]	; (8004c94 <HAL_RCC_OscConfig+0x830>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b64:	3a01      	subs	r2, #1
 8004b66:	0112      	lsls	r2, r2, #4
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b6e:	0212      	lsls	r2, r2, #8
 8004b70:	4311      	orrs	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b76:	0852      	lsrs	r2, r2, #1
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	0552      	lsls	r2, r2, #21
 8004b7c:	4311      	orrs	r1, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b82:	0852      	lsrs	r2, r2, #1
 8004b84:	3a01      	subs	r2, #1
 8004b86:	0652      	lsls	r2, r2, #25
 8004b88:	4311      	orrs	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b8e:	06d2      	lsls	r2, r2, #27
 8004b90:	430a      	orrs	r2, r1
 8004b92:	493f      	ldr	r1, [pc, #252]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b98:	4b3d      	ldr	r3, [pc, #244]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3c      	ldr	r2, [pc, #240]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ba2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba4:	4b3a      	ldr	r3, [pc, #232]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a39      	ldr	r2, [pc, #228]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bb0:	f7fe faf6 	bl	80031a0 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fe faf2 	bl	80031a0 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e067      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bca:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bd6:	e05f      	b.n	8004c98 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e05e      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bdc:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d157      	bne.n	8004c98 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004be8:	4b29      	ldr	r3, [pc, #164]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a28      	ldr	r2, [pc, #160]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bf4:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a25      	ldr	r2, [pc, #148]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c00:	f7fe face 	bl	80031a0 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c08:	f7fe faca 	bl	80031a0 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e03f      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x7a4>
 8004c26:	e037      	b.n	8004c98 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b0c      	cmp	r3, #12
 8004c2c:	d02d      	beq.n	8004c8a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a17      	ldr	r2, [pc, #92]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c38:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c3a:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d105      	bne.n	8004c52 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	4a11      	ldr	r2, [pc, #68]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004c4c:	f023 0303 	bic.w	r3, r3, #3
 8004c50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004c52:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004c58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fe fa9d 	bl	80031a0 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6a:	f7fe fa99 	bl	80031a0 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e00e      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c7c:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <HAL_RCC_OscConfig+0x82c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f0      	bne.n	8004c6a <HAL_RCC_OscConfig+0x806>
 8004c88:	e006      	b.n	8004c98 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e005      	b.n	8004c9a <HAL_RCC_OscConfig+0x836>
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000
 8004c94:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop

08004ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0c8      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb8:	4b66      	ldr	r3, [pc, #408]	; (8004e54 <HAL_RCC_ClockConfig+0x1b0>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d910      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc6:	4b63      	ldr	r3, [pc, #396]	; (8004e54 <HAL_RCC_ClockConfig+0x1b0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 0207 	bic.w	r2, r3, #7
 8004cce:	4961      	ldr	r1, [pc, #388]	; (8004e54 <HAL_RCC_ClockConfig+0x1b0>)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	4b5f      	ldr	r3, [pc, #380]	; (8004e54 <HAL_RCC_ClockConfig+0x1b0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0b0      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d04c      	beq.n	8004d8e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d107      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfc:	4b56      	ldr	r3, [pc, #344]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d121      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e09e      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d14:	4b50      	ldr	r3, [pc, #320]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d115      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e092      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d2c:	4b4a      	ldr	r3, [pc, #296]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e086      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d3c:	4b46      	ldr	r3, [pc, #280]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e07e      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d4c:	4b42      	ldr	r3, [pc, #264]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f023 0203 	bic.w	r2, r3, #3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	493f      	ldr	r1, [pc, #252]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5e:	f7fe fa1f 	bl	80031a0 <HAL_GetTick>
 8004d62:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d66:	f7fe fa1b 	bl	80031a0 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e066      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7c:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 020c 	and.w	r2, r3, #12
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d1eb      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d008      	beq.n	8004dac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d9a:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	492c      	ldr	r1, [pc, #176]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dac:	4b29      	ldr	r3, [pc, #164]	; (8004e54 <HAL_RCC_ClockConfig+0x1b0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d210      	bcs.n	8004ddc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dba:	4b26      	ldr	r3, [pc, #152]	; (8004e54 <HAL_RCC_ClockConfig+0x1b0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f023 0207 	bic.w	r2, r3, #7
 8004dc2:	4924      	ldr	r1, [pc, #144]	; (8004e54 <HAL_RCC_ClockConfig+0x1b0>)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dca:	4b22      	ldr	r3, [pc, #136]	; (8004e54 <HAL_RCC_ClockConfig+0x1b0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e036      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de8:	4b1b      	ldr	r3, [pc, #108]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4918      	ldr	r1, [pc, #96]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e06:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4910      	ldr	r1, [pc, #64]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e1a:	f000 f825 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8004e1e:	4601      	mov	r1, r0
 8004e20:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <HAL_RCC_ClockConfig+0x1b4>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	5cd3      	ldrb	r3, [r2, r3]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	fa21 f303 	lsr.w	r3, r1, r3
 8004e36:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <HAL_RCC_ClockConfig+0x1c0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe f962 	bl	8003108 <HAL_InitTick>
 8004e44:	4603      	mov	r3, r0
 8004e46:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e48:	7afb      	ldrb	r3, [r7, #11]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40022000 	.word	0x40022000
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	0800a3f8 	.word	0x0800a3f8
 8004e60:	20000000 	.word	0x20000000
 8004e64:	20000004 	.word	0x20000004

08004e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b089      	sub	sp, #36	; 0x24
 8004e6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	2300      	movs	r3, #0
 8004e74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e76:	4b3d      	ldr	r3, [pc, #244]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
 8004e7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e80:	4b3a      	ldr	r3, [pc, #232]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0x34>
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d121      	bne.n	8004eda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d11e      	bne.n	8004eda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e9c:	4b33      	ldr	r3, [pc, #204]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ea8:	4b30      	ldr	r3, [pc, #192]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8004eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e005      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004eb8:	4b2c      	ldr	r3, [pc, #176]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ecc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d102      	bne.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ee0:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e004      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004eec:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b0c      	cmp	r3, #12
 8004ef4:	d133      	bne.n	8004f5e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d002      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0xa4>
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d003      	beq.n	8004f12 <HAL_RCC_GetSysClockFreq+0xaa>
 8004f0a:	e005      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f0e:	617b      	str	r3, [r7, #20]
      break;
 8004f10:	e005      	b.n	8004f1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f12:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f14:	617b      	str	r3, [r7, #20]
      break;
 8004f16:	e002      	b.n	8004f1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	617b      	str	r3, [r7, #20]
      break;
 8004f1c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f1e:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	3301      	adds	r3, #1
 8004f2a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	0a1b      	lsrs	r3, r3, #8
 8004f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	fb02 f203 	mul.w	r2, r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f42:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f44:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	0e5b      	lsrs	r3, r3, #25
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	3301      	adds	r3, #1
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3724      	adds	r7, #36	; 0x24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	0800a410 	.word	0x0800a410
 8004f74:	00f42400 	.word	0x00f42400
 8004f78:	007a1200 	.word	0x007a1200

08004f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f80:	4b03      	ldr	r3, [pc, #12]	; (8004f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f82:	681b      	ldr	r3, [r3, #0]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	20000000 	.word	0x20000000

08004f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f98:	f7ff fff0 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 8004f9c:	4601      	mov	r1, r0
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	0a1b      	lsrs	r3, r3, #8
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4a04      	ldr	r2, [pc, #16]	; (8004fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004faa:	5cd3      	ldrb	r3, [r2, r3]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	0800a408 	.word	0x0800a408

08004fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fc4:	f7ff ffda 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 8004fc8:	4601      	mov	r1, r0
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	0adb      	lsrs	r3, r3, #11
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	4a04      	ldr	r2, [pc, #16]	; (8004fe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fd6:	5cd3      	ldrb	r3, [r2, r3]
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	0800a408 	.word	0x0800a408

08004fec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ff8:	4b2a      	ldr	r3, [pc, #168]	; (80050a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005004:	f7ff f9ca 	bl	800439c <HAL_PWREx_GetVoltageRange>
 8005008:	6178      	str	r0, [r7, #20]
 800500a:	e014      	b.n	8005036 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800500c:	4b25      	ldr	r3, [pc, #148]	; (80050a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800500e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005010:	4a24      	ldr	r2, [pc, #144]	; (80050a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005016:	6593      	str	r3, [r2, #88]	; 0x58
 8005018:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005024:	f7ff f9ba 	bl	800439c <HAL_PWREx_GetVoltageRange>
 8005028:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800502a:	4b1e      	ldr	r3, [pc, #120]	; (80050a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005034:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503c:	d10b      	bne.n	8005056 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b80      	cmp	r3, #128	; 0x80
 8005042:	d919      	bls.n	8005078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2ba0      	cmp	r3, #160	; 0xa0
 8005048:	d902      	bls.n	8005050 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800504a:	2302      	movs	r3, #2
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	e013      	b.n	8005078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005050:	2301      	movs	r3, #1
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	e010      	b.n	8005078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b80      	cmp	r3, #128	; 0x80
 800505a:	d902      	bls.n	8005062 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800505c:	2303      	movs	r3, #3
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e00a      	b.n	8005078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b80      	cmp	r3, #128	; 0x80
 8005066:	d102      	bne.n	800506e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005068:	2302      	movs	r3, #2
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	e004      	b.n	8005078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b70      	cmp	r3, #112	; 0x70
 8005072:	d101      	bne.n	8005078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005074:	2301      	movs	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f023 0207 	bic.w	r2, r3, #7
 8005080:	4909      	ldr	r1, [pc, #36]	; (80050a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005088:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	429a      	cmp	r2, r3
 8005094:	d001      	beq.n	800509a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40022000 	.word	0x40022000

080050ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050b4:	2300      	movs	r3, #0
 80050b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050b8:	2300      	movs	r3, #0
 80050ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d02f      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050d0:	d005      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x32>
 80050d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050d6:	d015      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x40>
 80050dc:	e00f      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80050de:	4bac      	ldr	r3, [pc, #688]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	4aab      	ldr	r2, [pc, #684]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050ea:	e00c      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3304      	adds	r3, #4
 80050f0:	2100      	movs	r1, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f9dc 	bl	80054b0 <RCCEx_PLLSAI1_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050fc:	e003      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	74fb      	strb	r3, [r7, #19]
      break;
 8005102:	e000      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8005104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005106:	7cfb      	ldrb	r3, [r7, #19]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800510c:	4ba0      	ldr	r3, [pc, #640]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511a:	499d      	ldr	r1, [pc, #628]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005122:	e001      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 8099 	beq.w	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005136:	2300      	movs	r3, #0
 8005138:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800513a:	4b95      	ldr	r3, [pc, #596]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800514a:	2300      	movs	r3, #0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005150:	4b8f      	ldr	r3, [pc, #572]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005154:	4a8e      	ldr	r2, [pc, #568]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515a:	6593      	str	r3, [r2, #88]	; 0x58
 800515c:	4b8c      	ldr	r3, [pc, #560]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005168:	2301      	movs	r3, #1
 800516a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800516c:	4b89      	ldr	r3, [pc, #548]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a88      	ldr	r2, [pc, #544]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005176:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005178:	f7fe f812 	bl	80031a0 <HAL_GetTick>
 800517c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800517e:	e009      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005180:	f7fe f80e 	bl	80031a0 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d902      	bls.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	74fb      	strb	r3, [r7, #19]
        break;
 8005192:	e005      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005194:	4b7f      	ldr	r3, [pc, #508]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0ef      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d155      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051a6:	4b7a      	ldr	r3, [pc, #488]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01e      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d019      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051c2:	4b73      	ldr	r3, [pc, #460]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051ce:	4b70      	ldr	r3, [pc, #448]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d4:	4a6e      	ldr	r2, [pc, #440]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051de:	4b6c      	ldr	r3, [pc, #432]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e4:	4a6a      	ldr	r2, [pc, #424]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051ee:	4a68      	ldr	r2, [pc, #416]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d016      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fd ffce 	bl	80031a0 <HAL_GetTick>
 8005204:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005206:	e00b      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7fd ffca 	bl	80031a0 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	; 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d902      	bls.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	74fb      	strb	r3, [r7, #19]
            break;
 800521e:	e006      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005220:	4b5b      	ldr	r3, [pc, #364]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0ec      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800522e:	7cfb      	ldrb	r3, [r7, #19]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10b      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005234:	4b56      	ldr	r3, [pc, #344]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005242:	4953      	ldr	r1, [pc, #332]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800524a:	e004      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800524c:	7cfb      	ldrb	r3, [r7, #19]
 800524e:	74bb      	strb	r3, [r7, #18]
 8005250:	e001      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005252:	7cfb      	ldrb	r3, [r7, #19]
 8005254:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005256:	7c7b      	ldrb	r3, [r7, #17]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d105      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800525c:	4b4c      	ldr	r3, [pc, #304]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800525e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005260:	4a4b      	ldr	r2, [pc, #300]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005266:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005274:	4b46      	ldr	r3, [pc, #280]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	f023 0203 	bic.w	r2, r3, #3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	4943      	ldr	r1, [pc, #268]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005296:	4b3e      	ldr	r3, [pc, #248]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f023 020c 	bic.w	r2, r3, #12
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	493a      	ldr	r1, [pc, #232]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052b8:	4b35      	ldr	r3, [pc, #212]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	4932      	ldr	r1, [pc, #200]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052da:	4b2d      	ldr	r3, [pc, #180]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e8:	4929      	ldr	r1, [pc, #164]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052fc:	4b24      	ldr	r3, [pc, #144]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005302:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	4921      	ldr	r1, [pc, #132]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800531e:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	4918      	ldr	r1, [pc, #96]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005340:	4b13      	ldr	r3, [pc, #76]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	4910      	ldr	r1, [pc, #64]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d02c      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005362:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005368:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	4907      	ldr	r1, [pc, #28]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005380:	d10a      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005382:	4b03      	ldr	r3, [pc, #12]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	4a02      	ldr	r2, [pc, #8]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800538c:	60d3      	str	r3, [r2, #12]
 800538e:	e015      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005390:	40021000 	.word	0x40021000
 8005394:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053a0:	d10c      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3304      	adds	r3, #4
 80053a6:	2101      	movs	r1, #1
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f881 	bl	80054b0 <RCCEx_PLLSAI1_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053b2:	7cfb      	ldrb	r3, [r7, #19]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80053b8:	7cfb      	ldrb	r3, [r7, #19]
 80053ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d028      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053c8:	4b30      	ldr	r3, [pc, #192]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d6:	492d      	ldr	r1, [pc, #180]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e6:	d106      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053e8:	4b28      	ldr	r3, [pc, #160]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4a27      	ldr	r2, [pc, #156]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053f2:	60d3      	str	r3, [r2, #12]
 80053f4:	e011      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053fe:	d10c      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3304      	adds	r3, #4
 8005404:	2101      	movs	r1, #1
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f852 	bl	80054b0 <RCCEx_PLLSAI1_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005410:	7cfb      	ldrb	r3, [r7, #19]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8005416:	7cfb      	ldrb	r3, [r7, #19]
 8005418:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01c      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005426:	4b19      	ldr	r3, [pc, #100]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005434:	4915      	ldr	r1, [pc, #84]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005444:	d10c      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	2102      	movs	r1, #2
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f82f 	bl	80054b0 <RCCEx_PLLSAI1_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005456:	7cfb      	ldrb	r3, [r7, #19]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800546c:	4b07      	ldr	r3, [pc, #28]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547a:	4904      	ldr	r1, [pc, #16]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005482:	7cbb      	ldrb	r3, [r7, #18]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000

08005490 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005494:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a04      	ldr	r2, [pc, #16]	; (80054ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800549a:	f043 0304 	orr.w	r3, r3, #4
 800549e:	6013      	str	r3, [r2, #0]
}
 80054a0:	bf00      	nop
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000

080054b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054be:	4b73      	ldr	r3, [pc, #460]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d018      	beq.n	80054fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054ca:	4b70      	ldr	r3, [pc, #448]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0203 	and.w	r2, r3, #3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d10d      	bne.n	80054f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
       ||
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054e2:	4b6a      	ldr	r3, [pc, #424]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	091b      	lsrs	r3, r3, #4
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
       ||
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d044      	beq.n	8005580 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
 80054fa:	e041      	b.n	8005580 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d00c      	beq.n	800551e <RCCEx_PLLSAI1_Config+0x6e>
 8005504:	2b03      	cmp	r3, #3
 8005506:	d013      	beq.n	8005530 <RCCEx_PLLSAI1_Config+0x80>
 8005508:	2b01      	cmp	r3, #1
 800550a:	d120      	bne.n	800554e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800550c:	4b5f      	ldr	r3, [pc, #380]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d11d      	bne.n	8005554 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551c:	e01a      	b.n	8005554 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800551e:	4b5b      	ldr	r3, [pc, #364]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005526:	2b00      	cmp	r3, #0
 8005528:	d116      	bne.n	8005558 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800552e:	e013      	b.n	8005558 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005530:	4b56      	ldr	r3, [pc, #344]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10f      	bne.n	800555c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800553c:	4b53      	ldr	r3, [pc, #332]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800554c:	e006      	b.n	800555c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
      break;
 8005552:	e004      	b.n	800555e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005554:	bf00      	nop
 8005556:	e002      	b.n	800555e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005558:	bf00      	nop
 800555a:	e000      	b.n	800555e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800555c:	bf00      	nop
    }

    if(status == HAL_OK)
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10d      	bne.n	8005580 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005564:	4b49      	ldr	r3, [pc, #292]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6819      	ldr	r1, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	3b01      	subs	r3, #1
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	430b      	orrs	r3, r1
 800557a:	4944      	ldr	r1, [pc, #272]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 800557c:	4313      	orrs	r3, r2
 800557e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d17c      	bne.n	8005680 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005586:	4b41      	ldr	r3, [pc, #260]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a40      	ldr	r2, [pc, #256]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 800558c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005592:	f7fd fe05 	bl	80031a0 <HAL_GetTick>
 8005596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005598:	e009      	b.n	80055ae <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800559a:	f7fd fe01 	bl	80031a0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d902      	bls.n	80055ae <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	73fb      	strb	r3, [r7, #15]
        break;
 80055ac:	e005      	b.n	80055ba <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055ae:	4b37      	ldr	r3, [pc, #220]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1ef      	bne.n	800559a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d15f      	bne.n	8005680 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d110      	bne.n	80055e8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055c6:	4b31      	ldr	r3, [pc, #196]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80055ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6892      	ldr	r2, [r2, #8]
 80055d6:	0211      	lsls	r1, r2, #8
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68d2      	ldr	r2, [r2, #12]
 80055dc:	06d2      	lsls	r2, r2, #27
 80055de:	430a      	orrs	r2, r1
 80055e0:	492a      	ldr	r1, [pc, #168]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	610b      	str	r3, [r1, #16]
 80055e6:	e027      	b.n	8005638 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d112      	bne.n	8005614 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ee:	4b27      	ldr	r3, [pc, #156]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6892      	ldr	r2, [r2, #8]
 80055fe:	0211      	lsls	r1, r2, #8
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6912      	ldr	r2, [r2, #16]
 8005604:	0852      	lsrs	r2, r2, #1
 8005606:	3a01      	subs	r2, #1
 8005608:	0552      	lsls	r2, r2, #21
 800560a:	430a      	orrs	r2, r1
 800560c:	491f      	ldr	r1, [pc, #124]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 800560e:	4313      	orrs	r3, r2
 8005610:	610b      	str	r3, [r1, #16]
 8005612:	e011      	b.n	8005638 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005614:	4b1d      	ldr	r3, [pc, #116]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800561c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6892      	ldr	r2, [r2, #8]
 8005624:	0211      	lsls	r1, r2, #8
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6952      	ldr	r2, [r2, #20]
 800562a:	0852      	lsrs	r2, r2, #1
 800562c:	3a01      	subs	r2, #1
 800562e:	0652      	lsls	r2, r2, #25
 8005630:	430a      	orrs	r2, r1
 8005632:	4916      	ldr	r1, [pc, #88]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005634:	4313      	orrs	r3, r2
 8005636:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005638:	4b14      	ldr	r3, [pc, #80]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a13      	ldr	r2, [pc, #76]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 800563e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005642:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005644:	f7fd fdac 	bl	80031a0 <HAL_GetTick>
 8005648:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800564a:	e009      	b.n	8005660 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800564c:	f7fd fda8 	bl	80031a0 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d902      	bls.n	8005660 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	73fb      	strb	r3, [r7, #15]
          break;
 800565e:	e005      	b.n	800566c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0ef      	beq.n	800564c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005672:	4b06      	ldr	r3, [pc, #24]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	4904      	ldr	r1, [pc, #16]	; (800568c <RCCEx_PLLSAI1_Config+0x1dc>)
 800567c:	4313      	orrs	r3, r2
 800567e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005680:	7bfb      	ldrb	r3, [r7, #15]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40021000 	.word	0x40021000

08005690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e040      	b.n	8005724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fd fb88 	bl	8002dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2224      	movs	r2, #36	; 0x24
 80056bc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fafa 	bl	8005cc8 <UART_SetConfig>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e022      	b.n	8005724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fdd4 	bl	8006294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800570a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fe5b 	bl	80063d8 <UART_CheckIdleState>
 8005722:	4603      	mov	r3, r0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e027      	b.n	800578e <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2224      	movs	r2, #36	; 0x24
 8005742:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2200      	movs	r2, #0
 8005762:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2200      	movs	r2, #0
 800576a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fd fbb9 	bl	8002ee4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b08a      	sub	sp, #40	; 0x28
 800579a:	af02      	add	r7, sp, #8
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	603b      	str	r3, [r7, #0]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	f040 8081 	bne.w	80058b2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_UART_Transmit+0x26>
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e079      	b.n	80058b4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Transmit+0x38>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e072      	b.n	80058b4 <HAL_UART_Transmit+0x11e>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2221      	movs	r2, #33	; 0x21
 80057e0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80057e2:	f7fd fcdd 	bl	80031a0 <HAL_GetTick>
 80057e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	88fa      	ldrh	r2, [r7, #6]
 80057ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	88fa      	ldrh	r2, [r7, #6]
 80057f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005800:	d108      	bne.n	8005814 <HAL_UART_Transmit+0x7e>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d104      	bne.n	8005814 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	e003      	b.n	800581c <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005824:	e02d      	b.n	8005882 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2200      	movs	r2, #0
 800582e:	2180      	movs	r1, #128	; 0x80
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 fe16 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e039      	b.n	80058b4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10b      	bne.n	800585e <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	881a      	ldrh	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005852:	b292      	uxth	r2, r2
 8005854:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	3302      	adds	r3, #2
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	e008      	b.n	8005870 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	781a      	ldrb	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	b292      	uxth	r2, r2
 8005868:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3301      	adds	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1cb      	bne.n	8005826 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2200      	movs	r2, #0
 8005896:	2140      	movs	r1, #64	; 0x40
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fde2 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e005      	b.n	80058b4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e000      	b.n	80058b4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
  }
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	f040 808a 	bne.w	80059e8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <HAL_UART_Receive_IT+0x24>
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e082      	b.n	80059ea <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_UART_Receive_IT+0x36>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e07b      	b.n	80059ea <HAL_UART_Receive_IT+0x12e>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	88fa      	ldrh	r2, [r7, #6]
 800590c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591e:	d10e      	bne.n	800593e <HAL_UART_Receive_IT+0x82>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d105      	bne.n	8005934 <HAL_UART_Receive_IT+0x78>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800592e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005932:	e02d      	b.n	8005990 <HAL_UART_Receive_IT+0xd4>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	22ff      	movs	r2, #255	; 0xff
 8005938:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800593c:	e028      	b.n	8005990 <HAL_UART_Receive_IT+0xd4>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10d      	bne.n	8005962 <HAL_UART_Receive_IT+0xa6>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d104      	bne.n	8005958 <HAL_UART_Receive_IT+0x9c>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	22ff      	movs	r2, #255	; 0xff
 8005952:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005956:	e01b      	b.n	8005990 <HAL_UART_Receive_IT+0xd4>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	227f      	movs	r2, #127	; 0x7f
 800595c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005960:	e016      	b.n	8005990 <HAL_UART_Receive_IT+0xd4>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800596a:	d10d      	bne.n	8005988 <HAL_UART_Receive_IT+0xcc>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <HAL_UART_Receive_IT+0xc2>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	227f      	movs	r2, #127	; 0x7f
 8005978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800597c:	e008      	b.n	8005990 <HAL_UART_Receive_IT+0xd4>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	223f      	movs	r2, #63	; 0x3f
 8005982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005986:	e003      	b.n	8005990 <HAL_UART_Receive_IT+0xd4>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2222      	movs	r2, #34	; 0x22
 800599a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b4:	d107      	bne.n	80059c6 <HAL_UART_Receive_IT+0x10a>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4a0d      	ldr	r2, [pc, #52]	; (80059f8 <HAL_UART_Receive_IT+0x13c>)
 80059c2:	661a      	str	r2, [r3, #96]	; 0x60
 80059c4:	e002      	b.n	80059cc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4a0c      	ldr	r2, [pc, #48]	; (80059fc <HAL_UART_Receive_IT+0x140>)
 80059ca:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80059e2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	e000      	b.n	80059ea <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80059e8:	2302      	movs	r3, #2
  }
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	080066a1 	.word	0x080066a1
 80059fc:	080065f7 	.word	0x080065f7

08005a00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a26:	4013      	ands	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d113      	bne.n	8005a58 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00e      	beq.n	8005a58 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d009      	beq.n	8005a58 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8114 	beq.w	8005c76 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
      }
      return;
 8005a56:	e10e      	b.n	8005c76 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 80d6 	beq.w	8005c0c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d105      	bne.n	8005a76 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80cb 	beq.w	8005c0c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00e      	beq.n	8005a9e <HAL_UART_IRQHandler+0x9e>
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a96:	f043 0201 	orr.w	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_UART_IRQHandler+0xc6>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005abe:	f043 0204 	orr.w	r2, r3, #4
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00e      	beq.n	8005aee <HAL_UART_IRQHandler+0xee>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2204      	movs	r2, #4
 8005ae0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ae6:	f043 0202 	orr.w	r2, r3, #2
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d013      	beq.n	8005b20 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d009      	beq.n	8005b20 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2208      	movs	r2, #8
 8005b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b18:	f043 0208 	orr.w	r2, r3, #8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00f      	beq.n	8005b4a <HAL_UART_IRQHandler+0x14a>
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 8093 	beq.w	8005c7a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00c      	beq.n	8005b78 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d007      	beq.n	8005b78 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b7c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d004      	beq.n	8005b96 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d031      	beq.n	8005bfa <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fcde 	bl	8006558 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	d123      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bb8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d013      	beq.n	8005bea <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc6:	4a30      	ldr	r2, [pc, #192]	; (8005c88 <HAL_UART_IRQHandler+0x288>)
 8005bc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fd fc55 	bl	800347e <HAL_DMA_Abort_IT>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d016      	beq.n	8005c08 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005be4:	4610      	mov	r0, r2
 8005be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be8:	e00e      	b.n	8005c08 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f862 	bl	8005cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf0:	e00a      	b.n	8005c08 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f85e 	bl	8005cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf8:	e006      	b.n	8005c08 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f85a 	bl	8005cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005c06:	e038      	b.n	8005c7a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c08:	bf00      	nop
    return;
 8005c0a:	e036      	b.n	8005c7a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <HAL_UART_IRQHandler+0x232>
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d008      	beq.n	8005c32 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fd8d 	bl	800674a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c30:	e026      	b.n	8005c80 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d008      	beq.n	8005c58 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d017      	beq.n	8005c7e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
    }
    return;
 8005c56:	e012      	b.n	8005c7e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00e      	beq.n	8005c80 <HAL_UART_IRQHandler+0x280>
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d009      	beq.n	8005c80 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fca9 	bl	80065c4 <UART_EndTransmit_IT>
    return;
 8005c72:	bf00      	nop
 8005c74:	e004      	b.n	8005c80 <HAL_UART_IRQHandler+0x280>
      return;
 8005c76:	bf00      	nop
 8005c78:	e002      	b.n	8005c80 <HAL_UART_IRQHandler+0x280>
    return;
 8005c7a:	bf00      	nop
 8005c7c:	e000      	b.n	8005c80 <HAL_UART_IRQHandler+0x280>
    return;
 8005c7e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	08006599 	.word	0x08006599

08005c8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005ccc:	b08a      	sub	sp, #40	; 0x28
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4bb3      	ldr	r3, [pc, #716]	; (8005fcc <UART_SetConfig+0x304>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d06:	430b      	orrs	r3, r1
 8005d08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4aa9      	ldr	r2, [pc, #676]	; (8005fd0 <UART_SetConfig+0x308>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d36:	4313      	orrs	r3, r2
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4aa0      	ldr	r2, [pc, #640]	; (8005fd4 <UART_SetConfig+0x30c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d126      	bne.n	8005da6 <UART_SetConfig+0xde>
 8005d58:	4b9f      	ldr	r3, [pc, #636]	; (8005fd8 <UART_SetConfig+0x310>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d81a      	bhi.n	8005d9c <UART_SetConfig+0xd4>
 8005d66:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <UART_SetConfig+0xa4>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d82:	e080      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005d84:	2302      	movs	r3, #2
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8a:	e07c      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d92:	e078      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005d94:	2308      	movs	r3, #8
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9a:	e074      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da2:	bf00      	nop
 8005da4:	e06f      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a8c      	ldr	r2, [pc, #560]	; (8005fdc <UART_SetConfig+0x314>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d138      	bne.n	8005e22 <UART_SetConfig+0x15a>
 8005db0:	4b89      	ldr	r3, [pc, #548]	; (8005fd8 <UART_SetConfig+0x310>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f003 030c 	and.w	r3, r3, #12
 8005dba:	2b0c      	cmp	r3, #12
 8005dbc:	d82c      	bhi.n	8005e18 <UART_SetConfig+0x150>
 8005dbe:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <UART_SetConfig+0xfc>)
 8005dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc4:	08005df9 	.word	0x08005df9
 8005dc8:	08005e19 	.word	0x08005e19
 8005dcc:	08005e19 	.word	0x08005e19
 8005dd0:	08005e19 	.word	0x08005e19
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e19 	.word	0x08005e19
 8005ddc:	08005e19 	.word	0x08005e19
 8005de0:	08005e19 	.word	0x08005e19
 8005de4:	08005e01 	.word	0x08005e01
 8005de8:	08005e19 	.word	0x08005e19
 8005dec:	08005e19 	.word	0x08005e19
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e11 	.word	0x08005e11
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfe:	e042      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005e00:	2302      	movs	r3, #2
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e06:	e03e      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0e:	e03a      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005e10:	2308      	movs	r3, #8
 8005e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e16:	e036      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e1e:	bf00      	nop
 8005e20:	e031      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a6a      	ldr	r2, [pc, #424]	; (8005fd0 <UART_SetConfig+0x308>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d129      	bne.n	8005e80 <UART_SetConfig+0x1b8>
 8005e2c:	4b6a      	ldr	r3, [pc, #424]	; (8005fd8 <UART_SetConfig+0x310>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3a:	d014      	beq.n	8005e66 <UART_SetConfig+0x19e>
 8005e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e40:	d802      	bhi.n	8005e48 <UART_SetConfig+0x180>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <UART_SetConfig+0x18e>
 8005e46:	e016      	b.n	8005e76 <UART_SetConfig+0x1ae>
 8005e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4c:	d007      	beq.n	8005e5e <UART_SetConfig+0x196>
 8005e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e52:	d00c      	beq.n	8005e6e <UART_SetConfig+0x1a6>
 8005e54:	e00f      	b.n	8005e76 <UART_SetConfig+0x1ae>
 8005e56:	2300      	movs	r3, #0
 8005e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5c:	e013      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e64:	e00f      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005e66:	2304      	movs	r3, #4
 8005e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6c:	e00b      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005e6e:	2308      	movs	r3, #8
 8005e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e74:	e007      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005e76:	2310      	movs	r3, #16
 8005e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7c:	bf00      	nop
 8005e7e:	e002      	b.n	8005e86 <UART_SetConfig+0x1be>
 8005e80:	2310      	movs	r3, #16
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a51      	ldr	r2, [pc, #324]	; (8005fd0 <UART_SetConfig+0x308>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	f040 80fa 	bne.w	8006086 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d823      	bhi.n	8005ee2 <UART_SetConfig+0x21a>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <UART_SetConfig+0x1d8>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005ee3 	.word	0x08005ee3
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	08005ee3 	.word	0x08005ee3
 8005eb0:	08005ed3 	.word	0x08005ed3
 8005eb4:	08005ee3 	.word	0x08005ee3
 8005eb8:	08005ee3 	.word	0x08005ee3
 8005ebc:	08005ee3 	.word	0x08005ee3
 8005ec0:	08005edb 	.word	0x08005edb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005ec4:	f7ff f866 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8005ec8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005eca:	e00d      	b.n	8005ee8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005ecc:	4b44      	ldr	r3, [pc, #272]	; (8005fe0 <UART_SetConfig+0x318>)
 8005ece:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ed0:	e00a      	b.n	8005ee8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005ed2:	f7fe ffc9 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8005ed6:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ed8:	e006      	b.n	8005ee8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ede:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ee0:	e002      	b.n	8005ee8 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	76fb      	strb	r3, [r7, #27]
        break;
 8005ee6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 81c6 	beq.w	800627c <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	4413      	add	r3, r2
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d305      	bcc.n	8005f0c <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d902      	bls.n	8005f12 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	76fb      	strb	r3, [r7, #27]
 8005f10:	e1b4      	b.n	800627c <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 8005f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	f200 80a2 	bhi.w	8006060 <UART_SetConfig+0x398>
 8005f1c:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x25c>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f49 	.word	0x08005f49
 8005f28:	08006061 	.word	0x08006061
 8005f2c:	08005f97 	.word	0x08005f97
 8005f30:	08006061 	.word	0x08006061
 8005f34:	08005fe9 	.word	0x08005fe9
 8005f38:	08006061 	.word	0x08006061
 8005f3c:	08006061 	.word	0x08006061
 8005f40:	08006061 	.word	0x08006061
 8005f44:	08006037 	.word	0x08006037
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005f48:	f7ff f824 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8005f4c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4619      	mov	r1, r3
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	f04f 0400 	mov.w	r4, #0
 8005f5e:	0214      	lsls	r4, r2, #8
 8005f60:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f64:	020b      	lsls	r3, r1, #8
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6852      	ldr	r2, [r2, #4]
 8005f6a:	0852      	lsrs	r2, r2, #1
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	eb13 0b01 	adds.w	fp, r3, r1
 8005f76:	eb44 0c02 	adc.w	ip, r4, r2
 8005f7a:	4658      	mov	r0, fp
 8005f7c:	4661      	mov	r1, ip
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f04f 0400 	mov.w	r4, #0
 8005f86:	461a      	mov	r2, r3
 8005f88:	4623      	mov	r3, r4
 8005f8a:	f7fa fe57 	bl	8000c3c <__aeabi_uldivmod>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	460c      	mov	r4, r1
 8005f92:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005f94:	e067      	b.n	8006066 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	f04f 0400 	mov.w	r4, #0
 8005fa0:	4910      	ldr	r1, [pc, #64]	; (8005fe4 <UART_SetConfig+0x31c>)
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	eb13 0b01 	adds.w	fp, r3, r1
 8005faa:	eb44 0c02 	adc.w	ip, r4, r2
 8005fae:	4658      	mov	r0, fp
 8005fb0:	4661      	mov	r1, ip
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f04f 0400 	mov.w	r4, #0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	4623      	mov	r3, r4
 8005fbe:	f7fa fe3d 	bl	8000c3c <__aeabi_uldivmod>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005fc8:	e04d      	b.n	8006066 <UART_SetConfig+0x39e>
 8005fca:	bf00      	nop
 8005fcc:	efff69f3 	.word	0xefff69f3
 8005fd0:	40008000 	.word	0x40008000
 8005fd4:	40013800 	.word	0x40013800
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40004400 	.word	0x40004400
 8005fe0:	00f42400 	.word	0x00f42400
 8005fe4:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005fe8:	f7fe ff3e 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8005fec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	f04f 0400 	mov.w	r4, #0
 8005ffe:	0214      	lsls	r4, r2, #8
 8006000:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006004:	020b      	lsls	r3, r1, #8
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6852      	ldr	r2, [r2, #4]
 800600a:	0852      	lsrs	r2, r2, #1
 800600c:	4611      	mov	r1, r2
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	eb13 0b01 	adds.w	fp, r3, r1
 8006016:	eb44 0c02 	adc.w	ip, r4, r2
 800601a:	4658      	mov	r0, fp
 800601c:	4661      	mov	r1, ip
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f04f 0400 	mov.w	r4, #0
 8006026:	461a      	mov	r2, r3
 8006028:	4623      	mov	r3, r4
 800602a:	f7fa fe07 	bl	8000c3c <__aeabi_uldivmod>
 800602e:	4603      	mov	r3, r0
 8006030:	460c      	mov	r4, r1
 8006032:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006034:	e017      	b.n	8006066 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	f04f 0400 	mov.w	r4, #0
 8006040:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006044:	f144 0100 	adc.w	r1, r4, #0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f04f 0400 	mov.w	r4, #0
 8006050:	461a      	mov	r2, r3
 8006052:	4623      	mov	r3, r4
 8006054:	f7fa fdf2 	bl	8000c3c <__aeabi_uldivmod>
 8006058:	4603      	mov	r3, r0
 800605a:	460c      	mov	r4, r1
 800605c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800605e:	e002      	b.n	8006066 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	76fb      	strb	r3, [r7, #27]
            break;
 8006064:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606c:	d308      	bcc.n	8006080 <UART_SetConfig+0x3b8>
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006074:	d204      	bcs.n	8006080 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	60da      	str	r2, [r3, #12]
 800607e:	e0fd      	b.n	800627c <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	76fb      	strb	r3, [r7, #27]
 8006084:	e0fa      	b.n	800627c <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608e:	f040 8083 	bne.w	8006198 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8006092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006096:	2b08      	cmp	r3, #8
 8006098:	d85e      	bhi.n	8006158 <UART_SetConfig+0x490>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <UART_SetConfig+0x3d8>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060e5 	.word	0x080060e5
 80060a8:	08006105 	.word	0x08006105
 80060ac:	08006159 	.word	0x08006159
 80060b0:	08006121 	.word	0x08006121
 80060b4:	08006159 	.word	0x08006159
 80060b8:	08006159 	.word	0x08006159
 80060bc:	08006159 	.word	0x08006159
 80060c0:	08006141 	.word	0x08006141
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c4:	f7fe ff66 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 80060c8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	005a      	lsls	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	441a      	add	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	b29b      	uxth	r3, r3
 80060e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80060e2:	e03c      	b.n	800615e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e4:	f7fe ff6c 	bl	8004fc0 <HAL_RCC_GetPCLK2Freq>
 80060e8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	005a      	lsls	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	085b      	lsrs	r3, r3, #1
 80060f4:	441a      	add	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fe:	b29b      	uxth	r3, r3
 8006100:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006102:	e02c      	b.n	800615e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800610e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6852      	ldr	r2, [r2, #4]
 8006116:	fbb3 f3f2 	udiv	r3, r3, r2
 800611a:	b29b      	uxth	r3, r3
 800611c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800611e:	e01e      	b.n	800615e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006120:	f7fe fea2 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8006124:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	005a      	lsls	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	085b      	lsrs	r3, r3, #1
 8006130:	441a      	add	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	fbb2 f3f3 	udiv	r3, r2, r3
 800613a:	b29b      	uxth	r3, r3
 800613c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800613e:	e00e      	b.n	800615e <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006152:	b29b      	uxth	r3, r3
 8006154:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006156:	e002      	b.n	800615e <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	76fb      	strb	r3, [r7, #27]
        break;
 800615c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	2b0f      	cmp	r3, #15
 8006162:	d916      	bls.n	8006192 <UART_SetConfig+0x4ca>
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800616a:	d212      	bcs.n	8006192 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	b29b      	uxth	r3, r3
 8006170:	f023 030f 	bic.w	r3, r3, #15
 8006174:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	b29b      	uxth	r3, r3
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	b29a      	uxth	r2, r3
 8006182:	89fb      	ldrh	r3, [r7, #14]
 8006184:	4313      	orrs	r3, r2
 8006186:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	89fa      	ldrh	r2, [r7, #14]
 800618e:	60da      	str	r2, [r3, #12]
 8006190:	e074      	b.n	800627c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	76fb      	strb	r3, [r7, #27]
 8006196:	e071      	b.n	800627c <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8006198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800619c:	2b08      	cmp	r3, #8
 800619e:	d85c      	bhi.n	800625a <UART_SetConfig+0x592>
 80061a0:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <UART_SetConfig+0x4e0>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	080061cd 	.word	0x080061cd
 80061ac:	080061eb 	.word	0x080061eb
 80061b0:	08006209 	.word	0x08006209
 80061b4:	0800625b 	.word	0x0800625b
 80061b8:	08006225 	.word	0x08006225
 80061bc:	0800625b 	.word	0x0800625b
 80061c0:	0800625b 	.word	0x0800625b
 80061c4:	0800625b 	.word	0x0800625b
 80061c8:	08006243 	.word	0x08006243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061cc:	f7fe fee2 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 80061d0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	085a      	lsrs	r2, r3, #1
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	441a      	add	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80061e8:	e03a      	b.n	8006260 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061ea:	f7fe fee9 	bl	8004fc0 <HAL_RCC_GetPCLK2Freq>
 80061ee:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	085a      	lsrs	r2, r3, #1
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	441a      	add	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006202:	b29b      	uxth	r3, r3
 8006204:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006206:	e02b      	b.n	8006260 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006212:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6852      	ldr	r2, [r2, #4]
 800621a:	fbb3 f3f2 	udiv	r3, r3, r2
 800621e:	b29b      	uxth	r3, r3
 8006220:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006222:	e01d      	b.n	8006260 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006224:	f7fe fe20 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8006228:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	085a      	lsrs	r2, r3, #1
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	441a      	add	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	b29b      	uxth	r3, r3
 800623e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006240:	e00e      	b.n	8006260 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	fbb2 f3f3 	udiv	r3, r2, r3
 8006254:	b29b      	uxth	r3, r3
 8006256:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006258:	e002      	b.n	8006260 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	76fb      	strb	r3, [r7, #27]
        break;
 800625e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	2b0f      	cmp	r3, #15
 8006264:	d908      	bls.n	8006278 <UART_SetConfig+0x5b0>
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800626c:	d204      	bcs.n	8006278 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	60da      	str	r2, [r3, #12]
 8006276:	e001      	b.n	800627c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006288:	7efb      	ldrb	r3, [r7, #27]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3728      	adds	r7, #40	; 0x28
 800628e:	46bd      	mov	sp, r7
 8006290:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01a      	beq.n	80063aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006392:	d10a      	bne.n	80063aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af02      	add	r7, sp, #8
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80063e6:	f7fc fedb 	bl	80031a0 <HAL_GetTick>
 80063ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d10e      	bne.n	8006418 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f82a 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e020      	b.n	800645a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b04      	cmp	r3, #4
 8006424:	d10e      	bne.n	8006444 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006426:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f814 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e00a      	b.n	800645a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	4613      	mov	r3, r2
 8006470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006472:	e05d      	b.n	8006530 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800647a:	d059      	beq.n	8006530 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647c:	f7fc fe90 	bl	80031a0 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	429a      	cmp	r2, r3
 800648a:	d302      	bcc.n	8006492 <UART_WaitOnFlagUntilTimeout+0x30>
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d11b      	bne.n	80064ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064a0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0201 	bic.w	r2, r2, #1
 80064b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e042      	b.n	8006550 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d02b      	beq.n	8006530 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e6:	d123      	bne.n	8006530 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006500:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e00f      	b.n	8006550 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69da      	ldr	r2, [r3, #28]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4013      	ands	r3, r2
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	429a      	cmp	r2, r3
 800653e:	bf0c      	ite	eq
 8006540:	2301      	moveq	r3, #1
 8006542:	2300      	movne	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	429a      	cmp	r2, r3
 800654c:	d092      	beq.n	8006474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800656e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff fb7c 	bl	8005cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065da:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff fb4f 	bl	8005c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006604:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800660a:	2b22      	cmp	r3, #34	; 0x22
 800660c:	d13a      	bne.n	8006684 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006614:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006616:	89bb      	ldrh	r3, [r7, #12]
 8006618:	b2d9      	uxtb	r1, r3
 800661a:	89fb      	ldrh	r3, [r7, #14]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	400a      	ands	r2, r1
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006638:	b29b      	uxth	r3, r3
 800663a:	3b01      	subs	r3, #1
 800663c:	b29a      	uxth	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d123      	bne.n	8006698 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800665e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff fb0f 	bl	8005ca0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006682:	e009      	b.n	8006698 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	8b1b      	ldrh	r3, [r3, #24]
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0208 	orr.w	r2, r2, #8
 8006694:	b292      	uxth	r2, r2
 8006696:	831a      	strh	r2, [r3, #24]
}
 8006698:	bf00      	nop
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066ae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066b4:	2b22      	cmp	r3, #34	; 0x22
 80066b6:	d13a      	bne.n	800672e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80066be:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80066c6:	89ba      	ldrh	r2, [r7, #12]
 80066c8:	89fb      	ldrh	r3, [r7, #14]
 80066ca:	4013      	ands	r3, r2
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d6:	1c9a      	adds	r2, r3, #2
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d123      	bne.n	8006742 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006708:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0201 	bic.w	r2, r2, #1
 8006718:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff faba 	bl	8005ca0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800672c:	e009      	b.n	8006742 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	8b1b      	ldrh	r3, [r3, #24]
 8006734:	b29a      	uxth	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0208 	orr.w	r2, r2, #8
 800673e:	b292      	uxth	r2, r2
 8006740:	831a      	strh	r2, [r3, #24]
}
 8006742:	bf00      	nop
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <JAtoN>:
                                 * The "E" may actually be an "e".  E and X
                                 * may both be omitted (but not just one).
                                 */
    char **endPtr;              /* If non-NULL, store terminating character's
                                 * address here. */
{
 8006760:	b5b0      	push	{r4, r5, r7, lr}
 8006762:	b096      	sub	sp, #88	; 0x58
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
    int sign, expSign = FALSE;
 800676a:	2300      	movs	r3, #0
 800676c:	653b      	str	r3, [r7, #80]	; 0x50
    JNUMBER fraction, dblExp;
    register const char *p;
    register int c;
    int exp = 0;                /* Exponent read from "EX" field. */
 800676e:	2300      	movs	r3, #0
 8006770:	63fb      	str	r3, [r7, #60]	; 0x3c
    int fracExp = 0;            /* Exponent that derives from the fractional
 8006772:	2300      	movs	r3, #0
 8006774:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Strip off leading blanks and check for a sign.
     */

    p = string;
 8006776:	68fc      	ldr	r4, [r7, #12]
    while (*p == ' ') {
 8006778:	e000      	b.n	800677c <JAtoN+0x1c>
        p += 1;
 800677a:	3401      	adds	r4, #1
    while (*p == ' ') {
 800677c:	7823      	ldrb	r3, [r4, #0]
 800677e:	2b20      	cmp	r3, #32
 8006780:	d0fb      	beq.n	800677a <JAtoN+0x1a>
    }
    if (*p == '-') {
 8006782:	7823      	ldrb	r3, [r4, #0]
 8006784:	2b2d      	cmp	r3, #45	; 0x2d
 8006786:	d103      	bne.n	8006790 <JAtoN+0x30>
        sign = TRUE;
 8006788:	2301      	movs	r3, #1
 800678a:	657b      	str	r3, [r7, #84]	; 0x54
        p += 1;
 800678c:	3401      	adds	r4, #1
 800678e:	e005      	b.n	800679c <JAtoN+0x3c>
    } else {
        if (*p == '+') {
 8006790:	7823      	ldrb	r3, [r4, #0]
 8006792:	2b2b      	cmp	r3, #43	; 0x2b
 8006794:	d100      	bne.n	8006798 <JAtoN+0x38>
            p += 1;
 8006796:	3401      	adds	r4, #1
        }
        sign = FALSE;
 8006798:	2300      	movs	r3, #0
 800679a:	657b      	str	r3, [r7, #84]	; 0x54
    /*
     * Count the number of digits in the mantissa (including the decimal
     * point), and also locate the decimal point.
     */

    decPt = -1;
 800679c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067a0:	633b      	str	r3, [r7, #48]	; 0x30
    for (mantSize = 0; ; mantSize += 1)
 80067a2:	2300      	movs	r3, #0
 80067a4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        c = *p;
 80067a6:	7823      	ldrb	r3, [r4, #0]
 80067a8:	461d      	mov	r5, r3
        if (c < '0' || c > '9') {
 80067aa:	2d2f      	cmp	r5, #47	; 0x2f
 80067ac:	dd01      	ble.n	80067b2 <JAtoN+0x52>
 80067ae:	2d39      	cmp	r5, #57	; 0x39
 80067b0:	dd06      	ble.n	80067c0 <JAtoN+0x60>
            if ((c != '.') || (decPt >= 0)) {
 80067b2:	2d2e      	cmp	r5, #46	; 0x2e
 80067b4:	d109      	bne.n	80067ca <JAtoN+0x6a>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	da06      	bge.n	80067ca <JAtoN+0x6a>
                break;
            }
            decPt = mantSize;
 80067bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067be:	633b      	str	r3, [r7, #48]	; 0x30
        }
        p += 1;
 80067c0:	3401      	adds	r4, #1
    for (mantSize = 0; ; mantSize += 1)
 80067c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c4:	3301      	adds	r3, #1
 80067c6:	637b      	str	r3, [r7, #52]	; 0x34
        c = *p;
 80067c8:	e7ed      	b.n	80067a6 <JAtoN+0x46>
     * collect 9 digits each (this is faster than using floating-point).
     * If the mantissa has more than 18 digits, ignore the extras, since
     * they can't affect the value anyway.
     */
    
    pExp  = p;
 80067ca:	617c      	str	r4, [r7, #20]
    p -= mantSize;
 80067cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ce:	425b      	negs	r3, r3
 80067d0:	441c      	add	r4, r3
    if (decPt < 0) {
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	da02      	bge.n	80067de <JAtoN+0x7e>
        decPt = mantSize;
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	633b      	str	r3, [r7, #48]	; 0x30
 80067dc:	e002      	b.n	80067e4 <JAtoN+0x84>
    } else {
        mantSize -= 1;                  /* One of the digits was the point. */
 80067de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e0:	3b01      	subs	r3, #1
 80067e2:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (mantSize > 18) {
 80067e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e6:	2b12      	cmp	r3, #18
 80067e8:	dd05      	ble.n	80067f6 <JAtoN+0x96>
        fracExp = decPt - 18;
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	3b12      	subs	r3, #18
 80067ee:	63bb      	str	r3, [r7, #56]	; 0x38
        mantSize = 18;
 80067f0:	2312      	movs	r3, #18
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
 80067f4:	e003      	b.n	80067fe <JAtoN+0x9e>
    } else {
        fracExp = decPt - mantSize;
 80067f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    if (mantSize == 0) {
 80067fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006800:	2b00      	cmp	r3, #0
 8006802:	d107      	bne.n	8006814 <JAtoN+0xb4>
        fraction = 0.0;
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	f04f 0400 	mov.w	r4, #0
 800680c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        p = string;
 8006810:	68fc      	ldr	r4, [r7, #12]
        goto done;
 8006812:	e12c      	b.n	8006a6e <JAtoN+0x30e>
    } else {
        long frac1, frac2;
        frac1 = 0L;
 8006814:	2300      	movs	r3, #0
 8006816:	62fb      	str	r3, [r7, #44]	; 0x2c
        for ( ; mantSize > 9; mantSize -= 1)
 8006818:	e014      	b.n	8006844 <JAtoN+0xe4>
        {
            c = *p;
 800681a:	7823      	ldrb	r3, [r4, #0]
 800681c:	461d      	mov	r5, r3
            p += 1;
 800681e:	3401      	adds	r4, #1
            if (c == '.') {
 8006820:	2d2e      	cmp	r5, #46	; 0x2e
 8006822:	d102      	bne.n	800682a <JAtoN+0xca>
                c = *p;
 8006824:	7823      	ldrb	r3, [r4, #0]
 8006826:	461d      	mov	r5, r3
                p += 1;
 8006828:	3401      	adds	r4, #1
            }
            frac1 = 10*frac1 + (c - '0');
 800682a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	461a      	mov	r2, r3
 8006836:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800683a:	4413      	add	r3, r2
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
        for ( ; mantSize > 9; mantSize -= 1)
 800683e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006840:	3b01      	subs	r3, #1
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
 8006844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006846:	2b09      	cmp	r3, #9
 8006848:	dce7      	bgt.n	800681a <JAtoN+0xba>
        }
        frac2 = 0L;
 800684a:	2300      	movs	r3, #0
 800684c:	62bb      	str	r3, [r7, #40]	; 0x28
        for (; mantSize > 0; mantSize -= 1)
 800684e:	e014      	b.n	800687a <JAtoN+0x11a>
        {
            c = *p;
 8006850:	7823      	ldrb	r3, [r4, #0]
 8006852:	461d      	mov	r5, r3
            p += 1;
 8006854:	3401      	adds	r4, #1
            if (c == '.') {
 8006856:	2d2e      	cmp	r5, #46	; 0x2e
 8006858:	d102      	bne.n	8006860 <JAtoN+0x100>
                c = *p;
 800685a:	7823      	ldrb	r3, [r4, #0]
 800685c:	461d      	mov	r5, r3
                p += 1;
 800685e:	3401      	adds	r4, #1
            }
            frac2 = 10*frac2 + (c - '0');
 8006860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	461a      	mov	r2, r3
 800686c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006870:	4413      	add	r3, r2
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28
        for (; mantSize > 0; mantSize -= 1)
 8006874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006876:	3b01      	subs	r3, #1
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
 800687a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687c:	2b00      	cmp	r3, #0
 800687e:	dce7      	bgt.n	8006850 <JAtoN+0xf0>
        }
        fraction = (1.0e9 * frac1) + frac2;
 8006880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006882:	f7f9 fe5f 	bl	8000544 <__aeabi_i2d>
 8006886:	a399      	add	r3, pc, #612	; (adr r3, 8006aec <JAtoN+0x38c>)
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f7f9 fec4 	bl	8000618 <__aeabi_dmul>
 8006890:	4603      	mov	r3, r0
 8006892:	460c      	mov	r4, r1
 8006894:	4625      	mov	r5, r4
 8006896:	461c      	mov	r4, r3
 8006898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800689a:	f7f9 fe53 	bl	8000544 <__aeabi_i2d>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4620      	mov	r0, r4
 80068a4:	4629      	mov	r1, r5
 80068a6:	f7f9 fd01 	bl	80002ac <__adddf3>
 80068aa:	4603      	mov	r3, r0
 80068ac:	460c      	mov	r4, r1
 80068ae:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

    /*
     * Skim off the exponent.
     */

    p = pExp;
 80068b2:	697c      	ldr	r4, [r7, #20]
    if ((*p == 'E') || (*p == 'e')) {
 80068b4:	7823      	ldrb	r3, [r4, #0]
 80068b6:	2b45      	cmp	r3, #69	; 0x45
 80068b8:	d002      	beq.n	80068c0 <JAtoN+0x160>
 80068ba:	7823      	ldrb	r3, [r4, #0]
 80068bc:	2b65      	cmp	r3, #101	; 0x65
 80068be:	d11f      	bne.n	8006900 <JAtoN+0x1a0>
        p += 1;
 80068c0:	3401      	adds	r4, #1
        if (*p == '-') {
 80068c2:	7823      	ldrb	r3, [r4, #0]
 80068c4:	2b2d      	cmp	r3, #45	; 0x2d
 80068c6:	d103      	bne.n	80068d0 <JAtoN+0x170>
            expSign = TRUE;
 80068c8:	2301      	movs	r3, #1
 80068ca:	653b      	str	r3, [r7, #80]	; 0x50
            p += 1;
 80068cc:	3401      	adds	r4, #1
 80068ce:	e011      	b.n	80068f4 <JAtoN+0x194>
        } else {
            if (*p == '+') {
 80068d0:	7823      	ldrb	r3, [r4, #0]
 80068d2:	2b2b      	cmp	r3, #43	; 0x2b
 80068d4:	d100      	bne.n	80068d8 <JAtoN+0x178>
                p += 1;
 80068d6:	3401      	adds	r4, #1
            }
            expSign = FALSE;
 80068d8:	2300      	movs	r3, #0
 80068da:	653b      	str	r3, [r7, #80]	; 0x50
        }
        while (*p >= '0' && *p <= '9') {
 80068dc:	e00a      	b.n	80068f4 <JAtoN+0x194>
            exp = exp * 10 + (*p - '0');
 80068de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	461a      	mov	r2, r3
 80068ea:	7823      	ldrb	r3, [r4, #0]
 80068ec:	3b30      	subs	r3, #48	; 0x30
 80068ee:	4413      	add	r3, r2
 80068f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            p += 1;
 80068f2:	3401      	adds	r4, #1
        while (*p >= '0' && *p <= '9') {
 80068f4:	7823      	ldrb	r3, [r4, #0]
 80068f6:	2b2f      	cmp	r3, #47	; 0x2f
 80068f8:	d902      	bls.n	8006900 <JAtoN+0x1a0>
 80068fa:	7823      	ldrb	r3, [r4, #0]
 80068fc:	2b39      	cmp	r3, #57	; 0x39
 80068fe:	d9ee      	bls.n	80068de <JAtoN+0x17e>
        }
    }
    if (expSign) {
 8006900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006902:	2b00      	cmp	r3, #0
 8006904:	d004      	beq.n	8006910 <JAtoN+0x1b0>
        exp = fracExp - exp;
 8006906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690e:	e003      	b.n	8006918 <JAtoN+0x1b8>
    } else {
        exp = fracExp + exp;
 8006910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	4413      	add	r3, r2
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
     * Do this by processing the exponent one bit at a time to combine
     * many powers of 2 of 10. Then combine the exponent with the
     * fraction.
     */
    
    if (exp < 0) {
 8006918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691a:	2b00      	cmp	r3, #0
 800691c:	da05      	bge.n	800692a <JAtoN+0x1ca>
        expSign = TRUE;
 800691e:	2301      	movs	r3, #1
 8006920:	653b      	str	r3, [r7, #80]	; 0x50
        exp = -exp;
 8006922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006924:	425b      	negs	r3, r3
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006928:	e001      	b.n	800692e <JAtoN+0x1ce>
    } else {
        expSign = FALSE;
 800692a:	2300      	movs	r3, #0
 800692c:	653b      	str	r3, [r7, #80]	; 0x50
    }
    if (exp > MAX_EXPONENT) {
 800692e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006934:	db02      	blt.n	800693c <JAtoN+0x1dc>
        exp = MAX_EXPONENT;
 8006936:	f240 13ff 	movw	r3, #511	; 0x1ff
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    dblExp = 1.0;
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	4b67      	ldr	r3, [pc, #412]	; (8006ae0 <JAtoN+0x380>)
 8006942:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	int d;
    for (d = 0; exp != 0; exp >>= 1, d += 1) {
 8006946:	2300      	movs	r3, #0
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
 800694a:	e073      	b.n	8006a34 <JAtoN+0x2d4>
		/* Table giving binary powers of 10.  Entry */
		/* is 10^2^i.  Used to convert decimal */
		/* exponents into floating-point numbers. */
		JNUMBER p10 = 0.0;
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	f04f 0300 	mov.w	r3, #0
 8006954:	e9c7 2306 	strd	r2, r3, [r7, #24]
		switch (d) {
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	2b08      	cmp	r3, #8
 800695c:	d84a      	bhi.n	80069f4 <JAtoN+0x294>
 800695e:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <JAtoN+0x204>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	08006989 	.word	0x08006989
 8006968:	08006995 	.word	0x08006995
 800696c:	080069a1 	.word	0x080069a1
 8006970:	080069ad 	.word	0x080069ad
 8006974:	080069b9 	.word	0x080069b9
 8006978:	080069c5 	.word	0x080069c5
 800697c:	080069d1 	.word	0x080069d1
 8006980:	080069dd 	.word	0x080069dd
 8006984:	080069e9 	.word	0x080069e9
		case 0:
			p10 = 10.0;
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	4b55      	ldr	r3, [pc, #340]	; (8006ae4 <JAtoN+0x384>)
 800698e:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 8006992:	e02f      	b.n	80069f4 <JAtoN+0x294>
		case 1:
			p10 = 100.0;
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	4b53      	ldr	r3, [pc, #332]	; (8006ae8 <JAtoN+0x388>)
 800699a:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 800699e:	e029      	b.n	80069f4 <JAtoN+0x294>
		case 2:
			p10 = 1.0e4;
 80069a0:	a341      	add	r3, pc, #260	; (adr r3, 8006aa8 <JAtoN+0x348>)
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 80069aa:	e023      	b.n	80069f4 <JAtoN+0x294>
		case 3:
			p10 = 1.0e8;
 80069ac:	a340      	add	r3, pc, #256	; (adr r3, 8006ab0 <JAtoN+0x350>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 80069b6:	e01d      	b.n	80069f4 <JAtoN+0x294>
		case 4:
			p10 = 1.0e16;
 80069b8:	a33f      	add	r3, pc, #252	; (adr r3, 8006ab8 <JAtoN+0x358>)
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 80069c2:	e017      	b.n	80069f4 <JAtoN+0x294>
		case 5:
			p10 = 1.0e32;
 80069c4:	a33e      	add	r3, pc, #248	; (adr r3, 8006ac0 <JAtoN+0x360>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 80069ce:	e011      	b.n	80069f4 <JAtoN+0x294>
#ifndef NOTE_FLOAT
		case 6:
			p10 = 1.0e64;
 80069d0:	a33d      	add	r3, pc, #244	; (adr r3, 8006ac8 <JAtoN+0x368>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 80069da:	e00b      	b.n	80069f4 <JAtoN+0x294>
		case 7:
			p10 = 1.0e128;
 80069dc:	a33c      	add	r3, pc, #240	; (adr r3, 8006ad0 <JAtoN+0x370>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 80069e6:	e005      	b.n	80069f4 <JAtoN+0x294>
		case 8:
			p10 = 1.0e256;
 80069e8:	a33b      	add	r3, pc, #236	; (adr r3, 8006ad8 <JAtoN+0x378>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 80069f2:	bf00      	nop
#endif
		}
		if (p10 == 0.0)
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a00:	f7fa f872 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d118      	bne.n	8006a3c <JAtoN+0x2dc>
			break;
        if (exp & 01) {
 8006a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <JAtoN+0x2c8>
            dblExp *= p10;
 8006a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a18:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006a1c:	f7f9 fdfc 	bl	8000618 <__aeabi_dmul>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    for (d = 0; exp != 0; exp >>= 1, d += 1) {
 8006a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2a:	105b      	asrs	r3, r3, #1
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	3301      	adds	r3, #1
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
 8006a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d188      	bne.n	800694c <JAtoN+0x1ec>
 8006a3a:	e000      	b.n	8006a3e <JAtoN+0x2de>
			break;
 8006a3c:	bf00      	nop
        }
    }
    if (expSign) {
 8006a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <JAtoN+0x2fa>
        fraction /= dblExp;
 8006a44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a48:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006a4c:	f7f9 ff0e 	bl	800086c <__aeabi_ddiv>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8006a58:	e009      	b.n	8006a6e <JAtoN+0x30e>
    } else {
        fraction *= dblExp;
 8006a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006a62:	f7f9 fdd9 	bl	8000618 <__aeabi_dmul>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

done:
    if (endPtr != NULL) {
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <JAtoN+0x318>
        *endPtr = (char *) p;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	601c      	str	r4, [r3, #0]
    }

    if (sign) {
 8006a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d006      	beq.n	8006a8c <JAtoN+0x32c>
        return -fraction;
 8006a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a80:	603b      	str	r3, [r7, #0]
 8006a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	607b      	str	r3, [r7, #4]
 8006a8a:	e003      	b.n	8006a94 <JAtoN+0x334>
    }
    return fraction;
 8006a8c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8006a90:	ed87 7b00 	vstr	d7, [r7]
 8006a94:	ed97 7b00 	vldr	d7, [r7]
}
 8006a98:	eeb0 0a47 	vmov.f32	s0, s14
 8006a9c:	eef0 0a67 	vmov.f32	s1, s15
 8006aa0:	3758      	adds	r7, #88	; 0x58
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	00000000 	.word	0x00000000
 8006aac:	40c38800 	.word	0x40c38800
 8006ab0:	00000000 	.word	0x00000000
 8006ab4:	4197d784 	.word	0x4197d784
 8006ab8:	37e08000 	.word	0x37e08000
 8006abc:	4341c379 	.word	0x4341c379
 8006ac0:	b5056e17 	.word	0xb5056e17
 8006ac4:	4693b8b5 	.word	0x4693b8b5
 8006ac8:	e93ff9f5 	.word	0xe93ff9f5
 8006acc:	4d384f03 	.word	0x4d384f03
 8006ad0:	f9301d32 	.word	0xf9301d32
 8006ad4:	5a827748 	.word	0x5a827748
 8006ad8:	7f73bf3c 	.word	0x7f73bf3c
 8006adc:	75154fdd 	.word	0x75154fdd
 8006ae0:	3ff00000 	.word	0x3ff00000
 8006ae4:	40240000 	.word	0x40240000
 8006ae8:	40590000 	.word	0x40590000
 8006aec:	00000000 	.word	0x00000000
 8006af0:	41cdcd65 	.word	0x41cdcd65

08006af4 <case_insensitive_strcmp>:
    return STRINGIFY(N_CJSON_VERSION_MAJOR) "." STRINGIFY(N_CJSON_VERSION_MINOR) "." STRINGIFY(N_CJSON_VERSION_PATCH);
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8006af4:	b590      	push	{r4, r7, lr}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <case_insensitive_strcmp+0x16>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e05e      	b.n	8006bcc <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d10d      	bne.n	8006b32 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e058      	b.n	8006bcc <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e052      	b.n	8006bcc <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	607b      	str	r3, [r7, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	603b      	str	r3, [r7, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	73fb      	strb	r3, [r7, #15]
 8006b38:	f002 fdc4 	bl	80096c4 <__locale_ctype_ptr>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	3301      	adds	r3, #1
 8006b42:	4413      	add	r3, r2
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d103      	bne.n	8006b56 <case_insensitive_strcmp+0x62>
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	f103 0420 	add.w	r4, r3, #32
 8006b54:	e000      	b.n	8006b58 <case_insensitive_strcmp+0x64>
 8006b56:	7bfc      	ldrb	r4, [r7, #15]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	73bb      	strb	r3, [r7, #14]
 8006b5e:	f002 fdb1 	bl	80096c4 <__locale_ctype_ptr>
 8006b62:	4602      	mov	r2, r0
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	3301      	adds	r3, #1
 8006b68:	4413      	add	r3, r2
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	f003 0303 	and.w	r3, r3, #3
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d102      	bne.n	8006b7a <case_insensitive_strcmp+0x86>
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	3320      	adds	r3, #32
 8006b78:	e000      	b.n	8006b7c <case_insensitive_strcmp+0x88>
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	429c      	cmp	r4, r3
 8006b7e:	d0cc      	beq.n	8006b1a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	737b      	strb	r3, [r7, #13]
 8006b86:	f002 fd9d 	bl	80096c4 <__locale_ctype_ptr>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	7b7b      	ldrb	r3, [r7, #13]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	4413      	add	r3, r2
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	f003 0303 	and.w	r3, r3, #3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d103      	bne.n	8006ba4 <case_insensitive_strcmp+0xb0>
 8006b9c:	7b7b      	ldrb	r3, [r7, #13]
 8006b9e:	f103 0420 	add.w	r4, r3, #32
 8006ba2:	e000      	b.n	8006ba6 <case_insensitive_strcmp+0xb2>
 8006ba4:	7b7c      	ldrb	r4, [r7, #13]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	733b      	strb	r3, [r7, #12]
 8006bac:	f002 fd8a 	bl	80096c4 <__locale_ctype_ptr>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	7b3b      	ldrb	r3, [r7, #12]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4413      	add	r3, r2
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d102      	bne.n	8006bc8 <case_insensitive_strcmp+0xd4>
 8006bc2:	7b3b      	ldrb	r3, [r7, #12]
 8006bc4:	3320      	adds	r3, #32
 8006bc6:	e000      	b.n	8006bca <case_insensitive_strcmp+0xd6>
 8006bc8:	7b3b      	ldrb	r3, [r7, #12]
 8006bca:	1ae3      	subs	r3, r4, r3
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd90      	pop	{r4, r7, pc}

08006bd4 <Jstrdup>:

static unsigned char* Jstrdup(const unsigned char* string)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
    size_t length = 0;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <Jstrdup+0x1a>
    {
        return NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	e014      	b.n	8006c18 <Jstrdup+0x44>
    }

    length = strlen((const char*)string) + sizeof("");
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7f9 faf8 	bl	80001e4 <strlen>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)_Malloc(length);
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f002 f9f6 	bl	8008fec <NoteMalloc>
 8006c00:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <Jstrdup+0x38>
    {
        return NULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e005      	b.n	8006c18 <Jstrdup+0x44>
    }
    memcpy(copy, string, length);
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	68b8      	ldr	r0, [r7, #8]
 8006c12:	f002 fd87 	bl	8009724 <memcpy>

    return copy;
 8006c16:	68bb      	ldr	r3, [r7, #8]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <JFree>:

N_CJSON_PUBLIC(void *) JMalloc(size_t size) {
    return _Malloc(size);
}
N_CJSON_PUBLIC(void) JFree(void *p) {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
    _Free(p);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f002 f9f5 	bl	8009018 <NoteFree>
}
 8006c2e:	bf00      	nop
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <JNew_Item>:

/* Internal constructor. */
static J *JNew_Item()
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
    J* node = (J*)_Malloc(sizeof(J));
 8006c3c:	2028      	movs	r0, #40	; 0x28
 8006c3e:	f002 f9d5 	bl	8008fec <NoteMalloc>
 8006c42:	6078      	str	r0, [r7, #4]
    if (node)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <JNew_Item+0x1e>
    {
        memset(node, '\0', sizeof(J));
 8006c4a:	2228      	movs	r2, #40	; 0x28
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f002 fd8c 	bl	800976c <memset>
    }

    return node;
 8006c54:	687b      	ldr	r3, [r7, #4]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <JDelete>:

/* Delete a J structure. */
N_CJSON_PUBLIC(void) JDelete(J *item)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
    J *next = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8006c6a:	e034      	b.n	8006cd6 <JDelete+0x78>
    {
        next = item->next;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]
        if (!(item->type & JIsReference) && (item->child != NULL))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d108      	bne.n	8006c90 <JDelete+0x32>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <JDelete+0x32>
        {
            JDelete(item->child);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff ffe7 	bl	8006c5e <JDelete>
        }
        if (!(item->type & JIsReference) && (item->valuestring != NULL))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d108      	bne.n	8006cae <JDelete+0x50>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d004      	beq.n	8006cae <JDelete+0x50>
        {
            _Free(item->valuestring);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f002 f9b5 	bl	8009018 <NoteFree>
        }
        if (!(item->type & JStringIsConst) && (item->string != NULL))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d108      	bne.n	8006ccc <JDelete+0x6e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <JDelete+0x6e>
        {
            _Free(item->string);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f002 f9a6 	bl	8009018 <NoteFree>
        }
        _Free(item);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f002 f9a3 	bl	8009018 <NoteFree>
        item = next;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1c7      	bne.n	8006c6c <JDelete+0xe>
    }
}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8006ce8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	0000      	movs	r0, r0
	...

08006cf8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static Jbool parse_number(J * const item, parse_buffer * const input_buffer)
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b099      	sub	sp, #100	; 0x64
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
    JNUMBER number = 0;
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	f04f 0400 	mov.w	r4, #0
 8006d0a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8006d12:	f7ff ffe7 	bl	8006ce4 <get_decimal_point>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <parse_number+0x36>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <parse_number+0x3a>
    {
        return false;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e104      	b.n	8006f3c <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8006d32:	2300      	movs	r3, #0
 8006d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d36:	e09f      	b.n	8006e78 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	6899      	ldr	r1, [r3, #8]
 8006d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d42:	440b      	add	r3, r1
 8006d44:	4413      	add	r3, r2
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	3b2b      	subs	r3, #43	; 0x2b
 8006d4a:	2b3a      	cmp	r3, #58	; 0x3a
 8006d4c:	f200 80a4 	bhi.w	8006e98 <parse_number+0x1a0>
 8006d50:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <parse_number+0x60>)
 8006d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d56:	bf00      	nop
 8006d58:	08006e45 	.word	0x08006e45
 8006d5c:	08006e99 	.word	0x08006e99
 8006d60:	08006e45 	.word	0x08006e45
 8006d64:	08006e63 	.word	0x08006e63
 8006d68:	08006e99 	.word	0x08006e99
 8006d6c:	08006e45 	.word	0x08006e45
 8006d70:	08006e45 	.word	0x08006e45
 8006d74:	08006e45 	.word	0x08006e45
 8006d78:	08006e45 	.word	0x08006e45
 8006d7c:	08006e45 	.word	0x08006e45
 8006d80:	08006e45 	.word	0x08006e45
 8006d84:	08006e45 	.word	0x08006e45
 8006d88:	08006e45 	.word	0x08006e45
 8006d8c:	08006e45 	.word	0x08006e45
 8006d90:	08006e45 	.word	0x08006e45
 8006d94:	08006e99 	.word	0x08006e99
 8006d98:	08006e99 	.word	0x08006e99
 8006d9c:	08006e99 	.word	0x08006e99
 8006da0:	08006e99 	.word	0x08006e99
 8006da4:	08006e99 	.word	0x08006e99
 8006da8:	08006e99 	.word	0x08006e99
 8006dac:	08006e99 	.word	0x08006e99
 8006db0:	08006e99 	.word	0x08006e99
 8006db4:	08006e99 	.word	0x08006e99
 8006db8:	08006e99 	.word	0x08006e99
 8006dbc:	08006e99 	.word	0x08006e99
 8006dc0:	08006e45 	.word	0x08006e45
 8006dc4:	08006e99 	.word	0x08006e99
 8006dc8:	08006e99 	.word	0x08006e99
 8006dcc:	08006e99 	.word	0x08006e99
 8006dd0:	08006e99 	.word	0x08006e99
 8006dd4:	08006e99 	.word	0x08006e99
 8006dd8:	08006e99 	.word	0x08006e99
 8006ddc:	08006e99 	.word	0x08006e99
 8006de0:	08006e99 	.word	0x08006e99
 8006de4:	08006e99 	.word	0x08006e99
 8006de8:	08006e99 	.word	0x08006e99
 8006dec:	08006e99 	.word	0x08006e99
 8006df0:	08006e99 	.word	0x08006e99
 8006df4:	08006e99 	.word	0x08006e99
 8006df8:	08006e99 	.word	0x08006e99
 8006dfc:	08006e99 	.word	0x08006e99
 8006e00:	08006e99 	.word	0x08006e99
 8006e04:	08006e99 	.word	0x08006e99
 8006e08:	08006e99 	.word	0x08006e99
 8006e0c:	08006e99 	.word	0x08006e99
 8006e10:	08006e99 	.word	0x08006e99
 8006e14:	08006e99 	.word	0x08006e99
 8006e18:	08006e99 	.word	0x08006e99
 8006e1c:	08006e99 	.word	0x08006e99
 8006e20:	08006e99 	.word	0x08006e99
 8006e24:	08006e99 	.word	0x08006e99
 8006e28:	08006e99 	.word	0x08006e99
 8006e2c:	08006e99 	.word	0x08006e99
 8006e30:	08006e99 	.word	0x08006e99
 8006e34:	08006e99 	.word	0x08006e99
 8006e38:	08006e99 	.word	0x08006e99
 8006e3c:	08006e99 	.word	0x08006e99
 8006e40:	08006e45 	.word	0x08006e45
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	6899      	ldr	r1, [r3, #8]
 8006e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e4e:	440b      	add	r3, r1
 8006e50:	4413      	add	r3, r2
 8006e52:	7819      	ldrb	r1, [r3, #0]
 8006e54:	f107 0208 	add.w	r2, r7, #8
 8006e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e5a:	4413      	add	r3, r2
 8006e5c:	460a      	mov	r2, r1
 8006e5e:	701a      	strb	r2, [r3, #0]
                break;
 8006e60:	e007      	b.n	8006e72 <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 8006e62:	f107 0208 	add.w	r2, r7, #8
 8006e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e68:	4413      	add	r3, r2
 8006e6a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006e6e:	701a      	strb	r2, [r3, #0]
                break;
 8006e70:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8006e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e74:	3301      	adds	r3, #1
 8006e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e7c:	d80e      	bhi.n	8006e9c <parse_number+0x1a4>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <parse_number+0x1a4>
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e8a:	441a      	add	r2, r3
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	f4ff af51 	bcc.w	8006d38 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8006e96:	e001      	b.n	8006e9c <parse_number+0x1a4>
                goto loop_end;
 8006e98:	bf00      	nop
 8006e9a:	e000      	b.n	8006e9e <parse_number+0x1a6>
loop_end:
 8006e9c:	bf00      	nop
    number_c_string[i] = '\0';
 8006e9e:	f107 0208 	add.w	r2, r7, #8
 8006ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ea4:	4413      	add	r3, r2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	701a      	strb	r2, [r3, #0]

    /* some platforms may not have locale support */
#if !MINIMIZE_CLIB_DEPENDENCIES
    number = strtod((const char*)number_c_string, (char**)&after_end);
#else
    number = JAtoN((const char*)number_c_string, (char**)&after_end);
 8006eaa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006eae:	f107 0308 	add.w	r3, r7, #8
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff fc53 	bl	8006760 <JAtoN>
 8006eba:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
#endif
    if (number_c_string == after_end)
 8006ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ec0:	f107 0308 	add.w	r3, r7, #8
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d101      	bne.n	8006ecc <parse_number+0x1d4>
    {
        return false; /* parse_error */
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e037      	b.n	8006f3c <parse_number+0x244>
    }

    item->valuenumber = number;
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006ed2:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8006ed6:	a31d      	add	r3, pc, #116	; (adr r3, 8006f4c <parse_number+0x254>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006ee0:	f7f9 fe20 	bl	8000b24 <__aeabi_dcmpge>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006ef0:	615a      	str	r2, [r3, #20]
 8006ef2:	e015      	b.n	8006f20 <parse_number+0x228>
    }
    else if (number <= INT_MIN)
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	4b13      	ldr	r3, [pc, #76]	; (8006f48 <parse_number+0x250>)
 8006efa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006efe:	f7f9 fe07 	bl	8000b10 <__aeabi_dcmple>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f0e:	615a      	str	r2, [r3, #20]
 8006f10:	e006      	b.n	8006f20 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 8006f12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f16:	f7f9 fe19 	bl	8000b4c <__aeabi_d2iz>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	615a      	str	r2, [r3, #20]
    }

    item->type = JNumber;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2208      	movs	r2, #8
 8006f24:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	f107 0208 	add.w	r2, r7, #8
 8006f32:	1a8a      	subs	r2, r1, r2
 8006f34:	441a      	add	r2, r3
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	609a      	str	r2, [r3, #8]
    return true;
 8006f3a:	2301      	movs	r3, #1
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3764      	adds	r7, #100	; 0x64
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd90      	pop	{r4, r7, pc}
 8006f44:	f3af 8000 	nop.w
 8006f48:	c1e00000 	.word	0xc1e00000
 8006f4c:	ffc00000 	.word	0xffc00000
 8006f50:	41dfffff 	.word	0x41dfffff

08006f54 <ensure>:
    Jbool format; /* is this print a formatted print */
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
    size_t newsize = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]

    if ((p == NULL) || (p->buffer == NULL))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <ensure+0x20>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <ensure+0x24>
    {
        return NULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e066      	b.n	8007046 <ensure+0xf2>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d007      	beq.n	8006f90 <ensure+0x3c>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d301      	bcc.n	8006f90 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e05a      	b.n	8007046 <ensure+0xf2>
    }

    if (needed > INT_MAX)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	da01      	bge.n	8006f9a <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e055      	b.n	8007046 <ensure+0xf2>
    }

    needed += p->offset + 1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d805      	bhi.n	8006fbc <ensure+0x68>
    {
        return p->buffer + p->offset;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	4413      	add	r3, r2
 8006fba:	e044      	b.n	8007046 <ensure+0xf2>
    }

    if (p->noalloc) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <ensure+0x74>
        return NULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	e03e      	b.n	8007046 <ensure+0xf2>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fce:	d308      	bcc.n	8006fe2 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	db03      	blt.n	8006fde <ensure+0x8a>
        {
            newsize = INT_MAX;
 8006fd6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	e004      	b.n	8006fe8 <ensure+0x94>
        }
        else
        {
            return NULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e031      	b.n	8007046 <ensure+0xf2>
        }
    }
    else
    {
        newsize = needed * 2;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
    }

    /* otherwise reallocate manually */
    newbuffer = (unsigned char*)_Malloc(newsize);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f001 ffff 	bl	8008fec <NoteMalloc>
 8006fee:	60b8      	str	r0, [r7, #8]
    if (!newbuffer)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10c      	bne.n	8007010 <ensure+0xbc>
    {
        _Free(p->buffer);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f002 f80c 	bl	8009018 <NoteFree>
        p->length = 0;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	605a      	str	r2, [r3, #4]
        p->buffer = NULL;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
        return NULL;
 800700c:	2300      	movs	r3, #0
 800700e:	e01a      	b.n	8007046 <ensure+0xf2>
    }
    if (newbuffer)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d008      	beq.n	8007028 <ensure+0xd4>
    {
        memcpy(newbuffer, p->buffer, p->offset + 1);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6819      	ldr	r1, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	3301      	adds	r3, #1
 8007020:	461a      	mov	r2, r3
 8007022:	68b8      	ldr	r0, [r7, #8]
 8007024:	f002 fb7e 	bl	8009724 <memcpy>
    }
    _Free(p->buffer);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f001 fff3 	bl	8009018 <NoteFree>

    p->length = newsize;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	4413      	add	r3, r2
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800704e:	b590      	push	{r4, r7, lr}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d013      	beq.n	8007088 <update_offset+0x3a>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00f      	beq.n	8007088 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	4413      	add	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689c      	ldr	r4, [r3, #8]
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7f9 f8b3 	bl	80001e4 <strlen>
 800707e:	4603      	mov	r3, r0
 8007080:	18e2      	adds	r2, r4, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	609a      	str	r2, [r3, #8]
 8007086:	e000      	b.n	800708a <update_offset+0x3c>
        return;
 8007088:	bf00      	nop
}
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	bd90      	pop	{r4, r7, pc}

08007090 <print_number>:

/* Render the number nicely from the given item into a string. */
static Jbool print_number(const J * const item, printbuffer * const output_buffer)
{
 8007090:	b590      	push	{r4, r7, lr}
 8007092:	b093      	sub	sp, #76	; 0x4c
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	63fb      	str	r3, [r7, #60]	; 0x3c
    JNUMBER d = item->valuenumber;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80070a4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int length = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26]; /* temporary buffer to print the number into */
    unsigned char decimal_point = get_decimal_point();
 80070b0:	f7ff fe18 	bl	8006ce4 <get_decimal_point>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (output_buffer == NULL)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <print_number+0x34>
    {
        return false;
 80070c0:	2300      	movs	r3, #0
 80070c2:	e074      	b.n	80071ae <print_number+0x11e>
    }

    /* This checks for NaN and Infinity */
    if ((d * 0) != 0)
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80070d0:	f7f9 faa2 	bl	8000618 <__aeabi_dmul>
 80070d4:	4603      	mov	r3, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	4618      	mov	r0, r3
 80070da:	4621      	mov	r1, r4
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	f7f9 fd00 	bl	8000ae8 <__aeabi_dcmpeq>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10e      	bne.n	800710c <print_number+0x7c>
    {
        char *nbuf = (char *) number_buffer;
 80070ee:	f107 0308 	add.w	r3, r7, #8
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
        strcpy(nbuf, "null");
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	4a30      	ldr	r2, [pc, #192]	; (80071b8 <print_number+0x128>)
 80070f8:	6810      	ldr	r0, [r2, #0]
 80070fa:	6018      	str	r0, [r3, #0]
 80070fc:	7912      	ldrb	r2, [r2, #4]
 80070fe:	711a      	strb	r2, [r3, #4]
        length = strlen(nbuf);
 8007100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007102:	f7f9 f86f 	bl	80001e4 <strlen>
 8007106:	4603      	mov	r3, r0
 8007108:	647b      	str	r3, [r7, #68]	; 0x44
 800710a:	e00e      	b.n	800712a <print_number+0x9a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
        }
#else
        char *nbuf = (char *) number_buffer;
 800710c:	f107 0308 	add.w	r3, r7, #8
 8007110:	62bb      	str	r3, [r7, #40]	; 0x28
        JNtoA(d, nbuf, -1);
 8007112:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007118:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800711c:	f001 fcfc 	bl	8008b18 <JNtoA>
        length = strlen(nbuf);
 8007120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007122:	f7f9 f85f 	bl	80001e4 <strlen>
 8007126:	4603      	mov	r3, r0
 8007128:	647b      	str	r3, [r7, #68]	; 0x44
#endif
    }

    /* conversion failed or buffer overrun occured */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800712a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712c:	2b00      	cmp	r3, #0
 800712e:	db02      	blt.n	8007136 <print_number+0xa6>
 8007130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007132:	2b19      	cmp	r3, #25
 8007134:	dd01      	ble.n	800713a <print_number+0xaa>
    {
        return false;
 8007136:	2300      	movs	r3, #0
 8007138:	e039      	b.n	80071ae <print_number+0x11e>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800713a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800713c:	3301      	adds	r3, #1
 800713e:	4619      	mov	r1, r3
 8007140:	6838      	ldr	r0, [r7, #0]
 8007142:	f7ff ff07 	bl	8006f54 <ensure>
 8007146:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8007148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <print_number+0xc2>
    {
        return false;
 800714e:	2300      	movs	r3, #0
 8007150:	e02d      	b.n	80071ae <print_number+0x11e>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8007152:	2300      	movs	r3, #0
 8007154:	643b      	str	r3, [r7, #64]	; 0x40
 8007156:	e01a      	b.n	800718e <print_number+0xfe>
    {
        if (number_buffer[i] == decimal_point)
 8007158:	f107 0208 	add.w	r2, r7, #8
 800715c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800715e:	4413      	add	r3, r2
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007166:	429a      	cmp	r2, r3
 8007168:	d105      	bne.n	8007176 <print_number+0xe6>
        {
            output_pointer[i] = '.';
 800716a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800716c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800716e:	4413      	add	r3, r2
 8007170:	222e      	movs	r2, #46	; 0x2e
 8007172:	701a      	strb	r2, [r3, #0]
            continue;
 8007174:	e008      	b.n	8007188 <print_number+0xf8>
        }

        output_pointer[i] = number_buffer[i];
 8007176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800717a:	4413      	add	r3, r2
 800717c:	f107 0108 	add.w	r1, r7, #8
 8007180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007182:	440a      	add	r2, r1
 8007184:	7812      	ldrb	r2, [r2, #0]
 8007186:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8007188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718a:	3301      	adds	r3, #1
 800718c:	643b      	str	r3, [r7, #64]	; 0x40
 800718e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007192:	429a      	cmp	r2, r3
 8007194:	d3e0      	bcc.n	8007158 <print_number+0xc8>
    }
    output_pointer[i] = '\0';
 8007196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800719a:	4413      	add	r3, r2
 800719c:	2200      	movs	r2, #0
 800719e:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a6:	441a      	add	r2, r3
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	609a      	str	r2, [r3, #8]

    return true;
 80071ac:	2301      	movs	r3, #1
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	374c      	adds	r7, #76	; 0x4c
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd90      	pop	{r4, r7, pc}
 80071b6:	bf00      	nop
 80071b8:	0800a140 	.word	0x0800a140

080071bc <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80071cc:	2300      	movs	r3, #0
 80071ce:	60bb      	str	r3, [r7, #8]
 80071d0:	e04c      	b.n	800726c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	4413      	add	r3, r2
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b2f      	cmp	r3, #47	; 0x2f
 80071dc:	d90f      	bls.n	80071fe <parse_hex4+0x42>
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4413      	add	r3, r2
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	2b39      	cmp	r3, #57	; 0x39
 80071e8:	d809      	bhi.n	80071fe <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4413      	add	r3, r2
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4413      	add	r3, r2
 80071f8:	3b30      	subs	r3, #48	; 0x30
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e02d      	b.n	800725a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4413      	add	r3, r2
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b40      	cmp	r3, #64	; 0x40
 8007208:	d90f      	bls.n	800722a <parse_hex4+0x6e>
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4413      	add	r3, r2
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b46      	cmp	r3, #70	; 0x46
 8007214:	d809      	bhi.n	800722a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4413      	add	r3, r2
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	3b37      	subs	r3, #55	; 0x37
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	e017      	b.n	800725a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4413      	add	r3, r2
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b60      	cmp	r3, #96	; 0x60
 8007234:	d90f      	bls.n	8007256 <parse_hex4+0x9a>
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4413      	add	r3, r2
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b66      	cmp	r3, #102	; 0x66
 8007240:	d809      	bhi.n	8007256 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4413      	add	r3, r2
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	3b57      	subs	r3, #87	; 0x57
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	e001      	b.n	800725a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8007256:	2300      	movs	r3, #0
 8007258:	e00c      	b.n	8007274 <parse_hex4+0xb8>
        }

        if (i < 3)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d802      	bhi.n	8007266 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	3301      	adds	r3, #1
 800726a:	60bb      	str	r3, [r7, #8]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b03      	cmp	r3, #3
 8007270:	d9af      	bls.n	80071d2 <parse_hex4+0x16>
        }
    }

    return h;
 8007272:	68fb      	ldr	r3, [r7, #12]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	; 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b05      	cmp	r3, #5
 80072b8:	f340 80b7 	ble.w	800742a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	3302      	adds	r3, #2
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff ff7b 	bl	80071bc <parse_hex4>
 80072c6:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80072ce:	d304      	bcc.n	80072da <utf16_literal_to_utf8+0x5a>
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80072d6:	f0c0 80aa 	bcc.w	800742e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80072e0:	d337      	bcc.n	8007352 <utf16_literal_to_utf8+0xd2>
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80072e8:	d233      	bcs.n	8007352 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	3306      	adds	r3, #6
 80072ee:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80072f4:	230c      	movs	r3, #12
 80072f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b05      	cmp	r3, #5
 8007302:	f340 8096 	ble.w	8007432 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b5c      	cmp	r3, #92	; 0x5c
 800730c:	f040 8093 	bne.w	8007436 <utf16_literal_to_utf8+0x1b6>
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	3301      	adds	r3, #1
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b75      	cmp	r3, #117	; 0x75
 8007318:	f040 808d 	bne.w	8007436 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	3302      	adds	r3, #2
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff ff4b 	bl	80071bc <parse_hex4>
 8007326:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800732e:	f0c0 8082 	bcc.w	8007436 <utf16_literal_to_utf8+0x1b6>
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8007338:	d27d      	bcs.n	8007436 <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	029a      	lsls	r2, r3, #10
 800733e:	4b42      	ldr	r3, [pc, #264]	; (8007448 <utf16_literal_to_utf8+0x1c8>)
 8007340:	4013      	ands	r3, r2
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007348:	4313      	orrs	r3, r2
 800734a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8007350:	e004      	b.n	800735c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8007352:	2306      	movs	r3, #6
 8007354:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	2b7f      	cmp	r3, #127	; 0x7f
 8007360:	d803      	bhi.n	800736a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007368:	e01f      	b.n	80073aa <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007370:	d206      	bcs.n	8007380 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8007372:	2302      	movs	r3, #2
 8007374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8007378:	23c0      	movs	r3, #192	; 0xc0
 800737a:	f887 3020 	strb.w	r3, [r7, #32]
 800737e:	e014      	b.n	80073aa <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007386:	d206      	bcs.n	8007396 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8007388:	2303      	movs	r3, #3
 800738a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800738e:	23e0      	movs	r3, #224	; 0xe0
 8007390:	f887 3020 	strb.w	r3, [r7, #32]
 8007394:	e009      	b.n	80073aa <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800739c:	d24d      	bcs.n	800743a <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800739e:	2304      	movs	r3, #4
 80073a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80073a4:	23f0      	movs	r3, #240	; 0xf0
 80073a6:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80073aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073ae:	3b01      	subs	r3, #1
 80073b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80073b4:	e015      	b.n	80073e2 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80073c8:	440b      	add	r3, r1
 80073ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	099b      	lsrs	r3, r3, #6
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80073d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80073dc:	3b01      	subs	r3, #1
 80073de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80073e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e5      	bne.n	80073b6 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80073ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d909      	bls.n	8007406 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	b2d9      	uxtb	r1, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80073fe:	430a      	orrs	r2, r1
 8007400:	b2d2      	uxtb	r2, r2
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	e007      	b.n	8007416 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	b2da      	uxtb	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007412:	b2d2      	uxtb	r2, r2
 8007414:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800741e:	441a      	add	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8007424:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007428:	e009      	b.n	800743e <utf16_literal_to_utf8+0x1be>
        goto fail;
 800742a:	bf00      	nop
 800742c:	e006      	b.n	800743c <utf16_literal_to_utf8+0x1bc>
        goto fail;
 800742e:	bf00      	nop
 8007430:	e004      	b.n	800743c <utf16_literal_to_utf8+0x1bc>
            goto fail;
 8007432:	bf00      	nop
 8007434:	e002      	b.n	800743c <utf16_literal_to_utf8+0x1bc>

fail:
 8007436:	bf00      	nop
 8007438:	e000      	b.n	800743c <utf16_literal_to_utf8+0x1bc>
        goto fail;
 800743a:	bf00      	nop
    return 0;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3728      	adds	r7, #40	; 0x28
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	000ffc00 	.word	0x000ffc00

0800744c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static Jbool parse_string(J * const item, parse_buffer * const input_buffer)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08a      	sub	sp, #40	; 0x28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	3301      	adds	r3, #1
 8007460:	4413      	add	r3, r2
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	3301      	adds	r3, #1
 800746e:	4413      	add	r3, r2
 8007470:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	4413      	add	r3, r2
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b22      	cmp	r3, #34	; 0x22
 8007488:	f040 816c 	bne.w	8007764 <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8007494:	e018      	b.n	80074c8 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b5c      	cmp	r3, #92	; 0x5c
 800749c:	d111      	bne.n	80074c2 <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	3301      	adds	r3, #1
 80074a2:	461a      	mov	r2, r3
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	f080 8159 	bcs.w	8007768 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	3301      	adds	r3, #1
 80074ba:	61bb      	str	r3, [r7, #24]
                input_end++;
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	3301      	adds	r3, #1
 80074c0:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	3301      	adds	r3, #1
 80074c6:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	6812      	ldr	r2, [r2, #0]
 80074ce:	1a9b      	subs	r3, r3, r2
 80074d0:	461a      	mov	r2, r3
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d203      	bcs.n	80074e2 <parse_string+0x96>
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b22      	cmp	r3, #34	; 0x22
 80074e0:	d1d9      	bne.n	8007496 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	1a9b      	subs	r3, r3, r2
 80074ea:	461a      	mov	r2, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	f080 813b 	bcs.w	800776c <parse_string+0x320>
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b22      	cmp	r3, #34	; 0x22
 80074fc:	f040 8136 	bne.w	800776c <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	6811      	ldr	r1, [r2, #0]
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	6892      	ldr	r2, [r2, #8]
 800750a:	440a      	add	r2, r1
 800750c:	1a9b      	subs	r3, r3, r2
 800750e:	461a      	mov	r2, r3
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)_Malloc(allocation_length + 1);	// trailing '\0'
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	3301      	adds	r3, #1
 800751a:	4618      	mov	r0, r3
 800751c:	f001 fd66 	bl	8008fec <NoteMalloc>
 8007520:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 8123 	beq.w	8007770 <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800752e:	e0fd      	b.n	800772c <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b5c      	cmp	r3, #92	; 0x5c
 8007536:	d008      	beq.n	800754a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8007538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800753a:	1c53      	adds	r3, r2, #1
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1c59      	adds	r1, r3, #1
 8007542:	60f9      	str	r1, [r7, #12]
 8007544:	7812      	ldrb	r2, [r2, #0]
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	e0f0      	b.n	800772c <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800754a:	2302      	movs	r3, #2
 800754c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800754e:	6a3a      	ldr	r2, [r7, #32]
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	f340 810d 	ble.w	8007774 <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	3301      	adds	r3, #1
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	3b22      	subs	r3, #34	; 0x22
 8007562:	2b53      	cmp	r3, #83	; 0x53
 8007564:	f200 8108 	bhi.w	8007778 <parse_string+0x32c>
 8007568:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <parse_string+0x124>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	080076fd 	.word	0x080076fd
 8007574:	08007779 	.word	0x08007779
 8007578:	08007779 	.word	0x08007779
 800757c:	08007779 	.word	0x08007779
 8007580:	08007779 	.word	0x08007779
 8007584:	08007779 	.word	0x08007779
 8007588:	08007779 	.word	0x08007779
 800758c:	08007779 	.word	0x08007779
 8007590:	08007779 	.word	0x08007779
 8007594:	08007779 	.word	0x08007779
 8007598:	08007779 	.word	0x08007779
 800759c:	08007779 	.word	0x08007779
 80075a0:	08007779 	.word	0x08007779
 80075a4:	080076fd 	.word	0x080076fd
 80075a8:	08007779 	.word	0x08007779
 80075ac:	08007779 	.word	0x08007779
 80075b0:	08007779 	.word	0x08007779
 80075b4:	08007779 	.word	0x08007779
 80075b8:	08007779 	.word	0x08007779
 80075bc:	08007779 	.word	0x08007779
 80075c0:	08007779 	.word	0x08007779
 80075c4:	08007779 	.word	0x08007779
 80075c8:	08007779 	.word	0x08007779
 80075cc:	08007779 	.word	0x08007779
 80075d0:	08007779 	.word	0x08007779
 80075d4:	08007779 	.word	0x08007779
 80075d8:	08007779 	.word	0x08007779
 80075dc:	08007779 	.word	0x08007779
 80075e0:	08007779 	.word	0x08007779
 80075e4:	08007779 	.word	0x08007779
 80075e8:	08007779 	.word	0x08007779
 80075ec:	08007779 	.word	0x08007779
 80075f0:	08007779 	.word	0x08007779
 80075f4:	08007779 	.word	0x08007779
 80075f8:	08007779 	.word	0x08007779
 80075fc:	08007779 	.word	0x08007779
 8007600:	08007779 	.word	0x08007779
 8007604:	08007779 	.word	0x08007779
 8007608:	08007779 	.word	0x08007779
 800760c:	08007779 	.word	0x08007779
 8007610:	08007779 	.word	0x08007779
 8007614:	08007779 	.word	0x08007779
 8007618:	08007779 	.word	0x08007779
 800761c:	08007779 	.word	0x08007779
 8007620:	08007779 	.word	0x08007779
 8007624:	08007779 	.word	0x08007779
 8007628:	08007779 	.word	0x08007779
 800762c:	08007779 	.word	0x08007779
 8007630:	08007779 	.word	0x08007779
 8007634:	08007779 	.word	0x08007779
 8007638:	08007779 	.word	0x08007779
 800763c:	08007779 	.word	0x08007779
 8007640:	08007779 	.word	0x08007779
 8007644:	08007779 	.word	0x08007779
 8007648:	08007779 	.word	0x08007779
 800764c:	08007779 	.word	0x08007779
 8007650:	08007779 	.word	0x08007779
 8007654:	08007779 	.word	0x08007779
 8007658:	080076fd 	.word	0x080076fd
 800765c:	08007779 	.word	0x08007779
 8007660:	08007779 	.word	0x08007779
 8007664:	08007779 	.word	0x08007779
 8007668:	08007779 	.word	0x08007779
 800766c:	08007779 	.word	0x08007779
 8007670:	080076c1 	.word	0x080076c1
 8007674:	08007779 	.word	0x08007779
 8007678:	08007779 	.word	0x08007779
 800767c:	08007779 	.word	0x08007779
 8007680:	080076cd 	.word	0x080076cd
 8007684:	08007779 	.word	0x08007779
 8007688:	08007779 	.word	0x08007779
 800768c:	08007779 	.word	0x08007779
 8007690:	08007779 	.word	0x08007779
 8007694:	08007779 	.word	0x08007779
 8007698:	08007779 	.word	0x08007779
 800769c:	08007779 	.word	0x08007779
 80076a0:	080076d9 	.word	0x080076d9
 80076a4:	08007779 	.word	0x08007779
 80076a8:	08007779 	.word	0x08007779
 80076ac:	08007779 	.word	0x08007779
 80076b0:	080076e5 	.word	0x080076e5
 80076b4:	08007779 	.word	0x08007779
 80076b8:	080076f1 	.word	0x080076f1
 80076bc:	0800770b 	.word	0x0800770b
            {
                case 'b':
                    *output_pointer++ = '\b';
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	60fa      	str	r2, [r7, #12]
 80076c6:	2208      	movs	r2, #8
 80076c8:	701a      	strb	r2, [r3, #0]
                    break;
 80076ca:	e02b      	b.n	8007724 <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	60fa      	str	r2, [r7, #12]
 80076d2:	220c      	movs	r2, #12
 80076d4:	701a      	strb	r2, [r3, #0]
                    break;
 80076d6:	e025      	b.n	8007724 <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	60fa      	str	r2, [r7, #12]
 80076de:	220a      	movs	r2, #10
 80076e0:	701a      	strb	r2, [r3, #0]
                    break;
 80076e2:	e01f      	b.n	8007724 <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	60fa      	str	r2, [r7, #12]
 80076ea:	220d      	movs	r2, #13
 80076ec:	701a      	strb	r2, [r3, #0]
                    break;
 80076ee:	e019      	b.n	8007724 <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	60fa      	str	r2, [r7, #12]
 80076f6:	2209      	movs	r2, #9
 80076f8:	701a      	strb	r2, [r3, #0]
                    break;
 80076fa:	e013      	b.n	8007724 <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	60fa      	str	r2, [r7, #12]
 8007702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007704:	7852      	ldrb	r2, [r2, #1]
 8007706:	701a      	strb	r2, [r3, #0]
                    break;
 8007708:	e00c      	b.n	8007724 <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800770a:	f107 030c 	add.w	r3, r7, #12
 800770e:	461a      	mov	r2, r3
 8007710:	6a39      	ldr	r1, [r7, #32]
 8007712:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007714:	f7ff fdb4 	bl	8007280 <utf16_literal_to_utf8>
 8007718:	4603      	mov	r3, r0
 800771a:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800771c:	7dfb      	ldrb	r3, [r7, #23]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d02c      	beq.n	800777c <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8007722:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007728:	4413      	add	r3, r2
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800772c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	429a      	cmp	r2, r3
 8007732:	f4ff aefd 	bcc.w	8007530 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	701a      	strb	r2, [r3, #0]

    item->type = JString;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2210      	movs	r2, #16
 8007740:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	6812      	ldr	r2, [r2, #0]
 800774e:	1a9b      	subs	r3, r3, r2
 8007750:	461a      	mov	r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	609a      	str	r2, [r3, #8]

    return true;
 8007760:	2301      	movs	r3, #1
 8007762:	e01d      	b.n	80077a0 <parse_string+0x354>
        goto fail;
 8007764:	bf00      	nop
 8007766:	e00a      	b.n	800777e <parse_string+0x332>
                    goto fail;
 8007768:	bf00      	nop
 800776a:	e008      	b.n	800777e <parse_string+0x332>

fail:
 800776c:	bf00      	nop
 800776e:	e006      	b.n	800777e <parse_string+0x332>
            goto fail; /* allocation failure */
 8007770:	bf00      	nop
 8007772:	e004      	b.n	800777e <parse_string+0x332>
                goto fail;
 8007774:	bf00      	nop
 8007776:	e002      	b.n	800777e <parse_string+0x332>
                    goto fail;
 8007778:	bf00      	nop
 800777a:	e000      	b.n	800777e <parse_string+0x332>
                        goto fail;
 800777c:	bf00      	nop
    if (output != NULL)
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <parse_string+0x33e>
    {
        _Free(output);
 8007784:	69f8      	ldr	r0, [r7, #28]
 8007786:	f001 fc47 	bl	8009018 <NoteFree>
    }

    if (input_pointer != NULL)
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	2b00      	cmp	r3, #0
 800778e:	d006      	beq.n	800779e <parse_string+0x352>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	6812      	ldr	r2, [r2, #0]
 8007796:	1a9b      	subs	r3, r3, r2
 8007798:	461a      	mov	r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	609a      	str	r2, [r3, #8]
    }

    return false;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3728      	adds	r7, #40	; 0x28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <htoa16>:

/* Convert a 16-bit number to 4 hex digits, null-terminating it */
void htoa16(uint16_t n, unsigned char *p)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	6039      	str	r1, [r7, #0]
 80077b2:	80fb      	strh	r3, [r7, #6]
    int i;
    for (i=0; i<4; i++)
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e01c      	b.n	80077f4 <htoa16+0x4c>
    {
        uint16_t nibble = (n >> 12) & 0xff;
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	0b1b      	lsrs	r3, r3, #12
 80077be:	817b      	strh	r3, [r7, #10]
        n = n << 4;
 80077c0:	88fb      	ldrh	r3, [r7, #6]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	80fb      	strh	r3, [r7, #6]
        if (nibble >= 10)
 80077c6:	897b      	ldrh	r3, [r7, #10]
 80077c8:	2b09      	cmp	r3, #9
 80077ca:	d908      	bls.n	80077de <htoa16+0x36>
            *p++ = 'A' + (nibble-10);
 80077cc:	897b      	ldrh	r3, [r7, #10]
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	1c59      	adds	r1, r3, #1
 80077d4:	6039      	str	r1, [r7, #0]
 80077d6:	3237      	adds	r2, #55	; 0x37
 80077d8:	b2d2      	uxtb	r2, r2
 80077da:	701a      	strb	r2, [r3, #0]
 80077dc:	e007      	b.n	80077ee <htoa16+0x46>
        else
            *p++ = '0' + nibble;
 80077de:	897b      	ldrh	r3, [r7, #10]
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	1c59      	adds	r1, r3, #1
 80077e6:	6039      	str	r1, [r7, #0]
 80077e8:	3230      	adds	r2, #48	; 0x30
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	dddf      	ble.n	80077ba <htoa16+0x12>
    }
    *p = '\0';
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static Jbool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800781e:	2300      	movs	r3, #0
 8007820:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8007826:	2300      	movs	r3, #0
 8007828:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <print_string_ptr+0x28>
    {
        return false;
 8007830:	2300      	movs	r3, #0
 8007832:	e0e1      	b.n	80079f8 <print_string_ptr+0x1ec>
    }

    /* empty string */
    if (input == NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d116      	bne.n	8007868 <print_string_ptr+0x5c>
    {
        output = ensure(output_buffer, 2);	// sizeof("\"\"")
 800783a:	2102      	movs	r1, #2
 800783c:	6838      	ldr	r0, [r7, #0]
 800783e:	f7ff fb89 	bl	8006f54 <ensure>
 8007842:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <print_string_ptr+0x42>
        {
            return false;
 800784a:	2300      	movs	r3, #0
 800784c:	e0d4      	b.n	80079f8 <print_string_ptr+0x1ec>
        }
		output[0] = '"';
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2222      	movs	r2, #34	; 0x22
 8007852:	701a      	strb	r2, [r3, #0]
		output[1] = '"';
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	3301      	adds	r3, #1
 8007858:	2222      	movs	r2, #34	; 0x22
 800785a:	701a      	strb	r2, [r3, #0]
		output[2] = '\0';
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	3302      	adds	r3, #2
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]

        return true;
 8007864:	2301      	movs	r3, #1
 8007866:	e0c7      	b.n	80079f8 <print_string_ptr+0x1ec>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	61fb      	str	r3, [r7, #28]
 800786c:	e01c      	b.n	80078a8 <print_string_ptr+0x9c>
    {
        switch (*input_pointer)
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b0d      	cmp	r3, #13
 8007874:	dc05      	bgt.n	8007882 <print_string_ptr+0x76>
 8007876:	2b0c      	cmp	r3, #12
 8007878:	da07      	bge.n	800788a <print_string_ptr+0x7e>
 800787a:	3b08      	subs	r3, #8
 800787c:	2b02      	cmp	r3, #2
 800787e:	d808      	bhi.n	8007892 <print_string_ptr+0x86>
 8007880:	e003      	b.n	800788a <print_string_ptr+0x7e>
 8007882:	2b22      	cmp	r3, #34	; 0x22
 8007884:	d001      	beq.n	800788a <print_string_ptr+0x7e>
 8007886:	2b5c      	cmp	r3, #92	; 0x5c
 8007888:	d103      	bne.n	8007892 <print_string_ptr+0x86>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	3301      	adds	r3, #1
 800788e:	617b      	str	r3, [r7, #20]
                break;
 8007890:	e007      	b.n	80078a2 <print_string_ptr+0x96>
            default:
                if (*input_pointer < 32)
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b1f      	cmp	r3, #31
 8007898:	d802      	bhi.n	80078a0 <print_string_ptr+0x94>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	3305      	adds	r3, #5
 800789e:	617b      	str	r3, [r7, #20]
                }
                break;
 80078a0:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	3301      	adds	r3, #1
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1de      	bne.n	800786e <print_string_ptr+0x62>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	461a      	mov	r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	4413      	add	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + 2);	// sizeof("\"\"")
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3302      	adds	r3, #2
 80078c2:	4619      	mov	r1, r3
 80078c4:	6838      	ldr	r0, [r7, #0]
 80078c6:	f7ff fb45 	bl	8006f54 <ensure>
 80078ca:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <print_string_ptr+0xca>
    {
        return false;
 80078d2:	2300      	movs	r3, #0
 80078d4:	e090      	b.n	80079f8 <print_string_ptr+0x1ec>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d117      	bne.n	800790c <print_string_ptr+0x100>
    {
        output[0] = '\"';
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2222      	movs	r2, #34	; 0x22
 80078e0:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	3301      	adds	r3, #1
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 ff1a 	bl	8009724 <memcpy>
        output[output_length + 1] = '\"';
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4413      	add	r3, r2
 80078f8:	2222      	movs	r2, #34	; 0x22
 80078fa:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3302      	adds	r3, #2
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4413      	add	r3, r2
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]

        return true;
 8007908:	2301      	movs	r3, #1
 800790a:	e075      	b.n	80079f8 <print_string_ptr+0x1ec>
    }

    output[0] = '\"';
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2222      	movs	r2, #34	; 0x22
 8007910:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	3301      	adds	r3, #1
 8007916:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	61fb      	str	r3, [r7, #28]
 800791c:	e05b      	b.n	80079d6 <print_string_ptr+0x1ca>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b1f      	cmp	r3, #31
 8007924:	d90c      	bls.n	8007940 <print_string_ptr+0x134>
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	2b22      	cmp	r3, #34	; 0x22
 800792c:	d008      	beq.n	8007940 <print_string_ptr+0x134>
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b5c      	cmp	r3, #92	; 0x5c
 8007934:	d004      	beq.n	8007940 <print_string_ptr+0x134>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	781a      	ldrb	r2, [r3, #0]
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	e044      	b.n	80079ca <print_string_ptr+0x1be>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	61ba      	str	r2, [r7, #24]
 8007946:	225c      	movs	r2, #92	; 0x5c
 8007948:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b0c      	cmp	r3, #12
 8007950:	d01b      	beq.n	800798a <print_string_ptr+0x17e>
 8007952:	2b0c      	cmp	r3, #12
 8007954:	dc06      	bgt.n	8007964 <print_string_ptr+0x158>
 8007956:	2b09      	cmp	r3, #9
 8007958:	d023      	beq.n	80079a2 <print_string_ptr+0x196>
 800795a:	2b0a      	cmp	r3, #10
 800795c:	d019      	beq.n	8007992 <print_string_ptr+0x186>
 800795e:	2b08      	cmp	r3, #8
 8007960:	d00f      	beq.n	8007982 <print_string_ptr+0x176>
 8007962:	e022      	b.n	80079aa <print_string_ptr+0x19e>
 8007964:	2b22      	cmp	r3, #34	; 0x22
 8007966:	d008      	beq.n	800797a <print_string_ptr+0x16e>
 8007968:	2b5c      	cmp	r3, #92	; 0x5c
 800796a:	d002      	beq.n	8007972 <print_string_ptr+0x166>
 800796c:	2b0d      	cmp	r3, #13
 800796e:	d014      	beq.n	800799a <print_string_ptr+0x18e>
 8007970:	e01b      	b.n	80079aa <print_string_ptr+0x19e>
            {
                case '\\':
                    *output_pointer = '\\';
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	225c      	movs	r2, #92	; 0x5c
 8007976:	701a      	strb	r2, [r3, #0]
                    break;
 8007978:	e027      	b.n	80079ca <print_string_ptr+0x1be>
                case '\"':
                    *output_pointer = '\"';
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	2222      	movs	r2, #34	; 0x22
 800797e:	701a      	strb	r2, [r3, #0]
                    break;
 8007980:	e023      	b.n	80079ca <print_string_ptr+0x1be>
                case '\b':
                    *output_pointer = 'b';
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2262      	movs	r2, #98	; 0x62
 8007986:	701a      	strb	r2, [r3, #0]
                    break;
 8007988:	e01f      	b.n	80079ca <print_string_ptr+0x1be>
                case '\f':
                    *output_pointer = 'f';
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2266      	movs	r2, #102	; 0x66
 800798e:	701a      	strb	r2, [r3, #0]
                    break;
 8007990:	e01b      	b.n	80079ca <print_string_ptr+0x1be>
                case '\n':
                    *output_pointer = 'n';
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	226e      	movs	r2, #110	; 0x6e
 8007996:	701a      	strb	r2, [r3, #0]
                    break;
 8007998:	e017      	b.n	80079ca <print_string_ptr+0x1be>
                case '\r':
                    *output_pointer = 'r';
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	2272      	movs	r2, #114	; 0x72
 800799e:	701a      	strb	r2, [r3, #0]
                    break;
 80079a0:	e013      	b.n	80079ca <print_string_ptr+0x1be>
                case '\t':
                    *output_pointer = 't';
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2274      	movs	r2, #116	; 0x74
 80079a6:	701a      	strb	r2, [r3, #0]
                    break;
 80079a8:	e00f      	b.n	80079ca <print_string_ptr+0x1be>
                default:
                    /* escape and print as unicode codepoint */
                    *output_pointer++ = 'u';
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	61ba      	str	r2, [r7, #24]
 80079b0:	2275      	movs	r2, #117	; 0x75
 80079b2:	701a      	strb	r2, [r3, #0]
                    htoa16(*input_pointer, output_pointer);
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	69b9      	ldr	r1, [r7, #24]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff fef3 	bl	80077a8 <htoa16>
                    output_pointer += 4;
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	3304      	adds	r3, #4
 80079c6:	61bb      	str	r3, [r7, #24]
                    break;
 80079c8:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	3301      	adds	r3, #1
 80079ce:	61fb      	str	r3, [r7, #28]
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	3301      	adds	r3, #1
 80079d4:	61bb      	str	r3, [r7, #24]
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d19f      	bne.n	800791e <print_string_ptr+0x112>
            }
        }
    }
    output[output_length + 1] = '\"';
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3301      	adds	r3, #1
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	4413      	add	r3, r2
 80079e6:	2222      	movs	r2, #34	; 0x22
 80079e8:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3302      	adds	r3, #2
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4413      	add	r3, r2
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]

    return true;
 80079f6:	2301      	movs	r3, #1
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static Jbool print_string(const J * const item, printbuffer * const p)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff fefb 	bl	800780c <print_string_ptr>
 8007a16:	4603      	mov	r3, r0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <buffer_skip_whitespace>:
static Jbool parse_object(J * const item, parse_buffer * const input_buffer);
static Jbool print_object(const J * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <buffer_skip_whitespace+0x16>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <buffer_skip_whitespace+0x24>
    {
        return NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e021      	b.n	8007a7e <buffer_skip_whitespace+0x5e>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00d      	beq.n	8007a66 <buffer_skip_whitespace+0x46>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689a      	ldr	r2, [r3, #8]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d207      	bcs.n	8007a66 <buffer_skip_whitespace+0x46>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	4413      	add	r3, r2
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d9e9      	bls.n	8007a3a <buffer_skip_whitespace+0x1a>
    }

    if (buffer->offset == buffer->length)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d104      	bne.n	8007a7c <buffer_skip_whitespace+0x5c>
    {
        buffer->offset--;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	1e5a      	subs	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8007a7c:	687b      	ldr	r3, [r7, #4]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d007      	beq.n	8007aaa <skip_utf8_bom+0x1e>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <skip_utf8_bom+0x1e>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <skip_utf8_bom+0x22>
    {
        return NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e01c      	b.n	8007ae8 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d018      	beq.n	8007ae6 <skip_utf8_bom+0x5a>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	1d1a      	adds	r2, r3, #4
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d211      	bcs.n	8007ae6 <skip_utf8_bom+0x5a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	4413      	add	r3, r2
 8007acc:	2203      	movs	r2, #3
 8007ace:	4908      	ldr	r1, [pc, #32]	; (8007af0 <skip_utf8_bom+0x64>)
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 ff40 	bl	8009956 <strncmp>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d104      	bne.n	8007ae6 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	1cda      	adds	r2, r3, #3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8007ae6:	687b      	ldr	r3, [r7, #4]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	0800a148 	.word	0x0800a148

08007af4 <JParseWithOpts>:

/* Parse an object - create a new root, and populate. */
N_CJSON_PUBLIC(J *) JParseWithOpts(const char *value, const char **return_parse_end, Jbool require_null_terminated)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08c      	sub	sp, #48	; 0x30
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
    parse_buffer buffer = { 0, 0, 0, 0 };
 8007b00:	f107 031c 	add.w	r3, r7, #28
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	605a      	str	r2, [r3, #4]
 8007b0a:	609a      	str	r2, [r3, #8]
 8007b0c:	60da      	str	r2, [r3, #12]
    J *item = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* reset error position */
    global_error.json = NULL;
 8007b12:	4b3e      	ldr	r3, [pc, #248]	; (8007c0c <JParseWithOpts+0x118>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8007b18:	4b3c      	ldr	r3, [pc, #240]	; (8007c0c <JParseWithOpts+0x118>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	605a      	str	r2, [r3, #4]

    if (value == NULL)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d03c      	beq.n	8007b9e <JParseWithOpts+0xaa>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	61fb      	str	r3, [r7, #28]
    buffer.length = strlen((const char*)value) + 1;		// Trailing '\0'
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7f8 fb5b 	bl	80001e4 <strlen>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	3301      	adds	r3, #1
 8007b32:	623b      	str	r3, [r7, #32]
    buffer.offset = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24

    item = JNew_Item();
 8007b38:	f7ff f87d 	bl	8006c36 <JNew_Item>
 8007b3c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (item == NULL) /* memory fail */
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d02e      	beq.n	8007ba2 <JParseWithOpts+0xae>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8007b44:	f107 031c 	add.w	r3, r7, #28
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff ff9f 	bl	8007a8c <skip_utf8_bom>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff ff65 	bl	8007a20 <buffer_skip_whitespace>
 8007b56:	4603      	mov	r3, r0
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b5c:	f000 f8d8 	bl	8007d10 <parse_value>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d01f      	beq.n	8007ba6 <JParseWithOpts+0xb2>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00e      	beq.n	8007b8a <JParseWithOpts+0x96>
    {
        buffer_skip_whitespace(&buffer);
 8007b6c:	f107 031c 	add.w	r3, r7, #28
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff ff55 	bl	8007a20 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8007b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d215      	bcs.n	8007baa <JParseWithOpts+0xb6>
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	4413      	add	r3, r2
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10f      	bne.n	8007baa <JParseWithOpts+0xb6>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d004      	beq.n	8007b9a <JParseWithOpts+0xa6>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	441a      	add	r2, r3
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	601a      	str	r2, [r3, #0]
    }

    return item;
 8007b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9c:	e031      	b.n	8007c02 <JParseWithOpts+0x10e>
        goto fail;
 8007b9e:	bf00      	nop
 8007ba0:	e004      	b.n	8007bac <JParseWithOpts+0xb8>
        goto fail;
 8007ba2:	bf00      	nop
 8007ba4:	e002      	b.n	8007bac <JParseWithOpts+0xb8>
        goto fail;
 8007ba6:	bf00      	nop
 8007ba8:	e000      	b.n	8007bac <JParseWithOpts+0xb8>

fail:
 8007baa:	bf00      	nop
    if (item != NULL)
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <JParseWithOpts+0xc4>
    {
        JDelete(item);
 8007bb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bb4:	f7ff f853 	bl	8006c5e <JDelete>
    }

    if (value != NULL)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d020      	beq.n	8007c00 <JParseWithOpts+0x10c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	617b      	str	r3, [r7, #20]
        local_error.position = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	61bb      	str	r3, [r7, #24]

        if (buffer.offset < buffer.length)
 8007bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d202      	bcs.n	8007bd4 <JParseWithOpts+0xe0>
        {
            local_error.position = buffer.offset;
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	61bb      	str	r3, [r7, #24]
 8007bd2:	e005      	b.n	8007be0 <JParseWithOpts+0xec>
        }
        else if (buffer.length > 0)
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <JParseWithOpts+0xec>
        {
            local_error.position = buffer.length - 1;
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	61bb      	str	r3, [r7, #24]
        }

        if (return_parse_end != NULL)
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <JParseWithOpts+0xfc>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	441a      	add	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8007bf0:	4b06      	ldr	r3, [pc, #24]	; (8007c0c <JParseWithOpts+0x118>)
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f107 0314 	add.w	r3, r7, #20
 8007bf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007bfc:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3730      	adds	r7, #48	; 0x30
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000042c 	.word	0x2000042c

08007c10 <JParse>:

/* Default options for JParse */
N_CJSON_PUBLIC(J *) JParse(const char *value)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
    return JParseWithOpts(value, 0, 0);
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff ff69 	bl	8007af4 <JParseWithOpts>
 8007c22:	4603      	mov	r3, r0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <print>:

#define cjson_min(a, b) ((a < b) ? a : b)

static unsigned char *print(const J * const item, Jbool format)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08a      	sub	sp, #40	; 0x28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
    static const size_t default_buffer_size = 128;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24

    memset(buffer, 0, sizeof(buffer));
 8007c3a:	f107 030c 	add.w	r3, r7, #12
 8007c3e:	2218      	movs	r2, #24
 8007c40:	2100      	movs	r1, #0
 8007c42:	4618      	mov	r0, r3
 8007c44:	f001 fd92 	bl	800976c <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) _Malloc(default_buffer_size);
 8007c48:	4b29      	ldr	r3, [pc, #164]	; (8007cf0 <print+0xc4>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f001 f9cd 	bl	8008fec <NoteMalloc>
 8007c52:	4603      	mov	r3, r0
 8007c54:	60fb      	str	r3, [r7, #12]
    buffer->length = default_buffer_size;
 8007c56:	4b26      	ldr	r3, [pc, #152]	; (8007cf0 <print+0xc4>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	613b      	str	r3, [r7, #16]
    buffer->format = format;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	623b      	str	r3, [r7, #32]
    if (buffer->buffer == NULL)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d02c      	beq.n	8007cc0 <print+0x94>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8007c66:	f107 030c 	add.w	r3, r7, #12
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f93d 	bl	8007eec <print_value>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d025      	beq.n	8007cc4 <print+0x98>
    {
        goto fail;
    }
    update_offset(buffer);
 8007c78:	f107 030c 	add.w	r3, r7, #12
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7ff f9e6 	bl	800704e <update_offset>

    /* copy the JSON over to a new buffer */
    printed = (unsigned char*) _Malloc(buffer->offset + 1);
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	3301      	adds	r3, #1
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 f9b0 	bl	8008fec <NoteMalloc>
 8007c8c:	6278      	str	r0, [r7, #36]	; 0x24
    if (printed == NULL)
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d019      	beq.n	8007cc8 <print+0x9c>
    {
        goto fail;
    }
    memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8007c94:	68f9      	ldr	r1, [r7, #12]
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	bf28      	it	cs
 8007ca0:	4613      	movcs	r3, r2
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ca6:	f001 fd3d 	bl	8009724 <memcpy>
    printed[buffer->offset] = '\0'; /* just to be sure */
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cae:	4413      	add	r3, r2
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	701a      	strb	r2, [r3, #0]

    /* free the buffer */
    _Free(buffer->buffer);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 f9ae 	bl	8009018 <NoteFree>

    return printed;
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	e012      	b.n	8007ce6 <print+0xba>
        goto fail;
 8007cc0:	bf00      	nop
 8007cc2:	e002      	b.n	8007cca <print+0x9e>
        goto fail;
 8007cc4:	bf00      	nop
 8007cc6:	e000      	b.n	8007cca <print+0x9e>
        goto fail;
 8007cc8:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <print+0xac>
    {
        _Free(buffer->buffer);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 f9a0 	bl	8009018 <NoteFree>
    }

    if (printed != NULL)
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <print+0xb8>
    {
        _Free(printed);
 8007cde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ce0:	f001 f99a 	bl	8009018 <NoteFree>
    }

    return NULL;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3728      	adds	r7, #40	; 0x28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	0800a440 	.word	0x0800a440

08007cf4 <JPrintUnformatted>:
{
    return (char*)print(item, true);
}

N_CJSON_PUBLIC(char *) JPrintUnformatted(const J *item)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false);
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff ff94 	bl	8007c2c <print>
 8007d04:	4603      	mov	r3, r0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static Jbool parse_value(J * const item, parse_buffer * const input_buffer)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <parse_value+0x18>
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <parse_value+0x1c>
    {
        return false; /* no input */
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e0d5      	b.n	8007ed8 <parse_value+0x1c8>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), c_null, c_null_len) == 0))
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d01e      	beq.n	8007d70 <parse_value+0x60>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	1d1a      	adds	r2, r3, #4
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d817      	bhi.n	8007d70 <parse_value+0x60>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	18d0      	adds	r0, r2, r3
 8007d4a:	4b65      	ldr	r3, [pc, #404]	; (8007ee0 <parse_value+0x1d0>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	4619      	mov	r1, r3
 8007d52:	f001 fe00 	bl	8009956 <strncmp>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d109      	bne.n	8007d70 <parse_value+0x60>
    {
        item->type = JNULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	1d1a      	adds	r2, r3, #4
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	609a      	str	r2, [r3, #8]
        return true;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e0b3      	b.n	8007ed8 <parse_value+0x1c8>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), c_false, c_false_len) == 0))
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d01e      	beq.n	8007db4 <parse_value+0xa4>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	1d5a      	adds	r2, r3, #5
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d817      	bhi.n	8007db4 <parse_value+0xa4>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	18d0      	adds	r0, r2, r3
 8007d8e:	4b55      	ldr	r3, [pc, #340]	; (8007ee4 <parse_value+0x1d4>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2205      	movs	r2, #5
 8007d94:	4619      	mov	r1, r3
 8007d96:	f001 fdde 	bl	8009956 <strncmp>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <parse_value+0xa4>
    {
        item->type = JFalse;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	1d5a      	adds	r2, r3, #5
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	609a      	str	r2, [r3, #8]
        return true;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e091      	b.n	8007ed8 <parse_value+0x1c8>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), c_true, c_true_len) == 0))
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d021      	beq.n	8007dfe <parse_value+0xee>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	1d1a      	adds	r2, r3, #4
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d81a      	bhi.n	8007dfe <parse_value+0xee>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	18d0      	adds	r0, r2, r3
 8007dd2:	4b45      	ldr	r3, [pc, #276]	; (8007ee8 <parse_value+0x1d8>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f001 fdbc 	bl	8009956 <strncmp>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10c      	bne.n	8007dfe <parse_value+0xee>
    {
        item->type = JTrue;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	1d1a      	adds	r2, r3, #4
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	609a      	str	r2, [r3, #8]
        return true;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e06c      	b.n	8007ed8 <parse_value+0x1c8>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d013      	beq.n	8007e2c <parse_value+0x11c>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d20d      	bcs.n	8007e2c <parse_value+0x11c>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	4413      	add	r3, r2
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b22      	cmp	r3, #34	; 0x22
 8007e1e:	d105      	bne.n	8007e2c <parse_value+0x11c>
    {
        return parse_string(item, input_buffer);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff fb12 	bl	800744c <parse_string>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	e055      	b.n	8007ed8 <parse_value+0x1c8>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d023      	beq.n	8007e7a <parse_value+0x16a>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d21d      	bcs.n	8007e7a <parse_value+0x16a>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	4413      	add	r3, r2
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b2d      	cmp	r3, #45	; 0x2d
 8007e4c:	d00f      	beq.n	8007e6e <parse_value+0x15e>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	4413      	add	r3, r2
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b2f      	cmp	r3, #47	; 0x2f
 8007e5c:	d90d      	bls.n	8007e7a <parse_value+0x16a>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	4413      	add	r3, r2
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b39      	cmp	r3, #57	; 0x39
 8007e6c:	d805      	bhi.n	8007e7a <parse_value+0x16a>
    {
        return parse_number(item, input_buffer);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7fe ff41 	bl	8006cf8 <parse_number>
 8007e76:	4603      	mov	r3, r0
 8007e78:	e02e      	b.n	8007ed8 <parse_value+0x1c8>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d013      	beq.n	8007ea8 <parse_value+0x198>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d20d      	bcs.n	8007ea8 <parse_value+0x198>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	4413      	add	r3, r2
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b5b      	cmp	r3, #91	; 0x5b
 8007e9a:	d105      	bne.n	8007ea8 <parse_value+0x198>
    {
        return parse_array(item, input_buffer);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f8ca 	bl	8008038 <parse_array>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	e017      	b.n	8007ed8 <parse_value+0x1c8>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d013      	beq.n	8007ed6 <parse_value+0x1c6>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d20d      	bcs.n	8007ed6 <parse_value+0x1c6>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b7b      	cmp	r3, #123	; 0x7b
 8007ec8:	d105      	bne.n	8007ed6 <parse_value+0x1c6>
    {
        return parse_object(item, input_buffer);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f9f4 	bl	80082ba <parse_object>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	e000      	b.n	8007ed8 <parse_value+0x1c8>
    }

    return false;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	2000000c 	.word	0x2000000c
 8007ee4:	20000010 	.word	0x20000010
 8007ee8:	20000014 	.word	0x20000014

08007eec <print_value>:

/* Render a value to text. */
static Jbool print_value(const J * const item, printbuffer * const output_buffer)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <print_value+0x1a>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <print_value+0x1e>
    {
        return false;
 8007f06:	2300      	movs	r3, #0
 8007f08:	e08b      	b.n	8008022 <print_value+0x136>
    }

    switch ((item->type) & 0xFF)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	d04a      	beq.n	8007faa <print_value+0xbe>
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	dc06      	bgt.n	8007f26 <print_value+0x3a>
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d034      	beq.n	8007f86 <print_value+0x9a>
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d00e      	beq.n	8007f3e <print_value+0x52>
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d01e      	beq.n	8007f62 <print_value+0x76>
 8007f24:	e07c      	b.n	8008020 <print_value+0x134>
 8007f26:	2b20      	cmp	r3, #32
 8007f28:	d06e      	beq.n	8008008 <print_value+0x11c>
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	dc02      	bgt.n	8007f34 <print_value+0x48>
 8007f2e:	2b10      	cmp	r3, #16
 8007f30:	d064      	beq.n	8007ffc <print_value+0x110>
 8007f32:	e075      	b.n	8008020 <print_value+0x134>
 8007f34:	2b40      	cmp	r3, #64	; 0x40
 8007f36:	d06d      	beq.n	8008014 <print_value+0x128>
 8007f38:	2b80      	cmp	r3, #128	; 0x80
 8007f3a:	d03c      	beq.n	8007fb6 <print_value+0xca>
 8007f3c:	e070      	b.n	8008020 <print_value+0x134>
    {
        case JNULL:
            output = ensure(output_buffer, c_null_len+1);
 8007f3e:	2105      	movs	r1, #5
 8007f40:	6838      	ldr	r0, [r7, #0]
 8007f42:	f7ff f807 	bl	8006f54 <ensure>
 8007f46:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <print_value+0x66>
            {
                return false;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	e067      	b.n	8008022 <print_value+0x136>
            }
            strcpy((char*)output, c_null);
 8007f52:	4b36      	ldr	r3, [pc, #216]	; (800802c <print_value+0x140>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4619      	mov	r1, r3
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f001 fcf4 	bl	8009946 <strcpy>
            return true;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e05f      	b.n	8008022 <print_value+0x136>

        case JFalse:
            output = ensure(output_buffer, c_false_len+1);
 8007f62:	2106      	movs	r1, #6
 8007f64:	6838      	ldr	r0, [r7, #0]
 8007f66:	f7fe fff5 	bl	8006f54 <ensure>
 8007f6a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <print_value+0x8a>
            {
                return false;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e055      	b.n	8008022 <print_value+0x136>
            }
            strcpy((char*)output, c_false);
 8007f76:	4b2e      	ldr	r3, [pc, #184]	; (8008030 <print_value+0x144>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f001 fce2 	bl	8009946 <strcpy>
            return true;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e04d      	b.n	8008022 <print_value+0x136>

        case JTrue:
            output = ensure(output_buffer, c_true_len+1);
 8007f86:	2105      	movs	r1, #5
 8007f88:	6838      	ldr	r0, [r7, #0]
 8007f8a:	f7fe ffe3 	bl	8006f54 <ensure>
 8007f8e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <print_value+0xae>
            {
                return false;
 8007f96:	2300      	movs	r3, #0
 8007f98:	e043      	b.n	8008022 <print_value+0x136>
            }
            strcpy((char*)output, c_true);
 8007f9a:	4b26      	ldr	r3, [pc, #152]	; (8008034 <print_value+0x148>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f001 fcd0 	bl	8009946 <strcpy>
            return true;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e03b      	b.n	8008022 <print_value+0x136>

        case JNumber:
            return print_number(item, output_buffer);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff f86f 	bl	8007090 <print_number>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	e035      	b.n	8008022 <print_value+0x136>

        case JRaw:
        {
            size_t raw_length = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <print_value+0xda>
            {
                return false;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e02d      	b.n	8008022 <print_value+0x136>
            }

            raw_length = strlen(item->valuestring) + 1;		// Trailing '\0';
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7f8 f90a 	bl	80001e4 <strlen>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	6838      	ldr	r0, [r7, #0]
 8007fda:	f7fe ffbb 	bl	8006f54 <ensure>
 8007fde:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <print_value+0xfe>
            {
                return false;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e01b      	b.n	8008022 <print_value+0x136>
            }
            memcpy(output, item->valuestring, raw_length);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f001 fb96 	bl	8009724 <memcpy>
            return true;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e012      	b.n	8008022 <print_value+0x136>
        }

        case JString:
            return print_string(item, output_buffer);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7ff fcfe 	bl	8007a00 <print_string>
 8008004:	4603      	mov	r3, r0
 8008006:	e00c      	b.n	8008022 <print_value+0x136>

        case JArray:
            return print_array(item, output_buffer);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f8cf 	bl	80081ae <print_array>
 8008010:	4603      	mov	r3, r0
 8008012:	e006      	b.n	8008022 <print_value+0x136>

        case JObject:
            return print_object(item, output_buffer);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa41 	bl	800849e <print_object>
 800801c:	4603      	mov	r3, r0
 800801e:	e000      	b.n	8008022 <print_value+0x136>

        default:
            return false;
 8008020:	2300      	movs	r3, #0
    }
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	2000000c 	.word	0x2000000c
 8008030:	20000010 	.word	0x20000010
 8008034:	20000014 	.word	0x20000014

08008038 <parse_array>:

/* Build an array from input text. */
static Jbool parse_array(J * const item, parse_buffer * const input_buffer)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* head of the linked list */
 8008042:	2300      	movs	r3, #0
 8008044:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008052:	d301      	bcc.n	8008058 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8008054:	2300      	movs	r3, #0
 8008056:	e0a6      	b.n	80081a6 <parse_array+0x16e>
    }
    input_buffer->depth++;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	4413      	add	r3, r2
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b5b      	cmp	r3, #91	; 0x5b
 8008070:	f040 808b 	bne.w	800818a <parse_array+0x152>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800807e:	6838      	ldr	r0, [r7, #0]
 8008080:	f7ff fcce 	bl	8007a20 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00d      	beq.n	80080a6 <parse_array+0x6e>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	429a      	cmp	r2, r3
 8008094:	d207      	bcs.n	80080a6 <parse_array+0x6e>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	4413      	add	r3, r2
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	2b5d      	cmp	r3, #93	; 0x5d
 80080a4:	d05e      	beq.n	8008164 <parse_array+0x12c>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d005      	beq.n	80080b8 <parse_array+0x80>
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d305      	bcc.n	80080c4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	1e5a      	subs	r2, r3, #1
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	609a      	str	r2, [r3, #8]
        goto fail;
 80080c2:	e069      	b.n	8008198 <parse_array+0x160>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	1e5a      	subs	r2, r3, #1
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item();
 80080ce:	f7fe fdb2 	bl	8006c36 <JNew_Item>
 80080d2:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d059      	beq.n	800818e <parse_array+0x156>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d104      	bne.n	80080ea <parse_array+0xb2>
        {
            /* start the linked list */
            current_item = head = new_item;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	613b      	str	r3, [r7, #16]
 80080e8:	e007      	b.n	80080fa <parse_array+0xc2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8008104:	6838      	ldr	r0, [r7, #0]
 8008106:	f7ff fc8b 	bl	8007a20 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6938      	ldr	r0, [r7, #16]
 800810e:	f7ff fdff 	bl	8007d10 <parse_value>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d03c      	beq.n	8008192 <parse_array+0x15a>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8008118:	6838      	ldr	r0, [r7, #0]
 800811a:	f7ff fc81 	bl	8007a20 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00d      	beq.n	8008140 <parse_array+0x108>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	429a      	cmp	r2, r3
 800812e:	d207      	bcs.n	8008140 <parse_array+0x108>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	4413      	add	r3, r2
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b2c      	cmp	r3, #44	; 0x2c
 800813e:	d0c6      	beq.n	80080ce <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d027      	beq.n	8008196 <parse_array+0x15e>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	429a      	cmp	r2, r3
 8008150:	d221      	bcs.n	8008196 <parse_array+0x15e>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	4413      	add	r3, r2
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	2b5d      	cmp	r3, #93	; 0x5d
 8008160:	d119      	bne.n	8008196 <parse_array+0x15e>
    {
        goto fail; /* expected end of array */
    }

success:
 8008162:	e000      	b.n	8008166 <parse_array+0x12e>
        goto success;
 8008164:	bf00      	nop
    input_buffer->depth--;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	1e5a      	subs	r2, r3, #1
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	60da      	str	r2, [r3, #12]

    item->type = JArray;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2220      	movs	r2, #32
 8008174:	60da      	str	r2, [r3, #12]
    item->child = head;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	609a      	str	r2, [r3, #8]

    return true;
 8008186:	2301      	movs	r3, #1
 8008188:	e00d      	b.n	80081a6 <parse_array+0x16e>
        goto fail;
 800818a:	bf00      	nop
 800818c:	e004      	b.n	8008198 <parse_array+0x160>
            goto fail; /* allocation failure */
 800818e:	bf00      	nop
 8008190:	e002      	b.n	8008198 <parse_array+0x160>
            goto fail; /* failed to parse value */
 8008192:	bf00      	nop
 8008194:	e000      	b.n	8008198 <parse_array+0x160>

fail:
 8008196:	bf00      	nop
    if (head != NULL)
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <parse_array+0x16c>
    {
        JDelete(head);
 800819e:	6978      	ldr	r0, [r7, #20]
 80081a0:	f7fe fd5d 	bl	8006c5e <JDelete>
    }

    return false;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <print_array>:

/* Render an array to text */
static Jbool print_array(const J * const item, printbuffer * const output_buffer)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b086      	sub	sp, #24
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	60fb      	str	r3, [r7, #12]
    J *current_element = item->child;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <print_array+0x22>
    {
        return false;
 80081cc:	2300      	movs	r3, #0
 80081ce:	e070      	b.n	80082b2 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 80081d0:	2101      	movs	r1, #1
 80081d2:	6838      	ldr	r0, [r7, #0]
 80081d4:	f7fe febe 	bl	8006f54 <ensure>
 80081d8:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <print_array+0x36>
    {
        return false;
 80081e0:	2300      	movs	r3, #0
 80081e2:	e066      	b.n	80082b2 <print_array+0x104>
    }

    *output_pointer = '[';
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	225b      	movs	r2, #91	; 0x5b
 80081e8:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80081fe:	e03d      	b.n	800827c <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6938      	ldr	r0, [r7, #16]
 8008204:	f7ff fe72 	bl	8007eec <print_value>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <print_array+0x64>
        {
            return false;
 800820e:	2300      	movs	r3, #0
 8008210:	e04f      	b.n	80082b2 <print_array+0x104>
        }
        update_offset(output_buffer);
 8008212:	6838      	ldr	r0, [r7, #0]
 8008214:	f7fe ff1b 	bl	800704e <update_offset>
        if (current_element->next)
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d02a      	beq.n	8008276 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <print_array+0x7e>
 8008228:	2302      	movs	r3, #2
 800822a:	e000      	b.n	800822e <print_array+0x80>
 800822c:	2301      	movs	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3301      	adds	r3, #1
 8008234:	4619      	mov	r1, r3
 8008236:	6838      	ldr	r0, [r7, #0]
 8008238:	f7fe fe8c 	bl	8006f54 <ensure>
 800823c:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <print_array+0x9a>
            {
                return false;
 8008244:	2300      	movs	r3, #0
 8008246:	e034      	b.n	80082b2 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	617a      	str	r2, [r7, #20]
 800824e:	222c      	movs	r2, #44	; 0x2c
 8008250:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	617a      	str	r2, [r7, #20]
 8008260:	2220      	movs	r2, #32
 8008262:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2200      	movs	r2, #0
 8008268:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	441a      	add	r2, r3
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1be      	bne.n	8008200 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8008282:	2102      	movs	r1, #2
 8008284:	6838      	ldr	r0, [r7, #0]
 8008286:	f7fe fe65 	bl	8006f54 <ensure>
 800828a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <print_array+0xe8>
    {
        return false;
 8008292:	2300      	movs	r3, #0
 8008294:	e00d      	b.n	80082b2 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	617a      	str	r2, [r7, #20]
 800829c:	225d      	movs	r2, #93	; 0x5d
 800829e:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2200      	movs	r2, #0
 80082a4:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	1e5a      	subs	r2, r3, #1
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	60da      	str	r2, [r3, #12]

    return true;
 80082b0:	2301      	movs	r3, #1
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <parse_object>:

/* Build an object from the text. */
static Jbool parse_object(J * const item, parse_buffer * const input_buffer)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b086      	sub	sp, #24
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* linked list head */
 80082c4:	2300      	movs	r3, #0
 80082c6:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082d4:	d301      	bcc.n	80082da <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80082d6:	2300      	movs	r3, #0
 80082d8:	e0dd      	b.n	8008496 <parse_object+0x1dc>
    }
    input_buffer->depth++;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 80c7 	beq.w	800847a <parse_object+0x1c0>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	f080 80c0 	bcs.w	800847a <parse_object+0x1c0>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	4413      	add	r3, r2
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b7b      	cmp	r3, #123	; 0x7b
 8008308:	f040 80b7 	bne.w	800847a <parse_object+0x1c0>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8008316:	6838      	ldr	r0, [r7, #0]
 8008318:	f7ff fb82 	bl	8007a20 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00e      	beq.n	8008340 <parse_object+0x86>
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	429a      	cmp	r2, r3
 800832c:	d208      	bcs.n	8008340 <parse_object+0x86>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	4413      	add	r3, r2
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b7d      	cmp	r3, #125	; 0x7d
 800833c:	f000 808a 	beq.w	8008454 <parse_object+0x19a>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <parse_object+0x98>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	689a      	ldr	r2, [r3, #8]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	429a      	cmp	r2, r3
 8008350:	d305      	bcc.n	800835e <parse_object+0xa4>
    {
        input_buffer->offset--;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	1e5a      	subs	r2, r3, #1
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	609a      	str	r2, [r3, #8]
        goto fail;
 800835c:	e094      	b.n	8008488 <parse_object+0x1ce>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	1e5a      	subs	r2, r3, #1
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item();
 8008368:	f7fe fc65 	bl	8006c36 <JNew_Item>
 800836c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 8084 	beq.w	800847e <parse_object+0x1c4>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <parse_object+0xcc>
        {
            /* start the linked list */
            current_item = head = new_item;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	613b      	str	r3, [r7, #16]
 8008384:	e007      	b.n	8008396 <parse_object+0xdc>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80083a0:	6838      	ldr	r0, [r7, #0]
 80083a2:	f7ff fb3d 	bl	8007a20 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6938      	ldr	r0, [r7, #16]
 80083aa:	f7ff f84f 	bl	800744c <parse_string>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d066      	beq.n	8008482 <parse_object+0x1c8>
        {
            goto fail; /* faile to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 80083b4:	6838      	ldr	r0, [r7, #0]
 80083b6:	f7ff fb33 	bl	8007a20 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	691a      	ldr	r2, [r3, #16]
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2200      	movs	r2, #0
 80083c6:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d055      	beq.n	800847a <parse_object+0x1c0>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d24f      	bcs.n	800847a <parse_object+0x1c0>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	4413      	add	r3, r2
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b3a      	cmp	r3, #58	; 0x3a
 80083e8:	d147      	bne.n	800847a <parse_object+0x1c0>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80083f4:	6838      	ldr	r0, [r7, #0]
 80083f6:	f7ff fb13 	bl	8007a20 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6938      	ldr	r0, [r7, #16]
 80083fe:	f7ff fc87 	bl	8007d10 <parse_value>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d03e      	beq.n	8008486 <parse_object+0x1cc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8008408:	6838      	ldr	r0, [r7, #0]
 800840a:	f7ff fb09 	bl	8007a20 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00d      	beq.n	8008430 <parse_object+0x176>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	429a      	cmp	r2, r3
 800841e:	d207      	bcs.n	8008430 <parse_object+0x176>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	4413      	add	r3, r2
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	2b2c      	cmp	r3, #44	; 0x2c
 800842e:	d09b      	beq.n	8008368 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d021      	beq.n	800847a <parse_object+0x1c0>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	429a      	cmp	r2, r3
 8008440:	d21b      	bcs.n	800847a <parse_object+0x1c0>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	4413      	add	r3, r2
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b7d      	cmp	r3, #125	; 0x7d
 8008450:	d113      	bne.n	800847a <parse_object+0x1c0>
    {
        goto fail; /* expected end of object */
    }

success:
 8008452:	e000      	b.n	8008456 <parse_object+0x19c>
        goto success; /* empty object */
 8008454:	bf00      	nop
    input_buffer->depth--;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	1e5a      	subs	r2, r3, #1
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	60da      	str	r2, [r3, #12]

    item->type = JObject;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2240      	movs	r2, #64	; 0x40
 8008464:	60da      	str	r2, [r3, #12]
    item->child = head;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	609a      	str	r2, [r3, #8]
    return true;
 8008476:	2301      	movs	r3, #1
 8008478:	e00d      	b.n	8008496 <parse_object+0x1dc>

fail:
 800847a:	bf00      	nop
 800847c:	e004      	b.n	8008488 <parse_object+0x1ce>
            goto fail; /* allocation failure */
 800847e:	bf00      	nop
 8008480:	e002      	b.n	8008488 <parse_object+0x1ce>
            goto fail; /* faile to parse name */
 8008482:	bf00      	nop
 8008484:	e000      	b.n	8008488 <parse_object+0x1ce>
            goto fail; /* failed to parse value */
 8008486:	bf00      	nop
    if (head != NULL)
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <parse_object+0x1da>
    {
        JDelete(head);
 800848e:	6978      	ldr	r0, [r7, #20]
 8008490:	f7fe fbe5 	bl	8006c5e <JDelete>
    }

    return false;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <print_object>:

/* Render an object to text. */
static Jbool print_object(const J * const item, printbuffer * const output_buffer)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b088      	sub	sp, #32
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
    J *current_item = item->child;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <print_object+0x22>
    {
        return false;
 80084bc:	2300      	movs	r3, #0
 80084be:	e109      	b.n	80086d4 <print_object+0x236>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <print_object+0x2e>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e000      	b.n	80084ce <print_object+0x30>
 80084cc:	2301      	movs	r3, #1
 80084ce:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	4619      	mov	r1, r3
 80084d6:	6838      	ldr	r0, [r7, #0]
 80084d8:	f7fe fd3c 	bl	8006f54 <ensure>
 80084dc:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <print_object+0x4a>
    {
        return false;
 80084e4:	2300      	movs	r3, #0
 80084e6:	e0f5      	b.n	80086d4 <print_object+0x236>
    }

    *output_pointer++ = '{';
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	61fa      	str	r2, [r7, #28]
 80084ee:	227b      	movs	r2, #123	; 0x7b
 80084f0:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	61fa      	str	r2, [r7, #28]
 800850a:	220a      	movs	r2, #10
 800850c:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	441a      	add	r2, r3
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	609a      	str	r2, [r3, #8]

    while (current_item)
 800851a:	e0a1      	b.n	8008660 <print_object+0x1c2>
    {
        if (output_buffer->format)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d022      	beq.n	800856a <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	4619      	mov	r1, r3
 800852a:	6838      	ldr	r0, [r7, #0]
 800852c:	f7fe fd12 	bl	8006f54 <ensure>
 8008530:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <print_object+0x9e>
            {
                return false;
 8008538:	2300      	movs	r3, #0
 800853a:	e0cb      	b.n	80086d4 <print_object+0x236>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	e007      	b.n	8008552 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	61fa      	str	r2, [r7, #28]
 8008548:	2209      	movs	r2, #9
 800854a:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	3301      	adds	r3, #1
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	429a      	cmp	r2, r3
 800855a:	d3f2      	bcc.n	8008542 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	441a      	add	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff f94b 	bl	800780c <print_string_ptr>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <print_object+0xe2>
        {
            return false;
 800857c:	2300      	movs	r3, #0
 800857e:	e0a9      	b.n	80086d4 <print_object+0x236>
        }
        update_offset(output_buffer);
 8008580:	6838      	ldr	r0, [r7, #0]
 8008582:	f7fe fd64 	bl	800704e <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <print_object+0xf4>
 800858e:	2302      	movs	r3, #2
 8008590:	e000      	b.n	8008594 <print_object+0xf6>
 8008592:	2301      	movs	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8008596:	68f9      	ldr	r1, [r7, #12]
 8008598:	6838      	ldr	r0, [r7, #0]
 800859a:	f7fe fcdb 	bl	8006f54 <ensure>
 800859e:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <print_object+0x10c>
        {
            return false;
 80085a6:	2300      	movs	r3, #0
 80085a8:	e094      	b.n	80086d4 <print_object+0x236>
        }
        *output_pointer++ = ':';
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	61fa      	str	r2, [r7, #28]
 80085b0:	223a      	movs	r2, #58	; 0x3a
 80085b2:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d004      	beq.n	80085c6 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	61fa      	str	r2, [r7, #28]
 80085c2:	2209      	movs	r2, #9
 80085c4:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	689a      	ldr	r2, [r3, #8]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	441a      	add	r2, r3
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	69b8      	ldr	r0, [r7, #24]
 80085d6:	f7ff fc89 	bl	8007eec <print_value>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <print_object+0x146>
        {
            return false;
 80085e0:	2300      	movs	r3, #0
 80085e2:	e077      	b.n	80086d4 <print_object+0x236>
        }
        update_offset(output_buffer);
 80085e4:	6838      	ldr	r0, [r7, #0]
 80085e6:	f7fe fd32 	bl	800704e <update_offset>

        /* print comma if not last */
        length = (size_t) ((output_buffer->format ? 1 : 0) + (current_item->next ? 1 : 0));
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	bf14      	ite	ne
 80085f2:	2301      	movne	r3, #1
 80085f4:	2300      	moveq	r3, #0
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	461a      	mov	r2, r3
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bf14      	ite	ne
 8008602:	2301      	movne	r3, #1
 8008604:	2300      	moveq	r3, #0
 8008606:	b2db      	uxtb	r3, r3
 8008608:	4413      	add	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3301      	adds	r3, #1
 8008610:	4619      	mov	r1, r3
 8008612:	6838      	ldr	r0, [r7, #0]
 8008614:	f7fe fc9e 	bl	8006f54 <ensure>
 8008618:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <print_object+0x186>
        {
            return false;
 8008620:	2300      	movs	r3, #0
 8008622:	e057      	b.n	80086d4 <print_object+0x236>
        }
        if (current_item->next)
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d004      	beq.n	8008636 <print_object+0x198>
        {
            *output_pointer++ = ',';
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	61fa      	str	r2, [r7, #28]
 8008632:	222c      	movs	r2, #44	; 0x2c
 8008634:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d004      	beq.n	8008648 <print_object+0x1aa>
        {
            *output_pointer++ = '\n';
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	61fa      	str	r2, [r7, #28]
 8008644:	220a      	movs	r2, #10
 8008646:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	2200      	movs	r2, #0
 800864c:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	689a      	ldr	r2, [r3, #8]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	441a      	add	r2, r3
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	f47f af5a 	bne.w	800851c <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d003      	beq.n	8008678 <print_object+0x1da>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	3301      	adds	r3, #1
 8008676:	e000      	b.n	800867a <print_object+0x1dc>
 8008678:	2302      	movs	r3, #2
 800867a:	4619      	mov	r1, r3
 800867c:	6838      	ldr	r0, [r7, #0]
 800867e:	f7fe fc69 	bl	8006f54 <ensure>
 8008682:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <print_object+0x1f0>
    {
        return false;
 800868a:	2300      	movs	r3, #0
 800868c:	e022      	b.n	80086d4 <print_object+0x236>
    }
    if (output_buffer->format)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d010      	beq.n	80086b8 <print_object+0x21a>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8008696:	2300      	movs	r3, #0
 8008698:	613b      	str	r3, [r7, #16]
 800869a:	e007      	b.n	80086ac <print_object+0x20e>
        {
            *output_pointer++ = '\t';
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	1c5a      	adds	r2, r3, #1
 80086a0:	61fa      	str	r2, [r7, #28]
 80086a2:	2209      	movs	r2, #9
 80086a4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	3301      	adds	r3, #1
 80086aa:	613b      	str	r3, [r7, #16]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d3f1      	bcc.n	800869c <print_object+0x1fe>
        }
    }
    *output_pointer++ = '}';
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	61fa      	str	r2, [r7, #28]
 80086be:	227d      	movs	r2, #125	; 0x7d
 80086c0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	2200      	movs	r2, #0
 80086c6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	1e5a      	subs	r2, r3, #1
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	60da      	str	r2, [r3, #12]

    return true;
 80086d2:	2301      	movs	r3, #1
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3720      	adds	r7, #32
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static J *get_object_item(const J * const object, const char * const name, const Jbool case_sensitive)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
    J *current_element = NULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d002      	beq.n	80086f8 <get_object_item+0x1c>
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <get_object_item+0x20>
    {
        return NULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	e026      	b.n	800874a <get_object_item+0x6e>
    }

    current_element = object->child;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d013      	beq.n	8008730 <get_object_item+0x54>
    {
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8008708:	e002      	b.n	8008710 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d018      	beq.n	8008748 <get_object_item+0x6c>
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	4619      	mov	r1, r3
 800871c:	68b8      	ldr	r0, [r7, #8]
 800871e:	f7f7 fd57 	bl	80001d0 <strcmp>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1f0      	bne.n	800870a <get_object_item+0x2e>
 8008728:	e00e      	b.n	8008748 <get_object_item+0x6c>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d008      	beq.n	8008748 <get_object_item+0x6c>
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	4619      	mov	r1, r3
 800873c:	68b8      	ldr	r0, [r7, #8]
 800873e:	f7fe f9d9 	bl	8006af4 <case_insensitive_strcmp>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1f0      	bne.n	800872a <get_object_item+0x4e>
        }
    }

    return current_element;
 8008748:	697b      	ldr	r3, [r7, #20]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <JGetObjectItem>:

N_CJSON_PUBLIC(J *) JGetObjectItem(const J * const object, const char * const string)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800875c:	2200      	movs	r2, #0
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff ffbb 	bl	80086dc <get_object_item>
 8008766:	4603      	mov	r3, r0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <suffix_object>:
    return JGetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(J *prev, J *item)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	605a      	str	r2, [r3, #4]
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static Jbool add_item_to_array(J *array, J *item)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
    J *child = NULL;
 800879c:	2300      	movs	r3, #0
 800879e:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL))
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <add_item_to_array+0x1a>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <add_item_to_array+0x1e>
    {
        return false;
 80087ac:	2300      	movs	r3, #0
 80087ae:	e015      	b.n	80087dc <add_item_to_array+0x4a>
    }

    child = array->child;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	60fb      	str	r3, [r7, #12]

    if (child == NULL)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d106      	bne.n	80087ca <add_item_to_array+0x38>
    {
        /* list is empty, start new one */
        array->child = item;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	609a      	str	r2, [r3, #8]
 80087c2:	e00a      	b.n	80087da <add_item_to_array+0x48>
    else
    {
        /* append to the end */
        while (child->next)
        {
            child = child->next;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	60fb      	str	r3, [r7, #12]
        while (child->next)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1f8      	bne.n	80087c4 <add_item_to_array+0x32>
        }
        suffix_object(child, item);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7ff ffcb 	bl	8008770 <suffix_object>
    }

    return true;
 80087da:	2301      	movs	r3, #1
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
    return (void*)string;
 80087ec:	687b      	ldr	r3, [r7, #4]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static Jbool add_item_to_object(J * const object, const char * const string, J * const item, const Jbool constant_key)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b086      	sub	sp, #24
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	607a      	str	r2, [r7, #4]
 8008806:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8008808:	2300      	movs	r3, #0
 800880a:	617b      	str	r3, [r7, #20]
    int new_type = JInvalid;
 800880c:	2300      	movs	r3, #0
 800880e:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <add_item_to_object+0x28>
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <add_item_to_object+0x28>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <add_item_to_object+0x2c>
    {
        return false;
 8008822:	2300      	movs	r3, #0
 8008824:	e034      	b.n	8008890 <add_item_to_object+0x96>
    }

    if (constant_key)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d009      	beq.n	8008840 <add_item_to_object+0x46>
    {
        new_key = (char*)cast_away_const(string);
 800882c:	68b8      	ldr	r0, [r7, #8]
 800882e:	f7ff ffd9 	bl	80087e4 <cast_away_const>
 8008832:	6178      	str	r0, [r7, #20]
        new_type = item->type | JStringIsConst;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800883c:	613b      	str	r3, [r7, #16]
 800883e:	e00d      	b.n	800885c <add_item_to_object+0x62>
    }
    else
    {
        new_key = (char*)Jstrdup((const unsigned char*)string);
 8008840:	68b8      	ldr	r0, [r7, #8]
 8008842:	f7fe f9c7 	bl	8006bd4 <Jstrdup>
 8008846:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <add_item_to_object+0x58>
        {
            return false;
 800884e:	2300      	movs	r3, #0
 8008850:	e01e      	b.n	8008890 <add_item_to_object+0x96>
        }

        new_type = item->type & ~JStringIsConst;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800885a:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & JStringIsConst) && (item->string != NULL))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008864:	2b00      	cmp	r3, #0
 8008866:	d108      	bne.n	800887a <add_item_to_object+0x80>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d004      	beq.n	800887a <add_item_to_object+0x80>
    {
        _Free(item->string);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	4618      	mov	r0, r3
 8008876:	f000 fbcf 	bl	8009018 <NoteFree>
    }

    item->string = new_key;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7ff ff82 	bl	8008792 <add_item_to_array>
 800888e:	4603      	mov	r3, r0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <JAddItemToObject>:

N_CJSON_PUBLIC(void) JAddItemToObject(J *object, const char *string, J *item)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
    add_item_to_object(object, string, item, false);
 80088a4:	2300      	movs	r3, #0
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f7ff ffa5 	bl	80087fa <add_item_to_object>
}
 80088b0:	bf00      	nop
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <JAddBoolToObject>:
    JDelete(false_item);
    return NULL;
}

N_CJSON_PUBLIC(J*) JAddBoolToObject(J * const object, const char * const name, const Jbool boolean)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
    J *bool_item = JCreateBool(boolean);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f850 	bl	800896a <JCreateBool>
 80088ca:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, bool_item, false))
 80088cc:	2300      	movs	r3, #0
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	68b9      	ldr	r1, [r7, #8]
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7ff ff91 	bl	80087fa <add_item_to_object>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <JAddBoolToObject+0x2a>
    {
        return bool_item;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	e003      	b.n	80088ea <JAddBoolToObject+0x32>
    }

    JDelete(bool_item);
 80088e2:	6978      	ldr	r0, [r7, #20]
 80088e4:	f7fe f9bb 	bl	8006c5e <JDelete>
    return NULL;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <JAddNumberToObject>:

N_CJSON_PUBLIC(J*) JAddNumberToObject(J * const object, const char * const name, const JNUMBER number)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b086      	sub	sp, #24
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	ed87 0b00 	vstr	d0, [r7]
    J *number_item = JCreateNumber(number);
 8008900:	ed97 0b00 	vldr	d0, [r7]
 8008904:	f000 f848 	bl	8008998 <JCreateNumber>
 8008908:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, false))
 800890a:	2300      	movs	r3, #0
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	68b9      	ldr	r1, [r7, #8]
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f7ff ff72 	bl	80087fa <add_item_to_object>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <JAddNumberToObject+0x2e>
    {
        return number_item;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	e003      	b.n	8008928 <JAddNumberToObject+0x36>
    }

    JDelete(number_item);
 8008920:	6978      	ldr	r0, [r7, #20]
 8008922:	f7fe f99c 	bl	8006c5e <JDelete>
    return NULL;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <JAddStringToObject>:

N_CJSON_PUBLIC(J*) JAddStringToObject(J * const object, const char * const name, const char * const string)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
    J *string_item = JCreateString(string);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f871 	bl	8008a24 <JCreateString>
 8008942:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, false))
 8008944:	2300      	movs	r3, #0
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	68b9      	ldr	r1, [r7, #8]
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f7ff ff55 	bl	80087fa <add_item_to_object>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <JAddStringToObject+0x2a>
    {
        return string_item;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	e003      	b.n	8008962 <JAddStringToObject+0x32>
    }

    JDelete(string_item);
 800895a:	6978      	ldr	r0, [r7, #20]
 800895c:	f7fe f97f 	bl	8006c5e <JDelete>
    return NULL;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <JCreateBool>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateBool(Jbool b)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item();
 8008972:	f7fe f960 	bl	8006c36 <JNew_Item>
 8008976:	60f8      	str	r0, [r7, #12]
    if(item)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d007      	beq.n	800898e <JCreateBool+0x24>
    {
        item->type = b ? JTrue : JFalse;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <JCreateBool+0x1e>
 8008984:	2202      	movs	r2, #2
 8008986:	e000      	b.n	800898a <JCreateBool+0x20>
 8008988:	2201      	movs	r2, #1
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800898e:	68fb      	ldr	r3, [r7, #12]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <JCreateNumber>:

N_CJSON_PUBLIC(J *) JCreateNumber(JNUMBER num)
{
 8008998:	b590      	push	{r4, r7, lr}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	ed87 0b00 	vstr	d0, [r7]
    J *item = JNew_Item();
 80089a2:	f7fe f948 	bl	8006c36 <JNew_Item>
 80089a6:	60f8      	str	r0, [r7, #12]
    if(item)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d02c      	beq.n	8008a08 <JCreateNumber+0x70>
    {
        item->type = JNumber;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2208      	movs	r2, #8
 80089b2:	60da      	str	r2, [r3, #12]
        item->valuenumber = num;
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80089ba:	e9c2 3406 	strd	r3, r4, [r2, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 80089be:	a317      	add	r3, pc, #92	; (adr r3, 8008a1c <JCreateNumber+0x84>)
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089c8:	f7f8 f8ac 	bl	8000b24 <__aeabi_dcmpge>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <JCreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80089d8:	615a      	str	r2, [r3, #20]
 80089da:	e015      	b.n	8008a08 <JCreateNumber+0x70>
        }
        else if (num <= INT_MIN)
 80089dc:	f04f 0200 	mov.w	r2, #0
 80089e0:	4b0d      	ldr	r3, [pc, #52]	; (8008a18 <JCreateNumber+0x80>)
 80089e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089e6:	f7f8 f893 	bl	8000b10 <__aeabi_dcmple>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <JCreateNumber+0x62>
        {
            item->valueint = INT_MIN;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089f6:	615a      	str	r2, [r3, #20]
 80089f8:	e006      	b.n	8008a08 <JCreateNumber+0x70>
        }
        else
        {
            item->valueint = (int)num;
 80089fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089fe:	f7f8 f8a5 	bl	8000b4c <__aeabi_d2iz>
 8008a02:	4602      	mov	r2, r0
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8008a08:	68fb      	ldr	r3, [r7, #12]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd90      	pop	{r4, r7, pc}
 8008a12:	bf00      	nop
 8008a14:	f3af 8000 	nop.w
 8008a18:	c1e00000 	.word	0xc1e00000
 8008a1c:	ffc00000 	.word	0xffc00000
 8008a20:	41dfffff 	.word	0x41dfffff

08008a24 <JCreateString>:

N_CJSON_PUBLIC(J *) JCreateString(const char *string)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item();
 8008a2c:	f7fe f903 	bl	8006c36 <JNew_Item>
 8008a30:	60f8      	str	r0, [r7, #12]
    if(item)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d011      	beq.n	8008a5c <JCreateString+0x38>
    {
        item->type = JString;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2210      	movs	r2, #16
 8008a3c:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)Jstrdup((const unsigned char*)string);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7fe f8c8 	bl	8006bd4 <Jstrdup>
 8008a44:	4602      	mov	r2, r0
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d104      	bne.n	8008a5c <JCreateString+0x38>
        {
            JDelete(item);
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7fe f903 	bl	8006c5e <JDelete>
            return NULL;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	e000      	b.n	8008a5e <JCreateString+0x3a>
        }
    }

    return item;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <JCreateObject>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateObject(void)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b082      	sub	sp, #8
 8008a6a:	af00      	add	r7, sp, #0
    J *item = JNew_Item();
 8008a6c:	f7fe f8e3 	bl	8006c36 <JNew_Item>
 8008a70:	6078      	str	r0, [r7, #4]
    if (item)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d002      	beq.n	8008a7e <JCreateObject+0x18>
    {
        item->type = JObject;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2240      	movs	r2, #64	; 0x40
 8008a7c:	60da      	str	r2, [r3, #12]
    }

    return item;
 8008a7e:	687b      	ldr	r3, [r7, #4]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <JIsString>:

    return (item->type & 0xFF) == JNumber;
}

N_CJSON_PUBLIC(Jbool) JIsString(const J * const item)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <JIsString+0x12>
    {
        return false;
 8008a96:	2300      	movs	r3, #0
 8008a98:	e007      	b.n	8008aaa <JIsString+0x22>
    }

    return (item->type & 0xFF) == JString;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b10      	cmp	r3, #16
 8008aa2:	bf0c      	ite	eq
 8008aa4:	2301      	moveq	r3, #1
 8008aa6:	2300      	movne	r3, #0
 8008aa8:	b2db      	uxtb	r3, r3
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <JIsNullString>:
		return 0.0;
	return JIsTrue(item);
}

// Return true if the object is valid and if the field is not present or if it's null
bool JIsNullString(J *rsp, const char *field) {
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	6039      	str	r1, [r7, #0]
	if (rsp == NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <JIsNullString+0x14>
		return false;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e01f      	b.n	8008b0a <JIsNullString+0x54>
	J *item = JGetObjectItem(rsp, field);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7ff fe40 	bl	8008752 <JGetObjectItem>
 8008ad2:	60f8      	str	r0, [r7, #12]
	if (item == NULL)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <JIsNullString+0x28>
		return true;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e015      	b.n	8008b0a <JIsNullString+0x54>
	if (!JIsString(item))
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f7ff ffd2 	bl	8008a88 <JIsString>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <JIsNullString+0x38>
		return false;
 8008aea:	2300      	movs	r3, #0
 8008aec:	e00d      	b.n	8008b0a <JIsNullString+0x54>
	if (item->valuestring == NULL)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <JIsNullString+0x44>
		return true;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e007      	b.n	8008b0a <JIsNullString+0x54>
	if (item->valuestring[0] == '\0')
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <JIsNullString+0x52>
		return true;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e000      	b.n	8008b0a <JIsNullString+0x54>
	return false;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	0000      	movs	r0, r0
 8008b14:	0000      	movs	r0, r0
	...

08008b18 <JNtoA>:
 */

#include "n_lib.h"

char * JNtoA(JNUMBER f, char * buf, int original_precision)
{
 8008b18:	b5b0      	push	{r4, r5, r7, lr}
 8008b1a:	b0a4      	sub	sp, #144	; 0x90
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	ed87 0b02 	vstr	d0, [r7, #8]
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	char * p = ptr;
 8008b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	char * p1;
	char c;
	long intPart;

	// For our low-SRAM devices we'd rather have this on the stack
	const JNUMBER rounders[JNTOA_PRECISION + 1] =
 8008b34:	4aa0      	ldr	r2, [pc, #640]	; (8008db8 <JNtoA+0x2a0>)
 8008b36:	f107 0318 	add.w	r3, r7, #24
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	2258      	movs	r2, #88	; 0x58
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fdf0 	bl	8009724 <memcpy>
			0.00000000005		// 10
		};

	// Check specifically for uncommon but bad floating point numbers that can't be converted
	uint8_t fbytes[8];
	memcpy(&fbytes, &f, sizeof(fbytes));
 8008b44:	f107 0310 	add.w	r3, r7, #16
 8008b48:	f107 0208 	add.w	r2, r7, #8
 8008b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b50:	e883 0003 	stmia.w	r3, {r0, r1}
	bool wasFF = true;
 8008b54:	2301      	movs	r3, #1
 8008b56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	int i;
	for (i=0; i<(int)sizeof(fbytes); i++)
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b5e:	e00c      	b.n	8008b7a <JNtoA+0x62>
		if (fbytes[i] != 0xff) wasFF = false;
 8008b60:	f107 0210 	add.w	r2, r7, #16
 8008b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b66:	4413      	add	r3, r2
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2bff      	cmp	r3, #255	; 0xff
 8008b6c:	d002      	beq.n	8008b74 <JNtoA+0x5c>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for (i=0; i<(int)sizeof(fbytes); i++)
 8008b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b76:	3301      	adds	r3, #1
 8008b78:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b7c:	2b07      	cmp	r3, #7
 8008b7e:	ddef      	ble.n	8008b60 <JNtoA+0x48>
	if (wasFF)
 8008b80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d005      	beq.n	8008b94 <JNtoA+0x7c>
		f = 0.0;
 8008b88:	f04f 0200 	mov.w	r2, #0
 8008b8c:	f04f 0300 	mov.w	r3, #0
 8008b90:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// check precision bounds
	int precision = original_precision;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	677b      	str	r3, [r7, #116]	; 0x74
	if (precision < 0 || precision > JNTOA_PRECISION)
 8008b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	db02      	blt.n	8008ba4 <JNtoA+0x8c>
 8008b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba0:	2b0a      	cmp	r3, #10
 8008ba2:	dd01      	ble.n	8008ba8 <JNtoA+0x90>
		precision = JNTOA_PRECISION;
 8008ba4:	230a      	movs	r3, #10
 8008ba6:	677b      	str	r3, [r7, #116]	; 0x74

	// sign stuff
	if (f < 0)
 8008ba8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	f04f 0300 	mov.w	r3, #0
 8008bb4:	f7f7 ffa2 	bl	8000afc <__aeabi_dcmplt>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00d      	beq.n	8008bda <JNtoA+0xc2>
	{
		f = -f;
 8008bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bc2:	4614      	mov	r4, r2
 8008bc4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008bc8:	e9c7 4502 	strd	r4, r5, [r7, #8]
		*ptr++ = '-';
 8008bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008bd6:	222d      	movs	r2, #45	; 0x2d
 8008bd8:	701a      	strb	r2, [r3, #0]
	}

	if (original_precision < 0)	 // negative precision == automatic precision guess
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	da4f      	bge.n	8008c80 <JNtoA+0x168>
	{
		if (f < 1.0) precision = 6;
 8008be0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	4b74      	ldr	r3, [pc, #464]	; (8008dbc <JNtoA+0x2a4>)
 8008bea:	f7f7 ff87 	bl	8000afc <__aeabi_dcmplt>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <JNtoA+0xe2>
 8008bf4:	2306      	movs	r3, #6
 8008bf6:	677b      	str	r3, [r7, #116]	; 0x74
 8008bf8:	e042      	b.n	8008c80 <JNtoA+0x168>
		else if (f < 10.0) precision = 5;
 8008bfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bfe:	f04f 0200 	mov.w	r2, #0
 8008c02:	4b6f      	ldr	r3, [pc, #444]	; (8008dc0 <JNtoA+0x2a8>)
 8008c04:	f7f7 ff7a 	bl	8000afc <__aeabi_dcmplt>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <JNtoA+0xfc>
 8008c0e:	2305      	movs	r3, #5
 8008c10:	677b      	str	r3, [r7, #116]	; 0x74
 8008c12:	e035      	b.n	8008c80 <JNtoA+0x168>
		else if (f < 100.0) precision = 4;
 8008c14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c18:	f04f 0200 	mov.w	r2, #0
 8008c1c:	4b69      	ldr	r3, [pc, #420]	; (8008dc4 <JNtoA+0x2ac>)
 8008c1e:	f7f7 ff6d 	bl	8000afc <__aeabi_dcmplt>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <JNtoA+0x116>
 8008c28:	2304      	movs	r3, #4
 8008c2a:	677b      	str	r3, [r7, #116]	; 0x74
 8008c2c:	e028      	b.n	8008c80 <JNtoA+0x168>
		else if (f < 1000.0) precision = 3;
 8008c2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	4b64      	ldr	r3, [pc, #400]	; (8008dc8 <JNtoA+0x2b0>)
 8008c38:	f7f7 ff60 	bl	8000afc <__aeabi_dcmplt>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <JNtoA+0x130>
 8008c42:	2303      	movs	r3, #3
 8008c44:	677b      	str	r3, [r7, #116]	; 0x74
 8008c46:	e01b      	b.n	8008c80 <JNtoA+0x168>
		else if (f < 10000.0) precision = 2;
 8008c48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c4c:	a356      	add	r3, pc, #344	; (adr r3, 8008da8 <JNtoA+0x290>)
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	f7f7 ff53 	bl	8000afc <__aeabi_dcmplt>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <JNtoA+0x14a>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	677b      	str	r3, [r7, #116]	; 0x74
 8008c60:	e00e      	b.n	8008c80 <JNtoA+0x168>
		else if (f < 100000.0) precision = 1;
 8008c62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c66:	a352      	add	r3, pc, #328	; (adr r3, 8008db0 <JNtoA+0x298>)
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f7f7 ff46 	bl	8000afc <__aeabi_dcmplt>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <JNtoA+0x164>
 8008c76:	2301      	movs	r3, #1
 8008c78:	677b      	str	r3, [r7, #116]	; 0x74
 8008c7a:	e001      	b.n	8008c80 <JNtoA+0x168>
		else precision = 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	677b      	str	r3, [r7, #116]	; 0x74
	}

	// round value according the precision
	if (precision)
 8008c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d011      	beq.n	8008caa <JNtoA+0x192>
		f += rounders[precision];
 8008c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008c8e:	4413      	add	r3, r2
 8008c90:	3b78      	subs	r3, #120	; 0x78
 8008c92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c96:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	f7f7 fb05 	bl	80002ac <__adddf3>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = (int) f;
 8008caa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	f7f7 ff4b 	bl	8000b4c <__aeabi_d2iz>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	f -= intPart;
 8008cbc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008cc0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008cc4:	f7f7 fc3e 	bl	8000544 <__aeabi_i2d>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4620      	mov	r0, r4
 8008cce:	4629      	mov	r1, r5
 8008cd0:	f7f7 faea 	bl	80002a8 <__aeabi_dsub>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 8008cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d107      	bne.n	8008cf4 <JNtoA+0x1dc>
		*ptr++ = '0';
 8008ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008cee:	2230      	movs	r2, #48	; 0x30
 8008cf0:	701a      	strb	r2, [r3, #0]
 8008cf2:	e04d      	b.n	8008d90 <JNtoA+0x278>
	else
	{
		// save start pointer
		p = ptr;
 8008cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		// convert (reverse order)
		while (intPart)
 8008cfc:	e01f      	b.n	8008d3e <JNtoA+0x226>
		{
			*p++ = '0' + intPart % 10;
 8008cfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d02:	4b32      	ldr	r3, [pc, #200]	; (8008dcc <JNtoA+0x2b4>)
 8008d04:	fb83 1302 	smull	r1, r3, r3, r2
 8008d08:	1099      	asrs	r1, r3, #2
 8008d0a:	17d3      	asrs	r3, r2, #31
 8008d0c:	1ac9      	subs	r1, r1, r3
 8008d0e:	460b      	mov	r3, r1
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	440b      	add	r3, r1
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	1ad1      	subs	r1, r2, r3
 8008d18:	b2ca      	uxtb	r2, r1
 8008d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d1e:	1c59      	adds	r1, r3, #1
 8008d20:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008d24:	3230      	adds	r2, #48	; 0x30
 8008d26:	b2d2      	uxtb	r2, r2
 8008d28:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8008d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d2e:	4a27      	ldr	r2, [pc, #156]	; (8008dcc <JNtoA+0x2b4>)
 8008d30:	fb82 1203 	smull	r1, r2, r2, r3
 8008d34:	1092      	asrs	r2, r2, #2
 8008d36:	17db      	asrs	r3, r3, #31
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		while (intPart)
 8008d3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1db      	bne.n	8008cfe <JNtoA+0x1e6>
		}

		// save end pos
		p1 = p;
 8008d46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d4a:	673b      	str	r3, [r7, #112]	; 0x70

		// reverse result
		while (p > ptr)
 8008d4c:	e017      	b.n	8008d7e <JNtoA+0x266>
		{
			c = *--p;
 8008d4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d52:	3b01      	subs	r3, #1
 8008d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			*p = *ptr;
 8008d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d66:	781a      	ldrb	r2, [r3, #0]
 8008d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d6c:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8008d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d78:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8008d7c:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8008d7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d8e1      	bhi.n	8008d4e <JNtoA+0x236>
		}

		// restore end pos
		ptr = p1;
 8008d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}

	// decimal part
	if (precision)
 8008d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d057      	beq.n	8008e46 <JNtoA+0x32e>
	{

		// place decimal point
		*ptr++ = '.';
 8008d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008da0:	222e      	movs	r2, #46	; 0x2e
 8008da2:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8008da4:	e04a      	b.n	8008e3c <JNtoA+0x324>
 8008da6:	bf00      	nop
 8008da8:	00000000 	.word	0x00000000
 8008dac:	40c38800 	.word	0x40c38800
 8008db0:	00000000 	.word	0x00000000
 8008db4:	40f86a00 	.word	0x40f86a00
 8008db8:	0800a188 	.word	0x0800a188
 8008dbc:	3ff00000 	.word	0x3ff00000
 8008dc0:	40240000 	.word	0x40240000
 8008dc4:	40590000 	.word	0x40590000
 8008dc8:	408f4000 	.word	0x408f4000
 8008dcc:	66666667 	.word	0x66666667
		{
			f *= 10.0;
 8008dd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dd4:	f04f 0200 	mov.w	r2, #0
 8008dd8:	4b35      	ldr	r3, [pc, #212]	; (8008eb0 <JNtoA+0x398>)
 8008dda:	f7f7 fc1d 	bl	8000618 <__aeabi_dmul>
 8008dde:	4603      	mov	r3, r0
 8008de0:	460c      	mov	r4, r1
 8008de2:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = (int) f;
 8008de6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008dea:	4618      	mov	r0, r3
 8008dec:	4621      	mov	r1, r4
 8008dee:	f7f7 fead 	bl	8000b4c <__aeabi_d2iz>
 8008df2:	4603      	mov	r3, r0
 8008df4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			// Invalid floating point numbers (specifically 0xffffff) end up at this point
			// with a c == 255 after the coercion
			if (c > 9) c = 0;
 8008df8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d902      	bls.n	8008e06 <JNtoA+0x2ee>
 8008e00:	2300      	movs	r3, #0
 8008e02:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			*ptr++ = '0' + c;
 8008e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e10:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8008e14:	3230      	adds	r2, #48	; 0x30
 8008e16:	b2d2      	uxtb	r2, r2
 8008e18:	701a      	strb	r2, [r3, #0]
			f -= c;
 8008e1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008e1e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7f7 fb8e 	bl	8000544 <__aeabi_i2d>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7f7 fa3a 	bl	80002a8 <__aeabi_dsub>
 8008e34:	4603      	mov	r3, r0
 8008e36:	460c      	mov	r4, r1
 8008e38:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 8008e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e3e:	1e5a      	subs	r2, r3, #1
 8008e40:	677a      	str	r2, [r7, #116]	; 0x74
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1c4      	bne.n	8008dd0 <JNtoA+0x2b8>
		}
	}

	// terminating zero
	*ptr = 0;
 8008e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	701a      	strb	r2, [r3, #0]

	// Remove trailing zero's if automatic precision
	if (NULL != strchr(buf, '.')) {
 8008e4e:	212e      	movs	r1, #46	; 0x2e
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fd6b 	bl	800992c <strchr>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d023      	beq.n	8008ea4 <JNtoA+0x38c>
		if (original_precision < 0) {
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	da20      	bge.n	8008ea4 <JNtoA+0x38c>
			--ptr;
 8008e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e66:	3b01      	subs	r3, #1
 8008e68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while (ptr > (buf+1) && *ptr == '0')
 8008e6c:	e006      	b.n	8008e7c <JNtoA+0x364>
				*ptr-- = 0;
 8008e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e72:	1e5a      	subs	r2, r3, #1
 8008e74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e78:	2200      	movs	r2, #0
 8008e7a:	701a      	strb	r2, [r3, #0]
			while (ptr > (buf+1) && *ptr == '0')
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d904      	bls.n	8008e92 <JNtoA+0x37a>
 8008e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b30      	cmp	r3, #48	; 0x30
 8008e90:	d0ed      	beq.n	8008e6e <JNtoA+0x356>
			if (*ptr == '.')
 8008e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b2e      	cmp	r3, #46	; 0x2e
 8008e9a:	d103      	bne.n	8008ea4 <JNtoA+0x38c>
				*ptr = 0;
 8008e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]
		}
	}

	return buf;
 8008ea4:	687b      	ldr	r3, [r7, #4]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3790      	adds	r7, #144	; 0x90
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bdb0      	pop	{r4, r5, r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	40240000 	.word	0x40240000

08008eb4 <NoteSetFn>:
        hookDelayMs = delayfn;
    if (hookGetMs == NULL)
        hookGetMs = millisfn;
}
// Set the debug output hook
void NoteSetFn(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn) {
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	603b      	str	r3, [r7, #0]
    hookMalloc = mallocfn;
 8008ec2:	4a09      	ldr	r2, [pc, #36]	; (8008ee8 <NoteSetFn+0x34>)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6013      	str	r3, [r2, #0]
    hookFree = freefn;
 8008ec8:	4a08      	ldr	r2, [pc, #32]	; (8008eec <NoteSetFn+0x38>)
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	6013      	str	r3, [r2, #0]
    hookDelayMs = delayfn;
 8008ece:	4a08      	ldr	r2, [pc, #32]	; (8008ef0 <NoteSetFn+0x3c>)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6013      	str	r3, [r2, #0]
    hookGetMs = millisfn;
 8008ed4:	4a07      	ldr	r2, [pc, #28]	; (8008ef4 <NoteSetFn+0x40>)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	6013      	str	r3, [r2, #0]
}
 8008eda:	bf00      	nop
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20000440 	.word	0x20000440
 8008eec:	20000444 	.word	0x20000444
 8008ef0:	20000448 	.word	0x20000448
 8008ef4:	2000044c 	.word	0x2000044c

08008ef8 <NoteSetFnSerial>:
    hookLockI2C = lockI2Cfn;
    hookUnlockI2C = unlockI2Cfn;
    hookLockNote = lockNotefn;
    hookUnlockNote = unlockNotefn;
}
void NoteSetFnSerial(serialResetFn resetfn, serialTransmitFn transmitfn, serialAvailableFn availfn, serialReceiveFn receivefn) {
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	603b      	str	r3, [r7, #0]
    hookActiveInterface = interfaceSerial;
 8008f06:	4b0d      	ldr	r3, [pc, #52]	; (8008f3c <NoteSetFnSerial+0x44>)
 8008f08:	2201      	movs	r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]

    hookSerialReset = resetfn;
 8008f0c:	4a0c      	ldr	r2, [pc, #48]	; (8008f40 <NoteSetFnSerial+0x48>)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6013      	str	r3, [r2, #0]
    hookSerialTransmit = transmitfn;
 8008f12:	4a0c      	ldr	r2, [pc, #48]	; (8008f44 <NoteSetFnSerial+0x4c>)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	6013      	str	r3, [r2, #0]
    hookSerialAvailable = availfn;
 8008f18:	4a0b      	ldr	r2, [pc, #44]	; (8008f48 <NoteSetFnSerial+0x50>)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6013      	str	r3, [r2, #0]
    hookSerialReceive = receivefn;
 8008f1e:	4a0b      	ldr	r2, [pc, #44]	; (8008f4c <NoteSetFnSerial+0x54>)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	6013      	str	r3, [r2, #0]

    notecardReset = serialNoteReset;
 8008f24:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <NoteSetFnSerial+0x58>)
 8008f26:	4a0b      	ldr	r2, [pc, #44]	; (8008f54 <NoteSetFnSerial+0x5c>)
 8008f28:	601a      	str	r2, [r3, #0]
    notecardTransaction = serialNoteTransaction;
 8008f2a:	4b0b      	ldr	r3, [pc, #44]	; (8008f58 <NoteSetFnSerial+0x60>)
 8008f2c:	4a0b      	ldr	r2, [pc, #44]	; (8008f5c <NoteSetFnSerial+0x64>)
 8008f2e:	601a      	str	r2, [r3, #0]
}
 8008f30:	bf00      	nop
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	20000450 	.word	0x20000450
 8008f40:	20000454 	.word	0x20000454
 8008f44:	20000458 	.word	0x20000458
 8008f48:	2000045c 	.word	0x2000045c
 8008f4c:	20000460 	.word	0x20000460
 8008f50:	20000464 	.word	0x20000464
 8008f54:	080095a5 	.word	0x080095a5
 8008f58:	20000468 	.word	0x20000468
 8008f5c:	080093bd 	.word	0x080093bd

08008f60 <NoteDebugln>:
    notecardReset = i2cNoteReset;
    notecardTransaction = i2cNoteTransaction;
}

// Runtime hook wrappers
void NoteDebugln(const char *line) {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
	NoteDebug(line);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f80b 	bl	8008f84 <NoteDebug>
	NoteDebug(c_newline);
 8008f6e:	4b04      	ldr	r3, [pc, #16]	; (8008f80 <NoteDebugln+0x20>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f806 	bl	8008f84 <NoteDebug>
}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	20000018 	.word	0x20000018

08008f84 <NoteDebug>:

void NoteDebug(const char *line) {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
#ifndef NOTE_NODEBUG
    if (hookDebugOutput != NULL)
 8008f8c:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <NoteDebug+0x20>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <NoteDebug+0x18>
        hookDebugOutput(line);
 8008f94:	4b03      	ldr	r3, [pc, #12]	; (8008fa4 <NoteDebug+0x20>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	4798      	blx	r3
#endif
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20000434 	.word	0x20000434

08008fa8 <NoteGetMs>:
        va_end(args);
        hookDebugOutput(line);
    }
#endif
}
long unsigned int NoteGetMs() {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
    if (hookGetMs == NULL)
 8008fac:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <NoteGetMs+0x1c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <NoteGetMs+0x10>
        return 0;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	e003      	b.n	8008fc0 <NoteGetMs+0x18>
    return hookGetMs();
 8008fb8:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <NoteGetMs+0x1c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4798      	blx	r3
 8008fbe:	4603      	mov	r3, r0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	2000044c 	.word	0x2000044c

08008fc8 <NoteDelayMs>:
void NoteDelayMs(uint32_t ms) {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
    if (hookDelayMs != NULL)
 8008fd0:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <NoteDelayMs+0x20>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <NoteDelayMs+0x18>
        hookDelayMs(ms);
 8008fd8:	4b03      	ldr	r3, [pc, #12]	; (8008fe8 <NoteDelayMs+0x20>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	4798      	blx	r3
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	20000448 	.word	0x20000448

08008fec <NoteMalloc>:
    hookDebugOutput(str);
    hookDebugOutput("\r\n");
    return hookMalloc(len);
}
#endif
void *NoteMalloc(size_t size) {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
    if (hookMalloc == NULL)
 8008ff4:	4b07      	ldr	r3, [pc, #28]	; (8009014 <NoteMalloc+0x28>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <NoteMalloc+0x14>
        return NULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e004      	b.n	800900a <NoteMalloc+0x1e>
#if NOTE_SHOW_MALLOC
	return malloc_show(size);
#else
    return hookMalloc(size);
 8009000:	4b04      	ldr	r3, [pc, #16]	; (8009014 <NoteMalloc+0x28>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
 8009008:	4603      	mov	r3, r0
#endif
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000440 	.word	0x20000440

08009018 <NoteFree>:
void NoteFree(void *p) {
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
    if (hookFree != NULL)
 8009020:	4b05      	ldr	r3, [pc, #20]	; (8009038 <NoteFree+0x20>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <NoteFree+0x18>
        hookFree(p);
 8009028:	4b03      	ldr	r3, [pc, #12]	; (8009038 <NoteFree+0x20>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	4798      	blx	r3
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	20000444 	.word	0x20000444

0800903c <NoteLockNote>:
}
void NoteUnlockI2C() {
    if (hookUnlockI2C != NULL)
        hookUnlockI2C();
}
void NoteLockNote() {
 800903c:	b580      	push	{r7, lr}
 800903e:	af00      	add	r7, sp, #0
    if (hookLockNote != NULL)
 8009040:	4b04      	ldr	r3, [pc, #16]	; (8009054 <NoteLockNote+0x18>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <NoteLockNote+0x12>
        hookLockNote();
 8009048:	4b02      	ldr	r3, [pc, #8]	; (8009054 <NoteLockNote+0x18>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4798      	blx	r3
}
 800904e:	bf00      	nop
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000438 	.word	0x20000438

08009058 <NoteUnlockNote>:
void NoteUnlockNote() {
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
    if (hookUnlockNote != NULL)
 800905c:	4b04      	ldr	r3, [pc, #16]	; (8009070 <NoteUnlockNote+0x18>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <NoteUnlockNote+0x12>
        hookUnlockNote();
 8009064:	4b02      	ldr	r3, [pc, #8]	; (8009070 <NoteUnlockNote+0x18>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4798      	blx	r3
}
 800906a:	bf00      	nop
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	2000043c 	.word	0x2000043c

08009074 <NoteSerialReset>:
void NoteSerialReset() {
 8009074:	b580      	push	{r7, lr}
 8009076:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReset != NULL)
 8009078:	4b06      	ldr	r3, [pc, #24]	; (8009094 <NoteSerialReset+0x20>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d106      	bne.n	800908e <NoteSerialReset+0x1a>
 8009080:	4b05      	ldr	r3, [pc, #20]	; (8009098 <NoteSerialReset+0x24>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <NoteSerialReset+0x1a>
        hookSerialReset();
 8009088:	4b03      	ldr	r3, [pc, #12]	; (8009098 <NoteSerialReset+0x24>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4798      	blx	r3
}
 800908e:	bf00      	nop
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20000450 	.word	0x20000450
 8009098:	20000454 	.word	0x20000454

0800909c <NoteSerialTransmit>:
void NoteSerialTransmit(uint8_t *text, size_t len, bool flush) {
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4613      	mov	r3, r2
 80090a8:	71fb      	strb	r3, [r7, #7]
    if (hookActiveInterface == interfaceSerial && hookSerialTransmit != NULL)
 80090aa:	4b09      	ldr	r3, [pc, #36]	; (80090d0 <NoteSerialTransmit+0x34>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d109      	bne.n	80090c6 <NoteSerialTransmit+0x2a>
 80090b2:	4b08      	ldr	r3, [pc, #32]	; (80090d4 <NoteSerialTransmit+0x38>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d005      	beq.n	80090c6 <NoteSerialTransmit+0x2a>
        hookSerialTransmit(text, len, flush);
 80090ba:	4b06      	ldr	r3, [pc, #24]	; (80090d4 <NoteSerialTransmit+0x38>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	79fa      	ldrb	r2, [r7, #7]
 80090c0:	68b9      	ldr	r1, [r7, #8]
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	4798      	blx	r3
}
 80090c6:	bf00      	nop
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000450 	.word	0x20000450
 80090d4:	20000458 	.word	0x20000458

080090d8 <NoteSerialAvailable>:
bool NoteSerialAvailable() {
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialAvailable != NULL)
 80090dc:	4b07      	ldr	r3, [pc, #28]	; (80090fc <NoteSerialAvailable+0x24>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d108      	bne.n	80090f6 <NoteSerialAvailable+0x1e>
 80090e4:	4b06      	ldr	r3, [pc, #24]	; (8009100 <NoteSerialAvailable+0x28>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d004      	beq.n	80090f6 <NoteSerialAvailable+0x1e>
        return hookSerialAvailable();
 80090ec:	4b04      	ldr	r3, [pc, #16]	; (8009100 <NoteSerialAvailable+0x28>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4798      	blx	r3
 80090f2:	4603      	mov	r3, r0
 80090f4:	e000      	b.n	80090f8 <NoteSerialAvailable+0x20>
    return false;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20000450 	.word	0x20000450
 8009100:	2000045c 	.word	0x2000045c

08009104 <NoteSerialReceive>:
char NoteSerialReceive() {
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReceive != NULL)
 8009108:	4b07      	ldr	r3, [pc, #28]	; (8009128 <NoteSerialReceive+0x24>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d108      	bne.n	8009122 <NoteSerialReceive+0x1e>
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <NoteSerialReceive+0x28>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d004      	beq.n	8009122 <NoteSerialReceive+0x1e>
        return hookSerialReceive();
 8009118:	4b04      	ldr	r3, [pc, #16]	; (800912c <NoteSerialReceive+0x28>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4798      	blx	r3
 800911e:	4603      	mov	r3, r0
 8009120:	e000      	b.n	8009124 <NoteSerialReceive+0x20>
    return 0;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	bd80      	pop	{r7, pc}
 8009128:	20000450 	.word	0x20000450
 800912c:	20000460 	.word	0x20000460

08009130 <NoteHardReset>:
    if (i2cMax > 127)
        i2cMax = 127;
    return i2cMax;
}

bool NoteHardReset() {
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
    if (notecardReset == NULL)
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <NoteHardReset+0x1c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <NoteHardReset+0x10>
        return "notecard not initialized";
 800913c:	2301      	movs	r3, #1
 800913e:	e003      	b.n	8009148 <NoteHardReset+0x18>
    return notecardReset();
 8009140:	4b02      	ldr	r3, [pc, #8]	; (800914c <NoteHardReset+0x1c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4798      	blx	r3
 8009146:	4603      	mov	r3, r0
}
 8009148:	4618      	mov	r0, r3
 800914a:	bd80      	pop	{r7, pc}
 800914c:	20000464 	.word	0x20000464

08009150 <NoteJSONTransaction>:
const char *NoteJSONTransaction(char *json, char **jsonResponse) {
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
    if (notecardTransaction == NULL)
 800915a:	4b08      	ldr	r3, [pc, #32]	; (800917c <NoteJSONTransaction+0x2c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <NoteJSONTransaction+0x16>
        return "notecard not initialized";
 8009162:	4b07      	ldr	r3, [pc, #28]	; (8009180 <NoteJSONTransaction+0x30>)
 8009164:	e005      	b.n	8009172 <NoteJSONTransaction+0x22>
    return notecardTransaction(json, jsonResponse);
 8009166:	4b05      	ldr	r3, [pc, #20]	; (800917c <NoteJSONTransaction+0x2c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	4798      	blx	r3
 8009170:	4603      	mov	r3, r0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000468 	.word	0x20000468
 8009180:	0800a1f0 	.word	0x0800a1f0

08009184 <errDoc>:

// Flag that gets set whenever an error occurs that should force a reset
static bool resetRequired = true;

// Create an error response document
static J *errDoc(const char *errmsg) {
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
    J *rspdoc = JCreateObject();
 800918c:	f7ff fc6b 	bl	8008a66 <JCreateObject>
 8009190:	60f8      	str	r0, [r7, #12]
    if (rspdoc != NULL)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d006      	beq.n	80091a6 <errDoc+0x22>
        JAddStringToObject(rspdoc, c_err, errmsg);
 8009198:	4b0c      	ldr	r3, [pc, #48]	; (80091cc <errDoc+0x48>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	4619      	mov	r1, r3
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7ff fbc5 	bl	8008930 <JAddStringToObject>
	if (suppressShowTransactions == 0) {
 80091a6:	4b0a      	ldr	r3, [pc, #40]	; (80091d0 <errDoc+0x4c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d108      	bne.n	80091c0 <errDoc+0x3c>
	    _Debug("{\"err\":\"");
 80091ae:	4809      	ldr	r0, [pc, #36]	; (80091d4 <errDoc+0x50>)
 80091b0:	f7ff fee8 	bl	8008f84 <NoteDebug>
		_Debug(errmsg);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff fee5 	bl	8008f84 <NoteDebug>
		_Debug("\"}\n");
 80091ba:	4807      	ldr	r0, [pc, #28]	; (80091d8 <errDoc+0x54>)
 80091bc:	f7ff fee2 	bl	8008f84 <NoteDebug>
	}
    return rspdoc;
 80091c0:	68fb      	ldr	r3, [r7, #12]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	2000001c 	.word	0x2000001c
 80091d0:	2000046c 	.word	0x2000046c
 80091d4:	0800a20c 	.word	0x0800a20c
 80091d8:	0800a218 	.word	0x0800a218

080091dc <NoteNewRequest>:
	suppressShowTransactions--;
}

// Lock for mutual exclusion, not only because access to the card must be serialized, but also because
// both C++ and ArduinoJSON call malloc() which is not a thread-safe operation.
J *NoteNewRequest(const char *request) {
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
    J *reqdoc = JCreateObject();
 80091e4:	f7ff fc3f 	bl	8008a66 <JCreateObject>
 80091e8:	60f8      	str	r0, [r7, #12]
    if (reqdoc != NULL)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d006      	beq.n	80091fe <NoteNewRequest+0x22>
        JAddStringToObject(reqdoc, c_req, request);
 80091f0:	4b05      	ldr	r3, [pc, #20]	; (8009208 <NoteNewRequest+0x2c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	4619      	mov	r1, r3
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f7ff fb99 	bl	8008930 <JAddStringToObject>
    return reqdoc;
 80091fe:	68fb      	ldr	r3, [r7, #12]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20000020 	.word	0x20000020

0800920c <NoteRequest>:

// Perform a request, FREEING THE REQUEST STRUCTURE, then returning true if success and
// false if either we ran into an error such as out-of-memory or if an error was returned
// from the transaction in the c_err field.
bool NoteRequest(J *req) {
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequest(NoteNewRequest("xxx"))
    if (req == NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <NoteRequest+0x12>
        return false;
 800921a:	2300      	movs	r3, #0
 800921c:	e01a      	b.n	8009254 <NoteRequest+0x48>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f81e 	bl	8009260 <NoteTransaction>
 8009224:	60f8      	str	r0, [r7, #12]
    if (rsp == NULL) {
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <NoteRequest+0x2a>
        JDelete(req);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7fd fd16 	bl	8006c5e <JDelete>
        return false;
 8009232:	2300      	movs	r3, #0
 8009234:	e00e      	b.n	8009254 <NoteRequest+0x48>
    }
    // Check for a transaction error, and exit
    bool success = JIsNullString(rsp, c_err);
 8009236:	4b09      	ldr	r3, [pc, #36]	; (800925c <NoteRequest+0x50>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4619      	mov	r1, r3
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f7ff fc3a 	bl	8008ab6 <JIsNullString>
 8009242:	4603      	mov	r3, r0
 8009244:	72fb      	strb	r3, [r7, #11]
    JDelete(req);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7fd fd09 	bl	8006c5e <JDelete>
    JDelete(rsp);
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f7fd fd06 	bl	8006c5e <JDelete>
    return success;
 8009252:	7afb      	ldrb	r3, [r7, #11]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	2000001c 	.word	0x2000001c

08009260 <NoteTransaction>:
    return rsp;
}

// Initiate a transaction to the card using reqdoc, and return the result in rspdoc.  This does
// NOT free the request structure.
J *NoteTransaction(J *req) {
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	; 0x28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]

    // If a reset of the module is required for any reason, do it now.
    // We must do this before acquiring lock.
    if (resetRequired) {
 8009268:	4b35      	ldr	r3, [pc, #212]	; (8009340 <NoteTransaction+0xe0>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d009      	beq.n	8009284 <NoteTransaction+0x24>
        if (!NoteReset())
 8009270:	f000 f87c 	bl	800936c <NoteReset>
 8009274:	4603      	mov	r3, r0
 8009276:	f083 0301 	eor.w	r3, r3, #1
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <NoteTransaction+0x24>
            return NULL;
 8009280:	2300      	movs	r3, #0
 8009282:	e058      	b.n	8009336 <NoteTransaction+0xd6>
    }

    // Lock
    _LockNote();
 8009284:	f7ff feda 	bl	800903c <NoteLockNote>

    // Serialize the JSON requet
    char *json = JPrintUnformatted(req);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7fe fd33 	bl	8007cf4 <JPrintUnformatted>
 800928e:	6278      	str	r0, [r7, #36]	; 0x24
    if (json == NULL) {
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	2b00      	cmp	r3, #0
 8009294:	d107      	bne.n	80092a6 <NoteTransaction+0x46>
        J *rsp = errDoc(ERRSTR("can't convert to JSON",c_bad));
 8009296:	482b      	ldr	r0, [pc, #172]	; (8009344 <NoteTransaction+0xe4>)
 8009298:	f7ff ff74 	bl	8009184 <errDoc>
 800929c:	6138      	str	r0, [r7, #16]
        _UnlockNote();
 800929e:	f7ff fedb 	bl	8009058 <NoteUnlockNote>
        return rsp;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	e047      	b.n	8009336 <NoteTransaction+0xd6>
    }
    
	if (suppressShowTransactions == 0) {
 80092a6:	4b28      	ldr	r3, [pc, #160]	; (8009348 <NoteTransaction+0xe8>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d102      	bne.n	80092b4 <NoteTransaction+0x54>
	    _Debugln(json);
 80092ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092b0:	f7ff fe56 	bl	8008f60 <NoteDebugln>
	}

    // Pertform the transaction
    char *responseJSON;
    const char *errStr = _Transaction(json, &responseJSON);
 80092b4:	f107 030c 	add.w	r3, r7, #12
 80092b8:	4619      	mov	r1, r3
 80092ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092bc:	f7ff ff48 	bl	8009150 <NoteJSONTransaction>
 80092c0:	6238      	str	r0, [r7, #32]

    // Free the json
    JFree(json);
 80092c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092c4:	f7fd fcac 	bl	8006c20 <JFree>

    // If error, queue up a reset
    if (errStr != NULL) {
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d009      	beq.n	80092e2 <NoteTransaction+0x82>
		NoteResetRequired();
 80092ce:	f000 f841 	bl	8009354 <NoteResetRequired>
        J *rsp = errDoc(errStr);
 80092d2:	6a38      	ldr	r0, [r7, #32]
 80092d4:	f7ff ff56 	bl	8009184 <errDoc>
 80092d8:	6178      	str	r0, [r7, #20]
        _UnlockNote();
 80092da:	f7ff febd 	bl	8009058 <NoteUnlockNote>
        return rsp;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	e029      	b.n	8009336 <NoteTransaction+0xd6>
    }

    // Parse the reply from the card on the input stream
    J *rspdoc = JParse(responseJSON);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fe fc93 	bl	8007c10 <JParse>
 80092ea:	61f8      	str	r0, [r7, #28]
    if (rspdoc == NULL) {
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d112      	bne.n	8009318 <NoteTransaction+0xb8>
        _Debug("invalid JSON: ");
 80092f2:	4816      	ldr	r0, [pc, #88]	; (800934c <NoteTransaction+0xec>)
 80092f4:	f7ff fe46 	bl	8008f84 <NoteDebug>
		_Debug(responseJSON);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff fe42 	bl	8008f84 <NoteDebug>
        _Free(responseJSON);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff fe88 	bl	8009018 <NoteFree>
        J *rsp = errDoc(ERRSTR("unrecognized response from card",c_bad));
 8009308:	4811      	ldr	r0, [pc, #68]	; (8009350 <NoteTransaction+0xf0>)
 800930a:	f7ff ff3b 	bl	8009184 <errDoc>
 800930e:	61b8      	str	r0, [r7, #24]
        _UnlockNote();
 8009310:	f7ff fea2 	bl	8009058 <NoteUnlockNote>
        return rsp;
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	e00e      	b.n	8009336 <NoteTransaction+0xd6>
    }

    // Debug
	if (suppressShowTransactions == 0) {
 8009318:	4b0b      	ldr	r3, [pc, #44]	; (8009348 <NoteTransaction+0xe8>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d103      	bne.n	8009328 <NoteTransaction+0xc8>
	    _Debugln(responseJSON);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff fe1c 	bl	8008f60 <NoteDebugln>
	}

    // Discard the buffer now that it's parsed
    _Free(responseJSON);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fe74 	bl	8009018 <NoteFree>

    // Unlock
    _UnlockNote();
 8009330:	f7ff fe92 	bl	8009058 <NoteUnlockNote>

    // Done
    return rspdoc;
 8009334:	69fb      	ldr	r3, [r7, #28]
    
}
 8009336:	4618      	mov	r0, r3
 8009338:	3728      	adds	r7, #40	; 0x28
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000024 	.word	0x20000024
 8009344:	0800a21c 	.word	0x0800a21c
 8009348:	2000046c 	.word	0x2000046c
 800934c:	0800a234 	.word	0x0800a234
 8009350:	0800a244 	.word	0x0800a244

08009354 <NoteResetRequired>:

// Mark that a reset will be required before doing further I/O on a given port
void NoteResetRequired() {
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0
    resetRequired = true;
 8009358:	4b03      	ldr	r3, [pc, #12]	; (8009368 <NoteResetRequired+0x14>)
 800935a:	2201      	movs	r2, #1
 800935c:	701a      	strb	r2, [r3, #0]
}
 800935e:	bf00      	nop
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	20000024 	.word	0x20000024

0800936c <NoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool NoteReset() {
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
    _LockNote();
 8009370:	f7ff fe64 	bl	800903c <NoteLockNote>
    resetRequired = !_Reset();
 8009374:	f7ff fedc 	bl	8009130 <NoteHardReset>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	bf14      	ite	ne
 800937e:	2301      	movne	r3, #1
 8009380:	2300      	moveq	r3, #0
 8009382:	b2db      	uxtb	r3, r3
 8009384:	f083 0301 	eor.w	r3, r3, #1
 8009388:	b2db      	uxtb	r3, r3
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	b2da      	uxtb	r2, r3
 8009390:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <NoteReset+0x4c>)
 8009392:	701a      	strb	r2, [r3, #0]
    _UnlockNote();
 8009394:	f7ff fe60 	bl	8009058 <NoteUnlockNote>
    return !resetRequired;
 8009398:	4b07      	ldr	r3, [pc, #28]	; (80093b8 <NoteReset+0x4c>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	bf14      	ite	ne
 80093a0:	2301      	movne	r3, #1
 80093a2:	2300      	moveq	r3, #0
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	f083 0301 	eor.w	r3, r3, #1
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	b2db      	uxtb	r3, r3
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20000024 	.word	0x20000024

080093bc <serialNoteTransaction>:
// copyright holder including that found in the LICENSE file.

#include "n_lib.h"

// Process a transaction over the serial port, returning NULL and a buffer if success, or an error string
const char *serialNoteTransaction(char *json, char **jsonResponse) {
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08c      	sub	sp, #48	; 0x30
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]

	// Transmit the request in segments so as not to overwhelm the notecard's interrupt buffers
	uint32_t segOff = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t segLeft = strlen(json);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7f6 ff0a 	bl	80001e4 <strlen>
 80093d0:	62b8      	str	r0, [r7, #40]	; 0x28
	while (true) {
		size_t segLen = segLeft;
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (segLen > CARD_REQUEST_SERIAL_SEGMENT_MAX_LEN)
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	2bfa      	cmp	r3, #250	; 0xfa
 80093da:	d901      	bls.n	80093e0 <serialNoteTransaction+0x24>
			segLen = CARD_REQUEST_SERIAL_SEGMENT_MAX_LEN;
 80093dc:	23fa      	movs	r3, #250	; 0xfa
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
		segLeft -= segLen;
 80093e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	62bb      	str	r3, [r7, #40]	; 0x28
		_SerialTransmit((uint8_t *)&json[segOff], segLen, false);
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	4413      	add	r3, r2
 80093ee:	2200      	movs	r2, #0
 80093f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff fe52 	bl	800909c <NoteSerialTransmit>
		if (segLeft == 0) {
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10b      	bne.n	8009416 <serialNoteTransaction+0x5a>
			_SerialTransmit((uint8_t *)c_newline, c_newline_len, true);
 80093fe:	4b5e      	ldr	r3, [pc, #376]	; (8009578 <serialNoteTransaction+0x1bc>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2201      	movs	r2, #1
 8009404:	2101      	movs	r1, #1
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff fe48 	bl	800909c <NoteSerialTransmit>
			break;
 800940c:	bf00      	nop
	// Wait for something to become available, processing timeout errors up-front
	// because the json parse operation immediately following is subject to the
	// serial port timeout. We'd like more flexibility in max timeout and ultimately
	// in our error handling.
	uint32_t startMs;
	for (startMs = _GetMs(); !_SerialAvailable(); ) {
 800940e:	f7ff fdcb 	bl	8008fa8 <NoteGetMs>
 8009412:	6138      	str	r0, [r7, #16]
 8009414:	e018      	b.n	8009448 <serialNoteTransaction+0x8c>
		segOff += segLen;
 8009416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	4413      	add	r3, r2
 800941c:	62fb      	str	r3, [r7, #44]	; 0x2c
		_DelayMs(CARD_REQUEST_SERIAL_SEGMENT_DELAY_MS);
 800941e:	20fa      	movs	r0, #250	; 0xfa
 8009420:	f7ff fdd2 	bl	8008fc8 <NoteDelayMs>
	while (true) {
 8009424:	e7d5      	b.n	80093d2 <serialNoteTransaction+0x16>
		if (_GetMs() >= startMs + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 8009426:	f7ff fdbf 	bl	8008fa8 <NoteGetMs>
 800942a:	4602      	mov	r2, r0
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8009432:	3310      	adds	r3, #16
 8009434:	429a      	cmp	r2, r3
 8009436:	d304      	bcc.n	8009442 <serialNoteTransaction+0x86>
#ifdef ERRDBG
			_Debug("reply to request didn't arrive from module in time\n");
 8009438:	4850      	ldr	r0, [pc, #320]	; (800957c <serialNoteTransaction+0x1c0>)
 800943a:	f7ff fda3 	bl	8008f84 <NoteDebug>
#endif
			return ERRSTR("transaction timeout",c_timeout);
 800943e:	4b50      	ldr	r3, [pc, #320]	; (8009580 <serialNoteTransaction+0x1c4>)
 8009440:	e096      	b.n	8009570 <serialNoteTransaction+0x1b4>
		}
		_DelayMs(10);
 8009442:	200a      	movs	r0, #10
 8009444:	f7ff fdc0 	bl	8008fc8 <NoteDelayMs>
	for (startMs = _GetMs(); !_SerialAvailable(); ) {
 8009448:	f7ff fe46 	bl	80090d8 <NoteSerialAvailable>
 800944c:	4603      	mov	r3, r0
 800944e:	f083 0301 	eor.w	r3, r3, #1
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e6      	bne.n	8009426 <serialNoteTransaction+0x6a>
	}

	// Allocate a buffer for input, noting that we always put the +1 in the alloc so we can be assured
	// that it can be null-terminated.	This must be the case because json parsing requires a
	// null-terminated string.
	int jsonbufAllocLen = ALLOC_CHUNK;
 8009458:	2380      	movs	r3, #128	; 0x80
 800945a:	623b      	str	r3, [r7, #32]
	char *jsonbuf = (char *) _Malloc(jsonbufAllocLen+1);
 800945c:	6a3b      	ldr	r3, [r7, #32]
 800945e:	3301      	adds	r3, #1
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff fdc3 	bl	8008fec <NoteMalloc>
 8009466:	61f8      	str	r0, [r7, #28]
	if (jsonbuf == NULL) {
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d104      	bne.n	8009478 <serialNoteTransaction+0xbc>
#ifdef ERRDBG
		_Debug("transaction: jsonbuf malloc failed\n");
 800946e:	4845      	ldr	r0, [pc, #276]	; (8009584 <serialNoteTransaction+0x1c8>)
 8009470:	f7ff fd88 	bl	8008f84 <NoteDebug>
#endif
		return ERRSTR("insufficient memory",c_mem);
 8009474:	4b44      	ldr	r3, [pc, #272]	; (8009588 <serialNoteTransaction+0x1cc>)
 8009476:	e07b      	b.n	8009570 <serialNoteTransaction+0x1b4>
	}
	int jsonbufLen = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	61bb      	str	r3, [r7, #24]
	char ch = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	75fb      	strb	r3, [r7, #23]
	startMs = _GetMs();
 8009480:	f7ff fd92 	bl	8008fa8 <NoteGetMs>
 8009484:	6138      	str	r0, [r7, #16]
	while (ch != '\n') {
 8009486:	e067      	b.n	8009558 <serialNoteTransaction+0x19c>
		if (!_SerialAvailable()) {
 8009488:	f7ff fe26 	bl	80090d8 <NoteSerialAvailable>
 800948c:	4603      	mov	r3, r0
 800948e:	f083 0301 	eor.w	r3, r3, #1
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d021      	beq.n	80094dc <serialNoteTransaction+0x120>
			ch = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	75fb      	strb	r3, [r7, #23]
			if (_GetMs() >= startMs + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 800949c:	f7ff fd84 	bl	8008fa8 <NoteGetMs>
 80094a0:	4602      	mov	r2, r0
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80094a8:	3310      	adds	r3, #16
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d312      	bcc.n	80094d4 <serialNoteTransaction+0x118>
#ifdef ERRDBG
				jsonbuf[jsonbufLen] = '\0';
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	69fa      	ldr	r2, [r7, #28]
 80094b2:	4413      	add	r3, r2
 80094b4:	2200      	movs	r2, #0
 80094b6:	701a      	strb	r2, [r3, #0]
				_Debug("received only partial reply after timeout:\n");
 80094b8:	4834      	ldr	r0, [pc, #208]	; (800958c <serialNoteTransaction+0x1d0>)
 80094ba:	f7ff fd63 	bl	8008f84 <NoteDebug>
				_Debug(jsonbuf);
 80094be:	69f8      	ldr	r0, [r7, #28]
 80094c0:	f7ff fd60 	bl	8008f84 <NoteDebug>
				_Debug("\n");
 80094c4:	4832      	ldr	r0, [pc, #200]	; (8009590 <serialNoteTransaction+0x1d4>)
 80094c6:	f7ff fd5d 	bl	8008f84 <NoteDebug>
#endif
				_Free(jsonbuf);
 80094ca:	69f8      	ldr	r0, [r7, #28]
 80094cc:	f7ff fda4 	bl	8009018 <NoteFree>
				return ERRSTR("transaction incomplete",c_timeout);
 80094d0:	4b30      	ldr	r3, [pc, #192]	; (8009594 <serialNoteTransaction+0x1d8>)
 80094d2:	e04d      	b.n	8009570 <serialNoteTransaction+0x1b4>
			}
			_DelayMs(1);
 80094d4:	2001      	movs	r0, #1
 80094d6:	f7ff fd77 	bl	8008fc8 <NoteDelayMs>
			continue;
 80094da:	e03d      	b.n	8009558 <serialNoteTransaction+0x19c>
		}
		ch = _SerialReceive();
 80094dc:	f7ff fe12 	bl	8009104 <NoteSerialReceive>
 80094e0:	4603      	mov	r3, r0
 80094e2:	75fb      	strb	r3, [r7, #23]

		// Because serial I/O can be error-prone, catch common bad data early, knowing that we only accept ASCII
		if (ch == 0 || (ch & 0x80) != 0) {
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <serialNoteTransaction+0x136>
 80094ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	da07      	bge.n	8009502 <serialNoteTransaction+0x146>
#ifdef ERRDBG
			_Debug("invalid data received on serial port from notecard\n");
 80094f2:	4829      	ldr	r0, [pc, #164]	; (8009598 <serialNoteTransaction+0x1dc>)
 80094f4:	f7ff fd46 	bl	8008f84 <NoteDebug>
#endif
			_Free(jsonbuf);
 80094f8:	69f8      	ldr	r0, [r7, #28]
 80094fa:	f7ff fd8d 	bl	8009018 <NoteFree>
			return ERRSTR("serial communications error",c_timeout);
 80094fe:	4b27      	ldr	r3, [pc, #156]	; (800959c <serialNoteTransaction+0x1e0>)
 8009500:	e036      	b.n	8009570 <serialNoteTransaction+0x1b4>
		}

		// Append into the json buffer
		jsonbuf[jsonbufLen++] = ch;
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	61ba      	str	r2, [r7, #24]
 8009508:	461a      	mov	r2, r3
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	4413      	add	r3, r2
 800950e:	7dfa      	ldrb	r2, [r7, #23]
 8009510:	701a      	strb	r2, [r3, #0]
		if (jsonbufLen >= jsonbufAllocLen) {
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	429a      	cmp	r2, r3
 8009518:	db1e      	blt.n	8009558 <serialNoteTransaction+0x19c>
			jsonbufAllocLen += ALLOC_CHUNK;
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	3380      	adds	r3, #128	; 0x80
 800951e:	623b      	str	r3, [r7, #32]
			char *jsonbufNew = (char *) _Malloc(jsonbufAllocLen+1);
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	3301      	adds	r3, #1
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff fd61 	bl	8008fec <NoteMalloc>
 800952a:	60f8      	str	r0, [r7, #12]
			if (jsonbufNew == NULL) {
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d107      	bne.n	8009542 <serialNoteTransaction+0x186>
#ifdef ERRDBG
				_Debug("transaction: jsonbuf malloc grow failed\n");
 8009532:	481b      	ldr	r0, [pc, #108]	; (80095a0 <serialNoteTransaction+0x1e4>)
 8009534:	f7ff fd26 	bl	8008f84 <NoteDebug>
#endif
				_Free(jsonbuf);
 8009538:	69f8      	ldr	r0, [r7, #28]
 800953a:	f7ff fd6d 	bl	8009018 <NoteFree>
				return ERRSTR("insufficient memory",c_mem);
 800953e:	4b12      	ldr	r3, [pc, #72]	; (8009588 <serialNoteTransaction+0x1cc>)
 8009540:	e016      	b.n	8009570 <serialNoteTransaction+0x1b4>
			}
			memcpy(jsonbufNew, jsonbuf, jsonbufLen);
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	461a      	mov	r2, r3
 8009546:	69f9      	ldr	r1, [r7, #28]
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f8eb 	bl	8009724 <memcpy>
			_Free(jsonbuf);
 800954e:	69f8      	ldr	r0, [r7, #28]
 8009550:	f7ff fd62 	bl	8009018 <NoteFree>
			jsonbuf = jsonbufNew;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	61fb      	str	r3, [r7, #28]
	while (ch != '\n') {
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	2b0a      	cmp	r3, #10
 800955c:	d194      	bne.n	8009488 <serialNoteTransaction+0xcc>
		}
	}

	// Null-terminate it, using the +1 space that we'd allocated in the buffer
	jsonbuf[jsonbufLen] = '\0';
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	69fa      	ldr	r2, [r7, #28]
 8009562:	4413      	add	r3, r2
 8009564:	2200      	movs	r2, #0
 8009566:	701a      	strb	r2, [r3, #0]

	// Return it
	*jsonResponse = jsonbuf;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	601a      	str	r2, [r3, #0]
	return NULL;
 800956e:	2300      	movs	r3, #0

}
 8009570:	4618      	mov	r0, r3
 8009572:	3730      	adds	r7, #48	; 0x30
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	20000018 	.word	0x20000018
 800957c:	0800a264 	.word	0x0800a264
 8009580:	0800a298 	.word	0x0800a298
 8009584:	0800a2ac 	.word	0x0800a2ac
 8009588:	0800a2d0 	.word	0x0800a2d0
 800958c:	0800a2e4 	.word	0x0800a2e4
 8009590:	0800a310 	.word	0x0800a310
 8009594:	0800a314 	.word	0x0800a314
 8009598:	0800a32c 	.word	0x0800a32c
 800959c:	0800a360 	.word	0x0800a360
 80095a0:	0800a37c 	.word	0x0800a37c

080095a4 <serialNoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool serialNoteReset() {
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0

	// Initialize, or re-initialize.  Because we've observed Arduino serial driver flakiness,
	_DelayMs(250);
 80095aa:	20fa      	movs	r0, #250	; 0xfa
 80095ac:	f7ff fd0c 	bl	8008fc8 <NoteDelayMs>
	_SerialReset();
 80095b0:	f7ff fd60 	bl	8009074 <NoteSerialReset>

	// The guaranteed behavior for robust resyncing is to send two newlines
	// and	wait for two echoed blank lines in return.
	bool notecardReady = false;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]
	int retries;
	for (retries=0; retries<10; retries++) {
 80095b8:	2300      	movs	r3, #0
 80095ba:	60bb      	str	r3, [r7, #8]
 80095bc:	e048      	b.n	8009650 <serialNoteReset+0xac>

#ifdef ERRDBG
		_Debug("serial reset\n");
 80095be:	4828      	ldr	r0, [pc, #160]	; (8009660 <serialNoteReset+0xbc>)
 80095c0:	f7ff fce0 	bl	8008f84 <NoteDebug>
#endif

		// Send a newline to the module to clean out request/response processing
		_SerialTransmit((uint8_t *)c_newline, c_newline_len, true);
 80095c4:	4b27      	ldr	r3, [pc, #156]	; (8009664 <serialNoteReset+0xc0>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2201      	movs	r2, #1
 80095ca:	2101      	movs	r1, #1
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7ff fd65 	bl	800909c <NoteSerialTransmit>

		// Drain all serial for 500ms
		bool somethingFound = false;
 80095d2:	2300      	movs	r3, #0
 80095d4:	71fb      	strb	r3, [r7, #7]
		bool nonControlCharFound = false;
 80095d6:	2300      	movs	r3, #0
 80095d8:	71bb      	strb	r3, [r7, #6]
		uint32_t startMs = _GetMs();
 80095da:	f7ff fce5 	bl	8008fa8 <NoteGetMs>
 80095de:	6038      	str	r0, [r7, #0]
		while (_GetMs() < startMs+500) {
 80095e0:	e010      	b.n	8009604 <serialNoteReset+0x60>
			while (_SerialAvailable()) {
				somethingFound = true;
 80095e2:	2301      	movs	r3, #1
 80095e4:	71fb      	strb	r3, [r7, #7]
				if (_SerialReceive() >= ' ')
 80095e6:	f7ff fd8d 	bl	8009104 <NoteSerialReceive>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b1f      	cmp	r3, #31
 80095ee:	d901      	bls.n	80095f4 <serialNoteReset+0x50>
					nonControlCharFound = true;
 80095f0:	2301      	movs	r3, #1
 80095f2:	71bb      	strb	r3, [r7, #6]
			while (_SerialAvailable()) {
 80095f4:	f7ff fd70 	bl	80090d8 <NoteSerialAvailable>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1f1      	bne.n	80095e2 <serialNoteReset+0x3e>
			}
			_DelayMs(1);
 80095fe:	2001      	movs	r0, #1
 8009600:	f7ff fce2 	bl	8008fc8 <NoteDelayMs>
		while (_GetMs() < startMs+500) {
 8009604:	f7ff fcd0 	bl	8008fa8 <NoteGetMs>
 8009608:	4602      	mov	r2, r0
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009610:	429a      	cmp	r2, r3
 8009612:	d3ef      	bcc.n	80095f4 <serialNoteReset+0x50>
		}

		// If all we got back is newlines, we're ready
		if (somethingFound && !nonControlCharFound) {
 8009614:	79fb      	ldrb	r3, [r7, #7]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d008      	beq.n	800962c <serialNoteReset+0x88>
 800961a:	79bb      	ldrb	r3, [r7, #6]
 800961c:	f083 0301 	eor.w	r3, r3, #1
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	d002      	beq.n	800962c <serialNoteReset+0x88>
			notecardReady = true;
 8009626:	2301      	movs	r3, #1
 8009628:	73fb      	strb	r3, [r7, #15]
			break;
 800962a:	e014      	b.n	8009656 <serialNoteReset+0xb2>
		}

#ifdef ERRDBG
		_Debug(somethingFound ? "unrecognized data from notecard\n" : "notecard not responding\n");
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <serialNoteReset+0x92>
 8009632:	4b0d      	ldr	r3, [pc, #52]	; (8009668 <serialNoteReset+0xc4>)
 8009634:	e000      	b.n	8009638 <serialNoteReset+0x94>
 8009636:	4b0d      	ldr	r3, [pc, #52]	; (800966c <serialNoteReset+0xc8>)
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff fca3 	bl	8008f84 <NoteDebug>
#else
		_Debug("no notecard\n");
#endif
		_DelayMs(500);
 800963e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009642:	f7ff fcc1 	bl	8008fc8 <NoteDelayMs>
		_SerialReset();
 8009646:	f7ff fd15 	bl	8009074 <NoteSerialReset>
	for (retries=0; retries<10; retries++) {
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	3301      	adds	r3, #1
 800964e:	60bb      	str	r3, [r7, #8]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	2b09      	cmp	r3, #9
 8009654:	ddb3      	ble.n	80095be <serialNoteReset+0x1a>

	}

	// Done
	return notecardReady;
 8009656:	7bfb      	ldrb	r3, [r7, #15]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	0800a3a8 	.word	0x0800a3a8
 8009664:	20000018 	.word	0x20000018
 8009668:	0800a3b8 	.word	0x0800a3b8
 800966c:	0800a3dc 	.word	0x0800a3dc

08009670 <__errno>:
 8009670:	4b01      	ldr	r3, [pc, #4]	; (8009678 <__errno+0x8>)
 8009672:	6818      	ldr	r0, [r3, #0]
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	20000028 	.word	0x20000028

0800967c <__libc_init_array>:
 800967c:	b570      	push	{r4, r5, r6, lr}
 800967e:	4e0d      	ldr	r6, [pc, #52]	; (80096b4 <__libc_init_array+0x38>)
 8009680:	4c0d      	ldr	r4, [pc, #52]	; (80096b8 <__libc_init_array+0x3c>)
 8009682:	1ba4      	subs	r4, r4, r6
 8009684:	10a4      	asrs	r4, r4, #2
 8009686:	2500      	movs	r5, #0
 8009688:	42a5      	cmp	r5, r4
 800968a:	d109      	bne.n	80096a0 <__libc_init_array+0x24>
 800968c:	4e0b      	ldr	r6, [pc, #44]	; (80096bc <__libc_init_array+0x40>)
 800968e:	4c0c      	ldr	r4, [pc, #48]	; (80096c0 <__libc_init_array+0x44>)
 8009690:	f000 fc8a 	bl	8009fa8 <_init>
 8009694:	1ba4      	subs	r4, r4, r6
 8009696:	10a4      	asrs	r4, r4, #2
 8009698:	2500      	movs	r5, #0
 800969a:	42a5      	cmp	r5, r4
 800969c:	d105      	bne.n	80096aa <__libc_init_array+0x2e>
 800969e:	bd70      	pop	{r4, r5, r6, pc}
 80096a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096a4:	4798      	blx	r3
 80096a6:	3501      	adds	r5, #1
 80096a8:	e7ee      	b.n	8009688 <__libc_init_array+0xc>
 80096aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096ae:	4798      	blx	r3
 80096b0:	3501      	adds	r5, #1
 80096b2:	e7f2      	b.n	800969a <__libc_init_array+0x1e>
 80096b4:	0800a58c 	.word	0x0800a58c
 80096b8:	0800a58c 	.word	0x0800a58c
 80096bc:	0800a58c 	.word	0x0800a58c
 80096c0:	0800a590 	.word	0x0800a590

080096c4 <__locale_ctype_ptr>:
 80096c4:	4b04      	ldr	r3, [pc, #16]	; (80096d8 <__locale_ctype_ptr+0x14>)
 80096c6:	4a05      	ldr	r2, [pc, #20]	; (80096dc <__locale_ctype_ptr+0x18>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bf08      	it	eq
 80096d0:	4613      	moveq	r3, r2
 80096d2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80096d6:	4770      	bx	lr
 80096d8:	20000028 	.word	0x20000028
 80096dc:	2000008c 	.word	0x2000008c

080096e0 <malloc>:
 80096e0:	4b02      	ldr	r3, [pc, #8]	; (80096ec <malloc+0xc>)
 80096e2:	4601      	mov	r1, r0
 80096e4:	6818      	ldr	r0, [r3, #0]
 80096e6:	f000 b897 	b.w	8009818 <_malloc_r>
 80096ea:	bf00      	nop
 80096ec:	20000028 	.word	0x20000028

080096f0 <free>:
 80096f0:	4b02      	ldr	r3, [pc, #8]	; (80096fc <free+0xc>)
 80096f2:	4601      	mov	r1, r0
 80096f4:	6818      	ldr	r0, [r3, #0]
 80096f6:	f000 b841 	b.w	800977c <_free_r>
 80096fa:	bf00      	nop
 80096fc:	20000028 	.word	0x20000028

08009700 <__ascii_mbtowc>:
 8009700:	b082      	sub	sp, #8
 8009702:	b901      	cbnz	r1, 8009706 <__ascii_mbtowc+0x6>
 8009704:	a901      	add	r1, sp, #4
 8009706:	b142      	cbz	r2, 800971a <__ascii_mbtowc+0x1a>
 8009708:	b14b      	cbz	r3, 800971e <__ascii_mbtowc+0x1e>
 800970a:	7813      	ldrb	r3, [r2, #0]
 800970c:	600b      	str	r3, [r1, #0]
 800970e:	7812      	ldrb	r2, [r2, #0]
 8009710:	1c10      	adds	r0, r2, #0
 8009712:	bf18      	it	ne
 8009714:	2001      	movne	r0, #1
 8009716:	b002      	add	sp, #8
 8009718:	4770      	bx	lr
 800971a:	4610      	mov	r0, r2
 800971c:	e7fb      	b.n	8009716 <__ascii_mbtowc+0x16>
 800971e:	f06f 0001 	mvn.w	r0, #1
 8009722:	e7f8      	b.n	8009716 <__ascii_mbtowc+0x16>

08009724 <memcpy>:
 8009724:	b510      	push	{r4, lr}
 8009726:	1e43      	subs	r3, r0, #1
 8009728:	440a      	add	r2, r1
 800972a:	4291      	cmp	r1, r2
 800972c:	d100      	bne.n	8009730 <memcpy+0xc>
 800972e:	bd10      	pop	{r4, pc}
 8009730:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009738:	e7f7      	b.n	800972a <memcpy+0x6>

0800973a <memmove>:
 800973a:	4288      	cmp	r0, r1
 800973c:	b510      	push	{r4, lr}
 800973e:	eb01 0302 	add.w	r3, r1, r2
 8009742:	d807      	bhi.n	8009754 <memmove+0x1a>
 8009744:	1e42      	subs	r2, r0, #1
 8009746:	4299      	cmp	r1, r3
 8009748:	d00a      	beq.n	8009760 <memmove+0x26>
 800974a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800974e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009752:	e7f8      	b.n	8009746 <memmove+0xc>
 8009754:	4283      	cmp	r3, r0
 8009756:	d9f5      	bls.n	8009744 <memmove+0xa>
 8009758:	1881      	adds	r1, r0, r2
 800975a:	1ad2      	subs	r2, r2, r3
 800975c:	42d3      	cmn	r3, r2
 800975e:	d100      	bne.n	8009762 <memmove+0x28>
 8009760:	bd10      	pop	{r4, pc}
 8009762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009766:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800976a:	e7f7      	b.n	800975c <memmove+0x22>

0800976c <memset>:
 800976c:	4402      	add	r2, r0
 800976e:	4603      	mov	r3, r0
 8009770:	4293      	cmp	r3, r2
 8009772:	d100      	bne.n	8009776 <memset+0xa>
 8009774:	4770      	bx	lr
 8009776:	f803 1b01 	strb.w	r1, [r3], #1
 800977a:	e7f9      	b.n	8009770 <memset+0x4>

0800977c <_free_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4605      	mov	r5, r0
 8009780:	2900      	cmp	r1, #0
 8009782:	d045      	beq.n	8009810 <_free_r+0x94>
 8009784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009788:	1f0c      	subs	r4, r1, #4
 800978a:	2b00      	cmp	r3, #0
 800978c:	bfb8      	it	lt
 800978e:	18e4      	addlt	r4, r4, r3
 8009790:	f000 f900 	bl	8009994 <__malloc_lock>
 8009794:	4a1f      	ldr	r2, [pc, #124]	; (8009814 <_free_r+0x98>)
 8009796:	6813      	ldr	r3, [r2, #0]
 8009798:	4610      	mov	r0, r2
 800979a:	b933      	cbnz	r3, 80097aa <_free_r+0x2e>
 800979c:	6063      	str	r3, [r4, #4]
 800979e:	6014      	str	r4, [r2, #0]
 80097a0:	4628      	mov	r0, r5
 80097a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097a6:	f000 b8f6 	b.w	8009996 <__malloc_unlock>
 80097aa:	42a3      	cmp	r3, r4
 80097ac:	d90c      	bls.n	80097c8 <_free_r+0x4c>
 80097ae:	6821      	ldr	r1, [r4, #0]
 80097b0:	1862      	adds	r2, r4, r1
 80097b2:	4293      	cmp	r3, r2
 80097b4:	bf04      	itt	eq
 80097b6:	681a      	ldreq	r2, [r3, #0]
 80097b8:	685b      	ldreq	r3, [r3, #4]
 80097ba:	6063      	str	r3, [r4, #4]
 80097bc:	bf04      	itt	eq
 80097be:	1852      	addeq	r2, r2, r1
 80097c0:	6022      	streq	r2, [r4, #0]
 80097c2:	6004      	str	r4, [r0, #0]
 80097c4:	e7ec      	b.n	80097a0 <_free_r+0x24>
 80097c6:	4613      	mov	r3, r2
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	b10a      	cbz	r2, 80097d0 <_free_r+0x54>
 80097cc:	42a2      	cmp	r2, r4
 80097ce:	d9fa      	bls.n	80097c6 <_free_r+0x4a>
 80097d0:	6819      	ldr	r1, [r3, #0]
 80097d2:	1858      	adds	r0, r3, r1
 80097d4:	42a0      	cmp	r0, r4
 80097d6:	d10b      	bne.n	80097f0 <_free_r+0x74>
 80097d8:	6820      	ldr	r0, [r4, #0]
 80097da:	4401      	add	r1, r0
 80097dc:	1858      	adds	r0, r3, r1
 80097de:	4282      	cmp	r2, r0
 80097e0:	6019      	str	r1, [r3, #0]
 80097e2:	d1dd      	bne.n	80097a0 <_free_r+0x24>
 80097e4:	6810      	ldr	r0, [r2, #0]
 80097e6:	6852      	ldr	r2, [r2, #4]
 80097e8:	605a      	str	r2, [r3, #4]
 80097ea:	4401      	add	r1, r0
 80097ec:	6019      	str	r1, [r3, #0]
 80097ee:	e7d7      	b.n	80097a0 <_free_r+0x24>
 80097f0:	d902      	bls.n	80097f8 <_free_r+0x7c>
 80097f2:	230c      	movs	r3, #12
 80097f4:	602b      	str	r3, [r5, #0]
 80097f6:	e7d3      	b.n	80097a0 <_free_r+0x24>
 80097f8:	6820      	ldr	r0, [r4, #0]
 80097fa:	1821      	adds	r1, r4, r0
 80097fc:	428a      	cmp	r2, r1
 80097fe:	bf04      	itt	eq
 8009800:	6811      	ldreq	r1, [r2, #0]
 8009802:	6852      	ldreq	r2, [r2, #4]
 8009804:	6062      	str	r2, [r4, #4]
 8009806:	bf04      	itt	eq
 8009808:	1809      	addeq	r1, r1, r0
 800980a:	6021      	streq	r1, [r4, #0]
 800980c:	605c      	str	r4, [r3, #4]
 800980e:	e7c7      	b.n	80097a0 <_free_r+0x24>
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	bf00      	nop
 8009814:	20000470 	.word	0x20000470

08009818 <_malloc_r>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	1ccd      	adds	r5, r1, #3
 800981c:	f025 0503 	bic.w	r5, r5, #3
 8009820:	3508      	adds	r5, #8
 8009822:	2d0c      	cmp	r5, #12
 8009824:	bf38      	it	cc
 8009826:	250c      	movcc	r5, #12
 8009828:	2d00      	cmp	r5, #0
 800982a:	4606      	mov	r6, r0
 800982c:	db01      	blt.n	8009832 <_malloc_r+0x1a>
 800982e:	42a9      	cmp	r1, r5
 8009830:	d903      	bls.n	800983a <_malloc_r+0x22>
 8009832:	230c      	movs	r3, #12
 8009834:	6033      	str	r3, [r6, #0]
 8009836:	2000      	movs	r0, #0
 8009838:	bd70      	pop	{r4, r5, r6, pc}
 800983a:	f000 f8ab 	bl	8009994 <__malloc_lock>
 800983e:	4a21      	ldr	r2, [pc, #132]	; (80098c4 <_malloc_r+0xac>)
 8009840:	6814      	ldr	r4, [r2, #0]
 8009842:	4621      	mov	r1, r4
 8009844:	b991      	cbnz	r1, 800986c <_malloc_r+0x54>
 8009846:	4c20      	ldr	r4, [pc, #128]	; (80098c8 <_malloc_r+0xb0>)
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	b91b      	cbnz	r3, 8009854 <_malloc_r+0x3c>
 800984c:	4630      	mov	r0, r6
 800984e:	f000 f83d 	bl	80098cc <_sbrk_r>
 8009852:	6020      	str	r0, [r4, #0]
 8009854:	4629      	mov	r1, r5
 8009856:	4630      	mov	r0, r6
 8009858:	f000 f838 	bl	80098cc <_sbrk_r>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d124      	bne.n	80098aa <_malloc_r+0x92>
 8009860:	230c      	movs	r3, #12
 8009862:	6033      	str	r3, [r6, #0]
 8009864:	4630      	mov	r0, r6
 8009866:	f000 f896 	bl	8009996 <__malloc_unlock>
 800986a:	e7e4      	b.n	8009836 <_malloc_r+0x1e>
 800986c:	680b      	ldr	r3, [r1, #0]
 800986e:	1b5b      	subs	r3, r3, r5
 8009870:	d418      	bmi.n	80098a4 <_malloc_r+0x8c>
 8009872:	2b0b      	cmp	r3, #11
 8009874:	d90f      	bls.n	8009896 <_malloc_r+0x7e>
 8009876:	600b      	str	r3, [r1, #0]
 8009878:	50cd      	str	r5, [r1, r3]
 800987a:	18cc      	adds	r4, r1, r3
 800987c:	4630      	mov	r0, r6
 800987e:	f000 f88a 	bl	8009996 <__malloc_unlock>
 8009882:	f104 000b 	add.w	r0, r4, #11
 8009886:	1d23      	adds	r3, r4, #4
 8009888:	f020 0007 	bic.w	r0, r0, #7
 800988c:	1ac3      	subs	r3, r0, r3
 800988e:	d0d3      	beq.n	8009838 <_malloc_r+0x20>
 8009890:	425a      	negs	r2, r3
 8009892:	50e2      	str	r2, [r4, r3]
 8009894:	e7d0      	b.n	8009838 <_malloc_r+0x20>
 8009896:	428c      	cmp	r4, r1
 8009898:	684b      	ldr	r3, [r1, #4]
 800989a:	bf16      	itet	ne
 800989c:	6063      	strne	r3, [r4, #4]
 800989e:	6013      	streq	r3, [r2, #0]
 80098a0:	460c      	movne	r4, r1
 80098a2:	e7eb      	b.n	800987c <_malloc_r+0x64>
 80098a4:	460c      	mov	r4, r1
 80098a6:	6849      	ldr	r1, [r1, #4]
 80098a8:	e7cc      	b.n	8009844 <_malloc_r+0x2c>
 80098aa:	1cc4      	adds	r4, r0, #3
 80098ac:	f024 0403 	bic.w	r4, r4, #3
 80098b0:	42a0      	cmp	r0, r4
 80098b2:	d005      	beq.n	80098c0 <_malloc_r+0xa8>
 80098b4:	1a21      	subs	r1, r4, r0
 80098b6:	4630      	mov	r0, r6
 80098b8:	f000 f808 	bl	80098cc <_sbrk_r>
 80098bc:	3001      	adds	r0, #1
 80098be:	d0cf      	beq.n	8009860 <_malloc_r+0x48>
 80098c0:	6025      	str	r5, [r4, #0]
 80098c2:	e7db      	b.n	800987c <_malloc_r+0x64>
 80098c4:	20000470 	.word	0x20000470
 80098c8:	20000474 	.word	0x20000474

080098cc <_sbrk_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4c06      	ldr	r4, [pc, #24]	; (80098e8 <_sbrk_r+0x1c>)
 80098d0:	2300      	movs	r3, #0
 80098d2:	4605      	mov	r5, r0
 80098d4:	4608      	mov	r0, r1
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	f7f9 fb72 	bl	8002fc0 <_sbrk>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_sbrk_r+0x1a>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_sbrk_r+0x1a>
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	20000684 	.word	0x20000684

080098ec <siprintf>:
 80098ec:	b40e      	push	{r1, r2, r3}
 80098ee:	b500      	push	{lr}
 80098f0:	b09c      	sub	sp, #112	; 0x70
 80098f2:	ab1d      	add	r3, sp, #116	; 0x74
 80098f4:	9002      	str	r0, [sp, #8]
 80098f6:	9006      	str	r0, [sp, #24]
 80098f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098fc:	4809      	ldr	r0, [pc, #36]	; (8009924 <siprintf+0x38>)
 80098fe:	9107      	str	r1, [sp, #28]
 8009900:	9104      	str	r1, [sp, #16]
 8009902:	4909      	ldr	r1, [pc, #36]	; (8009928 <siprintf+0x3c>)
 8009904:	f853 2b04 	ldr.w	r2, [r3], #4
 8009908:	9105      	str	r1, [sp, #20]
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	a902      	add	r1, sp, #8
 8009910:	f000 f89c 	bl	8009a4c <_svfiprintf_r>
 8009914:	9b02      	ldr	r3, [sp, #8]
 8009916:	2200      	movs	r2, #0
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	b01c      	add	sp, #112	; 0x70
 800991c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009920:	b003      	add	sp, #12
 8009922:	4770      	bx	lr
 8009924:	20000028 	.word	0x20000028
 8009928:	ffff0208 	.word	0xffff0208

0800992c <strchr>:
 800992c:	b2c9      	uxtb	r1, r1
 800992e:	4603      	mov	r3, r0
 8009930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009934:	b11a      	cbz	r2, 800993e <strchr+0x12>
 8009936:	428a      	cmp	r2, r1
 8009938:	d1f9      	bne.n	800992e <strchr+0x2>
 800993a:	4618      	mov	r0, r3
 800993c:	4770      	bx	lr
 800993e:	2900      	cmp	r1, #0
 8009940:	bf18      	it	ne
 8009942:	2300      	movne	r3, #0
 8009944:	e7f9      	b.n	800993a <strchr+0xe>

08009946 <strcpy>:
 8009946:	4603      	mov	r3, r0
 8009948:	f811 2b01 	ldrb.w	r2, [r1], #1
 800994c:	f803 2b01 	strb.w	r2, [r3], #1
 8009950:	2a00      	cmp	r2, #0
 8009952:	d1f9      	bne.n	8009948 <strcpy+0x2>
 8009954:	4770      	bx	lr

08009956 <strncmp>:
 8009956:	b510      	push	{r4, lr}
 8009958:	b16a      	cbz	r2, 8009976 <strncmp+0x20>
 800995a:	3901      	subs	r1, #1
 800995c:	1884      	adds	r4, r0, r2
 800995e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009962:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009966:	4293      	cmp	r3, r2
 8009968:	d103      	bne.n	8009972 <strncmp+0x1c>
 800996a:	42a0      	cmp	r0, r4
 800996c:	d001      	beq.n	8009972 <strncmp+0x1c>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1f5      	bne.n	800995e <strncmp+0x8>
 8009972:	1a98      	subs	r0, r3, r2
 8009974:	bd10      	pop	{r4, pc}
 8009976:	4610      	mov	r0, r2
 8009978:	e7fc      	b.n	8009974 <strncmp+0x1e>

0800997a <__ascii_wctomb>:
 800997a:	b149      	cbz	r1, 8009990 <__ascii_wctomb+0x16>
 800997c:	2aff      	cmp	r2, #255	; 0xff
 800997e:	bf85      	ittet	hi
 8009980:	238a      	movhi	r3, #138	; 0x8a
 8009982:	6003      	strhi	r3, [r0, #0]
 8009984:	700a      	strbls	r2, [r1, #0]
 8009986:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800998a:	bf98      	it	ls
 800998c:	2001      	movls	r0, #1
 800998e:	4770      	bx	lr
 8009990:	4608      	mov	r0, r1
 8009992:	4770      	bx	lr

08009994 <__malloc_lock>:
 8009994:	4770      	bx	lr

08009996 <__malloc_unlock>:
 8009996:	4770      	bx	lr

08009998 <__ssputs_r>:
 8009998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	688e      	ldr	r6, [r1, #8]
 800999e:	429e      	cmp	r6, r3
 80099a0:	4682      	mov	sl, r0
 80099a2:	460c      	mov	r4, r1
 80099a4:	4690      	mov	r8, r2
 80099a6:	4699      	mov	r9, r3
 80099a8:	d837      	bhi.n	8009a1a <__ssputs_r+0x82>
 80099aa:	898a      	ldrh	r2, [r1, #12]
 80099ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099b0:	d031      	beq.n	8009a16 <__ssputs_r+0x7e>
 80099b2:	6825      	ldr	r5, [r4, #0]
 80099b4:	6909      	ldr	r1, [r1, #16]
 80099b6:	1a6f      	subs	r7, r5, r1
 80099b8:	6965      	ldr	r5, [r4, #20]
 80099ba:	2302      	movs	r3, #2
 80099bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80099c4:	f109 0301 	add.w	r3, r9, #1
 80099c8:	443b      	add	r3, r7
 80099ca:	429d      	cmp	r5, r3
 80099cc:	bf38      	it	cc
 80099ce:	461d      	movcc	r5, r3
 80099d0:	0553      	lsls	r3, r2, #21
 80099d2:	d530      	bpl.n	8009a36 <__ssputs_r+0x9e>
 80099d4:	4629      	mov	r1, r5
 80099d6:	f7ff ff1f 	bl	8009818 <_malloc_r>
 80099da:	4606      	mov	r6, r0
 80099dc:	b950      	cbnz	r0, 80099f4 <__ssputs_r+0x5c>
 80099de:	230c      	movs	r3, #12
 80099e0:	f8ca 3000 	str.w	r3, [sl]
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f4:	463a      	mov	r2, r7
 80099f6:	6921      	ldr	r1, [r4, #16]
 80099f8:	f7ff fe94 	bl	8009724 <memcpy>
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	6126      	str	r6, [r4, #16]
 8009a0a:	6165      	str	r5, [r4, #20]
 8009a0c:	443e      	add	r6, r7
 8009a0e:	1bed      	subs	r5, r5, r7
 8009a10:	6026      	str	r6, [r4, #0]
 8009a12:	60a5      	str	r5, [r4, #8]
 8009a14:	464e      	mov	r6, r9
 8009a16:	454e      	cmp	r6, r9
 8009a18:	d900      	bls.n	8009a1c <__ssputs_r+0x84>
 8009a1a:	464e      	mov	r6, r9
 8009a1c:	4632      	mov	r2, r6
 8009a1e:	4641      	mov	r1, r8
 8009a20:	6820      	ldr	r0, [r4, #0]
 8009a22:	f7ff fe8a 	bl	800973a <memmove>
 8009a26:	68a3      	ldr	r3, [r4, #8]
 8009a28:	1b9b      	subs	r3, r3, r6
 8009a2a:	60a3      	str	r3, [r4, #8]
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	441e      	add	r6, r3
 8009a30:	6026      	str	r6, [r4, #0]
 8009a32:	2000      	movs	r0, #0
 8009a34:	e7dc      	b.n	80099f0 <__ssputs_r+0x58>
 8009a36:	462a      	mov	r2, r5
 8009a38:	f000 fa88 	bl	8009f4c <_realloc_r>
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d1e2      	bne.n	8009a08 <__ssputs_r+0x70>
 8009a42:	6921      	ldr	r1, [r4, #16]
 8009a44:	4650      	mov	r0, sl
 8009a46:	f7ff fe99 	bl	800977c <_free_r>
 8009a4a:	e7c8      	b.n	80099de <__ssputs_r+0x46>

08009a4c <_svfiprintf_r>:
 8009a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a50:	461d      	mov	r5, r3
 8009a52:	898b      	ldrh	r3, [r1, #12]
 8009a54:	061f      	lsls	r7, r3, #24
 8009a56:	b09d      	sub	sp, #116	; 0x74
 8009a58:	4680      	mov	r8, r0
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	4616      	mov	r6, r2
 8009a5e:	d50f      	bpl.n	8009a80 <_svfiprintf_r+0x34>
 8009a60:	690b      	ldr	r3, [r1, #16]
 8009a62:	b96b      	cbnz	r3, 8009a80 <_svfiprintf_r+0x34>
 8009a64:	2140      	movs	r1, #64	; 0x40
 8009a66:	f7ff fed7 	bl	8009818 <_malloc_r>
 8009a6a:	6020      	str	r0, [r4, #0]
 8009a6c:	6120      	str	r0, [r4, #16]
 8009a6e:	b928      	cbnz	r0, 8009a7c <_svfiprintf_r+0x30>
 8009a70:	230c      	movs	r3, #12
 8009a72:	f8c8 3000 	str.w	r3, [r8]
 8009a76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a7a:	e0c8      	b.n	8009c0e <_svfiprintf_r+0x1c2>
 8009a7c:	2340      	movs	r3, #64	; 0x40
 8009a7e:	6163      	str	r3, [r4, #20]
 8009a80:	2300      	movs	r3, #0
 8009a82:	9309      	str	r3, [sp, #36]	; 0x24
 8009a84:	2320      	movs	r3, #32
 8009a86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a8a:	2330      	movs	r3, #48	; 0x30
 8009a8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a90:	9503      	str	r5, [sp, #12]
 8009a92:	f04f 0b01 	mov.w	fp, #1
 8009a96:	4637      	mov	r7, r6
 8009a98:	463d      	mov	r5, r7
 8009a9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a9e:	b10b      	cbz	r3, 8009aa4 <_svfiprintf_r+0x58>
 8009aa0:	2b25      	cmp	r3, #37	; 0x25
 8009aa2:	d13e      	bne.n	8009b22 <_svfiprintf_r+0xd6>
 8009aa4:	ebb7 0a06 	subs.w	sl, r7, r6
 8009aa8:	d00b      	beq.n	8009ac2 <_svfiprintf_r+0x76>
 8009aaa:	4653      	mov	r3, sl
 8009aac:	4632      	mov	r2, r6
 8009aae:	4621      	mov	r1, r4
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	f7ff ff71 	bl	8009998 <__ssputs_r>
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f000 80a4 	beq.w	8009c04 <_svfiprintf_r+0x1b8>
 8009abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009abe:	4453      	add	r3, sl
 8009ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac2:	783b      	ldrb	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 809d 	beq.w	8009c04 <_svfiprintf_r+0x1b8>
 8009aca:	2300      	movs	r3, #0
 8009acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	9307      	str	r3, [sp, #28]
 8009ad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009adc:	931a      	str	r3, [sp, #104]	; 0x68
 8009ade:	462f      	mov	r7, r5
 8009ae0:	2205      	movs	r2, #5
 8009ae2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009ae6:	4850      	ldr	r0, [pc, #320]	; (8009c28 <_svfiprintf_r+0x1dc>)
 8009ae8:	f7f6 fb8a 	bl	8000200 <memchr>
 8009aec:	9b04      	ldr	r3, [sp, #16]
 8009aee:	b9d0      	cbnz	r0, 8009b26 <_svfiprintf_r+0xda>
 8009af0:	06d9      	lsls	r1, r3, #27
 8009af2:	bf44      	itt	mi
 8009af4:	2220      	movmi	r2, #32
 8009af6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009afa:	071a      	lsls	r2, r3, #28
 8009afc:	bf44      	itt	mi
 8009afe:	222b      	movmi	r2, #43	; 0x2b
 8009b00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b04:	782a      	ldrb	r2, [r5, #0]
 8009b06:	2a2a      	cmp	r2, #42	; 0x2a
 8009b08:	d015      	beq.n	8009b36 <_svfiprintf_r+0xea>
 8009b0a:	9a07      	ldr	r2, [sp, #28]
 8009b0c:	462f      	mov	r7, r5
 8009b0e:	2000      	movs	r0, #0
 8009b10:	250a      	movs	r5, #10
 8009b12:	4639      	mov	r1, r7
 8009b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b18:	3b30      	subs	r3, #48	; 0x30
 8009b1a:	2b09      	cmp	r3, #9
 8009b1c:	d94d      	bls.n	8009bba <_svfiprintf_r+0x16e>
 8009b1e:	b1b8      	cbz	r0, 8009b50 <_svfiprintf_r+0x104>
 8009b20:	e00f      	b.n	8009b42 <_svfiprintf_r+0xf6>
 8009b22:	462f      	mov	r7, r5
 8009b24:	e7b8      	b.n	8009a98 <_svfiprintf_r+0x4c>
 8009b26:	4a40      	ldr	r2, [pc, #256]	; (8009c28 <_svfiprintf_r+0x1dc>)
 8009b28:	1a80      	subs	r0, r0, r2
 8009b2a:	fa0b f000 	lsl.w	r0, fp, r0
 8009b2e:	4318      	orrs	r0, r3
 8009b30:	9004      	str	r0, [sp, #16]
 8009b32:	463d      	mov	r5, r7
 8009b34:	e7d3      	b.n	8009ade <_svfiprintf_r+0x92>
 8009b36:	9a03      	ldr	r2, [sp, #12]
 8009b38:	1d11      	adds	r1, r2, #4
 8009b3a:	6812      	ldr	r2, [r2, #0]
 8009b3c:	9103      	str	r1, [sp, #12]
 8009b3e:	2a00      	cmp	r2, #0
 8009b40:	db01      	blt.n	8009b46 <_svfiprintf_r+0xfa>
 8009b42:	9207      	str	r2, [sp, #28]
 8009b44:	e004      	b.n	8009b50 <_svfiprintf_r+0x104>
 8009b46:	4252      	negs	r2, r2
 8009b48:	f043 0302 	orr.w	r3, r3, #2
 8009b4c:	9207      	str	r2, [sp, #28]
 8009b4e:	9304      	str	r3, [sp, #16]
 8009b50:	783b      	ldrb	r3, [r7, #0]
 8009b52:	2b2e      	cmp	r3, #46	; 0x2e
 8009b54:	d10c      	bne.n	8009b70 <_svfiprintf_r+0x124>
 8009b56:	787b      	ldrb	r3, [r7, #1]
 8009b58:	2b2a      	cmp	r3, #42	; 0x2a
 8009b5a:	d133      	bne.n	8009bc4 <_svfiprintf_r+0x178>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	1d1a      	adds	r2, r3, #4
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	9203      	str	r2, [sp, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bfb8      	it	lt
 8009b68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009b6c:	3702      	adds	r7, #2
 8009b6e:	9305      	str	r3, [sp, #20]
 8009b70:	4d2e      	ldr	r5, [pc, #184]	; (8009c2c <_svfiprintf_r+0x1e0>)
 8009b72:	7839      	ldrb	r1, [r7, #0]
 8009b74:	2203      	movs	r2, #3
 8009b76:	4628      	mov	r0, r5
 8009b78:	f7f6 fb42 	bl	8000200 <memchr>
 8009b7c:	b138      	cbz	r0, 8009b8e <_svfiprintf_r+0x142>
 8009b7e:	2340      	movs	r3, #64	; 0x40
 8009b80:	1b40      	subs	r0, r0, r5
 8009b82:	fa03 f000 	lsl.w	r0, r3, r0
 8009b86:	9b04      	ldr	r3, [sp, #16]
 8009b88:	4303      	orrs	r3, r0
 8009b8a:	3701      	adds	r7, #1
 8009b8c:	9304      	str	r3, [sp, #16]
 8009b8e:	7839      	ldrb	r1, [r7, #0]
 8009b90:	4827      	ldr	r0, [pc, #156]	; (8009c30 <_svfiprintf_r+0x1e4>)
 8009b92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b96:	2206      	movs	r2, #6
 8009b98:	1c7e      	adds	r6, r7, #1
 8009b9a:	f7f6 fb31 	bl	8000200 <memchr>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d038      	beq.n	8009c14 <_svfiprintf_r+0x1c8>
 8009ba2:	4b24      	ldr	r3, [pc, #144]	; (8009c34 <_svfiprintf_r+0x1e8>)
 8009ba4:	bb13      	cbnz	r3, 8009bec <_svfiprintf_r+0x1a0>
 8009ba6:	9b03      	ldr	r3, [sp, #12]
 8009ba8:	3307      	adds	r3, #7
 8009baa:	f023 0307 	bic.w	r3, r3, #7
 8009bae:	3308      	adds	r3, #8
 8009bb0:	9303      	str	r3, [sp, #12]
 8009bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb4:	444b      	add	r3, r9
 8009bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb8:	e76d      	b.n	8009a96 <_svfiprintf_r+0x4a>
 8009bba:	fb05 3202 	mla	r2, r5, r2, r3
 8009bbe:	2001      	movs	r0, #1
 8009bc0:	460f      	mov	r7, r1
 8009bc2:	e7a6      	b.n	8009b12 <_svfiprintf_r+0xc6>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	3701      	adds	r7, #1
 8009bc8:	9305      	str	r3, [sp, #20]
 8009bca:	4619      	mov	r1, r3
 8009bcc:	250a      	movs	r5, #10
 8009bce:	4638      	mov	r0, r7
 8009bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bd4:	3a30      	subs	r2, #48	; 0x30
 8009bd6:	2a09      	cmp	r2, #9
 8009bd8:	d903      	bls.n	8009be2 <_svfiprintf_r+0x196>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0c8      	beq.n	8009b70 <_svfiprintf_r+0x124>
 8009bde:	9105      	str	r1, [sp, #20]
 8009be0:	e7c6      	b.n	8009b70 <_svfiprintf_r+0x124>
 8009be2:	fb05 2101 	mla	r1, r5, r1, r2
 8009be6:	2301      	movs	r3, #1
 8009be8:	4607      	mov	r7, r0
 8009bea:	e7f0      	b.n	8009bce <_svfiprintf_r+0x182>
 8009bec:	ab03      	add	r3, sp, #12
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	4622      	mov	r2, r4
 8009bf2:	4b11      	ldr	r3, [pc, #68]	; (8009c38 <_svfiprintf_r+0x1ec>)
 8009bf4:	a904      	add	r1, sp, #16
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	f3af 8000 	nop.w
 8009bfc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009c00:	4681      	mov	r9, r0
 8009c02:	d1d6      	bne.n	8009bb2 <_svfiprintf_r+0x166>
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	065b      	lsls	r3, r3, #25
 8009c08:	f53f af35 	bmi.w	8009a76 <_svfiprintf_r+0x2a>
 8009c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c0e:	b01d      	add	sp, #116	; 0x74
 8009c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c14:	ab03      	add	r3, sp, #12
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	4622      	mov	r2, r4
 8009c1a:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <_svfiprintf_r+0x1ec>)
 8009c1c:	a904      	add	r1, sp, #16
 8009c1e:	4640      	mov	r0, r8
 8009c20:	f000 f882 	bl	8009d28 <_printf_i>
 8009c24:	e7ea      	b.n	8009bfc <_svfiprintf_r+0x1b0>
 8009c26:	bf00      	nop
 8009c28:	0800a54f 	.word	0x0800a54f
 8009c2c:	0800a555 	.word	0x0800a555
 8009c30:	0800a559 	.word	0x0800a559
 8009c34:	00000000 	.word	0x00000000
 8009c38:	08009999 	.word	0x08009999

08009c3c <_printf_common>:
 8009c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c40:	4691      	mov	r9, r2
 8009c42:	461f      	mov	r7, r3
 8009c44:	688a      	ldr	r2, [r1, #8]
 8009c46:	690b      	ldr	r3, [r1, #16]
 8009c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	bfb8      	it	lt
 8009c50:	4613      	movlt	r3, r2
 8009c52:	f8c9 3000 	str.w	r3, [r9]
 8009c56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	b112      	cbz	r2, 8009c66 <_printf_common+0x2a>
 8009c60:	3301      	adds	r3, #1
 8009c62:	f8c9 3000 	str.w	r3, [r9]
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	0699      	lsls	r1, r3, #26
 8009c6a:	bf42      	ittt	mi
 8009c6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c70:	3302      	addmi	r3, #2
 8009c72:	f8c9 3000 	strmi.w	r3, [r9]
 8009c76:	6825      	ldr	r5, [r4, #0]
 8009c78:	f015 0506 	ands.w	r5, r5, #6
 8009c7c:	d107      	bne.n	8009c8e <_printf_common+0x52>
 8009c7e:	f104 0a19 	add.w	sl, r4, #25
 8009c82:	68e3      	ldr	r3, [r4, #12]
 8009c84:	f8d9 2000 	ldr.w	r2, [r9]
 8009c88:	1a9b      	subs	r3, r3, r2
 8009c8a:	42ab      	cmp	r3, r5
 8009c8c:	dc28      	bgt.n	8009ce0 <_printf_common+0xa4>
 8009c8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c92:	6822      	ldr	r2, [r4, #0]
 8009c94:	3300      	adds	r3, #0
 8009c96:	bf18      	it	ne
 8009c98:	2301      	movne	r3, #1
 8009c9a:	0692      	lsls	r2, r2, #26
 8009c9c:	d42d      	bmi.n	8009cfa <_printf_common+0xbe>
 8009c9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	47c0      	blx	r8
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d020      	beq.n	8009cee <_printf_common+0xb2>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	68e5      	ldr	r5, [r4, #12]
 8009cb0:	f8d9 2000 	ldr.w	r2, [r9]
 8009cb4:	f003 0306 	and.w	r3, r3, #6
 8009cb8:	2b04      	cmp	r3, #4
 8009cba:	bf08      	it	eq
 8009cbc:	1aad      	subeq	r5, r5, r2
 8009cbe:	68a3      	ldr	r3, [r4, #8]
 8009cc0:	6922      	ldr	r2, [r4, #16]
 8009cc2:	bf0c      	ite	eq
 8009cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cc8:	2500      	movne	r5, #0
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	bfc4      	itt	gt
 8009cce:	1a9b      	subgt	r3, r3, r2
 8009cd0:	18ed      	addgt	r5, r5, r3
 8009cd2:	f04f 0900 	mov.w	r9, #0
 8009cd6:	341a      	adds	r4, #26
 8009cd8:	454d      	cmp	r5, r9
 8009cda:	d11a      	bne.n	8009d12 <_printf_common+0xd6>
 8009cdc:	2000      	movs	r0, #0
 8009cde:	e008      	b.n	8009cf2 <_printf_common+0xb6>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	47c0      	blx	r8
 8009cea:	3001      	adds	r0, #1
 8009cec:	d103      	bne.n	8009cf6 <_printf_common+0xba>
 8009cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf6:	3501      	adds	r5, #1
 8009cf8:	e7c3      	b.n	8009c82 <_printf_common+0x46>
 8009cfa:	18e1      	adds	r1, r4, r3
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	2030      	movs	r0, #48	; 0x30
 8009d00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d04:	4422      	add	r2, r4
 8009d06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d0e:	3302      	adds	r3, #2
 8009d10:	e7c5      	b.n	8009c9e <_printf_common+0x62>
 8009d12:	2301      	movs	r3, #1
 8009d14:	4622      	mov	r2, r4
 8009d16:	4639      	mov	r1, r7
 8009d18:	4630      	mov	r0, r6
 8009d1a:	47c0      	blx	r8
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d0e6      	beq.n	8009cee <_printf_common+0xb2>
 8009d20:	f109 0901 	add.w	r9, r9, #1
 8009d24:	e7d8      	b.n	8009cd8 <_printf_common+0x9c>
	...

08009d28 <_printf_i>:
 8009d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009d30:	460c      	mov	r4, r1
 8009d32:	7e09      	ldrb	r1, [r1, #24]
 8009d34:	b085      	sub	sp, #20
 8009d36:	296e      	cmp	r1, #110	; 0x6e
 8009d38:	4617      	mov	r7, r2
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	4698      	mov	r8, r3
 8009d3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d40:	f000 80b3 	beq.w	8009eaa <_printf_i+0x182>
 8009d44:	d822      	bhi.n	8009d8c <_printf_i+0x64>
 8009d46:	2963      	cmp	r1, #99	; 0x63
 8009d48:	d036      	beq.n	8009db8 <_printf_i+0x90>
 8009d4a:	d80a      	bhi.n	8009d62 <_printf_i+0x3a>
 8009d4c:	2900      	cmp	r1, #0
 8009d4e:	f000 80b9 	beq.w	8009ec4 <_printf_i+0x19c>
 8009d52:	2958      	cmp	r1, #88	; 0x58
 8009d54:	f000 8083 	beq.w	8009e5e <_printf_i+0x136>
 8009d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d60:	e032      	b.n	8009dc8 <_printf_i+0xa0>
 8009d62:	2964      	cmp	r1, #100	; 0x64
 8009d64:	d001      	beq.n	8009d6a <_printf_i+0x42>
 8009d66:	2969      	cmp	r1, #105	; 0x69
 8009d68:	d1f6      	bne.n	8009d58 <_printf_i+0x30>
 8009d6a:	6820      	ldr	r0, [r4, #0]
 8009d6c:	6813      	ldr	r3, [r2, #0]
 8009d6e:	0605      	lsls	r5, r0, #24
 8009d70:	f103 0104 	add.w	r1, r3, #4
 8009d74:	d52a      	bpl.n	8009dcc <_printf_i+0xa4>
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6011      	str	r1, [r2, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	da03      	bge.n	8009d86 <_printf_i+0x5e>
 8009d7e:	222d      	movs	r2, #45	; 0x2d
 8009d80:	425b      	negs	r3, r3
 8009d82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d86:	486f      	ldr	r0, [pc, #444]	; (8009f44 <_printf_i+0x21c>)
 8009d88:	220a      	movs	r2, #10
 8009d8a:	e039      	b.n	8009e00 <_printf_i+0xd8>
 8009d8c:	2973      	cmp	r1, #115	; 0x73
 8009d8e:	f000 809d 	beq.w	8009ecc <_printf_i+0x1a4>
 8009d92:	d808      	bhi.n	8009da6 <_printf_i+0x7e>
 8009d94:	296f      	cmp	r1, #111	; 0x6f
 8009d96:	d020      	beq.n	8009dda <_printf_i+0xb2>
 8009d98:	2970      	cmp	r1, #112	; 0x70
 8009d9a:	d1dd      	bne.n	8009d58 <_printf_i+0x30>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	f043 0320 	orr.w	r3, r3, #32
 8009da2:	6023      	str	r3, [r4, #0]
 8009da4:	e003      	b.n	8009dae <_printf_i+0x86>
 8009da6:	2975      	cmp	r1, #117	; 0x75
 8009da8:	d017      	beq.n	8009dda <_printf_i+0xb2>
 8009daa:	2978      	cmp	r1, #120	; 0x78
 8009dac:	d1d4      	bne.n	8009d58 <_printf_i+0x30>
 8009dae:	2378      	movs	r3, #120	; 0x78
 8009db0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009db4:	4864      	ldr	r0, [pc, #400]	; (8009f48 <_printf_i+0x220>)
 8009db6:	e055      	b.n	8009e64 <_printf_i+0x13c>
 8009db8:	6813      	ldr	r3, [r2, #0]
 8009dba:	1d19      	adds	r1, r3, #4
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	6011      	str	r1, [r2, #0]
 8009dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e08c      	b.n	8009ee6 <_printf_i+0x1be>
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6011      	str	r1, [r2, #0]
 8009dd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009dd4:	bf18      	it	ne
 8009dd6:	b21b      	sxthne	r3, r3
 8009dd8:	e7cf      	b.n	8009d7a <_printf_i+0x52>
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	6825      	ldr	r5, [r4, #0]
 8009dde:	1d18      	adds	r0, r3, #4
 8009de0:	6010      	str	r0, [r2, #0]
 8009de2:	0628      	lsls	r0, r5, #24
 8009de4:	d501      	bpl.n	8009dea <_printf_i+0xc2>
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	e002      	b.n	8009df0 <_printf_i+0xc8>
 8009dea:	0668      	lsls	r0, r5, #25
 8009dec:	d5fb      	bpl.n	8009de6 <_printf_i+0xbe>
 8009dee:	881b      	ldrh	r3, [r3, #0]
 8009df0:	4854      	ldr	r0, [pc, #336]	; (8009f44 <_printf_i+0x21c>)
 8009df2:	296f      	cmp	r1, #111	; 0x6f
 8009df4:	bf14      	ite	ne
 8009df6:	220a      	movne	r2, #10
 8009df8:	2208      	moveq	r2, #8
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e00:	6865      	ldr	r5, [r4, #4]
 8009e02:	60a5      	str	r5, [r4, #8]
 8009e04:	2d00      	cmp	r5, #0
 8009e06:	f2c0 8095 	blt.w	8009f34 <_printf_i+0x20c>
 8009e0a:	6821      	ldr	r1, [r4, #0]
 8009e0c:	f021 0104 	bic.w	r1, r1, #4
 8009e10:	6021      	str	r1, [r4, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d13d      	bne.n	8009e92 <_printf_i+0x16a>
 8009e16:	2d00      	cmp	r5, #0
 8009e18:	f040 808e 	bne.w	8009f38 <_printf_i+0x210>
 8009e1c:	4665      	mov	r5, ip
 8009e1e:	2a08      	cmp	r2, #8
 8009e20:	d10b      	bne.n	8009e3a <_printf_i+0x112>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	07db      	lsls	r3, r3, #31
 8009e26:	d508      	bpl.n	8009e3a <_printf_i+0x112>
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	6862      	ldr	r2, [r4, #4]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	bfde      	ittt	le
 8009e30:	2330      	movle	r3, #48	; 0x30
 8009e32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e36:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009e3a:	ebac 0305 	sub.w	r3, ip, r5
 8009e3e:	6123      	str	r3, [r4, #16]
 8009e40:	f8cd 8000 	str.w	r8, [sp]
 8009e44:	463b      	mov	r3, r7
 8009e46:	aa03      	add	r2, sp, #12
 8009e48:	4621      	mov	r1, r4
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f7ff fef6 	bl	8009c3c <_printf_common>
 8009e50:	3001      	adds	r0, #1
 8009e52:	d14d      	bne.n	8009ef0 <_printf_i+0x1c8>
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e58:	b005      	add	sp, #20
 8009e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e5e:	4839      	ldr	r0, [pc, #228]	; (8009f44 <_printf_i+0x21c>)
 8009e60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e64:	6813      	ldr	r3, [r2, #0]
 8009e66:	6821      	ldr	r1, [r4, #0]
 8009e68:	1d1d      	adds	r5, r3, #4
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6015      	str	r5, [r2, #0]
 8009e6e:	060a      	lsls	r2, r1, #24
 8009e70:	d50b      	bpl.n	8009e8a <_printf_i+0x162>
 8009e72:	07ca      	lsls	r2, r1, #31
 8009e74:	bf44      	itt	mi
 8009e76:	f041 0120 	orrmi.w	r1, r1, #32
 8009e7a:	6021      	strmi	r1, [r4, #0]
 8009e7c:	b91b      	cbnz	r3, 8009e86 <_printf_i+0x15e>
 8009e7e:	6822      	ldr	r2, [r4, #0]
 8009e80:	f022 0220 	bic.w	r2, r2, #32
 8009e84:	6022      	str	r2, [r4, #0]
 8009e86:	2210      	movs	r2, #16
 8009e88:	e7b7      	b.n	8009dfa <_printf_i+0xd2>
 8009e8a:	064d      	lsls	r5, r1, #25
 8009e8c:	bf48      	it	mi
 8009e8e:	b29b      	uxthmi	r3, r3
 8009e90:	e7ef      	b.n	8009e72 <_printf_i+0x14a>
 8009e92:	4665      	mov	r5, ip
 8009e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e98:	fb02 3311 	mls	r3, r2, r1, r3
 8009e9c:	5cc3      	ldrb	r3, [r0, r3]
 8009e9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	2900      	cmp	r1, #0
 8009ea6:	d1f5      	bne.n	8009e94 <_printf_i+0x16c>
 8009ea8:	e7b9      	b.n	8009e1e <_printf_i+0xf6>
 8009eaa:	6813      	ldr	r3, [r2, #0]
 8009eac:	6825      	ldr	r5, [r4, #0]
 8009eae:	6961      	ldr	r1, [r4, #20]
 8009eb0:	1d18      	adds	r0, r3, #4
 8009eb2:	6010      	str	r0, [r2, #0]
 8009eb4:	0628      	lsls	r0, r5, #24
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	d501      	bpl.n	8009ebe <_printf_i+0x196>
 8009eba:	6019      	str	r1, [r3, #0]
 8009ebc:	e002      	b.n	8009ec4 <_printf_i+0x19c>
 8009ebe:	066a      	lsls	r2, r5, #25
 8009ec0:	d5fb      	bpl.n	8009eba <_printf_i+0x192>
 8009ec2:	8019      	strh	r1, [r3, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	6123      	str	r3, [r4, #16]
 8009ec8:	4665      	mov	r5, ip
 8009eca:	e7b9      	b.n	8009e40 <_printf_i+0x118>
 8009ecc:	6813      	ldr	r3, [r2, #0]
 8009ece:	1d19      	adds	r1, r3, #4
 8009ed0:	6011      	str	r1, [r2, #0]
 8009ed2:	681d      	ldr	r5, [r3, #0]
 8009ed4:	6862      	ldr	r2, [r4, #4]
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f7f6 f991 	bl	8000200 <memchr>
 8009ede:	b108      	cbz	r0, 8009ee4 <_printf_i+0x1bc>
 8009ee0:	1b40      	subs	r0, r0, r5
 8009ee2:	6060      	str	r0, [r4, #4]
 8009ee4:	6863      	ldr	r3, [r4, #4]
 8009ee6:	6123      	str	r3, [r4, #16]
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eee:	e7a7      	b.n	8009e40 <_printf_i+0x118>
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	462a      	mov	r2, r5
 8009ef4:	4639      	mov	r1, r7
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	47c0      	blx	r8
 8009efa:	3001      	adds	r0, #1
 8009efc:	d0aa      	beq.n	8009e54 <_printf_i+0x12c>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	079b      	lsls	r3, r3, #30
 8009f02:	d413      	bmi.n	8009f2c <_printf_i+0x204>
 8009f04:	68e0      	ldr	r0, [r4, #12]
 8009f06:	9b03      	ldr	r3, [sp, #12]
 8009f08:	4298      	cmp	r0, r3
 8009f0a:	bfb8      	it	lt
 8009f0c:	4618      	movlt	r0, r3
 8009f0e:	e7a3      	b.n	8009e58 <_printf_i+0x130>
 8009f10:	2301      	movs	r3, #1
 8009f12:	464a      	mov	r2, r9
 8009f14:	4639      	mov	r1, r7
 8009f16:	4630      	mov	r0, r6
 8009f18:	47c0      	blx	r8
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d09a      	beq.n	8009e54 <_printf_i+0x12c>
 8009f1e:	3501      	adds	r5, #1
 8009f20:	68e3      	ldr	r3, [r4, #12]
 8009f22:	9a03      	ldr	r2, [sp, #12]
 8009f24:	1a9b      	subs	r3, r3, r2
 8009f26:	42ab      	cmp	r3, r5
 8009f28:	dcf2      	bgt.n	8009f10 <_printf_i+0x1e8>
 8009f2a:	e7eb      	b.n	8009f04 <_printf_i+0x1dc>
 8009f2c:	2500      	movs	r5, #0
 8009f2e:	f104 0919 	add.w	r9, r4, #25
 8009f32:	e7f5      	b.n	8009f20 <_printf_i+0x1f8>
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1ac      	bne.n	8009e92 <_printf_i+0x16a>
 8009f38:	7803      	ldrb	r3, [r0, #0]
 8009f3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f42:	e76c      	b.n	8009e1e <_printf_i+0xf6>
 8009f44:	0800a560 	.word	0x0800a560
 8009f48:	0800a571 	.word	0x0800a571

08009f4c <_realloc_r>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	4607      	mov	r7, r0
 8009f50:	4614      	mov	r4, r2
 8009f52:	460e      	mov	r6, r1
 8009f54:	b921      	cbnz	r1, 8009f60 <_realloc_r+0x14>
 8009f56:	4611      	mov	r1, r2
 8009f58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f5c:	f7ff bc5c 	b.w	8009818 <_malloc_r>
 8009f60:	b922      	cbnz	r2, 8009f6c <_realloc_r+0x20>
 8009f62:	f7ff fc0b 	bl	800977c <_free_r>
 8009f66:	4625      	mov	r5, r4
 8009f68:	4628      	mov	r0, r5
 8009f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f6c:	f000 f814 	bl	8009f98 <_malloc_usable_size_r>
 8009f70:	42a0      	cmp	r0, r4
 8009f72:	d20f      	bcs.n	8009f94 <_realloc_r+0x48>
 8009f74:	4621      	mov	r1, r4
 8009f76:	4638      	mov	r0, r7
 8009f78:	f7ff fc4e 	bl	8009818 <_malloc_r>
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d0f2      	beq.n	8009f68 <_realloc_r+0x1c>
 8009f82:	4631      	mov	r1, r6
 8009f84:	4622      	mov	r2, r4
 8009f86:	f7ff fbcd 	bl	8009724 <memcpy>
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f7ff fbf5 	bl	800977c <_free_r>
 8009f92:	e7e9      	b.n	8009f68 <_realloc_r+0x1c>
 8009f94:	4635      	mov	r5, r6
 8009f96:	e7e7      	b.n	8009f68 <_realloc_r+0x1c>

08009f98 <_malloc_usable_size_r>:
 8009f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f9c:	1f18      	subs	r0, r3, #4
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	bfbc      	itt	lt
 8009fa2:	580b      	ldrlt	r3, [r1, r0]
 8009fa4:	18c0      	addlt	r0, r0, r3
 8009fa6:	4770      	bx	lr

08009fa8 <_init>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	bf00      	nop
 8009fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fae:	bc08      	pop	{r3}
 8009fb0:	469e      	mov	lr, r3
 8009fb2:	4770      	bx	lr

08009fb4 <_fini>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	bf00      	nop
 8009fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fba:	bc08      	pop	{r3}
 8009fbc:	469e      	mov	lr, r3
 8009fbe:	4770      	bx	lr
