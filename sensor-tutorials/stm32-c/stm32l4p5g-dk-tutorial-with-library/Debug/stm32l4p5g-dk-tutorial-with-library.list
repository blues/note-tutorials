
stm32l4p5g-dk-tutorial-with-library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118b8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08011a78  08011a78  00021a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801209c  0801209c  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801209c  0801209c  0002209c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080120a4  080120a4  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080120a4  080120a4  000220a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080120a8  080120a8  000220a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080120ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c58  200001f8  080122a4  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e50  080122a4  00030e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032e35  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005386  00000000  00000000  0006305d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002c48  00000000  00000000  000683e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002ad8  00000000  00000000  0006b030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033ba7  00000000  00000000  0006db08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000219e9  00000000  00000000  000a16af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00140b14  00000000  00000000  000c3098  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00203bac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c7e8  00000000  00000000  00203c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011a60 	.word	0x08011a60

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	08011a60 	.word	0x08011a60

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_ldivmod>:
 8000bcc:	b97b      	cbnz	r3, 8000bee <__aeabi_ldivmod+0x22>
 8000bce:	b972      	cbnz	r2, 8000bee <__aeabi_ldivmod+0x22>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bfbe      	ittt	lt
 8000bd4:	2000      	movlt	r0, #0
 8000bd6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bda:	e006      	blt.n	8000bea <__aeabi_ldivmod+0x1e>
 8000bdc:	bf08      	it	eq
 8000bde:	2800      	cmpeq	r0, #0
 8000be0:	bf1c      	itt	ne
 8000be2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000be6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bea:	f000 b9bd 	b.w	8000f68 <__aeabi_idiv0>
 8000bee:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf6:	2900      	cmp	r1, #0
 8000bf8:	db09      	blt.n	8000c0e <__aeabi_ldivmod+0x42>
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db1a      	blt.n	8000c34 <__aeabi_ldivmod+0x68>
 8000bfe:	f000 f84d 	bl	8000c9c <__udivmoddi4>
 8000c02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0a:	b004      	add	sp, #16
 8000c0c:	4770      	bx	lr
 8000c0e:	4240      	negs	r0, r0
 8000c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db1b      	blt.n	8000c50 <__aeabi_ldivmod+0x84>
 8000c18:	f000 f840 	bl	8000c9c <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4240      	negs	r0, r0
 8000c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	4770      	bx	lr
 8000c34:	4252      	negs	r2, r2
 8000c36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c3a:	f000 f82f 	bl	8000c9c <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4240      	negs	r0, r0
 8000c4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f821 	bl	8000c9c <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c80:	f000 b972 	b.w	8000f68 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9e08      	ldr	r6, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	4688      	mov	r8, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d14b      	bne.n	8000d42 <__udivmoddi4+0xa6>
 8000caa:	428a      	cmp	r2, r1
 8000cac:	4615      	mov	r5, r2
 8000cae:	d967      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	b14a      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb6:	f1c2 0720 	rsb	r7, r2, #32
 8000cba:	fa01 f302 	lsl.w	r3, r1, r2
 8000cbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000cc2:	4095      	lsls	r5, r2
 8000cc4:	ea47 0803 	orr.w	r8, r7, r3
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd4:	fa1f fc85 	uxth.w	ip, r5
 8000cd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ce0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18eb      	adds	r3, r5, r3
 8000cea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cee:	f080 811b 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8118 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000cf8:	3f02      	subs	r7, #2
 8000cfa:	442b      	add	r3, r5
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d10:	45a4      	cmp	ip, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x290>
 8000d1e:	45a4      	cmp	ip, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x290>
 8000d24:	3802      	subs	r0, #2
 8000d26:	442c      	add	r4, r5
 8000d28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	2700      	movs	r7, #0
 8000d32:	b11e      	cbz	r6, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xbe>
 8000d46:	2e00      	cmp	r6, #0
 8000d48:	f000 80eb 	beq.w	8000f22 <__udivmoddi4+0x286>
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d52:	4638      	mov	r0, r7
 8000d54:	4639      	mov	r1, r7
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f783 	clz	r7, r3
 8000d5e:	2f00      	cmp	r7, #0
 8000d60:	d147      	bne.n	8000df2 <__udivmoddi4+0x156>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd0>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80fa 	bhi.w	8000f60 <__udivmoddi4+0x2c4>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	4698      	mov	r8, r3
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000d7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xe8>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 808f 	bne.w	8000eac <__udivmoddi4+0x210>
 8000d8e:	1b49      	subs	r1, r1, r5
 8000d90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d94:	fa1f f885 	uxth.w	r8, r5
 8000d98:	2701      	movs	r7, #1
 8000d9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9e:	0c23      	lsrs	r3, r4, #16
 8000da0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb08 f10c 	mul.w	r1, r8, ip
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x124>
 8000db0:	18eb      	adds	r3, r5, r3
 8000db2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x122>
 8000db8:	4299      	cmp	r1, r3
 8000dba:	f200 80cd 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000dbe:	4684      	mov	ip, r0
 8000dc0:	1a59      	subs	r1, r3, r1
 8000dc2:	b2a3      	uxth	r3, r4
 8000dc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dd0:	fb08 f800 	mul.w	r8, r8, r0
 8000dd4:	45a0      	cmp	r8, r4
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0x14c>
 8000dd8:	192c      	adds	r4, r5, r4
 8000dda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x14a>
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	f200 80b6 	bhi.w	8000f52 <__udivmoddi4+0x2b6>
 8000de6:	4618      	mov	r0, r3
 8000de8:	eba4 0408 	sub.w	r4, r4, r8
 8000dec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000df0:	e79f      	b.n	8000d32 <__udivmoddi4+0x96>
 8000df2:	f1c7 0c20 	rsb	ip, r7, #32
 8000df6:	40bb      	lsls	r3, r7
 8000df8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e00:	fa01 f407 	lsl.w	r4, r1, r7
 8000e04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e10:	4325      	orrs	r5, r4
 8000e12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e16:	0c2c      	lsrs	r4, r5, #16
 8000e18:	fb08 3319 	mls	r3, r8, r9, r3
 8000e1c:	fa1f fa8e 	uxth.w	sl, lr
 8000e20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e24:	fb09 f40a 	mul.w	r4, r9, sl
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e32:	d90b      	bls.n	8000e4c <__udivmoddi4+0x1b0>
 8000e34:	eb1e 0303 	adds.w	r3, lr, r3
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	f080 8087 	bcs.w	8000f4e <__udivmoddi4+0x2b2>
 8000e40:	429c      	cmp	r4, r3
 8000e42:	f240 8084 	bls.w	8000f4e <__udivmoddi4+0x2b2>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	4473      	add	r3, lr
 8000e4c:	1b1b      	subs	r3, r3, r4
 8000e4e:	b2ad      	uxth	r5, r5
 8000e50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e54:	fb08 3310 	mls	r3, r8, r0, r3
 8000e58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e60:	45a2      	cmp	sl, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1da>
 8000e64:	eb1e 0404 	adds.w	r4, lr, r4
 8000e68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e6c:	d26b      	bcs.n	8000f46 <__udivmoddi4+0x2aa>
 8000e6e:	45a2      	cmp	sl, r4
 8000e70:	d969      	bls.n	8000f46 <__udivmoddi4+0x2aa>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4474      	add	r4, lr
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	eba4 040a 	sub.w	r4, r4, sl
 8000e82:	454c      	cmp	r4, r9
 8000e84:	46c2      	mov	sl, r8
 8000e86:	464b      	mov	r3, r9
 8000e88:	d354      	bcc.n	8000f34 <__udivmoddi4+0x298>
 8000e8a:	d051      	beq.n	8000f30 <__udivmoddi4+0x294>
 8000e8c:	2e00      	cmp	r6, #0
 8000e8e:	d069      	beq.n	8000f64 <__udivmoddi4+0x2c8>
 8000e90:	ebb1 050a 	subs.w	r5, r1, sl
 8000e94:	eb64 0403 	sbc.w	r4, r4, r3
 8000e98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e9c:	40fd      	lsrs	r5, r7
 8000e9e:	40fc      	lsrs	r4, r7
 8000ea0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	e747      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb4:	4095      	lsls	r5, r2
 8000eb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eba:	fa21 f303 	lsr.w	r3, r1, r3
 8000ebe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ec2:	4338      	orrs	r0, r7
 8000ec4:	0c01      	lsrs	r1, r0, #16
 8000ec6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eca:	fa1f f885 	uxth.w	r8, r5
 8000ece:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ed2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed6:	fb07 f308 	mul.w	r3, r7, r8
 8000eda:	428b      	cmp	r3, r1
 8000edc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x256>
 8000ee2:	1869      	adds	r1, r5, r1
 8000ee4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ee8:	d22f      	bcs.n	8000f4a <__udivmoddi4+0x2ae>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d92d      	bls.n	8000f4a <__udivmoddi4+0x2ae>
 8000eee:	3f02      	subs	r7, #2
 8000ef0:	4429      	add	r1, r5
 8000ef2:	1acb      	subs	r3, r1, r3
 8000ef4:	b281      	uxth	r1, r0
 8000ef6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb00 f308 	mul.w	r3, r0, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d907      	bls.n	8000f1a <__udivmoddi4+0x27e>
 8000f0a:	1869      	adds	r1, r5, r1
 8000f0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f10:	d217      	bcs.n	8000f42 <__udivmoddi4+0x2a6>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d915      	bls.n	8000f42 <__udivmoddi4+0x2a6>
 8000f16:	3802      	subs	r0, #2
 8000f18:	4429      	add	r1, r5
 8000f1a:	1ac9      	subs	r1, r1, r3
 8000f1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f20:	e73b      	b.n	8000d9a <__udivmoddi4+0xfe>
 8000f22:	4637      	mov	r7, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e709      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f28:	4607      	mov	r7, r0
 8000f2a:	e6e7      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f30:	4541      	cmp	r1, r8
 8000f32:	d2ab      	bcs.n	8000e8c <__udivmoddi4+0x1f0>
 8000f34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f38:	eb69 020e 	sbc.w	r2, r9, lr
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	4613      	mov	r3, r2
 8000f40:	e7a4      	b.n	8000e8c <__udivmoddi4+0x1f0>
 8000f42:	4660      	mov	r0, ip
 8000f44:	e7e9      	b.n	8000f1a <__udivmoddi4+0x27e>
 8000f46:	4618      	mov	r0, r3
 8000f48:	e795      	b.n	8000e76 <__udivmoddi4+0x1da>
 8000f4a:	4667      	mov	r7, ip
 8000f4c:	e7d1      	b.n	8000ef2 <__udivmoddi4+0x256>
 8000f4e:	4681      	mov	r9, r0
 8000f50:	e77c      	b.n	8000e4c <__udivmoddi4+0x1b0>
 8000f52:	3802      	subs	r0, #2
 8000f54:	442c      	add	r4, r5
 8000f56:	e747      	b.n	8000de8 <__udivmoddi4+0x14c>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	442b      	add	r3, r5
 8000f5e:	e72f      	b.n	8000dc0 <__udivmoddi4+0x124>
 8000f60:	4638      	mov	r0, r7
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xda>
 8000f64:	4637      	mov	r7, r6
 8000f66:	e6e9      	b.n	8000d3c <__udivmoddi4+0xa0>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f001 fa14 	bl	80023a2 <null_ptr_check>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d120      	bne.n	8000fc8 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f8ef 	bl	800116a <bme680_soft_reset>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8000f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d117      	bne.n	8000fc8 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	20d0      	movs	r0, #208	; 0xd0
 8000fa0:	f000 f818 	bl	8000fd4 <bme680_get_regs>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10b      	bne.n	8000fc8 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b61      	cmp	r3, #97	; 0x61
 8000fb6:	d105      	bne.n	8000fc4 <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 fbdf 	bl	800177c <get_calib_data>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e001      	b.n	8000fc8 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8000fc4:	23fd      	movs	r3, #253	; 0xfd
 8000fc6:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f001 f9db 	bl	80023a2 <null_ptr_check>
 8000fec:	4603      	mov	r3, r0
 8000fee:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 8000ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d126      	bne.n	8001046 <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	789b      	ldrb	r3, [r3, #2]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10e      	bne.n	800101e <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f8fd 	bl	8002204 <set_mem_page>
 800100a:	4603      	mov	r3, r0
 800100c:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 800100e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d103      	bne.n	800101e <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800101c:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7858      	ldrb	r0, [r3, #1]
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	7bf9      	ldrb	r1, [r7, #15]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	47a0      	blx	r4
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 8001042:	23fe      	movs	r3, #254	; 0xfe
 8001044:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001046:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800104a:	4618      	mov	r0, r3
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}

08001052 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 8001052:	b5b0      	push	{r4, r5, r7, lr}
 8001054:	b090      	sub	sp, #64	; 0x40
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4613      	mov	r3, r2
 8001060:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	2228      	movs	r2, #40	; 0x28
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f010 f8da 	bl	8011224 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f001 f996 	bl	80023a2 <null_ptr_check>
 8001076:	4603      	mov	r3, r0
 8001078:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 800107c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001080:	2b00      	cmp	r3, #0
 8001082:	d16c      	bne.n	800115e <bme680_set_regs+0x10c>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d064      	beq.n	8001154 <bme680_set_regs+0x102>
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b13      	cmp	r3, #19
 800108e:	d861      	bhi.n	8001154 <bme680_set_regs+0x102>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8001090:	2300      	movs	r3, #0
 8001092:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001094:	e037      	b.n	8001106 <bme680_set_regs+0xb4>
				if (dev->intf == BME680_SPI_INTF) {
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	789b      	ldrb	r3, [r3, #2]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d119      	bne.n	80010d2 <bme680_set_regs+0x80>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 800109e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 f8ab 	bl	8002204 <set_mem_page>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80010b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80010ca:	440b      	add	r3, r1
 80010cc:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80010d0:	e00a      	b.n	80010e8 <bme680_set_regs+0x96>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 80010d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	441a      	add	r2, r3
 80010d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80010e2:	440b      	add	r3, r1
 80010e4:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 80010e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	441a      	add	r2, r3
 80010ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	3301      	adds	r3, #1
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80010fa:	440b      	add	r3, r1
 80010fc:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 8001100:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001102:	3301      	adds	r3, #1
 8001104:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	b29b      	uxth	r3, r3
 800110a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800110c:	429a      	cmp	r2, r3
 800110e:	d3c2      	bcc.n	8001096 <bme680_set_regs+0x44>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 8001110:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001114:	2b00      	cmp	r3, #0
 8001116:	d121      	bne.n	800115c <bme680_set_regs+0x10a>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	7858      	ldrb	r0, [r3, #1]
 8001120:	7d39      	ldrb	r1, [r7, #20]
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b29b      	uxth	r3, r3
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	b29b      	uxth	r3, r3
 800112a:	3b01      	subs	r3, #1
 800112c:	b29d      	uxth	r5, r3
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	462b      	mov	r3, r5
 8001136:	47a0      	blx	r4
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <bme680_set_regs+0x10a>
					rslt = BME680_E_COM_FAIL;
 800114c:	23fe      	movs	r3, #254	; 0xfe
 800114e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 8001152:	e003      	b.n	800115c <bme680_set_regs+0x10a>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8001154:	23fc      	movs	r3, #252	; 0xfc
 8001156:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800115a:	e000      	b.n	800115e <bme680_set_regs+0x10c>
			if (rslt == BME680_OK) {
 800115c:	bf00      	nop
		}
	}

	return rslt;
 800115e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001162:	4618      	mov	r0, r3
 8001164:	3740      	adds	r7, #64	; 0x40
 8001166:	46bd      	mov	sp, r7
 8001168:	bdb0      	pop	{r4, r5, r7, pc}

0800116a <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8001172:	23e0      	movs	r3, #224	; 0xe0
 8001174:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8001176:	23b6      	movs	r3, #182	; 0xb6
 8001178:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f001 f911 	bl	80023a2 <null_ptr_check>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d127      	bne.n	80011dc <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	789b      	ldrb	r3, [r3, #2]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d104      	bne.n	800119e <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f001 f89a 	bl	80022ce <get_mem_page>
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d11a      	bne.n	80011dc <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011a6:	f107 010d 	add.w	r1, r7, #13
 80011aa:	f107 000e 	add.w	r0, r7, #14
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f7ff ff4e 	bl	8001052 <bme680_set_regs>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011be:	200a      	movs	r0, #10
 80011c0:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d108      	bne.n	80011dc <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d104      	bne.n	80011dc <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f001 f87b 	bl	80022ce <get_mem_page>
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 80011dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	809a      	strh	r2, [r3, #4]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	809a      	strh	r2, [r3, #4]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001216:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001218:	6838      	ldr	r0, [r7, #0]
 800121a:	f001 f8c2 	bl	80023a2 <null_ptr_check>
 800121e:	4603      	mov	r3, r0
 8001220:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 8001222:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 81ac 	bne.w	8001584 <bme680_set_sensor_settings+0x39c>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <bme680_set_sensor_settings+0x58>
			rslt = set_gas_config(dev);
 8001236:	6838      	ldr	r0, [r7, #0]
 8001238:	f000 fbca 	bl	80019d0 <set_gas_config>
 800123c:	4603      	mov	r3, r0
 800123e:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 8001248:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d104      	bne.n	800125a <bme680_set_sensor_settings+0x72>
			rslt = bme680_set_sensor_mode(dev);
 8001250:	6838      	ldr	r0, [r7, #0]
 8001252:	f000 f99d 	bl	8001590 <bme680_set_sensor_mode>
 8001256:	4603      	mov	r3, r0
 8001258:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b00      	cmp	r3, #0
 8001262:	d03f      	beq.n	80012e4 <bme680_set_sensor_settings+0xfc>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2207      	movs	r2, #7
 800126e:	2100      	movs	r1, #0
 8001270:	f001 f85c 	bl	800232c <boundary_check>
 8001274:	4603      	mov	r3, r0
 8001276:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 8001278:	2375      	movs	r3, #117	; 0x75
 800127a:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800127c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d108      	bne.n	8001296 <bme680_set_sensor_settings+0xae>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001284:	f107 011b 	add.w	r1, r7, #27
 8001288:	7f38      	ldrb	r0, [r7, #28]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2201      	movs	r2, #1
 800128e:	f7ff fea1 	bl	8000fd4 <bme680_get_regs>
 8001292:	4603      	mov	r3, r0
 8001294:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	2b00      	cmp	r3, #0
 800129e:	d010      	beq.n	80012c2 <bme680_set_sensor_settings+0xda>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80012a0:	7efb      	ldrb	r3, [r7, #27]
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	f023 031c 	bic.w	r3, r3, #28
 80012a8:	b25a      	sxtb	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	f003 031c 	and.w	r3, r3, #28
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 80012c2:	7fbb      	ldrb	r3, [r7, #30]
 80012c4:	f107 0220 	add.w	r2, r7, #32
 80012c8:	4413      	add	r3, r2
 80012ca:	7f3a      	ldrb	r2, [r7, #28]
 80012cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80012d0:	7fbb      	ldrb	r3, [r7, #30]
 80012d2:	7efa      	ldrb	r2, [r7, #27]
 80012d4:	f107 0120 	add.w	r1, r7, #32
 80012d8:	440b      	add	r3, r1
 80012da:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80012de:	7fbb      	ldrb	r3, [r7, #30]
 80012e0:	3301      	adds	r3, #1
 80012e2:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	f003 0320 	and.w	r3, r3, #32
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d039      	beq.n	8001362 <bme680_set_sensor_settings+0x17a>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2208      	movs	r2, #8
 80012f8:	2100      	movs	r1, #0
 80012fa:	f001 f817 	bl	800232c <boundary_check>
 80012fe:	4603      	mov	r3, r0
 8001300:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8001302:	2370      	movs	r3, #112	; 0x70
 8001304:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001306:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d108      	bne.n	8001320 <bme680_set_sensor_settings+0x138>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800130e:	f107 011b 	add.w	r1, r7, #27
 8001312:	7f38      	ldrb	r0, [r7, #28]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2201      	movs	r2, #1
 8001318:	f7ff fe5c 	bl	8000fd4 <bme680_get_regs>
 800131c:	4603      	mov	r3, r0
 800131e:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8001320:	7efb      	ldrb	r3, [r7, #27]
 8001322:	b25b      	sxtb	r3, r3
 8001324:	f023 0308 	bic.w	r3, r3, #8
 8001328:	b25a      	sxtb	r2, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001330:	b25b      	sxtb	r3, r3
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	b25b      	sxtb	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b25b      	sxtb	r3, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001340:	7fbb      	ldrb	r3, [r7, #30]
 8001342:	f107 0220 	add.w	r2, r7, #32
 8001346:	4413      	add	r3, r2
 8001348:	7f3a      	ldrb	r2, [r7, #28]
 800134a:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800134e:	7fbb      	ldrb	r3, [r7, #30]
 8001350:	7efa      	ldrb	r2, [r7, #27]
 8001352:	f107 0120 	add.w	r1, r7, #32
 8001356:	440b      	add	r3, r1
 8001358:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800135c:	7fbb      	ldrb	r3, [r7, #30]
 800135e:	3301      	adds	r3, #1
 8001360:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d052      	beq.n	8001412 <bme680_set_sensor_settings+0x22a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2205      	movs	r2, #5
 8001376:	2100      	movs	r1, #0
 8001378:	f000 ffd8 	bl	800232c <boundary_check>
 800137c:	4603      	mov	r3, r0
 800137e:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8001380:	2374      	movs	r3, #116	; 0x74
 8001382:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001384:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d108      	bne.n	800139e <bme680_set_sensor_settings+0x1b6>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800138c:	f107 011b 	add.w	r1, r7, #27
 8001390:	7f38      	ldrb	r0, [r7, #28]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2201      	movs	r2, #1
 8001396:	f7ff fe1d 	bl	8000fd4 <bme680_get_regs>
 800139a:	4603      	mov	r3, r0
 800139c:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00d      	beq.n	80013c4 <bme680_set_sensor_settings+0x1dc>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80013a8:	7efb      	ldrb	r3, [r7, #27]
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	b25a      	sxtb	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013b8:	015b      	lsls	r3, r3, #5
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d010      	beq.n	80013f0 <bme680_set_sensor_settings+0x208>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80013ce:	7efb      	ldrb	r3, [r7, #27]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	f023 031c 	bic.w	r3, r3, #28
 80013d6:	b25a      	sxtb	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	f003 031c 	and.w	r3, r3, #28
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 80013f0:	7fbb      	ldrb	r3, [r7, #30]
 80013f2:	f107 0220 	add.w	r2, r7, #32
 80013f6:	4413      	add	r3, r2
 80013f8:	7f3a      	ldrb	r2, [r7, #28]
 80013fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80013fe:	7fbb      	ldrb	r3, [r7, #30]
 8001400:	7efa      	ldrb	r2, [r7, #27]
 8001402:	f107 0120 	add.w	r1, r7, #32
 8001406:	440b      	add	r3, r1
 8001408:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800140c:	7fbb      	ldrb	r3, [r7, #30]
 800140e:	3301      	adds	r3, #1
 8001410:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d039      	beq.n	8001490 <bme680_set_sensor_settings+0x2a8>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2205      	movs	r2, #5
 8001426:	2100      	movs	r1, #0
 8001428:	f000 ff80 	bl	800232c <boundary_check>
 800142c:	4603      	mov	r3, r0
 800142e:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 8001430:	2372      	movs	r3, #114	; 0x72
 8001432:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001434:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d108      	bne.n	800144e <bme680_set_sensor_settings+0x266>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800143c:	f107 011b 	add.w	r1, r7, #27
 8001440:	7f38      	ldrb	r0, [r7, #28]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	f7ff fdc5 	bl	8000fd4 <bme680_get_regs>
 800144a:	4603      	mov	r3, r0
 800144c:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 800144e:	7efb      	ldrb	r3, [r7, #27]
 8001450:	b25b      	sxtb	r3, r3
 8001452:	f023 0307 	bic.w	r3, r3, #7
 8001456:	b25a      	sxtb	r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800145e:	b25b      	sxtb	r3, r3
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	b25b      	sxtb	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b25b      	sxtb	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 800146e:	7fbb      	ldrb	r3, [r7, #30]
 8001470:	f107 0220 	add.w	r2, r7, #32
 8001474:	4413      	add	r3, r2
 8001476:	7f3a      	ldrb	r2, [r7, #28]
 8001478:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800147c:	7fbb      	ldrb	r3, [r7, #30]
 800147e:	7efa      	ldrb	r2, [r7, #27]
 8001480:	f107 0120 	add.w	r1, r7, #32
 8001484:	440b      	add	r3, r1
 8001486:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800148a:	7fbb      	ldrb	r3, [r7, #30]
 800148c:	3301      	adds	r3, #1
 800148e:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d062      	beq.n	8001560 <bme680_set_sensor_settings+0x378>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2201      	movs	r2, #1
 80014a4:	2100      	movs	r1, #0
 80014a6:	f000 ff41 	bl	800232c <boundary_check>
 80014aa:	4603      	mov	r3, r0
 80014ac:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 80014ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <bme680_set_sensor_settings+0x2e2>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	220a      	movs	r2, #10
 80014c0:	2100      	movs	r1, #0
 80014c2:	f000 ff33 	bl	800232c <boundary_check>
 80014c6:	4603      	mov	r3, r0
 80014c8:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 80014ca:	2371      	movs	r3, #113	; 0x71
 80014cc:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80014ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d108      	bne.n	80014e8 <bme680_set_sensor_settings+0x300>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80014d6:	f107 011b 	add.w	r1, r7, #27
 80014da:	7f38      	ldrb	r0, [r7, #28]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	f7ff fd78 	bl	8000fd4 <bme680_get_regs>
 80014e4:	4603      	mov	r3, r0
 80014e6:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d010      	beq.n	8001514 <bme680_set_sensor_settings+0x32c>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80014f2:	7efb      	ldrb	r3, [r7, #27]
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	f023 0310 	bic.w	r3, r3, #16
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	b25b      	sxtb	r3, r3
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	b25b      	sxtb	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b25b      	sxtb	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00f      	beq.n	800153e <bme680_set_sensor_settings+0x356>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 800151e:	7efb      	ldrb	r3, [r7, #27]
 8001520:	b25b      	sxtb	r3, r3
 8001522:	f023 030f 	bic.w	r3, r3, #15
 8001526:	b25a      	sxtb	r2, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800152e:	b25b      	sxtb	r3, r3
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	b25b      	sxtb	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b25b      	sxtb	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 800153e:	7fbb      	ldrb	r3, [r7, #30]
 8001540:	f107 0220 	add.w	r2, r7, #32
 8001544:	4413      	add	r3, r2
 8001546:	7f3a      	ldrb	r2, [r7, #28]
 8001548:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800154c:	7fbb      	ldrb	r3, [r7, #30]
 800154e:	7efa      	ldrb	r2, [r7, #27]
 8001550:	f107 0120 	add.w	r1, r7, #32
 8001554:	440b      	add	r3, r1
 8001556:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800155a:	7fbb      	ldrb	r3, [r7, #30]
 800155c:	3301      	adds	r3, #1
 800155e:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8001560:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d109      	bne.n	800157c <bme680_set_sensor_settings+0x394>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8001568:	7fba      	ldrb	r2, [r7, #30]
 800156a:	f107 010c 	add.w	r1, r7, #12
 800156e:	f107 0014 	add.w	r0, r7, #20
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f7ff fd6d 	bl	8001052 <bme680_set_regs>
 8001578:	4603      	mov	r3, r0
 800157a:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	7f7a      	ldrb	r2, [r7, #29]
 8001580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 8001584:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 800159c:	2374      	movs	r3, #116	; 0x74
 800159e:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fefe 	bl	80023a2 <null_ptr_check>
 80015a6:	4603      	mov	r3, r0
 80015a8:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d14c      	bne.n	800164c <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 80015b2:	f107 010d 	add.w	r1, r7, #13
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	2074      	movs	r0, #116	; 0x74
 80015bc:	f7ff fd0a 	bl	8000fd4 <bme680_get_regs>
 80015c0:	4603      	mov	r3, r0
 80015c2:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 80015c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d119      	bne.n	8001600 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d012      	beq.n	8001600 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80015da:	7b7b      	ldrb	r3, [r7, #13]
 80015dc:	f023 0303 	bic.w	r3, r3, #3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80015e4:	f107 010d 	add.w	r1, r7, #13
 80015e8:	f107 000c 	add.w	r0, r7, #12
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f7ff fd2f 	bl	8001052 <bme680_set_regs>
 80015f4:	4603      	mov	r3, r0
 80015f6:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015fc:	200a      	movs	r0, #10
 80015fe:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1d5      	bne.n	80015b2 <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01d      	beq.n	800164c <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	b25b      	sxtb	r3, r3
 8001614:	f023 0303 	bic.w	r3, r3, #3
 8001618:	b25a      	sxtb	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001620:	b25b      	sxtb	r3, r3
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	b25b      	sxtb	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b25b      	sxtb	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8001630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d109      	bne.n	800164c <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001638:	f107 010d 	add.w	r1, r7, #13
 800163c:	f107 000c 	add.w	r0, r7, #12
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fd05 	bl	8001052 <bme680_set_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800164c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8001662:	4a2e      	ldr	r2, [pc, #184]	; (800171c <bme680_get_profile_dur+0xc4>)
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800166c:	6018      	str	r0, [r3, #0]
 800166e:	3304      	adds	r3, #4
 8001670:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001678:	f107 0218 	add.w	r2, r7, #24
 800167c:	4413      	add	r3, r2
 800167e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001682:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800168a:	f107 0218 	add.w	r2, r7, #24
 800168e:	4413      	add	r3, r2
 8001690:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001694:	461a      	mov	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	4413      	add	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016a2:	f107 0218 	add.w	r2, r7, #24
 80016a6:	4413      	add	r3, r2
 80016a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016ac:	461a      	mov	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	4413      	add	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	f203 7374 	addw	r3, r3, #1908	; 0x774
 80016c6:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	f603 1351 	addw	r3, r3, #2385	; 0x951
 80016ce:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80016d6:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <bme680_get_profile_dur+0xc8>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	3301      	adds	r3, #1
 80016e8:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <bme680_get_profile_dur+0xb6>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	881a      	ldrh	r2, [r3, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001706:	4413      	add	r3, r2
 8001708:	b29a      	uxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	801a      	strh	r2, [r3, #0]
	}
}
 800170e:	bf00      	nop
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	08011a78 	.word	0x08011a78
 8001720:	10624dd3 	.word	0x10624dd3

08001724 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800172e:	6838      	ldr	r0, [r7, #0]
 8001730:	f000 fe37 	bl	80023a2 <null_ptr_check>
 8001734:	4603      	mov	r3, r0
 8001736:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d117      	bne.n	8001770 <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8001740:	6839      	ldr	r1, [r7, #0]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fca5 	bl	8002092 <read_field_data>
 8001748:	4603      	mov	r3, r0
 800174a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 800174c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10d      	bne.n	8001770 <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b25b      	sxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	da04      	bge.n	8001768 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001766:	e003      	b.n	8001770 <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}

	return rslt;
 8001770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	2229      	movs	r2, #41	; 0x29
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f00f fd49 	bl	8011224 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 8001792:	2300      	movs	r3, #0
 8001794:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fe03 	bl	80023a2 <null_ptr_check>
 800179c:	4603      	mov	r3, r0
 800179e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 80017a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 810c 	bne.w	80019c4 <get_calib_data+0x248>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 80017ac:	f107 010c 	add.w	r1, r7, #12
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2219      	movs	r2, #25
 80017b4:	2089      	movs	r0, #137	; 0x89
 80017b6:	f7ff fc0d 	bl	8000fd4 <bme680_get_regs>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 80017c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10b      	bne.n	80017e0 <get_calib_data+0x64>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	f103 0119 	add.w	r1, r3, #25
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2210      	movs	r2, #16
 80017d4:	20e1      	movs	r0, #225	; 0xe1
 80017d6:	f7ff fbfd 	bl	8000fd4 <bme680_get_regs>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 80017e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 80017f8:	7bbb      	ldrb	r3, [r7, #14]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	7b7b      	ldrb	r3, [r7, #13]
 8001800:	b21b      	sxth	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	b21a      	sxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	b25a      	sxtb	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8001812:	7cbb      	ldrb	r3, [r7, #18]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b21a      	sxth	r2, r3
 8001818:	7c7b      	ldrb	r3, [r7, #17]
 800181a:	b21b      	sxth	r3, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	b21b      	sxth	r3, r3
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8001826:	7d3b      	ldrb	r3, [r7, #20]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	b21a      	sxth	r2, r3
 800182c:	7cfb      	ldrb	r3, [r7, #19]
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b21a      	sxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8001838:	7d7b      	ldrb	r3, [r7, #21]
 800183a:	b25a      	sxtb	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8001842:	7e3b      	ldrb	r3, [r7, #24]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	b21a      	sxth	r2, r3
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	b21b      	sxth	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	b21a      	sxth	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8001854:	7ebb      	ldrb	r3, [r7, #26]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	b21a      	sxth	r2, r3
 800185a:	7e7b      	ldrb	r3, [r7, #25]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b21a      	sxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8001866:	7f3b      	ldrb	r3, [r7, #28]
 8001868:	b25a      	sxtb	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8001870:	7efb      	ldrb	r3, [r7, #27]
 8001872:	b25a      	sxtb	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 800187a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	b21a      	sxth	r2, r3
 8001882:	7ffb      	ldrb	r3, [r7, #31]
 8001884:	b21b      	sxth	r3, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	b21a      	sxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 800188e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	b21a      	sxth	r2, r3
 8001896:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800189a:	b21b      	sxth	r3, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	b21a      	sxth	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80018a4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018b2:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018d0:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80018e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018ec:	b25a      	sxtb	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80018f2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80018f6:	b25a      	sxtb	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 80018fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001900:	b25a      	sxtb	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8001906:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 800190e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001912:	b25a      	sxtb	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8001918:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800191c:	b25a      	sxtb	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8001922:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b21a      	sxth	r2, r3
 800192a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800192e:	b21b      	sxth	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b21a      	sxth	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8001938:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800193c:	b25a      	sxtb	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8001942:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001946:	2b00      	cmp	r3, #0
 8001948:	d135      	bne.n	80019b6 <get_calib_data+0x23a>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 800194a:	f107 010b 	add.w	r1, r7, #11
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	2002      	movs	r0, #2
 8001954:	f7ff fb3e 	bl	8000fd4 <bme680_get_regs>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 800195e:	7afb      	ldrb	r3, [r7, #11]
 8001960:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001964:	2b00      	cmp	r3, #0
 8001966:	da00      	bge.n	800196a <get_calib_data+0x1ee>
 8001968:	330f      	adds	r3, #15
 800196a:	111b      	asrs	r3, r3, #4
 800196c:	b2da      	uxtb	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 8001974:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001978:	2b00      	cmp	r3, #0
 800197a:	d11c      	bne.n	80019b6 <get_calib_data+0x23a>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 800197c:	f107 010b 	add.w	r1, r7, #11
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fb25 	bl	8000fd4 <bme680_get_regs>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 8001990:	7afb      	ldrb	r3, [r7, #11]
 8001992:	b25a      	sxtb	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 800199a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <get_calib_data+0x23a>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 80019a2:	f107 010b 	add.w	r1, r7, #11
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	2004      	movs	r0, #4
 80019ac:	f7ff fb12 	bl	8000fd4 <bme680_get_regs>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 80019b6:	7afb      	ldrb	r3, [r7, #11]
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	111b      	asrs	r3, r3, #4
 80019bc:	b25a      	sxtb	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 80019c4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3738      	adds	r7, #56	; 0x38
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fce2 	bl	80023a2 <null_ptr_check>
 80019de:	4603      	mov	r3, r0
 80019e0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d132      	bne.n	8001a50 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 80019ea:	2300      	movs	r3, #0
 80019ec:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 80019ee:	2300      	movs	r3, #0
 80019f0:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d119      	bne.n	8001a30 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80019fc:	235a      	movs	r3, #90	; 0x5a
 80019fe:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fa9f 	bl	8001f4c <calc_heater_res>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8001a12:	2364      	movs	r3, #100	; 0x64
 8001a14:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fb13 	bl	8002048 <calc_heater_dur>
 8001a22:	4603      	mov	r3, r0
 8001a24:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a2e:	e001      	b.n	8001a34 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 8001a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8001a3c:	f107 0108 	add.w	r1, r7, #8
 8001a40:	f107 000c 	add.w	r0, r7, #12
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f7ff fb03 	bl	8001052 <bme680_set_regs>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8001a5c:	b4b0      	push	{r4, r5, r7}
 8001a5e:	b08b      	sub	sp, #44	; 0x2c
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	10da      	asrs	r2, r3, #3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	8adb      	ldrh	r3, [r3, #22]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a76:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a86:	6a3a      	ldr	r2, [r7, #32]
 8001a88:	fb04 f102 	mul.w	r1, r4, r2
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	fb03 f202 	mul.w	r2, r3, r2
 8001a92:	1888      	adds	r0, r1, r2
 8001a94:	6a3a      	ldr	r2, [r7, #32]
 8001a96:	fba2 1203 	umull	r1, r2, r2, r3
 8001a9a:	1883      	adds	r3, r0, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	f04f 0400 	mov.w	r4, #0
 8001aa6:	0acb      	lsrs	r3, r1, #11
 8001aa8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001aac:	12d4      	asrs	r4, r2, #11
 8001aae:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8001ab2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001ab6:	1062      	asrs	r2, r4, #1
 8001ab8:	ea4f 0133 	mov.w	r1, r3, rrx
 8001abc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001ac0:	1064      	asrs	r4, r4, #1
 8001ac2:	ea4f 0333 	mov.w	r3, r3, rrx
 8001ac6:	fb03 f502 	mul.w	r5, r3, r2
 8001aca:	fb01 f004 	mul.w	r0, r1, r4
 8001ace:	4428      	add	r0, r5
 8001ad0:	fba1 1203 	umull	r1, r2, r1, r3
 8001ad4:	1883      	adds	r3, r0, r2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	f04f 0400 	mov.w	r4, #0
 8001ae0:	0b0b      	lsrs	r3, r1, #12
 8001ae2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001ae6:	1314      	asrs	r4, r2, #12
 8001ae8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	fb04 f102 	mul.w	r1, r4, r2
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	fb03 f202 	mul.w	r2, r3, r2
 8001b04:	1888      	adds	r0, r1, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	fba2 1203 	umull	r1, r2, r2, r3
 8001b0c:	1883      	adds	r3, r0, r2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	f04f 0400 	mov.w	r4, #0
 8001b18:	0b8b      	lsrs	r3, r1, #14
 8001b1a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8001b1e:	1394      	asrs	r4, r2, #14
 8001b20:	e9c7 3404 	strd	r3, r4, [r7, #16]
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4413      	add	r3, r2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	3380      	adds	r3, #128	; 0x80
 8001b3c:	121b      	asrs	r3, r3, #8
 8001b3e:	81fb      	strh	r3, [r7, #14]

	return calc_temp;
 8001b40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	372c      	adds	r7, #44	; 0x2c
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bcb0      	pop	{r4, r5, r7}
 8001b4c:	4770      	bx	lr

08001b4e <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b087      	sub	sp, #28
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	105b      	asrs	r3, r3, #1
 8001b5e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001b62:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	109b      	asrs	r3, r3, #2
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	1092      	asrs	r2, r2, #2
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001b78:	fb02 f303 	mul.w	r3, r2, r3
 8001b7c:	109b      	asrs	r3, r3, #2
 8001b7e:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b86:	461a      	mov	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	fb03 f302 	mul.w	r3, r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	109a      	asrs	r2, r3, #2
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ba0:	041b      	lsls	r3, r3, #16
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	109b      	asrs	r3, r3, #2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	1092      	asrs	r2, r2, #2
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
 8001bb2:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8001bba:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001bc0:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	fb03 f301 	mul.w	r3, r3, r1
 8001bd0:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001bd2:	4413      	add	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	149b      	asrs	r3, r3, #18
 8001bda:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	8b92      	ldrh	r2, [r2, #28]
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	13db      	asrs	r3, r3, #15
 8001bec:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001bf4:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	131b      	asrs	r3, r3, #12
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f640 4335 	movw	r3, #3125	; 0xc35
 8001c04:	fb03 f302 	mul.w	r3, r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c10:	db06      	blt.n	8001c20 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e005      	b.n	8001c2c <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005a      	lsls	r2, r3, #1
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001c32:	4619      	mov	r1, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001c40:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c42:	fb03 f301 	mul.w	r3, r3, r1
 8001c46:	131b      	asrs	r3, r3, #12
 8001c48:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	135b      	asrs	r3, r3, #13
 8001c5a:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	121b      	asrs	r3, r3, #8
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	1212      	asrs	r2, r2, #8
 8001c64:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001c7a:	145b      	asrs	r3, r3, #17
 8001c7c:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	441a      	add	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 8001c8e:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001c90:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001c92:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4413      	add	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8001c9a:	697b      	ldr	r3, [r7, #20]

}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b08b      	sub	sp, #44	; 0x2c
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3380      	adds	r3, #128	; 0x80
 8001cc0:	121b      	asrs	r3, r3, #8
 8001cc2:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001cc4:	88fa      	ldrh	r2, [r7, #6]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	891b      	ldrh	r3, [r3, #8]
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	fb03 f301 	mul.w	r3, r3, r1
 8001cdc:	493d      	ldr	r1, [pc, #244]	; (8001dd4 <calc_humidity+0x12c>)
 8001cde:	fb81 0103 	smull	r0, r1, r1, r3
 8001ce2:	1149      	asrs	r1, r1, #5
 8001ce4:	17db      	asrs	r3, r3, #31
 8001ce6:	1acb      	subs	r3, r1, r3
 8001ce8:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	895b      	ldrh	r3, [r3, #10]
 8001cf2:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	fb03 f302 	mul.w	r3, r3, r2
 8001d02:	4a34      	ldr	r2, [pc, #208]	; (8001dd4 <calc_humidity+0x12c>)
 8001d04:	fb82 1203 	smull	r1, r2, r2, r3
 8001d08:	1152      	asrs	r2, r2, #5
 8001d0a:	17db      	asrs	r3, r3, #31
 8001d0c:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001d14:	4619      	mov	r1, r3
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	fb03 f301 	mul.w	r3, r3, r1
 8001d1c:	492d      	ldr	r1, [pc, #180]	; (8001dd4 <calc_humidity+0x12c>)
 8001d1e:	fb81 c103 	smull	ip, r1, r1, r3
 8001d22:	1149      	asrs	r1, r1, #5
 8001d24:	17db      	asrs	r3, r3, #31
 8001d26:	1acb      	subs	r3, r1, r3
 8001d28:	6a39      	ldr	r1, [r7, #32]
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001d30:	4928      	ldr	r1, [pc, #160]	; (8001dd4 <calc_humidity+0x12c>)
 8001d32:	fb81 c103 	smull	ip, r1, r1, r3
 8001d36:	1149      	asrs	r1, r1, #5
 8001d38:	17db      	asrs	r3, r3, #31
 8001d3a:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001d3c:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001d3e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001d42:	fb03 f300 	mul.w	r3, r3, r0
	var2 = ((int32_t) dev->calib.par_h2
 8001d46:	129b      	asrs	r3, r3, #10
 8001d48:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	7bdb      	ldrb	r3, [r3, #15]
 8001d58:	01db      	lsls	r3, r3, #7
 8001d5a:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001d62:	461a      	mov	r2, r3
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	fb03 f302 	mul.w	r3, r3, r2
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	; (8001dd4 <calc_humidity+0x12c>)
 8001d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d70:	1152      	asrs	r2, r2, #5
 8001d72:	17db      	asrs	r3, r3, #31
 8001d74:	1ad2      	subs	r2, r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	111b      	asrs	r3, r3, #4
 8001d7c:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	139b      	asrs	r3, r3, #14
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	1392      	asrs	r2, r2, #14
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	129b      	asrs	r3, r3, #10
 8001d8c:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	105b      	asrs	r3, r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4413      	add	r3, r2
 8001da0:	129b      	asrs	r3, r3, #10
 8001da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	131b      	asrs	r3, r3, #12
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <calc_humidity+0x130>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	dd02      	ble.n	8001dbc <calc_humidity+0x114>
		calc_hum = 100000;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <calc_humidity+0x130>)
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dba:	e004      	b.n	8001dc6 <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da01      	bge.n	8001dc6 <calc_humidity+0x11e>
		calc_hum = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	372c      	adds	r7, #44	; 0x2c
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	51eb851f 	.word	0x51eb851f
 8001dd8:	000186a0 	.word	0x000186a0

08001ddc <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8001ddc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001de0:	b0aa      	sub	sp, #168	; 0xa8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	603a      	str	r2, [r7, #0]
 8001de8:	80fb      	strh	r3, [r7, #6]
 8001dea:	460b      	mov	r3, r1
 8001dec:	717b      	strb	r3, [r7, #5]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8001dee:	4b55      	ldr	r3, [pc, #340]	; (8001f44 <calc_gas_resistance+0x168>)
 8001df0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001df4:	461d      	mov	r5, r3
 8001df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8001e0a:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <calc_gas_resistance+0x16c>)
 8001e0c:	f107 040c 	add.w	r4, r7, #12
 8001e10:	461d      	mov	r5, r3
 8001e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 8001e2c:	b25d      	sxtb	r5, r3
 8001e2e:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001e32:	4629      	mov	r1, r5
 8001e34:	4632      	mov	r2, r6
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	f04f 0400 	mov.w	r4, #0
 8001e3e:	0094      	lsls	r4, r2, #2
 8001e40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001e44:	008b      	lsls	r3, r1, #2
 8001e46:	4619      	mov	r1, r3
 8001e48:	4622      	mov	r2, r4
 8001e4a:	194b      	adds	r3, r1, r5
 8001e4c:	eb42 0406 	adc.w	r4, r2, r6
 8001e50:	f240 513c 	movw	r1, #1340	; 0x53c
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	eb11 0b03 	adds.w	fp, r1, r3
 8001e5c:	eb42 0c04 	adc.w	ip, r2, r4
		((int64_t) lookupTable1[gas_range])) >> 16;
 8001e60:	797b      	ldrb	r3, [r7, #5]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e68:	4413      	add	r3, r2
 8001e6a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001e6e:	f04f 0400 	mov.w	r4, #0
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001e72:	fb03 f50c 	mul.w	r5, r3, ip
 8001e76:	fb0b f004 	mul.w	r0, fp, r4
 8001e7a:	4428      	add	r0, r5
 8001e7c:	fbab 1203 	umull	r1, r2, fp, r3
 8001e80:	1883      	adds	r3, r0, r2
 8001e82:	461a      	mov	r2, r3
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	f04f 0400 	mov.w	r4, #0
 8001e8c:	0c0b      	lsrs	r3, r1, #16
 8001e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e92:	1414      	asrs	r4, r2, #16
 8001e94:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8001e98:	88f9      	ldrh	r1, [r7, #6]
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	f04f 0400 	mov.w	r4, #0
 8001ea6:	03d4      	lsls	r4, r2, #15
 8001ea8:	ea44 4451 	orr.w	r4, r4, r1, lsr #17
 8001eac:	03cb      	lsls	r3, r1, #15
 8001eae:	f113 417f 	adds.w	r1, r3, #4278190080	; 0xff000000
 8001eb2:	f144 32ff 	adc.w	r2, r4, #4294967295	; 0xffffffff
 8001eb6:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8001eba:	185d      	adds	r5, r3, r1
 8001ebc:	eb44 0602 	adc.w	r6, r4, r2
 8001ec0:	e9c7 5626 	strd	r5, r6, [r7, #152]	; 0x98
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8001ec4:	797b      	ldrb	r3, [r7, #5]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ecc:	4413      	add	r3, r2
 8001ece:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001ed2:	f04f 0400 	mov.w	r4, #0
 8001ed6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001eda:	fb04 f102 	mul.w	r1, r4, r2
 8001ede:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001ee2:	fb03 f202 	mul.w	r2, r3, r2
 8001ee6:	1888      	adds	r0, r1, r2
 8001ee8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001eec:	fba2 1203 	umull	r1, r2, r2, r3
 8001ef0:	1883      	adds	r3, r0, r2
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f04f 0400 	mov.w	r4, #0
 8001efc:	0a4b      	lsrs	r3, r1, #9
 8001efe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8001f02:	1254      	asrs	r4, r2, #9
 8001f04:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8001f08:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8001f0c:	1062      	asrs	r2, r4, #1
 8001f0e:	ea4f 0133 	mov.w	r1, r3, rrx
 8001f12:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001f16:	18cd      	adds	r5, r1, r3
 8001f18:	eb42 0604 	adc.w	r6, r2, r4
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	4631      	mov	r1, r6
 8001f20:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8001f24:	461a      	mov	r2, r3
 8001f26:	4623      	mov	r3, r4
 8001f28:	f7fe fe50 	bl	8000bcc <__aeabi_ldivmod>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	460c      	mov	r4, r1
 8001f30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	return calc_gas_res;
 8001f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	37a8      	adds	r7, #168	; 0xa8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001f42:	bf00      	nop
 8001f44:	08011a80 	.word	0x08011a80
 8001f48:	08011ac0 	.word	0x08011ac0

08001f4c <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b08b      	sub	sp, #44	; 0x2c
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001f5e:	d902      	bls.n	8001f66 <calc_heater_res+0x1a>
		temp = 400;
 8001f60:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f64:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001f74:	fb03 f302 	mul.w	r3, r3, r2
 8001f78:	4a30      	ldr	r2, [pc, #192]	; (800203c <calc_heater_res+0xf0>)
 8001f7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f7e:	1192      	asrs	r2, r2, #6
 8001f80:	17db      	asrs	r3, r3, #31
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001f8e:	f503 7144 	add.w	r1, r3, #784	; 0x310
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f98:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8001f9c:	f203 1399 	addw	r3, r3, #409	; 0x199
 8001fa0:	88fa      	ldrh	r2, [r7, #6]
 8001fa2:	fb02 f203 	mul.w	r2, r2, r3
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	4a24      	ldr	r2, [pc, #144]	; (8002040 <calc_heater_res+0xf4>)
 8001fae:	fb82 0203 	smull	r0, r2, r2, r3
 8001fb2:	1152      	asrs	r2, r2, #5
 8001fb4:	17db      	asrs	r3, r3, #31
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 8001fbc:	4a21      	ldr	r2, [pc, #132]	; (8002044 <calc_heater_res+0xf8>)
 8001fbe:	fb82 0203 	smull	r0, r2, r2, r3
 8001fc2:	1092      	asrs	r2, r2, #2
 8001fc4:	17db      	asrs	r3, r3, #31
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	fb03 f301 	mul.w	r3, r3, r1
 8001fcc:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	0fda      	lsrs	r2, r3, #31
 8001fd2:	4413      	add	r3, r2
 8001fd4:	105b      	asrs	r3, r3, #1
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	4413      	add	r3, r2
 8001fdc:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fec:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	019b      	lsls	r3, r3, #6
 8001ffa:	4413      	add	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002004:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fb92 f3f3 	sdiv	r3, r2, r3
 800200e:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 8002012:	4613      	mov	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	3332      	adds	r3, #50	; 0x32
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <calc_heater_res+0xf4>)
 8002022:	fb82 1203 	smull	r1, r2, r2, r3
 8002026:	1152      	asrs	r2, r2, #5
 8002028:	17db      	asrs	r3, r3, #31
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	372c      	adds	r7, #44	; 0x2c
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	10624dd3 	.word	0x10624dd3
 8002040:	51eb851f 	.word	0x51eb851f
 8002044:	66666667 	.word	0x66666667

08002048 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 800205c:	d308      	bcc.n	8002070 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 800205e:	23ff      	movs	r3, #255	; 0xff
 8002060:	73bb      	strb	r3, [r7, #14]
 8002062:	e00f      	b.n	8002084 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	3301      	adds	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	2b3f      	cmp	r3, #63	; 0x3f
 8002074:	d8f6      	bhi.n	8002064 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	019b      	lsls	r3, r3, #6
 800207e:	b2db      	uxtb	r3, r3
 8002080:	4413      	add	r3, r2
 8002082:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8002084:	7bbb      	ldrb	r3, [r7, #14]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b08a      	sub	sp, #40	; 0x28
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	f8c3 200b 	str.w	r2, [r3, #11]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 80020ac:	230a      	movs	r3, #10
 80020ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f000 f975 	bl	80023a2 <null_ptr_check>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 80020be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 8087 	bne.w	80021d6 <read_field_data+0x144>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80020c8:	f107 0108 	add.w	r1, r7, #8
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	220f      	movs	r2, #15
 80020d0:	201d      	movs	r0, #29
 80020d2:	f7fe ff7f 	bl	8000fd4 <bme680_get_regs>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80020dc:	7a3b      	ldrb	r3, [r7, #8]
 80020de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80020e8:	7a3b      	ldrb	r3, [r7, #8]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 80020f4:	7a7a      	ldrb	r2, [r7, #9]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80020fa:	7abb      	ldrb	r3, [r7, #10]
 80020fc:	031a      	lsls	r2, r3, #12
 80020fe:	7afb      	ldrb	r3, [r7, #11]
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 8002104:	7b3a      	ldrb	r2, [r7, #12]
 8002106:	0912      	lsrs	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800210a:	4313      	orrs	r3, r2
 800210c:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 800210e:	7b7b      	ldrb	r3, [r7, #13]
 8002110:	031a      	lsls	r2, r3, #12
 8002112:	7bbb      	ldrb	r3, [r7, #14]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	0912      	lsrs	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 800211e:	4313      	orrs	r3, r2
 8002120:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8002122:	7c3b      	ldrb	r3, [r7, #16]
 8002124:	b29b      	uxth	r3, r3
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b29a      	uxth	r2, r3
 800212a:	7c7b      	ldrb	r3, [r7, #17]
 800212c:	b29b      	uxth	r3, r3
 800212e:	4313      	orrs	r3, r2
 8002130:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8002132:	7d7b      	ldrb	r3, [r7, #21]
 8002134:	b29b      	uxth	r3, r3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	b29a      	uxth	r2, r3
 800213a:	7dbb      	ldrb	r3, [r7, #22]
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	b2db      	uxtb	r3, r3
 8002140:	b29b      	uxth	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8002146:	7dbb      	ldrb	r3, [r7, #22]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b25a      	sxtb	r2, r3
 8002154:	7dbb      	ldrb	r3, [r7, #22]
 8002156:	b25b      	sxtb	r3, r3
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	b25b      	sxtb	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b25b      	sxtb	r3, r3
 8002162:	b2da      	uxtb	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b25a      	sxtb	r2, r3
 800216e:	7dbb      	ldrb	r3, [r7, #22]
 8002170:	b25b      	sxtb	r3, r3
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	b25b      	sxtb	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b25b      	sxtb	r3, r3
 800217c:	b2da      	uxtb	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b25b      	sxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	da20      	bge.n	80021ce <read_field_data+0x13c>
				data->temperature = calc_temperature(adc_temp, dev);
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	69f8      	ldr	r0, [r7, #28]
 8002190:	f7ff fc64 	bl	8001a5c <calc_temperature>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	6a38      	ldr	r0, [r7, #32]
 80021a0:	f7ff fcd5 	bl	8001b4e <calc_pressure>
 80021a4:	4602      	mov	r2, r0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 80021aa:	8b7b      	ldrh	r3, [r7, #26]
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fd7a 	bl	8001ca8 <calc_humidity>
 80021b4:	4602      	mov	r2, r0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80021ba:	7df9      	ldrb	r1, [r7, #23]
 80021bc:	8b3b      	ldrh	r3, [r7, #24]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fe0b 	bl	8001ddc <calc_gas_resistance>
 80021c6:	4602      	mov	r2, r0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	611a      	str	r2, [r3, #16]
				break;
 80021cc:	e00d      	b.n	80021ea <read_field_data+0x158>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d2:	200a      	movs	r0, #10
 80021d4:	4798      	blx	r3
		}
		tries--;
 80021d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021da:	3b01      	subs	r3, #1
 80021dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 80021e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f47f af6a 	bne.w	80020be <read_field_data+0x2c>

	if (!tries)
 80021ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d102      	bne.n	80021f8 <read_field_data+0x166>
		rslt = BME680_W_NO_NEW_DATA;
 80021f2:	2302      	movs	r3, #2
 80021f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 80021f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3728      	adds	r7, #40	; 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8002210:	6838      	ldr	r0, [r7, #0]
 8002212:	f000 f8c6 	bl	80023a2 <null_ptr_check>
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d14f      	bne.n	80022c2 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	da02      	bge.n	8002230 <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 800222a:	2300      	movs	r3, #0
 800222c:	73bb      	strb	r3, [r7, #14]
 800222e:	e001      	b.n	8002234 <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 8002230:	2310      	movs	r3, #16
 8002232:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	78db      	ldrb	r3, [r3, #3]
 8002238:	7bba      	ldrb	r2, [r7, #14]
 800223a:	429a      	cmp	r2, r3
 800223c:	d041      	beq.n	80022c2 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	7bba      	ldrb	r2, [r7, #14]
 8002242:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7858      	ldrb	r0, [r3, #1]
 800224c:	f107 020d 	add.w	r2, r7, #13
 8002250:	2301      	movs	r3, #1
 8002252:	21f3      	movs	r1, #243	; 0xf3
 8002254:	47a0      	blx	r4
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 800226a:	23fe      	movs	r3, #254	; 0xfe
 800226c:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d125      	bne.n	80022c2 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8002276:	7b7b      	ldrb	r3, [r7, #13]
 8002278:	f023 0310 	bic.w	r3, r3, #16
 800227c:	b2db      	uxtb	r3, r3
 800227e:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	78db      	ldrb	r3, [r3, #3]
 8002284:	b25b      	sxtb	r3, r3
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	b25a      	sxtb	r2, r3
 800228c:	7b7b      	ldrb	r3, [r7, #13]
 800228e:	b25b      	sxtb	r3, r3
 8002290:	4313      	orrs	r3, r2
 8002292:	b25b      	sxtb	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	7858      	ldrb	r0, [r3, #1]
 80022a0:	f107 020d 	add.w	r2, r7, #13
 80022a4:	2301      	movs	r3, #1
 80022a6:	2173      	movs	r1, #115	; 0x73
 80022a8:	47a0      	blx	r4
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 80022be:	23fe      	movs	r3, #254	; 0xfe
 80022c0:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 80022c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd90      	pop	{r4, r7, pc}

080022ce <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 80022ce:	b590      	push	{r4, r7, lr}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f863 	bl	80023a2 <null_ptr_check>
 80022dc:	4603      	mov	r3, r0
 80022de:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80022e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d11b      	bne.n	8002320 <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7858      	ldrb	r0, [r3, #1]
 80022f0:	f107 020e 	add.w	r2, r7, #14
 80022f4:	2301      	movs	r3, #1
 80022f6:	21f3      	movs	r1, #243	; 0xf3
 80022f8:	47a0      	blx	r4
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 800230e:	23fe      	movs	r3, #254	; 0xfe
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	e005      	b.n	8002320 <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	b2da      	uxtb	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 8002320:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}

0800232c <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	460b      	mov	r3, r1
 8002338:	72fb      	strb	r3, [r7, #11]
 800233a:	4613      	mov	r3, r2
 800233c:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d022      	beq.n	800238e <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	7afa      	ldrb	r2, [r7, #11]
 800234e:	429a      	cmp	r2, r3
 8002350:	d90b      	bls.n	800236a <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	7afa      	ldrb	r2, [r7, #11]
 8002356:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	b2da      	uxtb	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	7aba      	ldrb	r2, [r7, #10]
 8002370:	429a      	cmp	r2, r3
 8002372:	d20e      	bcs.n	8002392 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	7aba      	ldrb	r2, [r7, #10]
 8002378:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	b2da      	uxtb	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800238c:	e001      	b.n	8002392 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 800238e:	23ff      	movs	r3, #255	; 0xff
 8002390:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8002392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002396:	4618      	mov	r0, r3
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00b      	beq.n	80023c8 <null_ptr_check+0x26>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <null_ptr_check+0x26>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <null_ptr_check+0x26>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80023c8:	23ff      	movs	r3, #255	; 0xff
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e001      	b.n	80023d2 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b096      	sub	sp, #88	; 0x58
 80023e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ea:	f002 fb2c 	bl	8004a46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ee:	f000 f975 	bl	80026dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023f2:	f000 ff99 	bl	8003328 <MX_GPIO_Init>
  MX_ADC1_Init();
 80023f6:	f000 fa0d 	bl	8002814 <MX_ADC1_Init>
  MX_DCMI_Init();
 80023fa:	f000 fa81 	bl	8002900 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 80023fe:	f000 fab3 	bl	8002968 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8002402:	f000 fb1b 	bl	8002a3c <MX_I2C1_Init>
  MX_I2C4_Init();
 8002406:	f000 fb59 	bl	8002abc <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 800240a:	f000 fba1 	bl	8002b50 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 800240e:	f000 fbfb 	bl	8002c08 <MX_OCTOSPI2_Init>
  MX_SAI1_Init();
 8002412:	f000 fc51 	bl	8002cb8 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8002416:	f000 fd11 	bl	8002e3c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800241a:	f000 fd35 	bl	8002e88 <MX_SPI1_Init>
  MX_SPI2_Init();
 800241e:	f000 fd71 	bl	8002f04 <MX_SPI2_Init>
  MX_TIM4_Init();
 8002422:	f000 fdab 	bl	8002f7c <MX_TIM4_Init>
  MX_TIM8_Init();
 8002426:	f000 fe09 	bl	800303c <MX_TIM8_Init>
  MX_TIM15_Init();
 800242a:	f000 fe61 	bl	80030f0 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 800242e:	f000 feb7 	bl	80031a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002432:	f000 ff01 	bl	8003238 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002436:	f000 ff4d 	bl	80032d4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  // Configure the BME680 driver
  gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 800243a:	4b89      	ldr	r3, [pc, #548]	; (8002660 <main+0x27c>)
 800243c:	2276      	movs	r2, #118	; 0x76
 800243e:	705a      	strb	r2, [r3, #1]
  gas_sensor.intf = BME680_I2C_INTF;
 8002440:	4b87      	ldr	r3, [pc, #540]	; (8002660 <main+0x27c>)
 8002442:	2201      	movs	r2, #1
 8002444:	709a      	strb	r2, [r3, #2]
  gas_sensor.read = bme680I2cRead;
 8002446:	4b86      	ldr	r3, [pc, #536]	; (8002660 <main+0x27c>)
 8002448:	4a86      	ldr	r2, [pc, #536]	; (8002664 <main+0x280>)
 800244a:	649a      	str	r2, [r3, #72]	; 0x48
  gas_sensor.write = bme680I2cWrite;
 800244c:	4b84      	ldr	r3, [pc, #528]	; (8002660 <main+0x27c>)
 800244e:	4a86      	ldr	r2, [pc, #536]	; (8002668 <main+0x284>)
 8002450:	64da      	str	r2, [r3, #76]	; 0x4c
  gas_sensor.delay_ms = HAL_Delay;
 8002452:	4b83      	ldr	r3, [pc, #524]	; (8002660 <main+0x27c>)
 8002454:	4a85      	ldr	r2, [pc, #532]	; (800266c <main+0x288>)
 8002456:	651a      	str	r2, [r3, #80]	; 0x50
  gas_sensor.amb_temp = 25;
 8002458:	4b81      	ldr	r3, [pc, #516]	; (8002660 <main+0x27c>)
 800245a:	2219      	movs	r2, #25
 800245c:	711a      	strb	r2, [r3, #4]

  // Initialize the driver
  if (bme680_init(&gas_sensor) != BME680_OK) {
 800245e:	4880      	ldr	r0, [pc, #512]	; (8002660 <main+0x27c>)
 8002460:	f7fe fd84 	bl	8000f6c <bme680_init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00d      	beq.n	8002486 <main+0xa2>
    char bme_msg[] = "BME680 Initialization Error\\r\\n";
 800246a:	4b81      	ldr	r3, [pc, #516]	; (8002670 <main+0x28c>)
 800246c:	1d3c      	adds	r4, r7, #4
 800246e:	461d      	mov	r5, r3
 8002470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002474:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    noteDebugSerialOutput(bme_msg);
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	4618      	mov	r0, r3
 8002480:	f001 f986 	bl	8003790 <noteDebugSerialOutput>
 8002484:	e00c      	b.n	80024a0 <main+0xbc>
  } else {
    char bme_msg[] = "BME680 Initialized and Ready\\r\\n";
 8002486:	4b7b      	ldr	r3, [pc, #492]	; (8002674 <main+0x290>)
 8002488:	1d3c      	adds	r4, r7, #4
 800248a:	461d      	mov	r5, r3
 800248c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800248e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002494:	682b      	ldr	r3, [r5, #0]
 8002496:	7023      	strb	r3, [r4, #0]
    noteDebugSerialOutput(bme_msg);
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	4618      	mov	r0, r3
 800249c:	f001 f978 	bl	8003790 <noteDebugSerialOutput>
  }

  // Select desired oversampling rates
  gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 80024a0:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <main+0x27c>)
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 80024a8:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <main+0x27c>)
 80024aa:	2203      	movs	r2, #3
 80024ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 80024b0:	4b6b      	ldr	r3, [pc, #428]	; (8002660 <main+0x27c>)
 80024b2:	2204      	movs	r2, #4
 80024b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  // Set sensor to "always on"
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80024b8:	4b69      	ldr	r3, [pc, #420]	; (8002660 <main+0x27c>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  // Set oversampling settings
  uint8_t required_settings = (BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL);
 80024c0:	2307      	movs	r3, #7
 80024c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  rslt = bme680_set_sensor_settings(required_settings, &gas_sensor);
 80024c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4964      	ldr	r1, [pc, #400]	; (8002660 <main+0x27c>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fe8a 	bl	80011e8 <bme680_set_sensor_settings>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b67      	ldr	r3, [pc, #412]	; (8002678 <main+0x294>)
 80024da:	701a      	strb	r2, [r3, #0]

  // Set sensor mode
  rslt = bme680_set_sensor_mode(&gas_sensor);
 80024dc:	4860      	ldr	r0, [pc, #384]	; (8002660 <main+0x27c>)
 80024de:	f7ff f857 	bl	8001590 <bme680_set_sensor_mode>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b64      	ldr	r3, [pc, #400]	; (8002678 <main+0x294>)
 80024e8:	701a      	strb	r2, [r3, #0]

  // Query minimum sampling period
  uint16_t min_sampling_period;
  bme680_get_profile_dur(&min_sampling_period, &gas_sensor);
 80024ea:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80024ee:	495c      	ldr	r1, [pc, #368]	; (8002660 <main+0x27c>)
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff f8b1 	bl	8001658 <bme680_get_profile_dur>

  // Sampling results variable
  struct bme680_field_data data;

  // Set Notecard System Interface
  NoteSetFn(malloc, free, HAL_Delay, HAL_GetTick);
 80024f6:	4b61      	ldr	r3, [pc, #388]	; (800267c <main+0x298>)
 80024f8:	4a5c      	ldr	r2, [pc, #368]	; (800266c <main+0x288>)
 80024fa:	4961      	ldr	r1, [pc, #388]	; (8002680 <main+0x29c>)
 80024fc:	4861      	ldr	r0, [pc, #388]	; (8002684 <main+0x2a0>)
 80024fe:	f00e f971 	bl	80107e4 <NoteSetFn>

  // Set Notecard I2C Interface
  NoteSetFnI2C(NOTE_I2C_ADDR_DEFAULT, NOTE_I2C_BUFFER_SIZE, noteI2CReset, noteI2CTransmit, noteI2CReceive);
 8002502:	4b61      	ldr	r3, [pc, #388]	; (8002688 <main+0x2a4>)
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	4b61      	ldr	r3, [pc, #388]	; (800268c <main+0x2a8>)
 8002508:	4a61      	ldr	r2, [pc, #388]	; (8002690 <main+0x2ac>)
 800250a:	21ff      	movs	r1, #255	; 0xff
 800250c:	2000      	movs	r0, #0
 800250e:	f00e f98b 	bl	8010828 <NoteSetFnI2C>

  // Configure device with ProductUID
  J *req = NoteNewRequest("hub.set");
 8002512:	4860      	ldr	r0, [pc, #384]	; (8002694 <main+0x2b0>)
 8002514:	f00e fd18 	bl	8010f48 <NoteNewRequest>
 8002518:	64b8      	str	r0, [r7, #72]	; 0x48
  JAddStringToObject(req, "product", NOTE_PRODUCT_UID);
 800251a:	4a5f      	ldr	r2, [pc, #380]	; (8002698 <main+0x2b4>)
 800251c:	495f      	ldr	r1, [pc, #380]	; (800269c <main+0x2b8>)
 800251e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002520:	f00d fe9e 	bl	8010260 <JAddStringToObject>
  JAddStringToObject(req, "mode", "continuous");
 8002524:	4a5e      	ldr	r2, [pc, #376]	; (80026a0 <main+0x2bc>)
 8002526:	495f      	ldr	r1, [pc, #380]	; (80026a4 <main+0x2c0>)
 8002528:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800252a:	f00d fe99 	bl	8010260 <JAddStringToObject>
  NoteRequest(req);
 800252e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002530:	f00e fd22 	bl	8010f78 <NoteRequest>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Allow BME680 to sample environment
	  HAL_Delay(min_sampling_period);
 8002534:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002536:	4618      	mov	r0, r3
 8002538:	f002 fafa 	bl	8004b30 <HAL_Delay>

	  // Query the sample data
	  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 800253c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002540:	4947      	ldr	r1, [pc, #284]	; (8002660 <main+0x27c>)
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff f8ee 	bl	8001724 <bme680_get_sensor_data>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	4b4a      	ldr	r3, [pc, #296]	; (8002678 <main+0x294>)
 800254e:	701a      	strb	r2, [r3, #0]

	  // Format results into a human readable string
	  sprintf(i2c_reading_buf,
	    "T: %u.%u degC, H %u.%u %%rH\\r\\n",
	    (unsigned int)data.temperature / 100,
 8002550:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002554:	461a      	mov	r2, r3
	  sprintf(i2c_reading_buf,
 8002556:	4b54      	ldr	r3, [pc, #336]	; (80026a8 <main+0x2c4>)
 8002558:	fba3 2302 	umull	r2, r3, r3, r2
 800255c:	095d      	lsrs	r5, r3, #5
	    (unsigned int)data.temperature % 100,
 800255e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
	  sprintf(i2c_reading_buf,
 8002562:	4a51      	ldr	r2, [pc, #324]	; (80026a8 <main+0x2c4>)
 8002564:	fba2 1203 	umull	r1, r2, r2, r3
 8002568:	0952      	lsrs	r2, r2, #5
 800256a:	2164      	movs	r1, #100	; 0x64
 800256c:	fb01 f202 	mul.w	r2, r1, r2
 8002570:	1a9a      	subs	r2, r3, r2
	    (unsigned int)data.humidity / 1000,
 8002572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  sprintf(i2c_reading_buf,
 8002574:	494d      	ldr	r1, [pc, #308]	; (80026ac <main+0x2c8>)
 8002576:	fba1 1303 	umull	r1, r3, r1, r3
 800257a:	0998      	lsrs	r0, r3, #6
	    (unsigned int)data.humidity % 1000);
 800257c:	6b79      	ldr	r1, [r7, #52]	; 0x34
	  sprintf(i2c_reading_buf,
 800257e:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <main+0x2c8>)
 8002580:	fba3 4301 	umull	r4, r3, r3, r1
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800258a:	fb04 f303 	mul.w	r3, r4, r3
 800258e:	1acb      	subs	r3, r1, r3
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	9000      	str	r0, [sp, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	462a      	mov	r2, r5
 8002598:	4945      	ldr	r1, [pc, #276]	; (80026b0 <main+0x2cc>)
 800259a:	4846      	ldr	r0, [pc, #280]	; (80026b4 <main+0x2d0>)
 800259c:	f00e ff02 	bl	80113a4 <siprintf>

	  // Publish result to connected PC
	  noteDebugSerialOutput(i2c_reading_buf);
 80025a0:	4844      	ldr	r0, [pc, #272]	; (80026b4 <main+0x2d0>)
 80025a2:	f001 f8f5 	bl	8003790 <noteDebugSerialOutput>

	  // Queue sensor reading to Notecard
	  J *req = NoteNewRequest("note.add");
 80025a6:	4844      	ldr	r0, [pc, #272]	; (80026b8 <main+0x2d4>)
 80025a8:	f00e fcce 	bl	8010f48 <NoteNewRequest>
 80025ac:	6478      	str	r0, [r7, #68]	; 0x44
	  if (req != NULL) {
 80025ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d042      	beq.n	800263a <main+0x256>
	    JAddStringToObject(req, "file", "sensors.qo");
 80025b4:	4a41      	ldr	r2, [pc, #260]	; (80026bc <main+0x2d8>)
 80025b6:	4942      	ldr	r1, [pc, #264]	; (80026c0 <main+0x2dc>)
 80025b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80025ba:	f00d fe51 	bl	8010260 <JAddStringToObject>
	    JAddBoolToObject(req, "start", true);
 80025be:	2201      	movs	r2, #1
 80025c0:	4940      	ldr	r1, [pc, #256]	; (80026c4 <main+0x2e0>)
 80025c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80025c4:	f00d fe10 	bl	80101e8 <JAddBoolToObject>
	    J *body = JCreateObject();
 80025c8:	f00d fee5 	bl	8010396 <JCreateObject>
 80025cc:	6438      	str	r0, [r7, #64]	; 0x40
	    if (body != NULL) {
 80025ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d02f      	beq.n	8002634 <main+0x250>
	      JAddNumberToObject(body, "temp", data.temperature / 100.0);
 80025d4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ffcb 	bl	8000574 <__aeabi_i2d>
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <main+0x2e4>)
 80025e4:	f7fe f95a 	bl	800089c <__aeabi_ddiv>
 80025e8:	4603      	mov	r3, r0
 80025ea:	460c      	mov	r4, r1
 80025ec:	ec44 3b17 	vmov	d7, r3, r4
 80025f0:	eeb0 0a47 	vmov.f32	s0, s14
 80025f4:	eef0 0a67 	vmov.f32	s1, s15
 80025f8:	4934      	ldr	r1, [pc, #208]	; (80026cc <main+0x2e8>)
 80025fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80025fc:	f00d fe11 	bl	8010222 <JAddNumberToObject>
	      JAddNumberToObject(body, "humidity", data.humidity / 1000.0);
 8002600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ffa6 	bl	8000554 <__aeabi_ui2d>
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <main+0x2ec>)
 800260e:	f7fe f945 	bl	800089c <__aeabi_ddiv>
 8002612:	4603      	mov	r3, r0
 8002614:	460c      	mov	r4, r1
 8002616:	ec44 3b17 	vmov	d7, r3, r4
 800261a:	eeb0 0a47 	vmov.f32	s0, s14
 800261e:	eef0 0a67 	vmov.f32	s1, s15
 8002622:	492c      	ldr	r1, [pc, #176]	; (80026d4 <main+0x2f0>)
 8002624:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002626:	f00d fdfc 	bl	8010222 <JAddNumberToObject>
	      JAddItemToObject(req, "body", body);
 800262a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800262c:	492a      	ldr	r1, [pc, #168]	; (80026d8 <main+0x2f4>)
 800262e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002630:	f00d fdca 	bl	80101c8 <JAddItemToObject>
	    }
	    NoteRequest(req);
 8002634:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002636:	f00e fc9f 	bl	8010f78 <NoteRequest>
	  }

	  // Wait between samples
	  HAL_Delay(DELAY_PERIOD_MS);
 800263a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800263e:	f002 fa77 	bl	8004b30 <HAL_Delay>

	  // Request the next sample
	  if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <main+0x27c>)
 8002644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002648:	2b01      	cmp	r3, #1
 800264a:	f47f af73 	bne.w	8002534 <main+0x150>
	    rslt = bme680_set_sensor_mode(&gas_sensor);
 800264e:	4804      	ldr	r0, [pc, #16]	; (8002660 <main+0x27c>)
 8002650:	f7fe ff9e 	bl	8001590 <bme680_set_sensor_mode>
 8002654:	4603      	mov	r3, r0
 8002656:	461a      	mov	r2, r3
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <main+0x294>)
 800265a:	701a      	strb	r2, [r3, #0]
  {
 800265c:	e76a      	b.n	8002534 <main+0x150>
 800265e:	bf00      	nop
 8002660:	20000a7c 	.word	0x20000a7c
 8002664:	0800365d 	.word	0x0800365d
 8002668:	080036d9 	.word	0x080036d9
 800266c:	08004b31 	.word	0x08004b31
 8002670:	08011ba0 	.word	0x08011ba0
 8002674:	08011bc0 	.word	0x08011bc0
 8002678:	20000214 	.word	0x20000214
 800267c:	08004b19 	.word	0x08004b19
 8002680:	080111a9 	.word	0x080111a9
 8002684:	08011199 	.word	0x08011199
 8002688:	080037d9 	.word	0x080037d9
 800268c:	08003a31 	.word	0x08003a31
 8002690:	080039b5 	.word	0x080039b5
 8002694:	08011b00 	.word	0x08011b00
 8002698:	08011b08 	.word	0x08011b08
 800269c:	08011b20 	.word	0x08011b20
 80026a0:	08011b28 	.word	0x08011b28
 80026a4:	08011b34 	.word	0x08011b34
 80026a8:	51eb851f 	.word	0x51eb851f
 80026ac:	10624dd3 	.word	0x10624dd3
 80026b0:	08011b3c 	.word	0x08011b3c
 80026b4:	20000318 	.word	0x20000318
 80026b8:	08011b5c 	.word	0x08011b5c
 80026bc:	08011b68 	.word	0x08011b68
 80026c0:	08011b74 	.word	0x08011b74
 80026c4:	08011b7c 	.word	0x08011b7c
 80026c8:	40590000 	.word	0x40590000
 80026cc:	08011b84 	.word	0x08011b84
 80026d0:	408f4000 	.word	0x408f4000
 80026d4:	08011b8c 	.word	0x08011b8c
 80026d8:	08011b98 	.word	0x08011b98

080026dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b0be      	sub	sp, #248	; 0xf8
 80026e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026e6:	2248      	movs	r2, #72	; 0x48
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f00e fd9a 	bl	8011224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2298      	movs	r2, #152	; 0x98
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f00e fd8c 	bl	8011224 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800270c:	2000      	movs	r0, #0
 800270e:	f005 fc23 	bl	8007f58 <HAL_PWREx_ControlVoltageScaling>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8002718:	f001 f9f4 	bl	8003b04 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800271c:	2301      	movs	r3, #1
 800271e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002726:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800272a:	2302      	movs	r3, #2
 800272c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002730:	2303      	movs	r3, #3
 8002732:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 3;
 8002736:	2303      	movs	r3, #3
 8002738:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 30;
 800273c:	231e      	movs	r3, #30
 800273e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002742:	2307      	movs	r3, #7
 8002744:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002748:	2302      	movs	r3, #2
 800274a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800274e:	2302      	movs	r3, #2
 8002750:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002754:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002758:	4618      	mov	r0, r3
 800275a:	f005 fcc1 	bl	80080e0 <HAL_RCC_OscConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002764:	f001 f9ce 	bl	8003b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002768:	230f      	movs	r3, #15
 800276a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276e:	2303      	movs	r3, #3
 8002770:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800277a:	2300      	movs	r3, #0
 800277c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002786:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800278a:	2105      	movs	r1, #5
 800278c:	4618      	mov	r0, r3
 800278e:	f006 f92f 	bl	80089f0 <HAL_RCC_ClockConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002798:	f001 f9b4 	bl	8003b04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <SystemClock_Config+0x130>)
 800279e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027a0:	2300      	movs	r3, #0
 80027a2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80027a4:	2300      	movs	r3, #0
 80027a6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027a8:	2300      	movs	r3, #0
 80027aa:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80027b0:	2300      	movs	r3, #0
 80027b2:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80027b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80027b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80027c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027cc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80027ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80027d4:	2303      	movs	r3, #3
 80027d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 80027d8:	2303      	movs	r3, #3
 80027da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80027dc:	230c      	movs	r3, #12
 80027de:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80027e0:	2307      	movs	r3, #7
 80027e2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80027e4:	2302      	movs	r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80027e8:	2302      	movs	r3, #2
 80027ea:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <SystemClock_Config+0x134>)
 80027ee:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	4618      	mov	r0, r3
 80027f4:	f006 fbac 	bl	8008f50 <HAL_RCCEx_PeriphCLKConfig>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <SystemClock_Config+0x126>
  {
    Error_Handler();
 80027fe:	f001 f981 	bl	8003b04 <Error_Handler>
  }
}
 8002802:	bf00      	nop
 8002804:	37f8      	adds	r7, #248	; 0xf8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	01196846 	.word	0x01196846
 8002810:	01110000 	.word	0x01110000

08002814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800281a:	f107 031c 	add.w	r3, r7, #28
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
 8002834:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002836:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <MX_ADC1_Init+0xe0>)
 8002838:	4a2f      	ldr	r2, [pc, #188]	; (80028f8 <MX_ADC1_Init+0xe4>)
 800283a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800283c:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <MX_ADC1_Init+0xe0>)
 800283e:	2200      	movs	r2, #0
 8002840:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <MX_ADC1_Init+0xe0>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <MX_ADC1_Init+0xe0>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <MX_ADC1_Init+0xe0>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <MX_ADC1_Init+0xe0>)
 8002856:	2204      	movs	r2, #4
 8002858:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <MX_ADC1_Init+0xe0>)
 800285c:	2200      	movs	r2, #0
 800285e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002860:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <MX_ADC1_Init+0xe0>)
 8002862:	2200      	movs	r2, #0
 8002864:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <MX_ADC1_Init+0xe0>)
 8002868:	2201      	movs	r2, #1
 800286a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800286c:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <MX_ADC1_Init+0xe0>)
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002874:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <MX_ADC1_Init+0xe0>)
 8002876:	2200      	movs	r2, #0
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <MX_ADC1_Init+0xe0>)
 800287c:	2200      	movs	r2, #0
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <MX_ADC1_Init+0xe0>)
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002888:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <MX_ADC1_Init+0xe0>)
 800288a:	2200      	movs	r2, #0
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800288e:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <MX_ADC1_Init+0xe0>)
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002896:	4817      	ldr	r0, [pc, #92]	; (80028f4 <MX_ADC1_Init+0xe0>)
 8002898:	f002 fb0c 	bl	8004eb4 <HAL_ADC_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80028a2:	f001 f92f 	bl	8003b04 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	4619      	mov	r1, r3
 80028b0:	4810      	ldr	r0, [pc, #64]	; (80028f4 <MX_ADC1_Init+0xe0>)
 80028b2:	f003 f86f 	bl	8005994 <HAL_ADCEx_MultiModeConfigChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80028bc:	f001 f922 	bl	8003b04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_ADC1_Init+0xe8>)
 80028c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028c4:	2306      	movs	r3, #6
 80028c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80028cc:	237f      	movs	r3, #127	; 0x7f
 80028ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80028d0:	2304      	movs	r3, #4
 80028d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4805      	ldr	r0, [pc, #20]	; (80028f4 <MX_ADC1_Init+0xe0>)
 80028de:	f002 fc39 	bl	8005154 <HAL_ADC_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80028e8:	f001 f90c 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000b68 	.word	0x20000b68
 80028f8:	50040000 	.word	0x50040000
 80028fc:	36902000 	.word	0x36902000

08002900 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002904:	4b16      	ldr	r3, [pc, #88]	; (8002960 <MX_DCMI_Init+0x60>)
 8002906:	4a17      	ldr	r2, [pc, #92]	; (8002964 <MX_DCMI_Init+0x64>)
 8002908:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <MX_DCMI_Init+0x60>)
 800290c:	2200      	movs	r2, #0
 800290e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <MX_DCMI_Init+0x60>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <MX_DCMI_Init+0x60>)
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800291c:	4b10      	ldr	r3, [pc, #64]	; (8002960 <MX_DCMI_Init+0x60>)
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <MX_DCMI_Init+0x60>)
 8002924:	2200      	movs	r2, #0
 8002926:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <MX_DCMI_Init+0x60>)
 800292a:	2200      	movs	r2, #0
 800292c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <MX_DCMI_Init+0x60>)
 8002930:	2200      	movs	r2, #0
 8002932:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <MX_DCMI_Init+0x60>)
 8002936:	2200      	movs	r2, #0
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <MX_DCMI_Init+0x60>)
 800293c:	2200      	movs	r2, #0
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <MX_DCMI_Init+0x60>)
 8002942:	2200      	movs	r2, #0
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <MX_DCMI_Init+0x60>)
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800294c:	4804      	ldr	r0, [pc, #16]	; (8002960 <MX_DCMI_Init+0x60>)
 800294e:	f003 f9a7 	bl	8005ca0 <HAL_DCMI_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002958:	f001 f8d4 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000bd0 	.word	0x20000bd0
 8002964:	50050000 	.word	0x50050000

08002968 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800296c:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 800296e:	4a30      	ldr	r2, [pc, #192]	; (8002a30 <MX_DFSDM1_Init+0xc8>)
 8002970:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8002972:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 8002974:	2201      	movs	r2, #1
 8002976:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002978:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 8002980:	2202      	movs	r2, #2
 8002982:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002984:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002996:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 800299e:	2204      	movs	r2, #4
 80029a0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80029a2:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80029a8:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80029ba:	481c      	ldr	r0, [pc, #112]	; (8002a2c <MX_DFSDM1_Init+0xc4>)
 80029bc:	f003 f9f6 	bl	8005dac <HAL_DFSDM_ChannelInit>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80029c6:	f001 f89d 	bl	8003b04 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80029ca:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 80029cc:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <MX_DFSDM1_Init+0xd0>)
 80029ce:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80029d0:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80029dc:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 80029de:	2202      	movs	r2, #2
 80029e0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 80029fc:	2204      	movs	r2, #4
 80029fe:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002a18:	4806      	ldr	r0, [pc, #24]	; (8002a34 <MX_DFSDM1_Init+0xcc>)
 8002a1a:	f003 f9c7 	bl	8005dac <HAL_DFSDM_ChannelInit>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_DFSDM1_Init+0xc0>
  {
    Error_Handler();
 8002a24:	f001 f86e 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000c34 	.word	0x20000c34
 8002a30:	40016000 	.word	0x40016000
 8002a34:	20000294 	.word	0x20000294
 8002a38:	40016020 	.word	0x40016020

08002a3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <MX_I2C1_Init+0x78>)
 8002a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a48:	4a1b      	ldr	r2, [pc, #108]	; (8002ab8 <MX_I2C1_Init+0x7c>)
 8002a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a76:	480e      	ldr	r0, [pc, #56]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a78:	f003 fd1c 	bl	80064b4 <HAL_I2C_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a82:	f001 f83f 	bl	8003b04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a86:	2100      	movs	r1, #0
 8002a88:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a8a:	f004 f99b 	bl	8006dc4 <HAL_I2CEx_ConfigAnalogFilter>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a94:	f001 f836 	bl	8003b04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <MX_I2C1_Init+0x74>)
 8002a9c:	f004 f9dd 	bl	8006e5a <HAL_I2CEx_ConfigDigitalFilter>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002aa6:	f001 f82d 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000504 	.word	0x20000504
 8002ab4:	40005400 	.word	0x40005400
 8002ab8:	307075b1 	.word	0x307075b1

08002abc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C4_Init 0 */
	// Ensure idempotence
	if (i2c4Initialized) { return; }
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <MX_I2C4_Init+0x84>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d138      	bne.n	8002b3a <MX_I2C4_Init+0x7e>
	i2c4Initialized = true;
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <MX_I2C4_Init+0x84>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <MX_I2C4_Init+0x8c>)
 8002ad2:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002ad6:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <MX_I2C4_Init+0x90>)
 8002ad8:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002b04:	480f      	ldr	r0, [pc, #60]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002b06:	f003 fcd5 	bl	80064b4 <HAL_I2C_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_I2C4_Init+0x58>
  {
    Error_Handler();
 8002b10:	f000 fff8 	bl	8003b04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b14:	2100      	movs	r1, #0
 8002b16:	480b      	ldr	r0, [pc, #44]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002b18:	f004 f954 	bl	8006dc4 <HAL_I2CEx_ConfigAnalogFilter>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_I2C4_Init+0x6a>
  {
    Error_Handler();
 8002b22:	f000 ffef 	bl	8003b04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002b26:	2100      	movs	r1, #0
 8002b28:	4806      	ldr	r0, [pc, #24]	; (8002b44 <MX_I2C4_Init+0x88>)
 8002b2a:	f004 f996 	bl	8006e5a <HAL_I2CEx_ConfigDigitalFilter>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <MX_I2C4_Init+0x80>
  {
    Error_Handler();
 8002b34:	f000 ffe6 	bl	8003b04 <Error_Handler>
 8002b38:	e000      	b.n	8002b3c <MX_I2C4_Init+0x80>
	if (i2c4Initialized) { return; }
 8002b3a:	bf00      	nop
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000215 	.word	0x20000215
 8002b44:	200002cc 	.word	0x200002cc
 8002b48:	40008400 	.word	0x40008400
 8002b4c:	307075b1 	.word	0x307075b1

08002b50 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8002b56:	463b      	mov	r3, r7
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
 8002b64:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8002b66:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002b68:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <MX_OCTOSPI1_Init+0xb0>)
 8002b6a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8002b78:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002b80:	2220      	movs	r2, #32
 8002b82:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002b9c:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.Refresh = 0;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002bba:	4810      	ldr	r0, [pc, #64]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002bbc:	f004 f99a 	bl	8006ef4 <HAL_OSPI_Init>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_OCTOSPI1_Init+0x7a>
  {
    Error_Handler();
 8002bc6:	f000 ff9d 	bl	8003b04 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	603b      	str	r3, [r7, #0]
  OSPIM_Cfg_Struct.DQSPort = 1;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <MX_OCTOSPI1_Init+0xb4>)
 8002bd8:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002bda:	463b      	mov	r3, r7
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4619      	mov	r1, r3
 8002be2:	4806      	ldr	r0, [pc, #24]	; (8002bfc <MX_OCTOSPI1_Init+0xac>)
 8002be4:	f004 fa48 	bl	8007078 <HAL_OSPIM_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 8002bee:	f000 ff89 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200009a4 	.word	0x200009a4
 8002c00:	a0001000 	.word	0xa0001000
 8002c04:	00010002 	.word	0x00010002

08002c08 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8002c0e:	463b      	mov	r3, r7
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
 8002c1c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8002c1e:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c20:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <MX_OCTOSPI2_Init+0xac>)
 8002c22:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8002c2a:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c38:	2220      	movs	r2, #32
 8002c3a:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  hospi2.Init.ClockPrescaler = 1;
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	621a      	str	r2, [r3, #32]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.ChipSelectBoundary = 0;
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c68:	2208      	movs	r2, #8
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.Refresh = 0;
 8002c6c:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8002c72:	480f      	ldr	r0, [pc, #60]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c74:	f004 f93e 	bl	8006ef4 <HAL_OSPI_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_OCTOSPI2_Init+0x7a>
  {
    Error_Handler();
 8002c7e:	f000 ff41 	bl	8003b04 <Error_Handler>
  }
  OSPIM_Cfg_Struct.DQSPort = 2;
 8002c82:	2302      	movs	r3, #2
 8002c84:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 2;
 8002c86:	2302      	movs	r3, #2
 8002c88:	60bb      	str	r3, [r7, #8]
  OSPIM_Cfg_Struct.IOHighPort = HAL_OSPIM_IOPORT_1_LOW;
 8002c8a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002c8e:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi2, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c90:	463b      	mov	r3, r7
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4619      	mov	r1, r3
 8002c98:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <MX_OCTOSPI2_Init+0xa8>)
 8002c9a:	f004 f9ed 	bl	8007078 <HAL_OSPIM_Config>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 8002ca4:	f000 ff2e 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8002ca8:	bf00      	nop
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000df0 	.word	0x20000df0
 8002cb4:	a0001400 	.word	0xa0001400

08002cb8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002cbc:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002cbe:	4a5b      	ldr	r2, [pc, #364]	; (8002e2c <MX_SAI1_Init+0x174>)
 8002cc0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002cc2:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002cc8:	4b57      	ldr	r3, [pc, #348]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8002cce:	4b56      	ldr	r3, [pc, #344]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002cd0:	2240      	movs	r2, #64	; 0x40
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002cd4:	4b54      	ldr	r3, [pc, #336]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002cda:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002ce0:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002ce6:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002cec:	4b4e      	ldr	r3, [pc, #312]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002cf8:	4b4b      	ldr	r3, [pc, #300]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d00:	4a4b      	ldr	r2, [pc, #300]	; (8002e30 <MX_SAI1_Init+0x178>)
 8002d02:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002d04:	4b48      	ldr	r3, [pc, #288]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002d10:	4b45      	ldr	r3, [pc, #276]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002d16:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8002d1c:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8002d24:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d30:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d34:	2208      	movs	r2, #8
 8002d36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002d38:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002d44:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002d4a:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002d50:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002d56:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002d5c:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002d62:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002d68:	482f      	ldr	r0, [pc, #188]	; (8002e28 <MX_SAI1_Init+0x170>)
 8002d6a:	f007 fd35 	bl	800a7d8 <HAL_SAI_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8002d74:	f000 fec6 	bl	8003b04 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002d78:	4b2e      	ldr	r3, [pc, #184]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002d7a:	4a2f      	ldr	r2, [pc, #188]	; (8002e38 <MX_SAI1_Init+0x180>)
 8002d7c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002d7e:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002d84:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002d86:	2203      	movs	r2, #3
 8002d88:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8002d8a:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002d8c:	2240      	movs	r2, #64	; 0x40
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002d90:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002d96:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002da2:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002dae:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002db4:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dda:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8002ddc:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002dde:	2208      	movs	r2, #8
 8002de0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002de8:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8002e12:	4808      	ldr	r0, [pc, #32]	; (8002e34 <MX_SAI1_Init+0x17c>)
 8002e14:	f007 fce0 	bl	800a7d8 <HAL_SAI_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_SAI1_Init+0x16a>
  {
    Error_Handler();
 8002e1e:	f000 fe71 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000cd0 	.word	0x20000cd0
 8002e2c:	40015404 	.word	0x40015404
 8002e30:	0002ee00 	.word	0x0002ee00
 8002e34:	20000ad4 	.word	0x20000ad4
 8002e38:	40015424 	.word	0x40015424

08002e3c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <MX_SDMMC1_SD_Init+0x44>)
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <MX_SDMMC1_SD_Init+0x48>)
 8002e44:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_SDMMC1_SD_Init+0x44>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <MX_SDMMC1_SD_Init+0x44>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_SDMMC1_SD_Init+0x44>)
 8002e54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e58:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <MX_SDMMC1_SD_Init+0x44>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8002e60:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <MX_SDMMC1_SD_Init+0x44>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <MX_SDMMC1_SD_Init+0x44>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002e6c:	4804      	ldr	r0, [pc, #16]	; (8002e80 <MX_SDMMC1_SD_Init+0x44>)
 8002e6e:	f007 fec9 	bl	800ac04 <HAL_SD_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8002e78:	f000 fe44 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200009fc 	.word	0x200009fc
 8002e84:	50062400 	.word	0x50062400

08002e88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <MX_SPI1_Init+0x74>)
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <MX_SPI1_Init+0x78>)
 8002e90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <MX_SPI1_Init+0x74>)
 8002e94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e9a:	4b18      	ldr	r3, [pc, #96]	; (8002efc <MX_SPI1_Init+0x74>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002ea0:	4b16      	ldr	r3, [pc, #88]	; (8002efc <MX_SPI1_Init+0x74>)
 8002ea2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002ea6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ea8:	4b14      	ldr	r3, [pc, #80]	; (8002efc <MX_SPI1_Init+0x74>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <MX_SPI1_Init+0x74>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <MX_SPI1_Init+0x74>)
 8002eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <MX_SPI1_Init+0x74>)
 8002ebe:	2238      	movs	r2, #56	; 0x38
 8002ec0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <MX_SPI1_Init+0x74>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <MX_SPI1_Init+0x74>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <MX_SPI1_Init+0x74>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <MX_SPI1_Init+0x74>)
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <MX_SPI1_Init+0x74>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <MX_SPI1_Init+0x74>)
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ee6:	4805      	ldr	r0, [pc, #20]	; (8002efc <MX_SPI1_Init+0x74>)
 8002ee8:	f008 ff19 	bl	800bd1e <HAL_SPI_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ef2:	f000 fe07 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000c6c 	.word	0x20000c6c
 8002f00:	40013000 	.word	0x40013000

08002f04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <MX_SPI2_Init+0x74>)
 8002f0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f0e:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f16:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002f1c:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002f22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002f30:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f38:	2218      	movs	r2, #24
 8002f3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f60:	4804      	ldr	r0, [pc, #16]	; (8002f74 <MX_SPI2_Init+0x70>)
 8002f62:	f008 fedc 	bl	800bd1e <HAL_SPI_Init>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 8002f6c:	f000 fdca 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	2000037c 	.word	0x2000037c
 8002f78:	40003800 	.word	0x40003800

08002f7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f82:	f107 0314 	add.w	r3, r7, #20
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f9a:	4b26      	ldr	r3, [pc, #152]	; (8003034 <MX_TIM4_Init+0xb8>)
 8002f9c:	4a26      	ldr	r2, [pc, #152]	; (8003038 <MX_TIM4_Init+0xbc>)
 8002f9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002fa0:	4b24      	ldr	r3, [pc, #144]	; (8003034 <MX_TIM4_Init+0xb8>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <MX_TIM4_Init+0xb8>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <MX_TIM4_Init+0xb8>)
 8002fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fb2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb4:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <MX_TIM4_Init+0xb8>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fba:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <MX_TIM4_Init+0xb8>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002fc0:	481c      	ldr	r0, [pc, #112]	; (8003034 <MX_TIM4_Init+0xb8>)
 8002fc2:	f008 ff4f 	bl	800be64 <HAL_TIM_IC_Init>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002fcc:	f000 fd9a 	bl	8003b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4815      	ldr	r0, [pc, #84]	; (8003034 <MX_TIM4_Init+0xb8>)
 8002fe0:	f009 f9ea 	bl	800c3b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002fea:	f000 fd8b 	bl	8003b04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	2208      	movs	r2, #8
 8003002:	4619      	mov	r1, r3
 8003004:	480b      	ldr	r0, [pc, #44]	; (8003034 <MX_TIM4_Init+0xb8>)
 8003006:	f008 ff84 	bl	800bf12 <HAL_TIM_IC_ConfigChannel>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003010:	f000 fd78 	bl	8003b04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003014:	1d3b      	adds	r3, r7, #4
 8003016:	220c      	movs	r2, #12
 8003018:	4619      	mov	r1, r3
 800301a:	4806      	ldr	r0, [pc, #24]	; (8003034 <MX_TIM4_Init+0xb8>)
 800301c:	f008 ff79 	bl	800bf12 <HAL_TIM_IC_ConfigChannel>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8003026:	f000 fd6d 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800302a:	bf00      	nop
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2000042c 	.word	0x2000042c
 8003038:	40000800 	.word	0x40000800

0800303c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003042:	f107 0314 	add.w	r3, r7, #20
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800305a:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <MX_TIM8_Init+0xac>)
 800305c:	4a23      	ldr	r2, [pc, #140]	; (80030ec <MX_TIM8_Init+0xb0>)
 800305e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <MX_TIM8_Init+0xac>)
 8003062:	2200      	movs	r2, #0
 8003064:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <MX_TIM8_Init+0xac>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800306c:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <MX_TIM8_Init+0xac>)
 800306e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003072:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003074:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <MX_TIM8_Init+0xac>)
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <MX_TIM8_Init+0xac>)
 800307c:	2200      	movs	r2, #0
 800307e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <MX_TIM8_Init+0xac>)
 8003082:	2200      	movs	r2, #0
 8003084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8003086:	4818      	ldr	r0, [pc, #96]	; (80030e8 <MX_TIM8_Init+0xac>)
 8003088:	f008 feec 	bl	800be64 <HAL_TIM_IC_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8003092:	f000 fd37 	bl	8003b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4619      	mov	r1, r3
 80030a8:	480f      	ldr	r0, [pc, #60]	; (80030e8 <MX_TIM8_Init+0xac>)
 80030aa:	f009 f985 	bl	800c3b8 <HAL_TIMEx_MasterConfigSynchronization>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80030b4:	f000 fd26 	bl	8003b04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80030b8:	2300      	movs	r3, #0
 80030ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030bc:	2301      	movs	r3, #1
 80030be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	220c      	movs	r2, #12
 80030cc:	4619      	mov	r1, r3
 80030ce:	4806      	ldr	r0, [pc, #24]	; (80030e8 <MX_TIM8_Init+0xac>)
 80030d0:	f008 ff1f 	bl	800bf12 <HAL_TIM_IC_ConfigChannel>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 80030da:	f000 fd13 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80030de:	bf00      	nop
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200003e0 	.word	0x200003e0
 80030ec:	40013400 	.word	0x40013400

080030f0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <MX_TIM15_Init+0xa8>)
 8003110:	4a22      	ldr	r2, [pc, #136]	; (800319c <MX_TIM15_Init+0xac>)
 8003112:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <MX_TIM15_Init+0xa8>)
 8003116:	2200      	movs	r2, #0
 8003118:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <MX_TIM15_Init+0xa8>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <MX_TIM15_Init+0xa8>)
 8003122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003126:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <MX_TIM15_Init+0xa8>)
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <MX_TIM15_Init+0xa8>)
 8003130:	2200      	movs	r2, #0
 8003132:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003134:	4b18      	ldr	r3, [pc, #96]	; (8003198 <MX_TIM15_Init+0xa8>)
 8003136:	2200      	movs	r2, #0
 8003138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800313a:	4817      	ldr	r0, [pc, #92]	; (8003198 <MX_TIM15_Init+0xa8>)
 800313c:	f008 fe92 	bl	800be64 <HAL_TIM_IC_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003146:	f000 fcdd 	bl	8003b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003152:	f107 0314 	add.w	r3, r7, #20
 8003156:	4619      	mov	r1, r3
 8003158:	480f      	ldr	r0, [pc, #60]	; (8003198 <MX_TIM15_Init+0xa8>)
 800315a:	f009 f92d 	bl	800c3b8 <HAL_TIMEx_MasterConfigSynchronization>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8003164:	f000 fcce 	bl	8003b04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003168:	2300      	movs	r3, #0
 800316a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800316c:	2301      	movs	r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	2204      	movs	r2, #4
 800317c:	4619      	mov	r1, r3
 800317e:	4806      	ldr	r0, [pc, #24]	; (8003198 <MX_TIM15_Init+0xa8>)
 8003180:	f008 fec7 	bl	800bf12 <HAL_TIM_IC_ConfigChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 800318a:	f000 fcbb 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800318e:	bf00      	nop
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000550 	.word	0x20000550
 800319c:	40014000 	.word	0x40014000

080031a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031a4:	4b22      	ldr	r3, [pc, #136]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031a6:	4a23      	ldr	r2, [pc, #140]	; (8003234 <MX_USART2_UART_Init+0x94>)
 80031a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031b2:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031be:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031c6:	220c      	movs	r2, #12
 80031c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ca:	4b19      	ldr	r3, [pc, #100]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031d6:	4b16      	ldr	r3, [pc, #88]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031d8:	2200      	movs	r2, #0
 80031da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031de:	2200      	movs	r2, #0
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031e8:	4811      	ldr	r0, [pc, #68]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031ea:	f009 f96d 	bl	800c4c8 <HAL_UART_Init>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80031f4:	f000 fc86 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031f8:	2100      	movs	r1, #0
 80031fa:	480d      	ldr	r0, [pc, #52]	; (8003230 <MX_USART2_UART_Init+0x90>)
 80031fc:	f009 febf 	bl	800cf7e <HAL_UARTEx_SetTxFifoThreshold>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003206:	f000 fc7d 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800320a:	2100      	movs	r1, #0
 800320c:	4808      	ldr	r0, [pc, #32]	; (8003230 <MX_USART2_UART_Init+0x90>)
 800320e:	f009 fef4 	bl	800cffa <HAL_UARTEx_SetRxFifoThreshold>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003218:	f000 fc74 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800321c:	4804      	ldr	r0, [pc, #16]	; (8003230 <MX_USART2_UART_Init+0x90>)
 800321e:	f009 fe75 	bl	800cf0c <HAL_UARTEx_DisableFifoMode>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003228:	f000 fc6c 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000d64 	.word	0x20000d64
 8003234:	40004400 	.word	0x40004400

08003238 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800323c:	4b23      	ldr	r3, [pc, #140]	; (80032cc <MX_USART3_UART_Init+0x94>)
 800323e:	4a24      	ldr	r2, [pc, #144]	; (80032d0 <MX_USART3_UART_Init+0x98>)
 8003240:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003242:	4b22      	ldr	r3, [pc, #136]	; (80032cc <MX_USART3_UART_Init+0x94>)
 8003244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003248:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <MX_USART3_UART_Init+0x94>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003250:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <MX_USART3_UART_Init+0x94>)
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <MX_USART3_UART_Init+0x94>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <MX_USART3_UART_Init+0x94>)
 800325e:	220c      	movs	r2, #12
 8003260:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <MX_USART3_UART_Init+0x94>)
 8003264:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003268:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800326a:	4b18      	ldr	r3, [pc, #96]	; (80032cc <MX_USART3_UART_Init+0x94>)
 800326c:	2200      	movs	r2, #0
 800326e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003270:	4b16      	ldr	r3, [pc, #88]	; (80032cc <MX_USART3_UART_Init+0x94>)
 8003272:	2200      	movs	r2, #0
 8003274:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <MX_USART3_UART_Init+0x94>)
 8003278:	2200      	movs	r2, #0
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <MX_USART3_UART_Init+0x94>)
 800327e:	2200      	movs	r2, #0
 8003280:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003282:	4812      	ldr	r0, [pc, #72]	; (80032cc <MX_USART3_UART_Init+0x94>)
 8003284:	f009 f920 	bl	800c4c8 <HAL_UART_Init>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 800328e:	f000 fc39 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003292:	2100      	movs	r1, #0
 8003294:	480d      	ldr	r0, [pc, #52]	; (80032cc <MX_USART3_UART_Init+0x94>)
 8003296:	f009 fe72 	bl	800cf7e <HAL_UARTEx_SetTxFifoThreshold>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80032a0:	f000 fc30 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032a4:	2100      	movs	r1, #0
 80032a6:	4809      	ldr	r0, [pc, #36]	; (80032cc <MX_USART3_UART_Init+0x94>)
 80032a8:	f009 fea7 	bl	800cffa <HAL_UARTEx_SetRxFifoThreshold>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 80032b2:	f000 fc27 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80032b6:	4805      	ldr	r0, [pc, #20]	; (80032cc <MX_USART3_UART_Init+0x94>)
 80032b8:	f009 fe28 	bl	800cf0c <HAL_UARTEx_DisableFifoMode>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 80032c2:	f000 fc1f 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000478 	.word	0x20000478
 80032d0:	40004800 	.word	0x40004800

080032d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80032da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80032de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80032e2:	2206      	movs	r2, #6
 80032e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80032e6:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80032e8:	2202      	movs	r2, #2
 80032ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80032f2:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80032f8:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8003300:	2201      	movs	r2, #1
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800330c:	2201      	movs	r2, #1
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003310:	4804      	ldr	r0, [pc, #16]	; (8003324 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8003312:	f004 fcb9 	bl	8007c88 <HAL_PCD_Init>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 800331c:	f000 fbf2 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}
 8003324:	2000059c 	.word	0x2000059c

08003328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08e      	sub	sp, #56	; 0x38
 800332c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800333e:	4bb3      	ldr	r3, [pc, #716]	; (800360c <MX_GPIO_Init+0x2e4>)
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	4ab2      	ldr	r2, [pc, #712]	; (800360c <MX_GPIO_Init+0x2e4>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800334a:	4bb0      	ldr	r3, [pc, #704]	; (800360c <MX_GPIO_Init+0x2e4>)
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	623b      	str	r3, [r7, #32]
 8003354:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003356:	4bad      	ldr	r3, [pc, #692]	; (800360c <MX_GPIO_Init+0x2e4>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	4aac      	ldr	r2, [pc, #688]	; (800360c <MX_GPIO_Init+0x2e4>)
 800335c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003362:	4baa      	ldr	r3, [pc, #680]	; (800360c <MX_GPIO_Init+0x2e4>)
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800336e:	4ba7      	ldr	r3, [pc, #668]	; (800360c <MX_GPIO_Init+0x2e4>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	4aa6      	ldr	r2, [pc, #664]	; (800360c <MX_GPIO_Init+0x2e4>)
 8003374:	f043 0310 	orr.w	r3, r3, #16
 8003378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800337a:	4ba4      	ldr	r3, [pc, #656]	; (800360c <MX_GPIO_Init+0x2e4>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003386:	4ba1      	ldr	r3, [pc, #644]	; (800360c <MX_GPIO_Init+0x2e4>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	4aa0      	ldr	r2, [pc, #640]	; (800360c <MX_GPIO_Init+0x2e4>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003392:	4b9e      	ldr	r3, [pc, #632]	; (800360c <MX_GPIO_Init+0x2e4>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800339e:	4b9b      	ldr	r3, [pc, #620]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a2:	4a9a      	ldr	r2, [pc, #616]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033aa:	4b98      	ldr	r3, [pc, #608]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033b6:	4b95      	ldr	r3, [pc, #596]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ba:	4a94      	ldr	r2, [pc, #592]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033c2:	4b92      	ldr	r3, [pc, #584]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ce:	4b8f      	ldr	r3, [pc, #572]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d2:	4a8e      	ldr	r2, [pc, #568]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033da:	4b8c      	ldr	r3, [pc, #560]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033e6:	4b89      	ldr	r3, [pc, #548]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	4a88      	ldr	r2, [pc, #544]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033f2:	4b86      	ldr	r3, [pc, #536]	; (800360c <MX_GPIO_Init+0x2e4>)
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80033fe:	f004 fe5f 	bl	80080c0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003402:	4b82      	ldr	r3, [pc, #520]	; (800360c <MX_GPIO_Init+0x2e4>)
 8003404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003406:	4a81      	ldr	r2, [pc, #516]	; (800360c <MX_GPIO_Init+0x2e4>)
 8003408:	f043 0320 	orr.w	r3, r3, #32
 800340c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800340e:	4b7f      	ldr	r3, [pc, #508]	; (800360c <MX_GPIO_Init+0x2e4>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MCU_SMPS_V1_Pin|MCU_SMPS_SW_Pin|MCU_SMPS_V3_Pin|MCU_SMPS_PG_Pin
 800341a:	2200      	movs	r2, #0
 800341c:	f24a 01d4 	movw	r1, #41172	; 0xa0d4
 8003420:	487b      	ldr	r0, [pc, #492]	; (8003610 <MX_GPIO_Init+0x2e8>)
 8003422:	f003 f82f 	bl	8006484 <HAL_GPIO_WritePin>
                          |MCU_SMPS_EN_Pin|MCU_SMPS_V2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 8003426:	2200      	movs	r2, #0
 8003428:	2110      	movs	r1, #16
 800342a:	487a      	ldr	r0, [pc, #488]	; (8003614 <MX_GPIO_Init+0x2ec>)
 800342c:	f003 f82a 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWM_EN_GPIO_Port, LCD_PWM_EN_Pin, GPIO_PIN_RESET);
 8003430:	2200      	movs	r2, #0
 8003432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343a:	f003 f823 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 800343e:	2200      	movs	r2, #0
 8003440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003444:	4874      	ldr	r0, [pc, #464]	; (8003618 <MX_GPIO_Init+0x2f0>)
 8003446:	f003 f81d 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 800344a:	2200      	movs	r2, #0
 800344c:	f44f 41c2 	mov.w	r1, #24832	; 0x6100
 8003450:	4872      	ldr	r0, [pc, #456]	; (800361c <MX_GPIO_Init+0x2f4>)
 8003452:	f003 f817 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_EN_GPIO_Port, BL_EN_Pin, GPIO_PIN_RESET);
 8003456:	2200      	movs	r2, #0
 8003458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800345c:	4870      	ldr	r0, [pc, #448]	; (8003620 <MX_GPIO_Init+0x2f8>)
 800345e:	f003 f811 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_DOWN_Pin TP_INT_Pin JOY_LEFT_Pin
                           JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_DOWN_Pin|TP_INT_Pin|JOY_LEFT_Pin
 8003462:	f640 7302 	movw	r3, #3842	; 0xf02
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
                          |JOY_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003468:	4b6e      	ldr	r3, [pc, #440]	; (8003624 <MX_GPIO_Init+0x2fc>)
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003474:	4619      	mov	r1, r3
 8003476:	486c      	ldr	r0, [pc, #432]	; (8003628 <MX_GPIO_Init+0x300>)
 8003478:	f002 fd80 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_SMPS_V1_Pin MCU_SMPS_SW_Pin MCU_SMPS_V3_Pin MCU_SMPS_PG_Pin
                           MCU_SMPS_EN_Pin MCU_SMPS_V2_Pin */
  GPIO_InitStruct.Pin = MCU_SMPS_V1_Pin|MCU_SMPS_SW_Pin|MCU_SMPS_V3_Pin|MCU_SMPS_PG_Pin
 800347c:	f24a 03d4 	movw	r3, #41172	; 0xa0d4
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
                          |MCU_SMPS_EN_Pin|MCU_SMPS_V2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003482:	2301      	movs	r3, #1
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2300      	movs	r3, #0
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800348e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003492:	4619      	mov	r1, r3
 8003494:	485e      	ldr	r0, [pc, #376]	; (8003610 <MX_GPIO_Init+0x2e8>)
 8003496:	f002 fd71 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_RST_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin;
 800349a:	2310      	movs	r3, #16
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349e:	2301      	movs	r3, #1
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a6:	2300      	movs	r3, #0
 80034a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TP_RST_GPIO_Port, &GPIO_InitStruct);
 80034aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ae:	4619      	mov	r1, r3
 80034b0:	4858      	ldr	r0, [pc, #352]	; (8003614 <MX_GPIO_Init+0x2ec>)
 80034b2:	f002 fd63 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_PWM_EN_Pin */
  GPIO_InitStruct.Pin = LCD_PWM_EN_Pin;
 80034b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034bc:	2301      	movs	r3, #1
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c4:	2300      	movs	r3, #0
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_PWM_EN_GPIO_Port, &GPIO_InitStruct);
 80034c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034cc:	4619      	mov	r1, r3
 80034ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d2:	f002 fd53 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_VSYNC_Pin LCD_R6_Pin LCD_R7_Pin LCD_G6_Pin
                           LCD_G7_Pin LCD_B7_Pin LCD_B6_Pin */
  GPIO_InitStruct.Pin = LCD_VSYNC_Pin|LCD_R6_Pin|LCD_R7_Pin|LCD_G6_Pin
 80034d6:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G7_Pin|LCD_B7_Pin|LCD_B6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	2300      	movs	r3, #0
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 80034e8:	230b      	movs	r3, #11
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f0:	4619      	mov	r1, r3
 80034f2:	484e      	ldr	r0, [pc, #312]	; (800362c <MX_GPIO_Init+0x304>)
 80034f4:	f002 fd42 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80034f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fe:	2301      	movs	r3, #1
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003506:	2300      	movs	r3, #0
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 800350a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800350e:	4619      	mov	r1, r3
 8003510:	4841      	ldr	r0, [pc, #260]	; (8003618 <MX_GPIO_Init+0x2f0>)
 8003512:	f002 fd33 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8003516:	2308      	movs	r3, #8
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800351a:	2300      	movs	r3, #0
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8003522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003526:	4619      	mov	r1, r3
 8003528:	4839      	ldr	r0, [pc, #228]	; (8003610 <MX_GPIO_Init+0x2e8>)
 800352a:	f002 fd27 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800352e:	2320      	movs	r3, #32
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003532:	4b3c      	ldr	r3, [pc, #240]	; (8003624 <MX_GPIO_Init+0x2fc>)
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800353a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353e:	4619      	mov	r1, r3
 8003540:	483b      	ldr	r0, [pc, #236]	; (8003630 <MX_GPIO_Init+0x308>)
 8003542:	f002 fd1b 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LCD_DISP_Pin;
 8003546:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800354c:	2301      	movs	r3, #1
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003554:	2300      	movs	r3, #0
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355c:	4619      	mov	r1, r3
 800355e:	482f      	ldr	r0, [pc, #188]	; (800361c <MX_GPIO_Init+0x2f4>)
 8003560:	f002 fd0c 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_HSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_HSYNC_Pin;
 8003564:	2305      	movs	r3, #5
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	2302      	movs	r3, #2
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003570:	2300      	movs	r3, #0
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8003574:	230b      	movs	r3, #11
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357c:	4619      	mov	r1, r3
 800357e:	4826      	ldr	r0, [pc, #152]	; (8003618 <MX_GPIO_Init+0x2f0>)
 8003580:	f002 fcfc 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = STMOD_SPI1_NSS_Pin;
 8003584:	2320      	movs	r3, #32
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003588:	2302      	movs	r3, #2
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003590:	2303      	movs	r3, #3
 8003592:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003594:	230c      	movs	r3, #12
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8003598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800359c:	4619      	mov	r1, r3
 800359e:	481f      	ldr	r0, [pc, #124]	; (800361c <MX_GPIO_Init+0x2f4>)
 80035a0:	f002 fcec 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80035a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b2:	2300      	movs	r3, #0
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 80035b6:	230f      	movs	r3, #15
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80035ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035be:	4619      	mov	r1, r3
 80035c0:	4817      	ldr	r0, [pc, #92]	; (8003620 <MX_GPIO_Init+0x2f8>)
 80035c2:	f002 fcdb 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BL_EN_Pin */
  GPIO_InitStruct.Pin = BL_EN_Pin;
 80035c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035cc:	2301      	movs	r3, #1
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	2300      	movs	r3, #0
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BL_EN_GPIO_Port, &GPIO_InitStruct);
 80035d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035dc:	4619      	mov	r1, r3
 80035de:	4810      	ldr	r0, [pc, #64]	; (8003620 <MX_GPIO_Init+0x2f8>)
 80035e0:	f002 fccc 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_CLK_Pin;
 80035e4:	2310      	movs	r3, #16
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e8:	2302      	movs	r3, #2
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f0:	2300      	movs	r3, #0
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 80035f4:	230b      	movs	r3, #11
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_CLK_GPIO_Port, &GPIO_InitStruct);
 80035f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035fc:	4619      	mov	r1, r3
 80035fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003602:	f002 fcbb 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RTC_OUT2_Pin */
  GPIO_InitStruct.Pin = LCD_RTC_OUT2_Pin;
 8003606:	2304      	movs	r3, #4
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
 800360a:	e013      	b.n	8003634 <MX_GPIO_Init+0x30c>
 800360c:	40021000 	.word	0x40021000
 8003610:	48001c00 	.word	0x48001c00
 8003614:	48000400 	.word	0x48000400
 8003618:	48000800 	.word	0x48000800
 800361c:	48001800 	.word	0x48001800
 8003620:	48000c00 	.word	0x48000c00
 8003624:	10110000 	.word	0x10110000
 8003628:	48002000 	.word	0x48002000
 800362c:	48001000 	.word	0x48001000
 8003630:	48001400 	.word	0x48001400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363c:	2300      	movs	r3, #0
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8003640:	2301      	movs	r3, #1
 8003642:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_RTC_OUT2_GPIO_Port, &GPIO_InitStruct);
 8003644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003648:	4619      	mov	r1, r3
 800364a:	4803      	ldr	r0, [pc, #12]	; (8003658 <MX_GPIO_Init+0x330>)
 800364c:	f002 fc96 	bl	8005f7c <HAL_GPIO_Init>

}
 8003650:	bf00      	nop
 8003652:	3738      	adds	r7, #56	; 0x38
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	48000400 	.word	0x48000400

0800365c <bme680I2cRead>:

/* USER CODE BEGIN 4 */
int8_t bme680I2cRead(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	603a      	str	r2, [r7, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	4603      	mov	r3, r0
 8003668:	71fb      	strb	r3, [r7, #7]
 800366a:	460b      	mov	r3, r1
 800366c:	71bb      	strb	r3, [r7, #6]
 800366e:	4613      	mov	r3, r2
 8003670:	80bb      	strh	r3, [r7, #4]
  int8_t result;

  if (HAL_I2C_Master_Transmit(&hi2c4, (dev_id << 1), &reg_addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	b29b      	uxth	r3, r3
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	b299      	uxth	r1, r3
 800367a:	1dba      	adds	r2, r7, #6
 800367c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2301      	movs	r3, #1
 8003684:	4813      	ldr	r0, [pc, #76]	; (80036d4 <bme680I2cRead+0x78>)
 8003686:	f002 ffd3 	bl	8006630 <HAL_I2C_Master_Transmit>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <bme680I2cRead+0x3a>
    result = -1;
 8003690:	23ff      	movs	r3, #255	; 0xff
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e017      	b.n	80036c6 <bme680I2cRead+0x6a>
  } else if (HAL_I2C_Master_Receive (&hi2c4, (dev_id << 1) | 0x01, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	b21b      	sxth	r3, r3
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	b21b      	sxth	r3, r3
 80036a2:	b299      	uxth	r1, r3
 80036a4:	88ba      	ldrh	r2, [r7, #4]
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	4808      	ldr	r0, [pc, #32]	; (80036d4 <bme680I2cRead+0x78>)
 80036b2:	f003 f8b1 	bl	8006818 <HAL_I2C_Master_Receive>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <bme680I2cRead+0x66>
    result = -1;
 80036bc:	23ff      	movs	r3, #255	; 0xff
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e001      	b.n	80036c6 <bme680I2cRead+0x6a>
  } else {
    result = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
  }

  return result;
 80036c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200002cc 	.word	0x200002cc

080036d8 <bme680I2cWrite>:

int8_t bme680I2cWrite(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	603a      	str	r2, [r7, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
 80036e6:	460b      	mov	r3, r1
 80036e8:	71bb      	strb	r3, [r7, #6]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80bb      	strh	r3, [r7, #4]
  int8_t result;
  int8_t *buf;

  // Allocate and load I2C transmit buffer
  buf = malloc(len + 1);
 80036ee:	88bb      	ldrh	r3, [r7, #4]
 80036f0:	3301      	adds	r3, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f00d fd50 	bl	8011198 <malloc>
 80036f8:	4603      	mov	r3, r0
 80036fa:	60bb      	str	r3, [r7, #8]
  buf[0] = reg_addr;
 80036fc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	701a      	strb	r2, [r3, #0]
  memcpy(buf + 1, reg_data, len);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	3301      	adds	r3, #1
 8003708:	88ba      	ldrh	r2, [r7, #4]
 800370a:	6839      	ldr	r1, [r7, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f00d fd65 	bl	80111dc <memcpy>

  if (HAL_I2C_Master_Transmit(&hi2c4, (dev_id << 1), (uint8_t *) buf, len + 1, HAL_MAX_DELAY) != HAL_OK) {
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	b29b      	uxth	r3, r3
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	b299      	uxth	r1, r3
 800371a:	88bb      	ldrh	r3, [r7, #4]
 800371c:	3301      	adds	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	4613      	mov	r3, r2
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	480a      	ldr	r0, [pc, #40]	; (8003754 <bme680I2cWrite+0x7c>)
 800372c:	f002 ff80 	bl	8006630 <HAL_I2C_Master_Transmit>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <bme680I2cWrite+0x64>
    result = -1;
 8003736:	23ff      	movs	r3, #255	; 0xff
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	e001      	b.n	8003740 <bme680I2cWrite+0x68>
  } else {
    result = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
  }

  free(buf);
 8003740:	68b8      	ldr	r0, [r7, #8]
 8003742:	f00d fd31 	bl	80111a8 <free>
  return result;
 8003746:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200002cc 	.word	0x200002cc

08003758 <MX_I2C4_DeInit>:

// I2C4 De-initialization
void MX_I2C4_DeInit(void) {
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  // Ensure idempotence
  if (!i2c4Initialized) { return; }
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <MX_I2C4_DeInit+0x30>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	f083 0301 	eor.w	r3, r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <MX_I2C4_DeInit+0x2a>
  i2c4Initialized = false;
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <MX_I2C4_DeInit+0x30>)
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]

  // Deconfigure Analogue filter
  HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE);
 8003770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003774:	4805      	ldr	r0, [pc, #20]	; (800378c <MX_I2C4_DeInit+0x34>)
 8003776:	f003 fb25 	bl	8006dc4 <HAL_I2CEx_ConfigAnalogFilter>

  // Deinitialize
  HAL_I2C_DeInit(&hi2c4);
 800377a:	4804      	ldr	r0, [pc, #16]	; (800378c <MX_I2C4_DeInit+0x34>)
 800377c:	f002 ff29 	bl	80065d2 <HAL_I2C_DeInit>
 8003780:	e000      	b.n	8003784 <MX_I2C4_DeInit+0x2c>
  if (!i2c4Initialized) { return; }
 8003782:	bf00      	nop
}
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000215 	.word	0x20000215
 800378c:	200002cc 	.word	0x200002cc

08003790 <noteDebugSerialOutput>:

size_t noteDebugSerialOutput(const char *message) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  static const size_t USART2_TIMEOUT = 250;
  size_t result = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), USART2_TIMEOUT);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fc fd39 	bl	8000214 <strlen>
 80037a2:	4603      	mov	r3, r0
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <noteDebugSerialOutput+0x40>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4809      	ldr	r0, [pc, #36]	; (80037d4 <noteDebugSerialOutput+0x44>)
 80037ae:	f008 fedb 	bl	800c568 <HAL_UART_Transmit>
 80037b2:	4603      	mov	r3, r0
 80037b4:	72fb      	strb	r3, [r7, #11]
  if (HAL_OK == status) {
 80037b6:	7afb      	ldrb	r3, [r7, #11]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <noteDebugSerialOutput+0x32>
    result = sizeof(message);
 80037bc:	2304      	movs	r3, #4
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e001      	b.n	80037c6 <noteDebugSerialOutput+0x36>
  } else {
    result = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
  }

  return result;
 80037c6:	68fb      	ldr	r3, [r7, #12]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	08011ef4 	.word	0x08011ef4
 80037d4:	20000d64 	.word	0x20000d64

080037d8 <noteI2CReceive>:

const char * noteI2CReceive(uint16_t dev_addr, uint8_t* pBuffer, uint16_t size, uint32_t *available) {
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b0cb      	sub	sp, #300	; 0x12c
 80037dc:	af02      	add	r7, sp, #8
 80037de:	4604      	mov	r4, r0
 80037e0:	f107 0008 	add.w	r0, r7, #8
 80037e4:	6001      	str	r1, [r0, #0]
 80037e6:	4611      	mov	r1, r2
 80037e8:	1d3a      	adds	r2, r7, #4
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	f107 030e 	add.w	r3, r7, #14
 80037f0:	4622      	mov	r2, r4
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	460a      	mov	r2, r1
 80037fa:	801a      	strh	r2, [r3, #0]
  const char *errstr;
  HAL_StatusTypeDef result;
  uint8_t query_request[2];
  query_request[0] = 0x00;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
  query_request[1] = (size & NOTE_I2C_BUFFER_SIZE);
 8003802:	f107 030c 	add.w	r3, r7, #12
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111

  uint8_t goodbyte = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
  uint8_t availbyte = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

  result = HAL_I2C_Master_Transmit(&hi2c4, (dev_addr << 1), query_request, sizeof(query_request), HAL_MAX_DELAY);
 800381a:	f107 030e 	add.w	r3, r7, #14
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	b299      	uxth	r1, r3
 8003824:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	2302      	movs	r3, #2
 8003830:	4857      	ldr	r0, [pc, #348]	; (8003990 <noteI2CReceive+0x1b8>)
 8003832:	f002 fefd 	bl	8006630 <HAL_I2C_Master_Transmit>
 8003836:	4603      	mov	r3, r0
 8003838:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
  switch(result) {
 800383c:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8003840:	2b03      	cmp	r3, #3
 8003842:	d81b      	bhi.n	800387c <noteI2CReceive+0xa4>
 8003844:	a201      	add	r2, pc, #4	; (adr r2, 800384c <noteI2CReceive+0x74>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	0800385d 	.word	0x0800385d
 8003850:	08003865 	.word	0x08003865
 8003854:	0800386d 	.word	0x0800386d
 8003858:	08003875 	.word	0x08003875
  case HAL_OK:
    errstr = NULL;
 800385c:	2300      	movs	r3, #0
 800385e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    break;
 8003862:	e00f      	b.n	8003884 <noteI2CReceive+0xac>
  case HAL_ERROR:
    errstr = ERRSTR("i2c: tranmission error",i2cerr);
 8003864:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <noteI2CReceive+0x1bc>)
 8003866:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    break;
 800386a:	e00b      	b.n	8003884 <noteI2CReceive+0xac>
  case HAL_BUSY:
    errstr = ERRSTR("i2c: bus busy",i2cerr);
 800386c:	4b4a      	ldr	r3, [pc, #296]	; (8003998 <noteI2CReceive+0x1c0>)
 800386e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    break;
 8003872:	e007      	b.n	8003884 <noteI2CReceive+0xac>
  case HAL_TIMEOUT:
    errstr = ERRSTR("i2c: transmission timeout",i2cerr);
 8003874:	4b49      	ldr	r3, [pc, #292]	; (800399c <noteI2CReceive+0x1c4>)
 8003876:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    break;
 800387a:	e003      	b.n	8003884 <noteI2CReceive+0xac>
  default:
    errstr = ERRSTR("i2c: unexpected transmission error",i2cerr);
 800387c:	4b48      	ldr	r3, [pc, #288]	; (80039a0 <noteI2CReceive+0x1c8>)
 800387e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    break;
 8003882:	bf00      	nop
  }

  // Only receive if we successfully began transmission
  if (!errstr) {
 8003884:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d167      	bne.n	800395c <noteI2CReceive+0x184>
    uint8_t buffer[NOTE_I2C_BUFFER_SIZE];
    int readlen = (size + 2);
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	3302      	adds	r3, #2
 8003894:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    result = HAL_I2C_Master_Receive(&hi2c4, (dev_addr << 1) | 0x01, buffer, readlen, HAL_MAX_DELAY);
 8003898:	f107 030e 	add.w	r3, r7, #14
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	b21b      	sxth	r3, r3
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	b21b      	sxth	r3, r3
 80038a8:	b299      	uxth	r1, r3
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ae:	b298      	uxth	r0, r3
 80038b0:	f107 0210 	add.w	r2, r7, #16
 80038b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	4603      	mov	r3, r0
 80038bc:	4834      	ldr	r0, [pc, #208]	; (8003990 <noteI2CReceive+0x1b8>)
 80038be:	f002 ffab 	bl	8006818 <HAL_I2C_Master_Receive>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    switch(result) {
 80038c8:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d81b      	bhi.n	8003908 <noteI2CReceive+0x130>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <noteI2CReceive+0x100>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	080038f1 	.word	0x080038f1
 80038e0:	080038f9 	.word	0x080038f9
 80038e4:	08003901 	.word	0x08003901
    case HAL_OK:
      errstr = NULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      break;
 80038ee:	e00f      	b.n	8003910 <noteI2CReceive+0x138>
    case HAL_ERROR:
      errstr = ERRSTR("i2c: read error",i2cerr);
 80038f0:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <noteI2CReceive+0x1cc>)
 80038f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      break;
 80038f6:	e00b      	b.n	8003910 <noteI2CReceive+0x138>
    case HAL_BUSY:
      errstr = ERRSTR("i2c: bus busy",i2cerr);
 80038f8:	4b27      	ldr	r3, [pc, #156]	; (8003998 <noteI2CReceive+0x1c0>)
 80038fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      break;
 80038fe:	e007      	b.n	8003910 <noteI2CReceive+0x138>
    case HAL_TIMEOUT:
      errstr = ERRSTR("i2c: read timeout",i2cerr);
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <noteI2CReceive+0x1d0>)
 8003902:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      break;
 8003906:	e003      	b.n	8003910 <noteI2CReceive+0x138>
    default:
      errstr = ERRSTR("i2c: unexpected read error",i2cerr);
 8003908:	4b28      	ldr	r3, [pc, #160]	; (80039ac <noteI2CReceive+0x1d4>)
 800390a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      break;
 800390e:	bf00      	nop
    }
    if (!errstr) {
 8003910:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d121      	bne.n	800395c <noteI2CReceive+0x184>
      availbyte =buffer[0];
 8003918:	f107 0310 	add.w	r3, r7, #16
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
      goodbyte = buffer[1];
 8003922:	f107 0310 	add.w	r3, r7, #16
 8003926:	785b      	ldrb	r3, [r3, #1]
 8003928:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
      if (goodbyte != size) {
 800392c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8003930:	b29b      	uxth	r3, r3
 8003932:	f107 020c 	add.w	r2, r7, #12
 8003936:	8812      	ldrh	r2, [r2, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d003      	beq.n	8003944 <noteI2CReceive+0x16c>
        errstr = ERRSTR("i2c: incorrect amount of data",i2cerr);
 800393c:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <noteI2CReceive+0x1d8>)
 800393e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003942:	e00b      	b.n	800395c <noteI2CReceive+0x184>
      } else {
        memcpy(pBuffer, &buffer[2], buffer[1]);
 8003944:	f107 0310 	add.w	r3, r7, #16
 8003948:	785b      	ldrb	r3, [r3, #1]
 800394a:	461a      	mov	r2, r3
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	1c99      	adds	r1, r3, #2
 8003952:	f107 0308 	add.w	r3, r7, #8
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	f00d fc40 	bl	80111dc <memcpy>
      }
    }
  }

  if (errstr != NULL) {
 800395c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <noteI2CReceive+0x1a2>
    noteDebugSerialOutput(errstr);
 8003964:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8003968:	f7ff ff12 	bl	8003790 <noteDebugSerialOutput>
    NoteDebugln(errstr);
 800396c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8003970:	f00c ff94 	bl	801089c <NoteDebugln>
    return errstr;
 8003974:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003978:	e005      	b.n	8003986 <noteI2CReceive+0x1ae>
  }
  *available = availbyte;
 800397a:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	601a      	str	r2, [r3, #0]
  return NULL;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}
 8003990:	200002cc 	.word	0x200002cc
 8003994:	08011be4 	.word	0x08011be4
 8003998:	08011bfc 	.word	0x08011bfc
 800399c:	08011c0c 	.word	0x08011c0c
 80039a0:	08011c28 	.word	0x08011c28
 80039a4:	08011c4c 	.word	0x08011c4c
 80039a8:	08011c5c 	.word	0x08011c5c
 80039ac:	08011c70 	.word	0x08011c70
 80039b0:	08011c8c 	.word	0x08011c8c

080039b4 <noteI2CReset>:

bool noteI2CReset() {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b0c2      	sub	sp, #264	; 0x108
 80039b8:	af00      	add	r7, sp, #0
  const char *errstr;
  uint8_t buffer[NOTE_I2C_BUFFER_SIZE];
  uint32_t available = 0;
 80039ba:	463b      	mov	r3, r7
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

  // Reset the I2C4 Interface
  MX_I2C4_DeInit();
 80039c0:	f7ff feca 	bl	8003758 <MX_I2C4_DeInit>
  MX_I2C4_Init();
 80039c4:	f7ff f87a 	bl	8002abc <MX_I2C4_Init>

  // Empty the Notecard send buffer
  errstr = noteI2CReceive(NoteI2CAddress(), NULL, 0, &available);
 80039c8:	f00d f86e 	bl	8010aa8 <NoteI2CAddress>
 80039cc:	4603      	mov	r3, r0
 80039ce:	b298      	uxth	r0, r3
 80039d0:	463b      	mov	r3, r7
 80039d2:	2200      	movs	r2, #0
 80039d4:	2100      	movs	r1, #0
 80039d6:	f7ff feff 	bl	80037d8 <noteI2CReceive>
 80039da:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  while (!errstr && available) {
 80039de:	e010      	b.n	8003a02 <noteI2CReset+0x4e>
    errstr = noteI2CReceive(NoteI2CAddress(), buffer, available, &available);
 80039e0:	f00d f862 	bl	8010aa8 <NoteI2CAddress>
 80039e4:	4603      	mov	r3, r0
 80039e6:	b298      	uxth	r0, r3
 80039e8:	463b      	mov	r3, r7
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	463b      	mov	r3, r7
 80039f0:	1d39      	adds	r1, r7, #4
 80039f2:	f7ff fef1 	bl	80037d8 <noteI2CReceive>
 80039f6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    if (errstr) { break; }
 80039fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d108      	bne.n	8003a14 <noteI2CReset+0x60>
  while (!errstr && available) {
 8003a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <noteI2CReset+0x62>
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e6      	bne.n	80039e0 <noteI2CReset+0x2c>
 8003a12:	e000      	b.n	8003a16 <noteI2CReset+0x62>
    if (errstr) { break; }
 8003a14:	bf00      	nop
  }

  return !errstr;
 8003a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <noteI2CTransmit>:

const char * noteI2CTransmit(uint16_t dev_addr, uint8_t* pBuffer, uint16_t size) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b0c6      	sub	sp, #280	; 0x118
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	463b      	mov	r3, r7
 8003a38:	6019      	str	r1, [r3, #0]
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	1dbb      	adds	r3, r7, #6
 8003a3e:	4602      	mov	r2, r0
 8003a40:	801a      	strh	r2, [r3, #0]
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	460a      	mov	r2, r1
 8003a46:	801a      	strh	r2, [r3, #0]
  const char * errstr;
  HAL_StatusTypeDef result;
  uint8_t send_buffer[256];
  send_buffer[0] = (size & NOTE_I2C_BUFFER_SIZE);
 8003a48:	1d3b      	adds	r3, r7, #4
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	f107 0308 	add.w	r3, r7, #8
 8003a52:	701a      	strb	r2, [r3, #0]

  memcpy(&send_buffer[1], pBuffer, send_buffer[0]);
 8003a54:	f107 0308 	add.w	r3, r7, #8
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	f107 0208 	add.w	r2, r7, #8
 8003a62:	1c50      	adds	r0, r2, #1
 8003a64:	460a      	mov	r2, r1
 8003a66:	6819      	ldr	r1, [r3, #0]
 8003a68:	f00d fbb8 	bl	80111dc <memcpy>
  result = HAL_I2C_Master_Transmit(&hi2c4, (dev_addr << 1), send_buffer, (send_buffer[0] + 1), HAL_MAX_DELAY);
 8003a6c:	1dbb      	adds	r3, r7, #6
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	b299      	uxth	r1, r3
 8003a74:	f107 0308 	add.w	r3, r7, #8
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	b298      	uxth	r0, r3
 8003a80:	f107 0208 	add.w	r2, r7, #8
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4818      	ldr	r0, [pc, #96]	; (8003af0 <noteI2CTransmit+0xc0>)
 8003a8e:	f002 fdcf 	bl	8006630 <HAL_I2C_Master_Transmit>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  switch(result) {
 8003a98:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d81b      	bhi.n	8003ad8 <noteI2CTransmit+0xa8>
 8003aa0:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <noteI2CTransmit+0x78>)
 8003aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa6:	bf00      	nop
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ac1 	.word	0x08003ac1
 8003ab0:	08003ac9 	.word	0x08003ac9
 8003ab4:	08003ad1 	.word	0x08003ad1
  case HAL_OK:
    errstr = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    break;
 8003abe:	e00f      	b.n	8003ae0 <noteI2CTransmit+0xb0>
  case HAL_ERROR:
    errstr = ERRSTR("i2c: tranmission error",i2cerr);
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <noteI2CTransmit+0xc4>)
 8003ac2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    break;
 8003ac6:	e00b      	b.n	8003ae0 <noteI2CTransmit+0xb0>
  case HAL_BUSY:
    errstr = ERRSTR("i2c: bus busy",i2cerr);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <noteI2CTransmit+0xc8>)
 8003aca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    break;
 8003ace:	e007      	b.n	8003ae0 <noteI2CTransmit+0xb0>
  case HAL_TIMEOUT:
    errstr = ERRSTR("i2c: transmission timeout",i2cerr);
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <noteI2CTransmit+0xcc>)
 8003ad2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    break;
 8003ad6:	e003      	b.n	8003ae0 <noteI2CTransmit+0xb0>
  default:
    errstr = ERRSTR("i2c: unexpected transmission error",i2cerr);
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <noteI2CTransmit+0xd0>)
 8003ada:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    break;
 8003ade:	bf00      	nop
  }

  return errstr;
 8003ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	200002cc 	.word	0x200002cc
 8003af4:	08011be4 	.word	0x08011be4
 8003af8:	08011bfc 	.word	0x08011bfc
 8003afc:	08011c0c 	.word	0x08011c0c
 8003b00:	08011c28 	.word	0x08011c28

08003b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_MspInit+0x44>)
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <HAL_MspInit+0x44>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6613      	str	r3, [r2, #96]	; 0x60
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <HAL_MspInit+0x44>)
 8003b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_MspInit+0x44>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	4a08      	ldr	r2, [pc, #32]	; (8003b58 <HAL_MspInit+0x44>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_MspInit+0x44>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08c      	sub	sp, #48	; 0x30
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 031c 	add.w	r3, r7, #28
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a2d      	ldr	r2, [pc, #180]	; (8003c30 <HAL_ADC_MspInit+0xd4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d154      	bne.n	8003c28 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003b7e:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003b84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b8a:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	4a20      	ldr	r2, [pc, #128]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bba:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc6:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	4a1a      	ldr	r2, [pc, #104]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bd2:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <HAL_ADC_MspInit+0xd8>)
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN10
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ARD_ADC12_IN13_Pin|ARD_ADC12_IN2_Pin;
 8003bde:	2312      	movs	r3, #18
 8003be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003be2:	230b      	movs	r3, #11
 8003be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bea:	f107 031c 	add.w	r3, r7, #28
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4811      	ldr	r0, [pc, #68]	; (8003c38 <HAL_ADC_MspInit+0xdc>)
 8003bf2:	f002 f9c3 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_ADC12_IN10_Pin|ARD_ADC12_IN6_Pin;
 8003bf6:	2322      	movs	r3, #34	; 0x22
 8003bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003bfa:	230b      	movs	r3, #11
 8003bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c02:	f107 031c 	add.w	r3, r7, #28
 8003c06:	4619      	mov	r1, r3
 8003c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c0c:	f002 f9b6 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_ADC12_IN15_Pin|ARD_ADC12_IN16_Pin;
 8003c10:	2303      	movs	r3, #3
 8003c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003c14:	230b      	movs	r3, #11
 8003c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1c:	f107 031c 	add.w	r3, r7, #28
 8003c20:	4619      	mov	r1, r3
 8003c22:	4806      	ldr	r0, [pc, #24]	; (8003c3c <HAL_ADC_MspInit+0xe0>)
 8003c24:	f002 f9aa 	bl	8005f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c28:	bf00      	nop
 8003c2a:	3730      	adds	r7, #48	; 0x30
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	50040000 	.word	0x50040000
 8003c34:	40021000 	.word	0x40021000
 8003c38:	48000800 	.word	0x48000800
 8003c3c:	48000400 	.word	0x48000400

08003c40 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08c      	sub	sp, #48	; 0x30
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c48:	f107 031c 	add.w	r3, r7, #28
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a33      	ldr	r2, [pc, #204]	; (8003d2c <HAL_DCMI_MspInit+0xec>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d160      	bne.n	8003d24 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003c62:	4b33      	ldr	r3, [pc, #204]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c66:	4a32      	ldr	r2, [pc, #200]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c6e:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c7a:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	4a2c      	ldr	r2, [pc, #176]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003c80:	f043 0310 	orr.w	r3, r3, #16
 8003c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c86:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c92:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c96:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c9e:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cae:	4a20      	ldr	r2, [pc, #128]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <HAL_DCMI_MspInit+0xf0>)
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
    PI5     ------> DCMI_VSYNC
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D2_Pin;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8003cd2:	230a      	movs	r3, #10
 8003cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D2_GPIO_Port, &GPIO_InitStruct);
 8003cd6:	f107 031c 	add.w	r3, r7, #28
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4815      	ldr	r0, [pc, #84]	; (8003d34 <HAL_DCMI_MspInit+0xf4>)
 8003cde:	f002 f94d 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCLK_Pin
 8003ce2:	f245 7320 	movw	r3, #22304	; 0x5720
 8003ce6:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8003cf4:	230a      	movs	r3, #10
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003cf8:	f107 031c 	add.w	r3, r7, #28
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	480e      	ldr	r0, [pc, #56]	; (8003d38 <HAL_DCMI_MspInit+0xf8>)
 8003d00:	f002 f93c 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D6_Pin|DCMI_D10_Pin|DCMI_D5_Pin
 8003d04:	23f8      	movs	r3, #248	; 0xf8
 8003d06:	61fb      	str	r3, [r7, #28]
                          |DCMI_VSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d10:	2300      	movs	r3, #0
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8003d14:	230a      	movs	r3, #10
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003d18:	f107 031c 	add.w	r3, r7, #28
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4807      	ldr	r0, [pc, #28]	; (8003d3c <HAL_DCMI_MspInit+0xfc>)
 8003d20:	f002 f92c 	bl	8005f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8003d24:	bf00      	nop
 8003d26:	3730      	adds	r7, #48	; 0x30
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	50050000 	.word	0x50050000
 8003d30:	40021000 	.word	0x40021000
 8003d34:	48001000 	.word	0x48001000
 8003d38:	48001c00 	.word	0x48001c00
 8003d3c:	48002000 	.word	0x48002000

08003d40 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08c      	sub	sp, #48	; 0x30
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d48:	f107 031c 	add.w	r3, r7, #28
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003d58:	4b34      	ldr	r3, [pc, #208]	; (8003e2c <HAL_DFSDM_ChannelMspInit+0xec>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d161      	bne.n	8003e24 <HAL_DFSDM_ChannelMspInit+0xe4>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003d60:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d64:	4a32      	ldr	r2, [pc, #200]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6a:	6613      	str	r3, [r2, #96]	; 0x60
 8003d6c:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d78:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003d7e:	f043 0308 	orr.w	r3, r3, #8
 8003d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d84:	4b2a      	ldr	r3, [pc, #168]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d94:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003d96:	f043 0320 	orr.w	r3, r3, #32
 8003d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d9c:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da8:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dac:	4a20      	ldr	r2, [pc, #128]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003dae:	f043 0302 	orr.w	r3, r3, #2
 8003db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <HAL_DFSDM_ChannelMspInit+0xf0>)
 8003db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD3     ------> DFSDM1_DATIN0
    PF10     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN0_Pin;
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003dd0:	2306      	movs	r3, #6
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DFSDM1_DATIN0_GPIO_Port, &GPIO_InitStruct);
 8003dd4:	f107 031c 	add.w	r3, r7, #28
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4816      	ldr	r0, [pc, #88]	; (8003e34 <HAL_DFSDM_ChannelMspInit+0xf4>)
 8003ddc:	f002 f8ce 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STMOD_DFSDM1_CKOUT_Pin;
 8003de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de6:	2302      	movs	r3, #2
 8003de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dee:	2300      	movs	r3, #0
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003df2:	2306      	movs	r3, #6
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STMOD_DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8003df6:	f107 031c 	add.w	r3, r7, #28
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	480e      	ldr	r0, [pc, #56]	; (8003e38 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8003dfe:	f002 f8bd 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8003e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	2300      	movs	r3, #0
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003e14:	2306      	movs	r3, #6
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8003e18:	f107 031c 	add.w	r3, r7, #28
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4807      	ldr	r0, [pc, #28]	; (8003e3c <HAL_DFSDM_ChannelMspInit+0xfc>)
 8003e20:	f002 f8ac 	bl	8005f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8003e24:	bf00      	nop
 8003e26:	3730      	adds	r7, #48	; 0x30
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000218 	.word	0x20000218
 8003e30:	40021000 	.word	0x40021000
 8003e34:	48000c00 	.word	0x48000c00
 8003e38:	48001400 	.word	0x48001400
 8003e3c:	48000400 	.word	0x48000400

08003e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08c      	sub	sp, #48	; 0x30
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2e      	ldr	r2, [pc, #184]	; (8003f18 <HAL_I2C_MspInit+0xd8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d128      	bne.n	8003eb4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e62:	4b2e      	ldr	r3, [pc, #184]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e66:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e6e:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8003e7a:	23c0      	movs	r3, #192	; 0xc0
 8003e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e7e:	2312      	movs	r3, #18
 8003e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e82:	2301      	movs	r3, #1
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e86:	2303      	movs	r3, #3
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e8e:	f107 031c 	add.w	r3, r7, #28
 8003e92:	4619      	mov	r1, r3
 8003e94:	4822      	ldr	r0, [pc, #136]	; (8003f20 <HAL_I2C_MspInit+0xe0>)
 8003e96:	f002 f871 	bl	8005f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e9a:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003ea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003eb2:	e02d      	b.n	8003f10 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C4)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <HAL_I2C_MspInit+0xe4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d128      	bne.n	8003f10 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ebe:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	4a16      	ldr	r2, [pc, #88]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003ec4:	f043 0320 	orr.w	r3, r3, #32
 8003ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eca:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8003ed6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003edc:	2312      	movs	r3, #18
 8003ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003ee8:	2304      	movs	r3, #4
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003eec:	f107 031c 	add.w	r3, r7, #28
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	480d      	ldr	r0, [pc, #52]	; (8003f28 <HAL_I2C_MspInit+0xe8>)
 8003ef4:	f002 f842 	bl	8005f7c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efc:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003efe:	f043 0302 	orr.w	r3, r3, #2
 8003f02:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_I2C_MspInit+0xdc>)
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
}
 8003f10:	bf00      	nop
 8003f12:	3730      	adds	r7, #48	; 0x30
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40005400 	.word	0x40005400
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	48000400 	.word	0x48000400
 8003f24:	40008400 	.word	0x40008400
 8003f28:	48001400 	.word	0x48001400

08003f2c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <HAL_I2C_MspDeInit+0x64>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d10e      	bne.n	8003f5c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_I2C_MspDeInit+0x68>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <HAL_I2C_MspDeInit+0x68>)
 8003f44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f48:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8003f4a:	2140      	movs	r1, #64	; 0x40
 8003f4c:	4812      	ldr	r0, [pc, #72]	; (8003f98 <HAL_I2C_MspDeInit+0x6c>)
 8003f4e:	f002 f9a7 	bl	80062a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8003f52:	2180      	movs	r1, #128	; 0x80
 8003f54:	4810      	ldr	r0, [pc, #64]	; (8003f98 <HAL_I2C_MspDeInit+0x6c>)
 8003f56:	f002 f9a3 	bl	80062a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8003f5a:	e014      	b.n	8003f86 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C4)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <HAL_I2C_MspDeInit+0x70>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d10f      	bne.n	8003f86 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_I2C_MspDeInit+0x68>)
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <HAL_I2C_MspDeInit+0x68>)
 8003f6c:	f023 0302 	bic.w	r3, r3, #2
 8003f70:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_GPIO_DeInit(I2C4_SDA_GPIO_Port, I2C4_SDA_Pin);
 8003f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f76:	480a      	ldr	r0, [pc, #40]	; (8003fa0 <HAL_I2C_MspDeInit+0x74>)
 8003f78:	f002 f992 	bl	80062a0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C4_SCL_GPIO_Port, I2C4_SCL_Pin);
 8003f7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f80:	4807      	ldr	r0, [pc, #28]	; (8003fa0 <HAL_I2C_MspDeInit+0x74>)
 8003f82:	f002 f98d 	bl	80062a0 <HAL_GPIO_DeInit>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40005400 	.word	0x40005400
 8003f94:	40021000 	.word	0x40021000
 8003f98:	48000400 	.word	0x48000400
 8003f9c:	40008400 	.word	0x40008400
 8003fa0:	48001400 	.word	0x48001400

08003fa4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b092      	sub	sp, #72	; 0x48
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a8e      	ldr	r2, [pc, #568]	; (80041fc <HAL_OSPI_MspInit+0x258>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d178      	bne.n	80040b8 <HAL_OSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8003fc6:	4b8e      	ldr	r3, [pc, #568]	; (8004200 <HAL_OSPI_MspInit+0x25c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	4a8c      	ldr	r2, [pc, #560]	; (8004200 <HAL_OSPI_MspInit+0x25c>)
 8003fce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8003fd0:	4b8b      	ldr	r3, [pc, #556]	; (8004200 <HAL_OSPI_MspInit+0x25c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_OSPI_MspInit+0x4c>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8003fd8:	4b8a      	ldr	r3, [pc, #552]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8003fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fdc:	4a89      	ldr	r2, [pc, #548]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8003fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fe4:	4b87      	ldr	r3, [pc, #540]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fec:	633b      	str	r3, [r7, #48]	; 0x30
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003ff0:	4b84      	ldr	r3, [pc, #528]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff4:	4a83      	ldr	r2, [pc, #524]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8003ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffa:	6513      	str	r3, [r2, #80]	; 0x50
 8003ffc:	4b81      	ldr	r3, [pc, #516]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004008:	4b7e      	ldr	r3, [pc, #504]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	4a7d      	ldr	r2, [pc, #500]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004014:	4b7b      	ldr	r3, [pc, #492]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004020:	4b78      	ldr	r3, [pc, #480]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004024:	4a77      	ldr	r2, [pc, #476]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800402c:	4b75      	ldr	r3, [pc, #468]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 800402e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 8004038:	f004 f842 	bl	80080c0 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800403c:	4b71      	ldr	r3, [pc, #452]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 800403e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004040:	4a70      	ldr	r2, [pc, #448]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004042:	f043 0310 	orr.w	r3, r3, #16
 8004046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004048:	4b6e      	ldr	r3, [pc, #440]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 800404a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	623b      	str	r3, [r7, #32]
 8004052:	6a3b      	ldr	r3, [r7, #32]
    PF3     ------> OCTOSPIM_P2_IO3
    PG6     ------> OCTOSPIM_P1_DQS
    PE10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO0_Pin|OCTOSPIM_P2_IO3_Pin;
 8004054:	230f      	movs	r3, #15
 8004056:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004058:	2302      	movs	r3, #2
 800405a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405c:	2300      	movs	r3, #0
 800405e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004060:	2303      	movs	r3, #3
 8004062:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8004064:	2305      	movs	r3, #5
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004068:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800406c:	4619      	mov	r1, r3
 800406e:	4866      	ldr	r0, [pc, #408]	; (8004208 <HAL_OSPI_MspInit+0x264>)
 8004070:	f001 ff84 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPIM_P1_DQS_Pin;
 8004074:	2340      	movs	r3, #64	; 0x40
 8004076:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004078:	2302      	movs	r3, #2
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407c:	2300      	movs	r3, #0
 800407e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004080:	2303      	movs	r3, #3
 8004082:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8004084:	2303      	movs	r3, #3
 8004086:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(OCTOSPIM_P1_DQS_GPIO_Port, &GPIO_InitStruct);
 8004088:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800408c:	4619      	mov	r1, r3
 800408e:	485f      	ldr	r0, [pc, #380]	; (800420c <HAL_OSPI_MspInit+0x268>)
 8004090:	f001 ff74 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPIM_P1_CLK_Pin|OCTOSPIM_P1_NCS_Pin;
 8004094:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004098:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	2302      	movs	r3, #2
 800409c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a2:	2303      	movs	r3, #3
 80040a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80040a6:	230a      	movs	r3, #10
 80040a8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040ae:	4619      	mov	r1, r3
 80040b0:	4857      	ldr	r0, [pc, #348]	; (8004210 <HAL_OSPI_MspInit+0x26c>)
 80040b2:	f001 ff63 	bl	8005f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80040b6:	e09c      	b.n	80041f2 <HAL_OSPI_MspInit+0x24e>
  else if(hospi->Instance==OCTOSPI2)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a55      	ldr	r2, [pc, #340]	; (8004214 <HAL_OSPI_MspInit+0x270>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	f040 8097 	bne.w	80041f2 <HAL_OSPI_MspInit+0x24e>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80040c4:	4b4e      	ldr	r3, [pc, #312]	; (8004200 <HAL_OSPI_MspInit+0x25c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	4a4d      	ldr	r2, [pc, #308]	; (8004200 <HAL_OSPI_MspInit+0x25c>)
 80040cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80040ce:	4b4c      	ldr	r3, [pc, #304]	; (8004200 <HAL_OSPI_MspInit+0x25c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d10b      	bne.n	80040ee <HAL_OSPI_MspInit+0x14a>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80040d6:	4b4b      	ldr	r3, [pc, #300]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	4a4a      	ldr	r2, [pc, #296]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 80040dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040e2:	4b48      	ldr	r3, [pc, #288]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80040ee:	4b45      	ldr	r3, [pc, #276]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 80040f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f2:	4a44      	ldr	r2, [pc, #272]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 80040f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f8:	6513      	str	r3, [r2, #80]	; 0x50
 80040fa:	4b42      	ldr	r3, [pc, #264]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 80040fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004106:	4b3f      	ldr	r3, [pc, #252]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	4a3e      	ldr	r2, [pc, #248]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 800410c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004112:	4b3c      	ldr	r3, [pc, #240]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800411e:	f003 ffcf 	bl	80080c0 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004122:	4b38      	ldr	r3, [pc, #224]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004126:	4a37      	ldr	r2, [pc, #220]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800412e:	4b35      	ldr	r3, [pc, #212]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800413a:	4b32      	ldr	r3, [pc, #200]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	4a31      	ldr	r2, [pc, #196]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004140:	f043 0310 	orr.w	r3, r3, #16
 8004144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004146:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004152:	4b2c      	ldr	r3, [pc, #176]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	4a2b      	ldr	r2, [pc, #172]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004158:	f043 0320 	orr.w	r3, r3, #32
 800415c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800415e:	4b29      	ldr	r3, [pc, #164]	; (8004204 <HAL_OSPI_MspInit+0x260>)
 8004160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = OCTOSPIM_P2_CS_Pin;
 800416a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800416e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004170:	2302      	movs	r3, #2
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004178:	2303      	movs	r3, #3
 800417a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800417c:	2305      	movs	r3, #5
 800417e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(OCTOSPIM_P2_CS_GPIO_Port, &GPIO_InitStruct);
 8004180:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004184:	4619      	mov	r1, r3
 8004186:	4821      	ldr	r0, [pc, #132]	; (800420c <HAL_OSPI_MspInit+0x268>)
 8004188:	f001 fef8 	bl	8005f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPIM_P1_IO2_Pin|OCTOSPIM_P1_IO3_Pin;
 800418c:	23c0      	movs	r3, #192	; 0xc0
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004190:	2302      	movs	r3, #2
 8004192:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004194:	2300      	movs	r3, #0
 8004196:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004198:	2303      	movs	r3, #3
 800419a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800419c:	230a      	movs	r3, #10
 800419e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041a4:	4619      	mov	r1, r3
 80041a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041aa:	f001 fee7 	bl	8005f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPIM_P1_IO1_Pin|OCTOSPIM_P1_IO0_Pin;
 80041ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b4:	2302      	movs	r3, #2
 80041b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041bc:	2303      	movs	r3, #3
 80041be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80041c0:	230a      	movs	r3, #10
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041c8:	4619      	mov	r1, r3
 80041ca:	4811      	ldr	r0, [pc, #68]	; (8004210 <HAL_OSPI_MspInit+0x26c>)
 80041cc:	f001 fed6 	bl	8005f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPIM_P2_DQS_Pin;
 80041d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d6:	2302      	movs	r3, #2
 80041d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041de:	2303      	movs	r3, #3
 80041e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80041e2:	2305      	movs	r3, #5
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(OCTOSPIM_P2_DQS_GPIO_Port, &GPIO_InitStruct);
 80041e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041ea:	4619      	mov	r1, r3
 80041ec:	4806      	ldr	r0, [pc, #24]	; (8004208 <HAL_OSPI_MspInit+0x264>)
 80041ee:	f001 fec5 	bl	8005f7c <HAL_GPIO_Init>
}
 80041f2:	bf00      	nop
 80041f4:	3748      	adds	r7, #72	; 0x48
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	a0001000 	.word	0xa0001000
 8004200:	2000021c 	.word	0x2000021c
 8004204:	40021000 	.word	0x40021000
 8004208:	48001400 	.word	0x48001400
 800420c:	48001800 	.word	0x48001800
 8004210:	48001000 	.word	0x48001000
 8004214:	a0001400 	.word	0xa0001400

08004218 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08c      	sub	sp, #48	; 0x30
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004220:	f107 031c 	add.w	r3, r7, #28
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a3c      	ldr	r2, [pc, #240]	; (8004328 <HAL_SD_MspInit+0x110>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d171      	bne.n	800431e <HAL_SD_MspInit+0x106>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800423a:	4b3c      	ldr	r3, [pc, #240]	; (800432c <HAL_SD_MspInit+0x114>)
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	4a3b      	ldr	r2, [pc, #236]	; (800432c <HAL_SD_MspInit+0x114>)
 8004240:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004246:	4b39      	ldr	r3, [pc, #228]	; (800432c <HAL_SD_MspInit+0x114>)
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <HAL_SD_MspInit+0x114>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004256:	4a35      	ldr	r2, [pc, #212]	; (800432c <HAL_SD_MspInit+0x114>)
 8004258:	f043 0302 	orr.w	r3, r3, #2
 800425c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800425e:	4b33      	ldr	r3, [pc, #204]	; (800432c <HAL_SD_MspInit+0x114>)
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800426a:	4b30      	ldr	r3, [pc, #192]	; (800432c <HAL_SD_MspInit+0x114>)
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	4a2f      	ldr	r2, [pc, #188]	; (800432c <HAL_SD_MspInit+0x114>)
 8004270:	f043 0308 	orr.w	r3, r3, #8
 8004274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004276:	4b2d      	ldr	r3, [pc, #180]	; (800432c <HAL_SD_MspInit+0x114>)
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004282:	4b2a      	ldr	r3, [pc, #168]	; (800432c <HAL_SD_MspInit+0x114>)
 8004284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004286:	4a29      	ldr	r2, [pc, #164]	; (800432c <HAL_SD_MspInit+0x114>)
 8004288:	f043 0304 	orr.w	r3, r3, #4
 800428c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800428e:	4b27      	ldr	r3, [pc, #156]	; (800432c <HAL_SD_MspInit+0x114>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> SDMMC1_D0DIR
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    PC7     ------> SDMMC1_D123DIR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800429a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800429e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a0:	2302      	movs	r3, #2
 80042a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a8:	2303      	movs	r3, #3
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80042ac:	2308      	movs	r3, #8
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b0:	f107 031c 	add.w	r3, r7, #28
 80042b4:	4619      	mov	r1, r3
 80042b6:	481e      	ldr	r0, [pc, #120]	; (8004330 <HAL_SD_MspInit+0x118>)
 80042b8:	f001 fe60 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 80042bc:	2304      	movs	r3, #4
 80042be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c0:	2302      	movs	r3, #2
 80042c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c8:	2303      	movs	r3, #3
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80042cc:	230c      	movs	r3, #12
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 80042d0:	f107 031c 	add.w	r3, r7, #28
 80042d4:	4619      	mov	r1, r3
 80042d6:	4817      	ldr	r0, [pc, #92]	; (8004334 <HAL_SD_MspInit+0x11c>)
 80042d8:	f001 fe50 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D2_Pin|SDMMC1_D3_Pin|SDMMC1_CK_Pin|SDMMC1_D1_Pin
 80042dc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80042e0:	61fb      	str	r3, [r7, #28]
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e2:	2302      	movs	r3, #2
 80042e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ea:	2303      	movs	r3, #3
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80042ee:	230c      	movs	r3, #12
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042f2:	f107 031c 	add.w	r3, r7, #28
 80042f6:	4619      	mov	r1, r3
 80042f8:	480f      	ldr	r0, [pc, #60]	; (8004338 <HAL_SD_MspInit+0x120>)
 80042fa:	f001 fe3f 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042fe:	23c0      	movs	r3, #192	; 0xc0
 8004300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004302:	2302      	movs	r3, #2
 8004304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004306:	2300      	movs	r3, #0
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800430a:	2303      	movs	r3, #3
 800430c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 800430e:	2308      	movs	r3, #8
 8004310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004312:	f107 031c 	add.w	r3, r7, #28
 8004316:	4619      	mov	r1, r3
 8004318:	4807      	ldr	r0, [pc, #28]	; (8004338 <HAL_SD_MspInit+0x120>)
 800431a:	f001 fe2f 	bl	8005f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800431e:	bf00      	nop
 8004320:	3730      	adds	r7, #48	; 0x30
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	50062400 	.word	0x50062400
 800432c:	40021000 	.word	0x40021000
 8004330:	48000400 	.word	0x48000400
 8004334:	48000c00 	.word	0x48000c00
 8004338:	48000800 	.word	0x48000800

0800433c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08c      	sub	sp, #48	; 0x30
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a3d      	ldr	r2, [pc, #244]	; (8004450 <HAL_SPI_MspInit+0x114>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d12a      	bne.n	80043b4 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800435e:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <HAL_SPI_MspInit+0x118>)
 8004360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004362:	4a3c      	ldr	r2, [pc, #240]	; (8004454 <HAL_SPI_MspInit+0x118>)
 8004364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004368:	6613      	str	r3, [r2, #96]	; 0x60
 800436a:	4b3a      	ldr	r3, [pc, #232]	; (8004454 <HAL_SPI_MspInit+0x118>)
 800436c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004376:	4b37      	ldr	r3, [pc, #220]	; (8004454 <HAL_SPI_MspInit+0x118>)
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	4a36      	ldr	r2, [pc, #216]	; (8004454 <HAL_SPI_MspInit+0x118>)
 800437c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004382:	4b34      	ldr	r3, [pc, #208]	; (8004454 <HAL_SPI_MspInit+0x118>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800438e:	f003 fe97 	bl	80080c0 <HAL_PWREx_EnableVddIO2>
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = STMOD_SPI1_MOSI_Pin|STMOD_SPI1_MISO_Pin|STMOD_SPI1_SCK_Pin;
 8004392:	231c      	movs	r3, #28
 8004394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004396:	2302      	movs	r3, #2
 8004398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439e:	2303      	movs	r3, #3
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043a2:	2305      	movs	r3, #5
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043a6:	f107 031c 	add.w	r3, r7, #28
 80043aa:	4619      	mov	r1, r3
 80043ac:	482a      	ldr	r0, [pc, #168]	; (8004458 <HAL_SPI_MspInit+0x11c>)
 80043ae:	f001 fde5 	bl	8005f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80043b2:	e049      	b.n	8004448 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI2)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a28      	ldr	r2, [pc, #160]	; (800445c <HAL_SPI_MspInit+0x120>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d144      	bne.n	8004448 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80043be:	4b25      	ldr	r3, [pc, #148]	; (8004454 <HAL_SPI_MspInit+0x118>)
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	4a24      	ldr	r2, [pc, #144]	; (8004454 <HAL_SPI_MspInit+0x118>)
 80043c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043c8:	6593      	str	r3, [r2, #88]	; 0x58
 80043ca:	4b22      	ldr	r3, [pc, #136]	; (8004454 <HAL_SPI_MspInit+0x118>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80043d6:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <HAL_SPI_MspInit+0x118>)
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <HAL_SPI_MspInit+0x118>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043e2:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <HAL_SPI_MspInit+0x118>)
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ee:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_SPI_MspInit+0x118>)
 80043f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f2:	4a18      	ldr	r2, [pc, #96]	; (8004454 <HAL_SPI_MspInit+0x118>)
 80043f4:	f043 0302 	orr.w	r3, r3, #2
 80043f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_SPI_MspInit+0x118>)
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_SPI2_NSS_TIM5_CH4_Pin;
 8004406:	2301      	movs	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440a:	2302      	movs	r3, #2
 800440c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440e:	2300      	movs	r3, #0
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004412:	2300      	movs	r3, #0
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004416:	2305      	movs	r3, #5
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_SPI2_NSS_TIM5_CH4_GPIO_Port, &GPIO_InitStruct);
 800441a:	f107 031c 	add.w	r3, r7, #28
 800441e:	4619      	mov	r1, r3
 8004420:	480f      	ldr	r0, [pc, #60]	; (8004460 <HAL_SPI_MspInit+0x124>)
 8004422:	f001 fdab 	bl	8005f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8004426:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800442a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442c:	2302      	movs	r3, #2
 800442e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004434:	2303      	movs	r3, #3
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004438:	2305      	movs	r3, #5
 800443a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800443c:	f107 031c 	add.w	r3, r7, #28
 8004440:	4619      	mov	r1, r3
 8004442:	4808      	ldr	r0, [pc, #32]	; (8004464 <HAL_SPI_MspInit+0x128>)
 8004444:	f001 fd9a 	bl	8005f7c <HAL_GPIO_Init>
}
 8004448:	bf00      	nop
 800444a:	3730      	adds	r7, #48	; 0x30
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40013000 	.word	0x40013000
 8004454:	40021000 	.word	0x40021000
 8004458:	48001800 	.word	0x48001800
 800445c:	40003800 	.word	0x40003800
 8004460:	48002000 	.word	0x48002000
 8004464:	48000400 	.word	0x48000400

08004468 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08e      	sub	sp, #56	; 0x38
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	60da      	str	r2, [r3, #12]
 800447e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a47      	ldr	r2, [pc, #284]	; (80045a4 <HAL_TIM_IC_MspInit+0x13c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d129      	bne.n	80044de <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800448a:	4b47      	ldr	r3, [pc, #284]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	4a46      	ldr	r2, [pc, #280]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 8004490:	f043 0304 	orr.w	r3, r3, #4
 8004494:	6593      	str	r3, [r2, #88]	; 0x58
 8004496:	4b44      	ldr	r3, [pc, #272]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044a2:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	4a40      	ldr	r2, [pc, #256]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 80044a8:	f043 0308 	orr.w	r3, r3, #8
 80044ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044ae:	4b3e      	ldr	r3, [pc, #248]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 80044b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69fb      	ldr	r3, [r7, #28]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = ARD_TIM4_CH4_Pin|ARD_TIM4_CH3_Pin;
 80044ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c0:	2302      	movs	r3, #2
 80044c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c8:	2300      	movs	r3, #0
 80044ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044cc:	2302      	movs	r3, #2
 80044ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d4:	4619      	mov	r1, r3
 80044d6:	4835      	ldr	r0, [pc, #212]	; (80045ac <HAL_TIM_IC_MspInit+0x144>)
 80044d8:	f001 fd50 	bl	8005f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80044dc:	e05d      	b.n	800459a <HAL_TIM_IC_MspInit+0x132>
  else if(htim_ic->Instance==TIM8)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a33      	ldr	r2, [pc, #204]	; (80045b0 <HAL_TIM_IC_MspInit+0x148>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d128      	bne.n	800453a <HAL_TIM_IC_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80044e8:	4b2f      	ldr	r3, [pc, #188]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 80044ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ec:	4a2e      	ldr	r2, [pc, #184]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 80044ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044f2:	6613      	str	r3, [r2, #96]	; 0x60
 80044f4:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 80044f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 8004502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004504:	4a28      	ldr	r2, [pc, #160]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800450c:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 800450e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARD_TIM8_CH4_Pin;
 8004518:	2304      	movs	r3, #4
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451c:	2302      	movs	r3, #2
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	2300      	movs	r3, #0
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004524:	2300      	movs	r3, #0
 8004526:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004528:	2303      	movs	r3, #3
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 800452c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004530:	4619      	mov	r1, r3
 8004532:	4820      	ldr	r0, [pc, #128]	; (80045b4 <HAL_TIM_IC_MspInit+0x14c>)
 8004534:	f001 fd22 	bl	8005f7c <HAL_GPIO_Init>
}
 8004538:	e02f      	b.n	800459a <HAL_TIM_IC_MspInit+0x132>
  else if(htim_ic->Instance==TIM15)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <HAL_TIM_IC_MspInit+0x150>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d12a      	bne.n	800459a <HAL_TIM_IC_MspInit+0x132>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004544:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 8004546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004548:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 800454a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454e:	6613      	str	r3, [r2, #96]	; 0x60
 8004550:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 8004552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800455c:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 800455e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004560:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 8004562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004566:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <HAL_TIM_IC_MspInit+0x140>)
 800456a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8004574:	f003 fda4 	bl	80080c0 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STMOD_TIM15_CH2_Pin;
 8004578:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457e:	2302      	movs	r3, #2
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004586:	2300      	movs	r3, #0
 8004588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800458a:	230e      	movs	r3, #14
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STMOD_TIM15_CH2_GPIO_Port, &GPIO_InitStruct);
 800458e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004592:	4619      	mov	r1, r3
 8004594:	4809      	ldr	r0, [pc, #36]	; (80045bc <HAL_TIM_IC_MspInit+0x154>)
 8004596:	f001 fcf1 	bl	8005f7c <HAL_GPIO_Init>
}
 800459a:	bf00      	nop
 800459c:	3738      	adds	r7, #56	; 0x38
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40000800 	.word	0x40000800
 80045a8:	40021000 	.word	0x40021000
 80045ac:	48000c00 	.word	0x48000c00
 80045b0:	40013400 	.word	0x40013400
 80045b4:	48002000 	.word	0x48002000
 80045b8:	40014000 	.word	0x40014000
 80045bc:	48001800 	.word	0x48001800

080045c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	; 0x30
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c8:	f107 031c 	add.w	r3, r7, #28
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2f      	ldr	r2, [pc, #188]	; (800469c <HAL_UART_MspInit+0xdc>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d129      	bne.n	8004636 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80045e2:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 80045e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e6:	4a2e      	ldr	r2, [pc, #184]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 80045e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ec:	6593      	str	r3, [r2, #88]	; 0x58
 80045ee:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fa:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	4a28      	ldr	r2, [pc, #160]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8004612:	230c      	movs	r3, #12
 8004614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004616:	2302      	movs	r3, #2
 8004618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461e:	2303      	movs	r3, #3
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004622:	2307      	movs	r3, #7
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004626:	f107 031c 	add.w	r3, r7, #28
 800462a:	4619      	mov	r1, r3
 800462c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004630:	f001 fca4 	bl	8005f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004634:	e02d      	b.n	8004692 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <HAL_UART_MspInit+0xe4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d128      	bne.n	8004692 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004644:	4a16      	ldr	r2, [pc, #88]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 8004646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800464a:	6593      	str	r3, [r2, #88]	; 0x58
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 800464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 800465a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465c:	4a10      	ldr	r2, [pc, #64]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 800465e:	f043 0308 	orr.w	r3, r3, #8
 8004662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004664:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <HAL_UART_MspInit+0xe0>)
 8004666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STMOD_USART3_RTS_Pin|STMOD_USART3_CTS_Pin|STMOD_USART3_TX_Pin|STMOD_USART3_TXD8_Pin;
 8004670:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8004674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004676:	2302      	movs	r3, #2
 8004678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467a:	2300      	movs	r3, #0
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800467e:	2303      	movs	r3, #3
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004682:	2307      	movs	r3, #7
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004686:	f107 031c 	add.w	r3, r7, #28
 800468a:	4619      	mov	r1, r3
 800468c:	4806      	ldr	r0, [pc, #24]	; (80046a8 <HAL_UART_MspInit+0xe8>)
 800468e:	f001 fc75 	bl	8005f7c <HAL_GPIO_Init>
}
 8004692:	bf00      	nop
 8004694:	3730      	adds	r7, #48	; 0x30
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40004400 	.word	0x40004400
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40004800 	.word	0x40004800
 80046a8:	48000c00 	.word	0x48000c00

080046ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b4:	f107 0314 	add.w	r3, r7, #20
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046cc:	d154      	bne.n	8004778 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ce:	4b2c      	ldr	r3, [pc, #176]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	4a2b      	ldr	r2, [pc, #172]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046da:	4b29      	ldr	r3, [pc, #164]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 80046e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80046ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ec:	2302      	movs	r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f4:	2303      	movs	r3, #3
 80046f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80046f8:	230a      	movs	r3, #10
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	4619      	mov	r1, r3
 8004702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004706:	f001 fc39 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 800470a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800470e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004718:	f107 0314 	add.w	r3, r7, #20
 800471c:	4619      	mov	r1, r3
 800471e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004722:	f001 fc2b 	bl	8005f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004726:	4b16      	ldr	r3, [pc, #88]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 8004728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472a:	4a15      	ldr	r2, [pc, #84]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 800472c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 8004734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d114      	bne.n	8004774 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	4a0c      	ldr	r2, [pc, #48]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004754:	6593      	str	r3, [r2, #88]	; 0x58
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8004762:	f003 fc9d 	bl	80080a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	4a05      	ldr	r2, [pc, #20]	; (8004780 <HAL_PCD_MspInit+0xd4>)
 800476c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004770:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004772:	e001      	b.n	8004778 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8004774:	f003 fc94 	bl	80080a0 <HAL_PWREx_EnableVddUSB>
}
 8004778:	bf00      	nop
 800477a:	3728      	adds	r7, #40	; 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40021000 	.word	0x40021000

08004784 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	; 0x28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a43      	ldr	r2, [pc, #268]	; (80048a0 <HAL_SAI_MspInit+0x11c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d156      	bne.n	8004844 <HAL_SAI_MspInit+0xc0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8004796:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <HAL_SAI_MspInit+0x120>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800479e:	4b42      	ldr	r3, [pc, #264]	; (80048a8 <HAL_SAI_MspInit+0x124>)
 80047a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a2:	4a41      	ldr	r2, [pc, #260]	; (80048a8 <HAL_SAI_MspInit+0x124>)
 80047a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047a8:	6613      	str	r3, [r2, #96]	; 0x60
 80047aa:	4b3f      	ldr	r3, [pc, #252]	; (80048a8 <HAL_SAI_MspInit+0x124>)
 80047ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80047b6:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <HAL_SAI_MspInit+0x120>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3301      	adds	r3, #1
 80047bc:	4a39      	ldr	r2, [pc, #228]	; (80048a4 <HAL_SAI_MspInit+0x120>)
 80047be:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PD6     ------> SAI1_SD_A
    PA8     ------> SAI1_SCK_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FS_A_Pin;
 80047c0:	2310      	movs	r3, #16
 80047c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c4:	2302      	movs	r3, #2
 80047c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047cc:	2300      	movs	r3, #0
 80047ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80047d0:	230d      	movs	r3, #13
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_FS_A_GPIO_Port, &GPIO_InitStruct);
 80047d4:	f107 0314 	add.w	r3, r7, #20
 80047d8:	4619      	mov	r1, r3
 80047da:	4834      	ldr	r0, [pc, #208]	; (80048ac <HAL_SAI_MspInit+0x128>)
 80047dc:	f001 fbce 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 80047e0:	2340      	movs	r3, #64	; 0x40
 80047e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e4:	2302      	movs	r3, #2
 80047e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ec:	2300      	movs	r3, #0
 80047ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80047f0:	230d      	movs	r3, #13
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 80047f4:	f107 0314 	add.w	r3, r7, #20
 80047f8:	4619      	mov	r1, r3
 80047fa:	482d      	ldr	r0, [pc, #180]	; (80048b0 <HAL_SAI_MspInit+0x12c>)
 80047fc:	f001 fbbe 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin;
 8004800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004806:	2302      	movs	r3, #2
 8004808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480e:	2300      	movs	r3, #0
 8004810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004812:	230d      	movs	r3, #13
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SCK_A_GPIO_Port, &GPIO_InitStruct);
 8004816:	f107 0314 	add.w	r3, r7, #20
 800481a:	4619      	mov	r1, r3
 800481c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004820:	f001 fbac 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004828:	2302      	movs	r3, #2
 800482a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	2300      	movs	r3, #0
 800482e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004830:	2300      	movs	r3, #0
 8004832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004834:	230d      	movs	r3, #13
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 8004838:	f107 0314 	add.w	r3, r7, #20
 800483c:	4619      	mov	r1, r3
 800483e:	481d      	ldr	r0, [pc, #116]	; (80048b4 <HAL_SAI_MspInit+0x130>)
 8004840:	f001 fb9c 	bl	8005f7c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <HAL_SAI_MspInit+0x134>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d124      	bne.n	8004898 <HAL_SAI_MspInit+0x114>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HAL_SAI_MspInit+0x120>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10b      	bne.n	800486e <HAL_SAI_MspInit+0xea>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8004856:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <HAL_SAI_MspInit+0x124>)
 8004858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485a:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <HAL_SAI_MspInit+0x124>)
 800485c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004860:	6613      	str	r3, [r2, #96]	; 0x60
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <HAL_SAI_MspInit+0x124>)
 8004864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800486e:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <HAL_SAI_MspInit+0x120>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a0b      	ldr	r2, [pc, #44]	; (80048a4 <HAL_SAI_MspInit+0x120>)
 8004876:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PB5     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8004878:	2320      	movs	r3, #32
 800487a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487c:	2302      	movs	r3, #2
 800487e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004884:	2300      	movs	r3, #0
 8004886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004888:	230d      	movs	r3, #13
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800488c:	f107 0314 	add.w	r3, r7, #20
 8004890:	4619      	mov	r1, r3
 8004892:	480a      	ldr	r0, [pc, #40]	; (80048bc <HAL_SAI_MspInit+0x138>)
 8004894:	f001 fb72 	bl	8005f7c <HAL_GPIO_Init>

    }
}
 8004898:	bf00      	nop
 800489a:	3728      	adds	r7, #40	; 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40015404 	.word	0x40015404
 80048a4:	20000220 	.word	0x20000220
 80048a8:	40021000 	.word	0x40021000
 80048ac:	48001000 	.word	0x48001000
 80048b0:	48000c00 	.word	0x48000c00
 80048b4:	48001800 	.word	0x48001800
 80048b8:	40015424 	.word	0x40015424
 80048bc:	48000400 	.word	0x48000400

080048c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ce:	b480      	push	{r7}
 80048d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048d2:	e7fe      	b.n	80048d2 <HardFault_Handler+0x4>

080048d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048d8:	e7fe      	b.n	80048d8 <MemManage_Handler+0x4>

080048da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048da:	b480      	push	{r7}
 80048dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048de:	e7fe      	b.n	80048de <BusFault_Handler+0x4>

080048e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048e4:	e7fe      	b.n	80048e4 <UsageFault_Handler+0x4>

080048e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048e6:	b480      	push	{r7}
 80048e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048f8:	bf00      	nop
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004902:	b480      	push	{r7}
 8004904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004914:	f000 f8ec 	bl	8004af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004918:	bf00      	nop
 800491a:	bd80      	pop	{r7, pc}

0800491c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004924:	4a14      	ldr	r2, [pc, #80]	; (8004978 <_sbrk+0x5c>)
 8004926:	4b15      	ldr	r3, [pc, #84]	; (800497c <_sbrk+0x60>)
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <_sbrk+0x64>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004938:	4b11      	ldr	r3, [pc, #68]	; (8004980 <_sbrk+0x64>)
 800493a:	4a12      	ldr	r2, [pc, #72]	; (8004984 <_sbrk+0x68>)
 800493c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800493e:	4b10      	ldr	r3, [pc, #64]	; (8004980 <_sbrk+0x64>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	429a      	cmp	r2, r3
 800494a:	d207      	bcs.n	800495c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800494c:	f00c fbec 	bl	8011128 <__errno>
 8004950:	4602      	mov	r2, r0
 8004952:	230c      	movs	r3, #12
 8004954:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800495a:	e009      	b.n	8004970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800495c:	4b08      	ldr	r3, [pc, #32]	; (8004980 <_sbrk+0x64>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004962:	4b07      	ldr	r3, [pc, #28]	; (8004980 <_sbrk+0x64>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4413      	add	r3, r2
 800496a:	4a05      	ldr	r2, [pc, #20]	; (8004980 <_sbrk+0x64>)
 800496c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800496e:	68fb      	ldr	r3, [r7, #12]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20050000 	.word	0x20050000
 800497c:	00000400 	.word	0x00000400
 8004980:	20000224 	.word	0x20000224
 8004984:	20000e50 	.word	0x20000e50

08004988 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800498c:	4b17      	ldr	r3, [pc, #92]	; (80049ec <SystemInit+0x64>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <SystemInit+0x64>)
 8004994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800499c:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <SystemInit+0x68>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a13      	ldr	r2, [pc, #76]	; (80049f0 <SystemInit+0x68>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <SystemInit+0x68>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <SystemInit+0x68>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <SystemInit+0x68>)
 80049b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80049b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80049bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80049be:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <SystemInit+0x68>)
 80049c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <SystemInit+0x68>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a09      	ldr	r2, [pc, #36]	; (80049f0 <SystemInit+0x68>)
 80049cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80049d2:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <SystemInit+0x68>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <SystemInit+0x64>)
 80049da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049de:	609a      	str	r2, [r3, #8]
#endif
}
 80049e0:	bf00      	nop
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	e000ed00 	.word	0xe000ed00
 80049f0:	40021000 	.word	0x40021000

080049f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80049f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80049f8:	f7ff ffc6 	bl	8004988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80049fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80049fe:	e003      	b.n	8004a08 <LoopCopyDataInit>

08004a00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004a02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004a04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004a06:	3104      	adds	r1, #4

08004a08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004a08:	480a      	ldr	r0, [pc, #40]	; (8004a34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004a0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004a0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004a10:	d3f6      	bcc.n	8004a00 <CopyDataInit>
	ldr	r2, =_sbss
 8004a12:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004a14:	e002      	b.n	8004a1c <LoopFillZerobss>

08004a16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004a16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004a18:	f842 3b04 	str.w	r3, [r2], #4

08004a1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004a1c:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <LoopForever+0x16>)
	cmp	r2, r3
 8004a1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004a20:	d3f9      	bcc.n	8004a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a22:	f00c fb87 	bl	8011134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a26:	f7fd fcdd 	bl	80023e4 <main>

08004a2a <LoopForever>:

LoopForever:
    b LoopForever
 8004a2a:	e7fe      	b.n	8004a2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004a2c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8004a30:	080120ac 	.word	0x080120ac
	ldr	r0, =_sdata
 8004a34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004a38:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8004a3c:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8004a40:	20000e50 	.word	0x20000e50

08004a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a44:	e7fe      	b.n	8004a44 <ADC1_2_IRQHandler>

08004a46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a50:	2003      	movs	r0, #3
 8004a52:	f001 f8f1 	bl	8005c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a56:	2000      	movs	r0, #0
 8004a58:	f000 f80e 	bl	8004a78 <HAL_InitTick>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	71fb      	strb	r3, [r7, #7]
 8004a66:	e001      	b.n	8004a6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a68:	f7ff f854 	bl	8003b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004a84:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <HAL_InitTick+0x6c>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d023      	beq.n	8004ad4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004a8c:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <HAL_InitTick+0x70>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <HAL_InitTick+0x6c>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	4619      	mov	r1, r3
 8004a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 f8ef 	bl	8005c86 <HAL_SYSTICK_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10f      	bne.n	8004ace <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b0f      	cmp	r3, #15
 8004ab2:	d809      	bhi.n	8004ac8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004abc:	f001 f8c7 	bl	8005c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ac0:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <HAL_InitTick+0x74>)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e007      	b.n	8004ad8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
 8004acc:	e004      	b.n	8004ad8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
 8004ad2:	e001      	b.n	8004ad8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000008 	.word	0x20000008
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	20000004 	.word	0x20000004

08004af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_IncTick+0x20>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_IncTick+0x24>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4413      	add	r3, r2
 8004b00:	4a04      	ldr	r2, [pc, #16]	; (8004b14 <HAL_IncTick+0x24>)
 8004b02:	6013      	str	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000008 	.word	0x20000008
 8004b14:	20000e48 	.word	0x20000e48

08004b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_GetTick+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000e48 	.word	0x20000e48

08004b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b38:	f7ff ffee 	bl	8004b18 <HAL_GetTick>
 8004b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b48:	d005      	beq.n	8004b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <HAL_Delay+0x40>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b56:	bf00      	nop
 8004b58:	f7ff ffde 	bl	8004b18 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d8f7      	bhi.n	8004b58 <HAL_Delay+0x28>
  {
  }
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000008 	.word	0x20000008

08004b74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	609a      	str	r2, [r3, #8]
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3360      	adds	r3, #96	; 0x60
 8004bee:	461a      	mov	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <LL_ADC_SetOffset+0x44>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004c14:	bf00      	nop
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	03fff000 	.word	0x03fff000

08004c24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3360      	adds	r3, #96	; 0x60
 8004c32:	461a      	mov	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3360      	adds	r3, #96	; 0x60
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	615a      	str	r2, [r3, #20]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3330      	adds	r3, #48	; 0x30
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	0a1b      	lsrs	r3, r3, #8
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	f003 030c 	and.w	r3, r3, #12
 8004cc8:	4413      	add	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	211f      	movs	r1, #31
 8004cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	401a      	ands	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	0e9b      	lsrs	r3, r3, #26
 8004ce4:	f003 011f 	and.w	r1, r3, #31
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004cf8:	bf00      	nop
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3314      	adds	r3, #20
 8004d14:	461a      	mov	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	0e5b      	lsrs	r3, r3, #25
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	4413      	add	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	0d1b      	lsrs	r3, r3, #20
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	2107      	movs	r1, #7
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	43db      	mvns	r3, r3
 8004d38:	401a      	ands	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	0d1b      	lsrs	r3, r3, #20
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d74:	43db      	mvns	r3, r3
 8004d76:	401a      	ands	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f003 0318 	and.w	r3, r3, #24
 8004d7e:	4908      	ldr	r1, [pc, #32]	; (8004da0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004d80:	40d9      	lsrs	r1, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	400b      	ands	r3, r1
 8004d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	0007ffff 	.word	0x0007ffff

08004da4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004db4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6093      	str	r3, [r2, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ddc:	d101      	bne.n	8004de2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004e00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e2c:	d101      	bne.n	8004e32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <LL_ADC_IsEnabled+0x18>
 8004e54:	2301      	movs	r3, #1
 8004e56:	e000      	b.n	8004e5a <LL_ADC_IsEnabled+0x1a>
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d101      	bne.n	8004e7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d101      	bne.n	8004ea4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b089      	sub	sp, #36	; 0x24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e132      	b.n	8005134 <HAL_ADC_Init+0x280>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7fe fe3d 	bl	8003b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff ff67 	bl	8004dc8 <LL_ADC_IsDeepPowerDownEnabled>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff ff4d 	bl	8004da4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff ff82 	bl	8004e18 <LL_ADC_IsInternalRegulatorEnabled>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d113      	bne.n	8004f42 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff ff66 	bl	8004df0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004f24:	4b85      	ldr	r3, [pc, #532]	; (800513c <HAL_ADC_Init+0x288>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	099b      	lsrs	r3, r3, #6
 8004f2a:	4a85      	ldr	r2, [pc, #532]	; (8005140 <HAL_ADC_Init+0x28c>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	099b      	lsrs	r3, r3, #6
 8004f32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f34:	e002      	b.n	8004f3c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f9      	bne.n	8004f36 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ff66 	bl	8004e18 <LL_ADC_IsInternalRegulatorEnabled>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10d      	bne.n	8004f6e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f56:	f043 0210 	orr.w	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f62:	f043 0201 	orr.w	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff ff77 	bl	8004e66 <LL_ADC_REG_IsConversionOngoing>
 8004f78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 80cd 	bne.w	8005122 <HAL_ADC_Init+0x26e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f040 80c9 	bne.w	8005122 <HAL_ADC_Init+0x26e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004f98:	f043 0202 	orr.w	r2, r3, #2
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff ff4b 	bl	8004e40 <LL_ADC_IsEnabled>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d110      	bne.n	8004fd2 <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fb0:	4864      	ldr	r0, [pc, #400]	; (8005144 <HAL_ADC_Init+0x290>)
 8004fb2:	f7ff ff45 	bl	8004e40 <LL_ADC_IsEnabled>
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4863      	ldr	r0, [pc, #396]	; (8005148 <HAL_ADC_Init+0x294>)
 8004fba:	f7ff ff41 	bl	8004e40 <LL_ADC_IsEnabled>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4323      	orrs	r3, r4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d105      	bne.n	8004fd2 <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	485f      	ldr	r0, [pc, #380]	; (800514c <HAL_ADC_Init+0x298>)
 8004fce:	f7ff fdd1 	bl	8004b74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	7e5b      	ldrb	r3, [r3, #25]
 8004fd6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fdc:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004fe2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004fe8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ff0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d106      	bne.n	800500e <HAL_ADC_Init+0x15a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	3b01      	subs	r3, #1
 8005006:	045b      	lsls	r3, r3, #17
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_ADC_Init+0x176>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	4b47      	ldr	r3, [pc, #284]	; (8005150 <HAL_ADC_Init+0x29c>)
 8005032:	4013      	ands	r3, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	430b      	orrs	r3, r1
 800503c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff ff0f 	bl	8004e66 <LL_ADC_REG_IsConversionOngoing>
 8005048:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff ff1c 	bl	8004e8c <LL_ADC_INJ_IsConversionOngoing>
 8005054:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d140      	bne.n	80050de <HAL_ADC_Init+0x22a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d13d      	bne.n	80050de <HAL_ADC_Init+0x22a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	7e1b      	ldrb	r3, [r3, #24]
 800506a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800506c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005074:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005084:	f023 0306 	bic.w	r3, r3, #6
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	69b9      	ldr	r1, [r7, #24]
 800508e:	430b      	orrs	r3, r1
 8005090:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005098:	2b01      	cmp	r3, #1
 800509a:	d118      	bne.n	80050ce <HAL_ADC_Init+0x21a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050a6:	f023 0304 	bic.w	r3, r3, #4
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050b2:	4311      	orrs	r1, r2
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050b8:	4311      	orrs	r1, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050be:	430a      	orrs	r2, r1
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	611a      	str	r2, [r3, #16]
 80050cc:	e007      	b.n	80050de <HAL_ADC_Init+0x22a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d10c      	bne.n	8005100 <HAL_ADC_Init+0x24c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	f023 010f 	bic.w	r1, r3, #15
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	1e5a      	subs	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
 80050fe:	e007      	b.n	8005110 <HAL_ADC_Init+0x25c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 020f 	bic.w	r2, r2, #15
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	f023 0303 	bic.w	r3, r3, #3
 8005118:	f043 0201 	orr.w	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	659a      	str	r2, [r3, #88]	; 0x58
 8005120:	e007      	b.n	8005132 <HAL_ADC_Init+0x27e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005126:	f043 0210 	orr.w	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005132:	7ffb      	ldrb	r3, [r7, #31]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3724      	adds	r7, #36	; 0x24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd90      	pop	{r4, r7, pc}
 800513c:	20000000 	.word	0x20000000
 8005140:	053e2d63 	.word	0x053e2d63
 8005144:	50040000 	.word	0x50040000
 8005148:	50040100 	.word	0x50040100
 800514c:	50040300 	.word	0x50040300
 8005150:	fff0c007 	.word	0xfff0c007

08005154 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b0b6      	sub	sp, #216	; 0xd8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_ADC_ConfigChannel+0x22>
 8005172:	2302      	movs	r3, #2
 8005174:	e3d4      	b.n	8005920 <HAL_ADC_ConfigChannel+0x7cc>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff fe6f 	bl	8004e66 <LL_ADC_REG_IsConversionOngoing>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	f040 83b9 	bne.w	8005902 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b05      	cmp	r3, #5
 8005196:	d824      	bhi.n	80051e2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	3b02      	subs	r3, #2
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d81b      	bhi.n	80051da <HAL_ADC_ConfigChannel+0x86>
 80051a2:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <HAL_ADC_ConfigChannel+0x54>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	080051c1 	.word	0x080051c1
 80051b0:	080051c9 	.word	0x080051c9
 80051b4:	080051d1 	.word	0x080051d1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	220c      	movs	r2, #12
 80051bc:	605a      	str	r2, [r3, #4]
          break;
 80051be:	e011      	b.n	80051e4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2212      	movs	r2, #18
 80051c4:	605a      	str	r2, [r3, #4]
          break;
 80051c6:	e00d      	b.n	80051e4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2218      	movs	r2, #24
 80051cc:	605a      	str	r2, [r3, #4]
          break;
 80051ce:	e009      	b.n	80051e4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051d6:	605a      	str	r2, [r3, #4]
          break;
 80051d8:	e004      	b.n	80051e4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2206      	movs	r2, #6
 80051de:	605a      	str	r2, [r3, #4]
          break;
 80051e0:	e000      	b.n	80051e4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80051e2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	f7ff fd5b 	bl	8004cac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fe33 	bl	8004e66 <LL_ADC_REG_IsConversionOngoing>
 8005200:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff fe3f 	bl	8004e8c <LL_ADC_INJ_IsConversionOngoing>
 800520e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005212:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005216:	2b00      	cmp	r3, #0
 8005218:	f040 81c1 	bne.w	800559e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800521c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 81bc 	bne.w	800559e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800522e:	d10f      	bne.n	8005250 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2200      	movs	r2, #0
 800523a:	4619      	mov	r1, r3
 800523c:	f7ff fd62 	bl	8004d04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fd1c 	bl	8004c86 <LL_ADC_SetSamplingTimeCommonConfig>
 800524e:	e00e      	b.n	800526e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	6819      	ldr	r1, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	461a      	mov	r2, r3
 800525e:	f7ff fd51 	bl	8004d04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff fd0c 	bl	8004c86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	08db      	lsrs	r3, r3, #3
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	2b04      	cmp	r3, #4
 800528e:	d00a      	beq.n	80052a6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6919      	ldr	r1, [r3, #16]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052a0:	f7ff fc9c 	bl	8004bdc <LL_ADC_SetOffset>
 80052a4:	e17b      	b.n	800559e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fcb9 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <HAL_ADC_ConfigChannel+0x17e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff fcae 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 80052c8:	4603      	mov	r3, r0
 80052ca:	0e9b      	lsrs	r3, r3, #26
 80052cc:	f003 021f 	and.w	r2, r3, #31
 80052d0:	e01e      	b.n	8005310 <HAL_ADC_ConfigChannel+0x1bc>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2100      	movs	r1, #0
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fca3 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 80052de:	4603      	mov	r3, r0
 80052e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052e8:	fa93 f3a3 	rbit	r3, r3
 80052ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8005300:	2320      	movs	r3, #32
 8005302:	e004      	b.n	800530e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8005304:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005308:	fab3 f383 	clz	r3, r3
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005318:	2b00      	cmp	r3, #0
 800531a:	d105      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x1d4>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	0e9b      	lsrs	r3, r3, #26
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	e018      	b.n	800535a <HAL_ADC_ConfigChannel+0x206>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005334:	fa93 f3a3 	rbit	r3, r3
 8005338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800533c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800534c:	2320      	movs	r3, #32
 800534e:	e004      	b.n	800535a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8005350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005354:	fab3 f383 	clz	r3, r3
 8005358:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800535a:	429a      	cmp	r2, r3
 800535c:	d106      	bne.n	800536c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2200      	movs	r2, #0
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fc72 	bl	8004c50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2101      	movs	r1, #1
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fc56 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 8005378:	4603      	mov	r3, r0
 800537a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x244>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2101      	movs	r1, #1
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff fc4b 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 800538e:	4603      	mov	r3, r0
 8005390:	0e9b      	lsrs	r3, r3, #26
 8005392:	f003 021f 	and.w	r2, r3, #31
 8005396:	e01e      	b.n	80053d6 <HAL_ADC_ConfigChannel+0x282>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2101      	movs	r1, #1
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fc40 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80053b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80053be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80053c6:	2320      	movs	r3, #32
 80053c8:	e004      	b.n	80053d4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80053ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053ce:	fab3 f383 	clz	r3, r3
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d105      	bne.n	80053ee <HAL_ADC_ConfigChannel+0x29a>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	0e9b      	lsrs	r3, r3, #26
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	e018      	b.n	8005420 <HAL_ADC_ConfigChannel+0x2cc>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053fa:	fa93 f3a3 	rbit	r3, r3
 80053fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005402:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005406:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800540a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8005412:	2320      	movs	r3, #32
 8005414:	e004      	b.n	8005420 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8005416:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800541a:	fab3 f383 	clz	r3, r3
 800541e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005420:	429a      	cmp	r2, r3
 8005422:	d106      	bne.n	8005432 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2200      	movs	r2, #0
 800542a:	2101      	movs	r1, #1
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fc0f 	bl	8004c50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2102      	movs	r1, #2
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff fbf3 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 800543e:	4603      	mov	r3, r0
 8005440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <HAL_ADC_ConfigChannel+0x30a>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2102      	movs	r1, #2
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fbe8 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 8005454:	4603      	mov	r3, r0
 8005456:	0e9b      	lsrs	r3, r3, #26
 8005458:	f003 021f 	and.w	r2, r3, #31
 800545c:	e01e      	b.n	800549c <HAL_ADC_ConfigChannel+0x348>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2102      	movs	r1, #2
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff fbdd 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 800546a:	4603      	mov	r3, r0
 800546c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005474:	fa93 f3a3 	rbit	r3, r3
 8005478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800547c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005480:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005484:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800548c:	2320      	movs	r3, #32
 800548e:	e004      	b.n	800549a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8005490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005494:	fab3 f383 	clz	r3, r3
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d105      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x360>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	0e9b      	lsrs	r3, r3, #26
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	e016      	b.n	80054e2 <HAL_ADC_ConfigChannel+0x38e>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054c0:	fa93 f3a3 	rbit	r3, r3
 80054c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80054c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80054cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80054d4:	2320      	movs	r3, #32
 80054d6:	e004      	b.n	80054e2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80054d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054dc:	fab3 f383 	clz	r3, r3
 80054e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d106      	bne.n	80054f4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2200      	movs	r2, #0
 80054ec:	2102      	movs	r1, #2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fbae 	bl	8004c50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2103      	movs	r1, #3
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff fb92 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 8005500:	4603      	mov	r3, r0
 8005502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <HAL_ADC_ConfigChannel+0x3cc>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2103      	movs	r1, #3
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fb87 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 8005516:	4603      	mov	r3, r0
 8005518:	0e9b      	lsrs	r3, r3, #26
 800551a:	f003 021f 	and.w	r2, r3, #31
 800551e:	e017      	b.n	8005550 <HAL_ADC_ConfigChannel+0x3fc>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2103      	movs	r1, #3
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fb7c 	bl	8004c24 <LL_ADC_GetOffsetChannel>
 800552c:	4603      	mov	r3, r0
 800552e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005532:	fa93 f3a3 	rbit	r3, r3
 8005536:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800553a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800553c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8005542:	2320      	movs	r3, #32
 8005544:	e003      	b.n	800554e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8005546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005548:	fab3 f383 	clz	r3, r3
 800554c:	b2db      	uxtb	r3, r3
 800554e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <HAL_ADC_ConfigChannel+0x414>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	0e9b      	lsrs	r3, r3, #26
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	e011      	b.n	800558c <HAL_ADC_ConfigChannel+0x438>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005570:	fa93 f3a3 	rbit	r3, r3
 8005574:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005578:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800557a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8005580:	2320      	movs	r3, #32
 8005582:	e003      	b.n	800558c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	fab3 f383 	clz	r3, r3
 800558a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800558c:	429a      	cmp	r2, r3
 800558e:	d106      	bne.n	800559e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2200      	movs	r2, #0
 8005596:	2103      	movs	r1, #3
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fb59 	bl	8004c50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff fc4c 	bl	8004e40 <LL_ADC_IsEnabled>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f040 8140 	bne.w	8005830 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	6819      	ldr	r1, [r3, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	461a      	mov	r2, r3
 80055be:	f7ff fbcd 	bl	8004d5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	4a8f      	ldr	r2, [pc, #572]	; (8005804 <HAL_ADC_ConfigChannel+0x6b0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	f040 8131 	bne.w	8005830 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x4a2>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	0e9b      	lsrs	r3, r3, #26
 80055e4:	3301      	adds	r3, #1
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	2b09      	cmp	r3, #9
 80055ec:	bf94      	ite	ls
 80055ee:	2301      	movls	r3, #1
 80055f0:	2300      	movhi	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	e019      	b.n	800562a <HAL_ADC_ConfigChannel+0x4d6>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055fe:	fa93 f3a3 	rbit	r3, r3
 8005602:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005606:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800560e:	2320      	movs	r3, #32
 8005610:	e003      	b.n	800561a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8005612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005614:	fab3 f383 	clz	r3, r3
 8005618:	b2db      	uxtb	r3, r3
 800561a:	3301      	adds	r3, #1
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	2b09      	cmp	r3, #9
 8005622:	bf94      	ite	ls
 8005624:	2301      	movls	r3, #1
 8005626:	2300      	movhi	r3, #0
 8005628:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800562a:	2b00      	cmp	r3, #0
 800562c:	d079      	beq.n	8005722 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005636:	2b00      	cmp	r3, #0
 8005638:	d107      	bne.n	800564a <HAL_ADC_ConfigChannel+0x4f6>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	0e9b      	lsrs	r3, r3, #26
 8005640:	3301      	adds	r3, #1
 8005642:	069b      	lsls	r3, r3, #26
 8005644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005648:	e015      	b.n	8005676 <HAL_ADC_ConfigChannel+0x522>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005652:	fa93 f3a3 	rbit	r3, r3
 8005656:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800565c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8005662:	2320      	movs	r3, #32
 8005664:	e003      	b.n	800566e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8005666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005668:	fab3 f383 	clz	r3, r3
 800566c:	b2db      	uxtb	r3, r3
 800566e:	3301      	adds	r3, #1
 8005670:	069b      	lsls	r3, r3, #26
 8005672:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <HAL_ADC_ConfigChannel+0x542>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	0e9b      	lsrs	r3, r3, #26
 8005688:	3301      	adds	r3, #1
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2101      	movs	r1, #1
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	e017      	b.n	80056c6 <HAL_ADC_ConfigChannel+0x572>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569e:	fa93 f3a3 	rbit	r3, r3
 80056a2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80056a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80056a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80056ae:	2320      	movs	r3, #32
 80056b0:	e003      	b.n	80056ba <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80056b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b4:	fab3 f383 	clz	r3, r3
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	3301      	adds	r3, #1
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2101      	movs	r1, #1
 80056c2:	fa01 f303 	lsl.w	r3, r1, r3
 80056c6:	ea42 0103 	orr.w	r1, r2, r3
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x598>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	0e9b      	lsrs	r3, r3, #26
 80056dc:	3301      	adds	r3, #1
 80056de:	f003 021f 	and.w	r2, r3, #31
 80056e2:	4613      	mov	r3, r2
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	4413      	add	r3, r2
 80056e8:	051b      	lsls	r3, r3, #20
 80056ea:	e018      	b.n	800571e <HAL_ADC_ConfigChannel+0x5ca>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	fa93 f3a3 	rbit	r3, r3
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80056fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80056fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8005704:	2320      	movs	r3, #32
 8005706:	e003      	b.n	8005710 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8005708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570a:	fab3 f383 	clz	r3, r3
 800570e:	b2db      	uxtb	r3, r3
 8005710:	3301      	adds	r3, #1
 8005712:	f003 021f 	and.w	r2, r3, #31
 8005716:	4613      	mov	r3, r2
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	4413      	add	r3, r2
 800571c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800571e:	430b      	orrs	r3, r1
 8005720:	e081      	b.n	8005826 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <HAL_ADC_ConfigChannel+0x5ea>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	0e9b      	lsrs	r3, r3, #26
 8005734:	3301      	adds	r3, #1
 8005736:	069b      	lsls	r3, r3, #26
 8005738:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800573c:	e015      	b.n	800576a <HAL_ADC_ConfigChannel+0x616>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	fa93 f3a3 	rbit	r3, r3
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8005756:	2320      	movs	r3, #32
 8005758:	e003      	b.n	8005762 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	fab3 f383 	clz	r3, r3
 8005760:	b2db      	uxtb	r3, r3
 8005762:	3301      	adds	r3, #1
 8005764:	069b      	lsls	r3, r3, #26
 8005766:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_ADC_ConfigChannel+0x636>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	0e9b      	lsrs	r3, r3, #26
 800577c:	3301      	adds	r3, #1
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2101      	movs	r1, #1
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	e017      	b.n	80057ba <HAL_ADC_ConfigChannel+0x666>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	fa93 f3a3 	rbit	r3, r3
 8005796:	61fb      	str	r3, [r7, #28]
  return result;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80057a2:	2320      	movs	r3, #32
 80057a4:	e003      	b.n	80057ae <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	fab3 f383 	clz	r3, r3
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	3301      	adds	r3, #1
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	2101      	movs	r1, #1
 80057b6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ba:	ea42 0103 	orr.w	r1, r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10d      	bne.n	80057e6 <HAL_ADC_ConfigChannel+0x692>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	0e9b      	lsrs	r3, r3, #26
 80057d0:	3301      	adds	r3, #1
 80057d2:	f003 021f 	and.w	r2, r3, #31
 80057d6:	4613      	mov	r3, r2
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	4413      	add	r3, r2
 80057dc:	3b1e      	subs	r3, #30
 80057de:	051b      	lsls	r3, r3, #20
 80057e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057e4:	e01e      	b.n	8005824 <HAL_ADC_ConfigChannel+0x6d0>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	fa93 f3a3 	rbit	r3, r3
 80057f2:	613b      	str	r3, [r7, #16]
  return result;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80057fe:	2320      	movs	r3, #32
 8005800:	e006      	b.n	8005810 <HAL_ADC_ConfigChannel+0x6bc>
 8005802:	bf00      	nop
 8005804:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	fab3 f383 	clz	r3, r3
 800580e:	b2db      	uxtb	r3, r3
 8005810:	3301      	adds	r3, #1
 8005812:	f003 021f 	and.w	r2, r3, #31
 8005816:	4613      	mov	r3, r2
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	4413      	add	r3, r2
 800581c:	3b1e      	subs	r3, #30
 800581e:	051b      	lsls	r3, r3, #20
 8005820:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005824:	430b      	orrs	r3, r1
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	6892      	ldr	r2, [r2, #8]
 800582a:	4619      	mov	r1, r3
 800582c:	f7ff fa6a 	bl	8004d04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4b3c      	ldr	r3, [pc, #240]	; (8005928 <HAL_ADC_ConfigChannel+0x7d4>)
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d06b      	beq.n	8005914 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800583c:	483b      	ldr	r0, [pc, #236]	; (800592c <HAL_ADC_ConfigChannel+0x7d8>)
 800583e:	f7ff f9bf 	bl	8004bc0 <LL_ADC_GetCommonPathInternalCh>
 8005842:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a39      	ldr	r2, [pc, #228]	; (8005930 <HAL_ADC_ConfigChannel+0x7dc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d126      	bne.n	800589e <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d120      	bne.n	800589e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a34      	ldr	r2, [pc, #208]	; (8005934 <HAL_ADC_ConfigChannel+0x7e0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d156      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800586a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800586e:	4619      	mov	r1, r3
 8005870:	482e      	ldr	r0, [pc, #184]	; (800592c <HAL_ADC_ConfigChannel+0x7d8>)
 8005872:	f7ff f992 	bl	8004b9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005876:	4b30      	ldr	r3, [pc, #192]	; (8005938 <HAL_ADC_ConfigChannel+0x7e4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	099b      	lsrs	r3, r3, #6
 800587c:	4a2f      	ldr	r2, [pc, #188]	; (800593c <HAL_ADC_ConfigChannel+0x7e8>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	099a      	lsrs	r2, r3, #6
 8005884:	4613      	mov	r3, r2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800588e:	e002      	b.n	8005896 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3b01      	subs	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1f9      	bne.n	8005890 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800589c:	e03a      	b.n	8005914 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a27      	ldr	r2, [pc, #156]	; (8005940 <HAL_ADC_ConfigChannel+0x7ec>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d113      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x77c>
 80058a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10d      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1e      	ldr	r2, [pc, #120]	; (8005934 <HAL_ADC_ConfigChannel+0x7e0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d12a      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c6:	4619      	mov	r1, r3
 80058c8:	4818      	ldr	r0, [pc, #96]	; (800592c <HAL_ADC_ConfigChannel+0x7d8>)
 80058ca:	f7ff f966 	bl	8004b9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058ce:	e021      	b.n	8005914 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <HAL_ADC_ConfigChannel+0x7f0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d11c      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80058da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d116      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a12      	ldr	r2, [pc, #72]	; (8005934 <HAL_ADC_ConfigChannel+0x7e0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d111      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058f8:	4619      	mov	r1, r3
 80058fa:	480c      	ldr	r0, [pc, #48]	; (800592c <HAL_ADC_ConfigChannel+0x7d8>)
 80058fc:	f7ff f94d 	bl	8004b9a <LL_ADC_SetCommonPathInternalCh>
 8005900:	e008      	b.n	8005914 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800591c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005920:	4618      	mov	r0, r3
 8005922:	37d8      	adds	r7, #216	; 0xd8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	80080000 	.word	0x80080000
 800592c:	50040300 	.word	0x50040300
 8005930:	c7520000 	.word	0xc7520000
 8005934:	50040000 	.word	0x50040000
 8005938:	20000000 	.word	0x20000000
 800593c:	053e2d63 	.word	0x053e2d63
 8005940:	cb840000 	.word	0xcb840000
 8005944:	80000001 	.word	0x80000001

08005948 <LL_ADC_IsEnabled>:
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <LL_ADC_IsEnabled+0x18>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <LL_ADC_IsEnabled+0x1a>
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <LL_ADC_REG_IsConversionOngoing>:
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b04      	cmp	r3, #4
 8005980:	d101      	bne.n	8005986 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005994:	b590      	push	{r4, r7, lr}
 8005996:	b0a1      	sub	sp, #132	; 0x84
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e085      	b.n	8005abe <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a42      	ldr	r2, [pc, #264]	; (8005ac8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d102      	bne.n	80059ca <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80059c4:	4b41      	ldr	r3, [pc, #260]	; (8005acc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e001      	b.n	80059ce <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e068      	b.n	8005abe <HAL_ADCEx_MultiModeConfigChannel+0x12a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff ffbd 	bl	800596e <LL_ADC_REG_IsConversionOngoing>
 80059f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff ffb7 	bl	800596e <LL_ADC_REG_IsConversionOngoing>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d14a      	bne.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x108>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d147      	bne.n	8005a9c <HAL_ADCEx_MultiModeConfigChannel+0x108>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005a0c:	4b30      	ldr	r3, [pc, #192]	; (8005ad0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005a0e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d027      	beq.n	8005a68 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	6859      	ldr	r1, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a2a:	035b      	lsls	r3, r3, #13
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a34:	4824      	ldr	r0, [pc, #144]	; (8005ac8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005a36:	f7ff ff87 	bl	8005948 <LL_ADC_IsEnabled>
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	4823      	ldr	r0, [pc, #140]	; (8005acc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005a3e:	f7ff ff83 	bl	8005948 <LL_ADC_IsEnabled>
 8005a42:	4603      	mov	r3, r0
 8005a44:	4323      	orrs	r3, r4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d132      	bne.n	8005ab0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005a52:	f023 030f 	bic.w	r3, r3, #15
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	6811      	ldr	r1, [r2, #0]
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	6892      	ldr	r2, [r2, #8]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	431a      	orrs	r2, r3
 8005a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a64:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a66:	e023      	b.n	8005ab0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a72:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a74:	4814      	ldr	r0, [pc, #80]	; (8005ac8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005a76:	f7ff ff67 	bl	8005948 <LL_ADC_IsEnabled>
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	4813      	ldr	r0, [pc, #76]	; (8005acc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005a7e:	f7ff ff63 	bl	8005948 <LL_ADC_IsEnabled>
 8005a82:	4603      	mov	r3, r0
 8005a84:	4323      	orrs	r3, r4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d112      	bne.n	8005ab0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005a92:	f023 030f 	bic.w	r3, r3, #15
 8005a96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005a98:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a9a:	e009      	b.n	8005ab0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa0:	f043 0220 	orr.w	r2, r3, #32
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005aae:	e000      	b.n	8005ab2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ab0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005aba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3784      	adds	r7, #132	; 0x84
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd90      	pop	{r4, r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	50040000 	.word	0x50040000
 8005acc:	50040100 	.word	0x50040100
 8005ad0:	50040300 	.word	0x50040300

08005ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <__NVIC_SetPriorityGrouping+0x44>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005af0:	4013      	ands	r3, r2
 8005af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b06:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <__NVIC_SetPriorityGrouping+0x44>)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	60d3      	str	r3, [r2, #12]
}
 8005b0c:	bf00      	nop
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	e000ed00 	.word	0xe000ed00

08005b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <__NVIC_GetPriorityGrouping+0x18>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	0a1b      	lsrs	r3, r3, #8
 8005b26:	f003 0307 	and.w	r3, r3, #7
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	e000ed00 	.word	0xe000ed00

08005b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	6039      	str	r1, [r7, #0]
 8005b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	db0a      	blt.n	8005b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	490c      	ldr	r1, [pc, #48]	; (8005b84 <__NVIC_SetPriority+0x4c>)
 8005b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b56:	0112      	lsls	r2, r2, #4
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b60:	e00a      	b.n	8005b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	4908      	ldr	r1, [pc, #32]	; (8005b88 <__NVIC_SetPriority+0x50>)
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	3b04      	subs	r3, #4
 8005b70:	0112      	lsls	r2, r2, #4
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	440b      	add	r3, r1
 8005b76:	761a      	strb	r2, [r3, #24]
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	e000e100 	.word	0xe000e100
 8005b88:	e000ed00 	.word	0xe000ed00

08005b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b089      	sub	sp, #36	; 0x24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f1c3 0307 	rsb	r3, r3, #7
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	bf28      	it	cs
 8005baa:	2304      	movcs	r3, #4
 8005bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	2b06      	cmp	r3, #6
 8005bb4:	d902      	bls.n	8005bbc <NVIC_EncodePriority+0x30>
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3b03      	subs	r3, #3
 8005bba:	e000      	b.n	8005bbe <NVIC_EncodePriority+0x32>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	43da      	mvns	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	401a      	ands	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	43d9      	mvns	r1, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005be4:	4313      	orrs	r3, r2
         );
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3724      	adds	r7, #36	; 0x24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c04:	d301      	bcc.n	8005c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c06:	2301      	movs	r3, #1
 8005c08:	e00f      	b.n	8005c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c0a:	4a0a      	ldr	r2, [pc, #40]	; (8005c34 <SysTick_Config+0x40>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c12:	210f      	movs	r1, #15
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c18:	f7ff ff8e 	bl	8005b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <SysTick_Config+0x40>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c22:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <SysTick_Config+0x40>)
 8005c24:	2207      	movs	r2, #7
 8005c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	e000e010 	.word	0xe000e010

08005c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff ff47 	bl	8005ad4 <__NVIC_SetPriorityGrouping>
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b086      	sub	sp, #24
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	4603      	mov	r3, r0
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c60:	f7ff ff5c 	bl	8005b1c <__NVIC_GetPriorityGrouping>
 8005c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	6978      	ldr	r0, [r7, #20]
 8005c6c:	f7ff ff8e 	bl	8005b8c <NVIC_EncodePriority>
 8005c70:	4602      	mov	r2, r0
 8005c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c76:	4611      	mov	r1, r2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff ff5d 	bl	8005b38 <__NVIC_SetPriority>
}
 8005c7e:	bf00      	nop
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff ffb0 	bl	8005bf4 <SysTick_Config>
 8005c94:	4603      	mov	r3, r0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e075      	b.n	8005d9e <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fd ffba 	bl	8003c40 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ce2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6819      	ldr	r1, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b2a      	ldr	r3, [pc, #168]	; (8005da8 <HAL_DCMI_Init+0x108>)
 8005cfe:	400b      	ands	r3, r1
 8005d00:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6819      	ldr	r1, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005d16:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005d22:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005d2e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8005d3a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8005d46:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d112      	bne.n	8005d7e <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	7f1b      	ldrb	r3, [r3, #28]
 8005d5c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	7f5b      	ldrb	r3, [r3, #29]
 8005d62:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8005d64:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	7f9b      	ldrb	r3, [r3, #30]
 8005d6a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8005d6c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	7fdb      	ldrb	r3, [r3, #31]
 8005d74:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8005d7a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8005d7c:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 021f 	orr.w	r2, r2, #31
 8005d8c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	ffe0f007 	.word	0xffe0f007

08005dac <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e0ac      	b.n	8005f18 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f8b2 	bl	8005f2c <DFSDM_GetChannelFromInstance>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4b55      	ldr	r3, [pc, #340]	; (8005f20 <HAL_DFSDM_ChannelInit+0x174>)
 8005dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e09f      	b.n	8005f18 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7fd ffb1 	bl	8003d40 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8005dde:	4b51      	ldr	r3, [pc, #324]	; (8005f24 <HAL_DFSDM_ChannelInit+0x178>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3301      	adds	r3, #1
 8005de4:	4a4f      	ldr	r2, [pc, #316]	; (8005f24 <HAL_DFSDM_ChannelInit+0x178>)
 8005de6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8005de8:	4b4e      	ldr	r3, [pc, #312]	; (8005f24 <HAL_DFSDM_ChannelInit+0x178>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d125      	bne.n	8005e3c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8005df0:	4b4d      	ldr	r3, [pc, #308]	; (8005f28 <HAL_DFSDM_ChannelInit+0x17c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a4c      	ldr	r2, [pc, #304]	; (8005f28 <HAL_DFSDM_ChannelInit+0x17c>)
 8005df6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dfa:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8005dfc:	4b4a      	ldr	r3, [pc, #296]	; (8005f28 <HAL_DFSDM_ChannelInit+0x17c>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	4948      	ldr	r1, [pc, #288]	; (8005f28 <HAL_DFSDM_ChannelInit+0x17c>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8005e0a:	4b47      	ldr	r3, [pc, #284]	; (8005f28 <HAL_DFSDM_ChannelInit+0x17c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a46      	ldr	r2, [pc, #280]	; (8005f28 <HAL_DFSDM_ChannelInit+0x17c>)
 8005e10:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8005e14:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	791b      	ldrb	r3, [r3, #4]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d108      	bne.n	8005e30 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8005e1e:	4b42      	ldr	r3, [pc, #264]	; (8005f28 <HAL_DFSDM_ChannelInit+0x17c>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	041b      	lsls	r3, r3, #16
 8005e2a:	493f      	ldr	r1, [pc, #252]	; (8005f28 <HAL_DFSDM_ChannelInit+0x17c>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8005e30:	4b3d      	ldr	r3, [pc, #244]	; (8005f28 <HAL_DFSDM_ChannelInit+0x17c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a3c      	ldr	r2, [pc, #240]	; (8005f28 <HAL_DFSDM_ChannelInit+0x17c>)
 8005e36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e3a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8005e4a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6819      	ldr	r1, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005e5a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005e60:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 020f 	bic.w	r2, r2, #15
 8005e78:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6819      	ldr	r1, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8005ea0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6899      	ldr	r1, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f002 0207 	and.w	r2, r2, #7
 8005ecc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6859      	ldr	r1, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f810 	bl	8005f2c <DFSDM_GetChannelFromInstance>
 8005f0c:	4601      	mov	r1, r0
 8005f0e:	4a04      	ldr	r2, [pc, #16]	; (8005f20 <HAL_DFSDM_ChannelInit+0x174>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	2000022c 	.word	0x2000022c
 8005f24:	20000228 	.word	0x20000228
 8005f28:	40016000 	.word	0x40016000

08005f2c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a0e      	ldr	r2, [pc, #56]	; (8005f70 <DFSDM_GetChannelFromInstance+0x44>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d102      	bne.n	8005f42 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e00f      	b.n	8005f62 <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel1)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <DFSDM_GetChannelFromInstance+0x48>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d102      	bne.n	8005f50 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e008      	b.n	8005f62 <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel2)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a09      	ldr	r2, [pc, #36]	; (8005f78 <DFSDM_GetChannelFromInstance+0x4c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d102      	bne.n	8005f5e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	e001      	b.n	8005f62 <DFSDM_GetChannelFromInstance+0x36>
    channel = 7;
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8005f62:	68fb      	ldr	r3, [r7, #12]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	40016000 	.word	0x40016000
 8005f74:	40016020 	.word	0x40016020
 8005f78:	40016040 	.word	0x40016040

08005f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f8a:	e166      	b.n	800625a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	2101      	movs	r1, #1
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	fa01 f303 	lsl.w	r3, r1, r3
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 8158 	beq.w	8006254 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d00b      	beq.n	8005fc4 <HAL_GPIO_Init+0x48>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d007      	beq.n	8005fc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fb8:	2b11      	cmp	r3, #17
 8005fba:	d003      	beq.n	8005fc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b12      	cmp	r3, #18
 8005fc2:	d130      	bne.n	8006026 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	2203      	movs	r2, #3
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	43db      	mvns	r3, r3
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4013      	ands	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	091b      	lsrs	r3, r3, #4
 8006010:	f003 0201 	and.w	r2, r3, #1
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	2203      	movs	r2, #3
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	43db      	mvns	r3, r3
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4013      	ands	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b02      	cmp	r3, #2
 800605c:	d003      	beq.n	8006066 <HAL_GPIO_Init+0xea>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b12      	cmp	r3, #18
 8006064:	d123      	bne.n	80060ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	08da      	lsrs	r2, r3, #3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3208      	adds	r2, #8
 800606e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	220f      	movs	r2, #15
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43db      	mvns	r3, r3
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4013      	ands	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	08da      	lsrs	r2, r3, #3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3208      	adds	r2, #8
 80060a8:	6939      	ldr	r1, [r7, #16]
 80060aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	2203      	movs	r2, #3
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	43db      	mvns	r3, r3
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4013      	ands	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f003 0203 	and.w	r2, r3, #3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 80b2 	beq.w	8006254 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060f0:	4b61      	ldr	r3, [pc, #388]	; (8006278 <HAL_GPIO_Init+0x2fc>)
 80060f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f4:	4a60      	ldr	r2, [pc, #384]	; (8006278 <HAL_GPIO_Init+0x2fc>)
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	6613      	str	r3, [r2, #96]	; 0x60
 80060fc:	4b5e      	ldr	r3, [pc, #376]	; (8006278 <HAL_GPIO_Init+0x2fc>)
 80060fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006108:	4a5c      	ldr	r2, [pc, #368]	; (800627c <HAL_GPIO_Init+0x300>)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	089b      	lsrs	r3, r3, #2
 800610e:	3302      	adds	r3, #2
 8006110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	220f      	movs	r2, #15
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	43db      	mvns	r3, r3
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4013      	ands	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006132:	d02b      	beq.n	800618c <HAL_GPIO_Init+0x210>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a52      	ldr	r2, [pc, #328]	; (8006280 <HAL_GPIO_Init+0x304>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d025      	beq.n	8006188 <HAL_GPIO_Init+0x20c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a51      	ldr	r2, [pc, #324]	; (8006284 <HAL_GPIO_Init+0x308>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d01f      	beq.n	8006184 <HAL_GPIO_Init+0x208>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a50      	ldr	r2, [pc, #320]	; (8006288 <HAL_GPIO_Init+0x30c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d019      	beq.n	8006180 <HAL_GPIO_Init+0x204>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a4f      	ldr	r2, [pc, #316]	; (800628c <HAL_GPIO_Init+0x310>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d013      	beq.n	800617c <HAL_GPIO_Init+0x200>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a4e      	ldr	r2, [pc, #312]	; (8006290 <HAL_GPIO_Init+0x314>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00d      	beq.n	8006178 <HAL_GPIO_Init+0x1fc>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a4d      	ldr	r2, [pc, #308]	; (8006294 <HAL_GPIO_Init+0x318>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <HAL_GPIO_Init+0x1f8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a4c      	ldr	r2, [pc, #304]	; (8006298 <HAL_GPIO_Init+0x31c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d101      	bne.n	8006170 <HAL_GPIO_Init+0x1f4>
 800616c:	2307      	movs	r3, #7
 800616e:	e00e      	b.n	800618e <HAL_GPIO_Init+0x212>
 8006170:	2308      	movs	r3, #8
 8006172:	e00c      	b.n	800618e <HAL_GPIO_Init+0x212>
 8006174:	2306      	movs	r3, #6
 8006176:	e00a      	b.n	800618e <HAL_GPIO_Init+0x212>
 8006178:	2305      	movs	r3, #5
 800617a:	e008      	b.n	800618e <HAL_GPIO_Init+0x212>
 800617c:	2304      	movs	r3, #4
 800617e:	e006      	b.n	800618e <HAL_GPIO_Init+0x212>
 8006180:	2303      	movs	r3, #3
 8006182:	e004      	b.n	800618e <HAL_GPIO_Init+0x212>
 8006184:	2302      	movs	r3, #2
 8006186:	e002      	b.n	800618e <HAL_GPIO_Init+0x212>
 8006188:	2301      	movs	r3, #1
 800618a:	e000      	b.n	800618e <HAL_GPIO_Init+0x212>
 800618c:	2300      	movs	r3, #0
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	f002 0203 	and.w	r2, r2, #3
 8006194:	0092      	lsls	r2, r2, #2
 8006196:	4093      	lsls	r3, r2
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800619e:	4937      	ldr	r1, [pc, #220]	; (800627c <HAL_GPIO_Init+0x300>)
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	3302      	adds	r3, #2
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80061ac:	4b3b      	ldr	r3, [pc, #236]	; (800629c <HAL_GPIO_Init+0x320>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	43db      	mvns	r3, r3
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4013      	ands	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80061d0:	4a32      	ldr	r2, [pc, #200]	; (800629c <HAL_GPIO_Init+0x320>)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80061d6:	4b31      	ldr	r3, [pc, #196]	; (800629c <HAL_GPIO_Init+0x320>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	43db      	mvns	r3, r3
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4013      	ands	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80061fa:	4a28      	ldr	r2, [pc, #160]	; (800629c <HAL_GPIO_Init+0x320>)
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006200:	4b26      	ldr	r3, [pc, #152]	; (800629c <HAL_GPIO_Init+0x320>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	43db      	mvns	r3, r3
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4013      	ands	r3, r2
 800620e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006224:	4a1d      	ldr	r2, [pc, #116]	; (800629c <HAL_GPIO_Init+0x320>)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800622a:	4b1c      	ldr	r3, [pc, #112]	; (800629c <HAL_GPIO_Init+0x320>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	43db      	mvns	r3, r3
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4013      	ands	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800624e:	4a13      	ldr	r2, [pc, #76]	; (800629c <HAL_GPIO_Init+0x320>)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	3301      	adds	r3, #1
 8006258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	fa22 f303 	lsr.w	r3, r2, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	f47f ae91 	bne.w	8005f8c <HAL_GPIO_Init+0x10>
  }
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40021000 	.word	0x40021000
 800627c:	40010000 	.word	0x40010000
 8006280:	48000400 	.word	0x48000400
 8006284:	48000800 	.word	0x48000800
 8006288:	48000c00 	.word	0x48000c00
 800628c:	48001000 	.word	0x48001000
 8006290:	48001400 	.word	0x48001400
 8006294:	48001800 	.word	0x48001800
 8006298:	48001c00 	.word	0x48001c00
 800629c:	40010400 	.word	0x40010400

080062a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80062ae:	e0c9      	b.n	8006444 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80062b0:	2201      	movs	r2, #1
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	4013      	ands	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80bc 	beq.w	800643e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80062c6:	4a66      	ldr	r2, [pc, #408]	; (8006460 <HAL_GPIO_DeInit+0x1c0>)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	089b      	lsrs	r3, r3, #2
 80062cc:	3302      	adds	r3, #2
 80062ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	220f      	movs	r2, #15
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80062ee:	d02b      	beq.n	8006348 <HAL_GPIO_DeInit+0xa8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a5c      	ldr	r2, [pc, #368]	; (8006464 <HAL_GPIO_DeInit+0x1c4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d025      	beq.n	8006344 <HAL_GPIO_DeInit+0xa4>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a5b      	ldr	r2, [pc, #364]	; (8006468 <HAL_GPIO_DeInit+0x1c8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d01f      	beq.n	8006340 <HAL_GPIO_DeInit+0xa0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a5a      	ldr	r2, [pc, #360]	; (800646c <HAL_GPIO_DeInit+0x1cc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d019      	beq.n	800633c <HAL_GPIO_DeInit+0x9c>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a59      	ldr	r2, [pc, #356]	; (8006470 <HAL_GPIO_DeInit+0x1d0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d013      	beq.n	8006338 <HAL_GPIO_DeInit+0x98>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a58      	ldr	r2, [pc, #352]	; (8006474 <HAL_GPIO_DeInit+0x1d4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00d      	beq.n	8006334 <HAL_GPIO_DeInit+0x94>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a57      	ldr	r2, [pc, #348]	; (8006478 <HAL_GPIO_DeInit+0x1d8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d007      	beq.n	8006330 <HAL_GPIO_DeInit+0x90>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a56      	ldr	r2, [pc, #344]	; (800647c <HAL_GPIO_DeInit+0x1dc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d101      	bne.n	800632c <HAL_GPIO_DeInit+0x8c>
 8006328:	2307      	movs	r3, #7
 800632a:	e00e      	b.n	800634a <HAL_GPIO_DeInit+0xaa>
 800632c:	2308      	movs	r3, #8
 800632e:	e00c      	b.n	800634a <HAL_GPIO_DeInit+0xaa>
 8006330:	2306      	movs	r3, #6
 8006332:	e00a      	b.n	800634a <HAL_GPIO_DeInit+0xaa>
 8006334:	2305      	movs	r3, #5
 8006336:	e008      	b.n	800634a <HAL_GPIO_DeInit+0xaa>
 8006338:	2304      	movs	r3, #4
 800633a:	e006      	b.n	800634a <HAL_GPIO_DeInit+0xaa>
 800633c:	2303      	movs	r3, #3
 800633e:	e004      	b.n	800634a <HAL_GPIO_DeInit+0xaa>
 8006340:	2302      	movs	r3, #2
 8006342:	e002      	b.n	800634a <HAL_GPIO_DeInit+0xaa>
 8006344:	2301      	movs	r3, #1
 8006346:	e000      	b.n	800634a <HAL_GPIO_DeInit+0xaa>
 8006348:	2300      	movs	r3, #0
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	f002 0203 	and.w	r2, r2, #3
 8006350:	0092      	lsls	r2, r2, #2
 8006352:	4093      	lsls	r3, r2
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	429a      	cmp	r2, r3
 8006358:	d132      	bne.n	80063c0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800635a:	4b49      	ldr	r3, [pc, #292]	; (8006480 <HAL_GPIO_DeInit+0x1e0>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	43db      	mvns	r3, r3
 8006362:	4947      	ldr	r1, [pc, #284]	; (8006480 <HAL_GPIO_DeInit+0x1e0>)
 8006364:	4013      	ands	r3, r2
 8006366:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006368:	4b45      	ldr	r3, [pc, #276]	; (8006480 <HAL_GPIO_DeInit+0x1e0>)
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	43db      	mvns	r3, r3
 8006370:	4943      	ldr	r1, [pc, #268]	; (8006480 <HAL_GPIO_DeInit+0x1e0>)
 8006372:	4013      	ands	r3, r2
 8006374:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006376:	4b42      	ldr	r3, [pc, #264]	; (8006480 <HAL_GPIO_DeInit+0x1e0>)
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	43db      	mvns	r3, r3
 800637e:	4940      	ldr	r1, [pc, #256]	; (8006480 <HAL_GPIO_DeInit+0x1e0>)
 8006380:	4013      	ands	r3, r2
 8006382:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8006384:	4b3e      	ldr	r3, [pc, #248]	; (8006480 <HAL_GPIO_DeInit+0x1e0>)
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	43db      	mvns	r3, r3
 800638c:	493c      	ldr	r1, [pc, #240]	; (8006480 <HAL_GPIO_DeInit+0x1e0>)
 800638e:	4013      	ands	r3, r2
 8006390:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	220f      	movs	r2, #15
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80063a2:	4a2f      	ldr	r2, [pc, #188]	; (8006460 <HAL_GPIO_DeInit+0x1c0>)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	089b      	lsrs	r3, r3, #2
 80063a8:	3302      	adds	r3, #2
 80063aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	43da      	mvns	r2, r3
 80063b2:	482b      	ldr	r0, [pc, #172]	; (8006460 <HAL_GPIO_DeInit+0x1c0>)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	089b      	lsrs	r3, r3, #2
 80063b8:	400a      	ands	r2, r1
 80063ba:	3302      	adds	r3, #2
 80063bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	2103      	movs	r1, #3
 80063ca:	fa01 f303 	lsl.w	r3, r1, r3
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	08da      	lsrs	r2, r3, #3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3208      	adds	r2, #8
 80063dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	220f      	movs	r2, #15
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	43db      	mvns	r3, r3
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	08d2      	lsrs	r2, r2, #3
 80063f4:	4019      	ands	r1, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3208      	adds	r2, #8
 80063fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	2103      	movs	r1, #3
 8006408:	fa01 f303 	lsl.w	r3, r1, r3
 800640c:	43db      	mvns	r3, r3
 800640e:	401a      	ands	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	2101      	movs	r1, #1
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	fa01 f303 	lsl.w	r3, r1, r3
 8006420:	43db      	mvns	r3, r3
 8006422:	401a      	ands	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	2103      	movs	r1, #3
 8006432:	fa01 f303 	lsl.w	r3, r1, r3
 8006436:	43db      	mvns	r3, r3
 8006438:	401a      	ands	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	3301      	adds	r3, #1
 8006442:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	fa22 f303 	lsr.w	r3, r2, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	f47f af2f 	bne.w	80062b0 <HAL_GPIO_DeInit+0x10>
  }
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40010000 	.word	0x40010000
 8006464:	48000400 	.word	0x48000400
 8006468:	48000800 	.word	0x48000800
 800646c:	48000c00 	.word	0x48000c00
 8006470:	48001000 	.word	0x48001000
 8006474:	48001400 	.word	0x48001400
 8006478:	48001800 	.word	0x48001800
 800647c:	48001c00 	.word	0x48001c00
 8006480:	40010400 	.word	0x40010400

08006484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	807b      	strh	r3, [r7, #2]
 8006490:	4613      	mov	r3, r2
 8006492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006494:	787b      	ldrb	r3, [r7, #1]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800649a:	887a      	ldrh	r2, [r7, #2]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064a0:	e002      	b.n	80064a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064a2:	887a      	ldrh	r2, [r7, #2]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e081      	b.n	80065ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fd fcb0 	bl	8003e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2224      	movs	r2, #36	; 0x24
 80064e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006504:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006514:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d107      	bne.n	800652e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800652a:	609a      	str	r2, [r3, #8]
 800652c:	e006      	b.n	800653c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800653a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d104      	bne.n	800654e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800654c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800655c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006560:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006570:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691a      	ldr	r2, [r3, #16]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	ea42 0103 	orr.w	r1, r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	021a      	lsls	r2, r3, #8
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69d9      	ldr	r1, [r3, #28]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1a      	ldr	r2, [r3, #32]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e021      	b.n	8006628 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2224      	movs	r2, #36	; 0x24
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7fd fc95 	bl	8003f2c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	461a      	mov	r2, r3
 800663c:	460b      	mov	r3, r1
 800663e:	817b      	strh	r3, [r7, #10]
 8006640:	4613      	mov	r3, r2
 8006642:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b20      	cmp	r3, #32
 800664e:	f040 80da 	bne.w	8006806 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_I2C_Master_Transmit+0x30>
 800665c:	2302      	movs	r3, #2
 800665e:	e0d3      	b.n	8006808 <HAL_I2C_Master_Transmit+0x1d8>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006668:	f7fe fa56 	bl	8004b18 <HAL_GetTick>
 800666c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	2319      	movs	r3, #25
 8006674:	2201      	movs	r2, #1
 8006676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f9e6 	bl	8006a4c <I2C_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e0be      	b.n	8006808 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2221      	movs	r2, #33	; 0x21
 800668e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2210      	movs	r2, #16
 8006696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	893a      	ldrh	r2, [r7, #8]
 80066aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2bff      	cmp	r3, #255	; 0xff
 80066ba:	d90e      	bls.n	80066da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	22ff      	movs	r2, #255	; 0xff
 80066c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	8979      	ldrh	r1, [r7, #10]
 80066ca:	4b51      	ldr	r3, [pc, #324]	; (8006810 <HAL_I2C_Master_Transmit+0x1e0>)
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fb48 	bl	8006d68 <I2C_TransferConfig>
 80066d8:	e06c      	b.n	80067b4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	8979      	ldrh	r1, [r7, #10]
 80066ec:	4b48      	ldr	r3, [pc, #288]	; (8006810 <HAL_I2C_Master_Transmit+0x1e0>)
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fb37 	bl	8006d68 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80066fa:	e05b      	b.n	80067b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	6a39      	ldr	r1, [r7, #32]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f9e3 	bl	8006acc <I2C_WaitOnTXISFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e07b      	b.n	8006808 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d034      	beq.n	80067b4 <HAL_I2C_Master_Transmit+0x184>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674e:	2b00      	cmp	r3, #0
 8006750:	d130      	bne.n	80067b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	2200      	movs	r2, #0
 800675a:	2180      	movs	r1, #128	; 0x80
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f975 	bl	8006a4c <I2C_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e04d      	b.n	8006808 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006770:	b29b      	uxth	r3, r3
 8006772:	2bff      	cmp	r3, #255	; 0xff
 8006774:	d90e      	bls.n	8006794 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	22ff      	movs	r2, #255	; 0xff
 800677a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006780:	b2da      	uxtb	r2, r3
 8006782:	8979      	ldrh	r1, [r7, #10]
 8006784:	2300      	movs	r3, #0
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 faeb 	bl	8006d68 <I2C_TransferConfig>
 8006792:	e00f      	b.n	80067b4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	8979      	ldrh	r1, [r7, #10]
 80067a6:	2300      	movs	r3, #0
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fada 	bl	8006d68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d19e      	bne.n	80066fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	6a39      	ldr	r1, [r7, #32]
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f9c2 	bl	8006b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e01a      	b.n	8006808 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2220      	movs	r2, #32
 80067d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <HAL_I2C_Master_Transmit+0x1e4>)
 80067e6:	400b      	ands	r3, r1
 80067e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	e000      	b.n	8006808 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006806:	2302      	movs	r3, #2
  }
}
 8006808:	4618      	mov	r0, r3
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	80002000 	.word	0x80002000
 8006814:	fe00e800 	.word	0xfe00e800

08006818 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	461a      	mov	r2, r3
 8006824:	460b      	mov	r3, r1
 8006826:	817b      	strh	r3, [r7, #10]
 8006828:	4613      	mov	r3, r2
 800682a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b20      	cmp	r3, #32
 8006836:	f040 80db 	bne.w	80069f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_I2C_Master_Receive+0x30>
 8006844:	2302      	movs	r3, #2
 8006846:	e0d4      	b.n	80069f2 <HAL_I2C_Master_Receive+0x1da>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006850:	f7fe f962 	bl	8004b18 <HAL_GetTick>
 8006854:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	2319      	movs	r3, #25
 800685c:	2201      	movs	r2, #1
 800685e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f8f2 	bl	8006a4c <I2C_WaitOnFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e0bf      	b.n	80069f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2222      	movs	r2, #34	; 0x22
 8006876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2210      	movs	r2, #16
 800687e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	893a      	ldrh	r2, [r7, #8]
 8006892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2bff      	cmp	r3, #255	; 0xff
 80068a2:	d90e      	bls.n	80068c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	22ff      	movs	r2, #255	; 0xff
 80068a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	8979      	ldrh	r1, [r7, #10]
 80068b2:	4b52      	ldr	r3, [pc, #328]	; (80069fc <HAL_I2C_Master_Receive+0x1e4>)
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 fa54 	bl	8006d68 <I2C_TransferConfig>
 80068c0:	e06d      	b.n	800699e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	8979      	ldrh	r1, [r7, #10]
 80068d4:	4b49      	ldr	r3, [pc, #292]	; (80069fc <HAL_I2C_Master_Receive+0x1e4>)
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fa43 	bl	8006d68 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80068e2:	e05c      	b.n	800699e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	6a39      	ldr	r1, [r7, #32]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f96b 	bl	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e07c      	b.n	80069f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d034      	beq.n	800699e <HAL_I2C_Master_Receive+0x186>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006938:	2b00      	cmp	r3, #0
 800693a:	d130      	bne.n	800699e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	2200      	movs	r2, #0
 8006944:	2180      	movs	r1, #128	; 0x80
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f880 	bl	8006a4c <I2C_WaitOnFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e04d      	b.n	80069f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695a:	b29b      	uxth	r3, r3
 800695c:	2bff      	cmp	r3, #255	; 0xff
 800695e:	d90e      	bls.n	800697e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	22ff      	movs	r2, #255	; 0xff
 8006964:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800696a:	b2da      	uxtb	r2, r3
 800696c:	8979      	ldrh	r1, [r7, #10]
 800696e:	2300      	movs	r3, #0
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f9f6 	bl	8006d68 <I2C_TransferConfig>
 800697c:	e00f      	b.n	800699e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698c:	b2da      	uxtb	r2, r3
 800698e:	8979      	ldrh	r1, [r7, #10]
 8006990:	2300      	movs	r3, #0
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f9e5 	bl	8006d68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d19d      	bne.n	80068e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	6a39      	ldr	r1, [r7, #32]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f8cd 	bl	8006b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e01a      	b.n	80069f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2220      	movs	r2, #32
 80069c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <HAL_I2C_Master_Receive+0x1e8>)
 80069d0:	400b      	ands	r3, r1
 80069d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e000      	b.n	80069f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80069f0:	2302      	movs	r3, #2
  }
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	80002400 	.word	0x80002400
 8006a00:	fe00e800 	.word	0xfe00e800

08006a04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d103      	bne.n	8006a22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d007      	beq.n	8006a40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	619a      	str	r2, [r3, #24]
  }
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a5c:	e022      	b.n	8006aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a64:	d01e      	beq.n	8006aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a66:	f7fe f857 	bl	8004b18 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d113      	bne.n	8006aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a80:	f043 0220 	orr.w	r2, r3, #32
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e00f      	b.n	8006ac4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	4013      	ands	r3, r2
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	bf0c      	ite	eq
 8006ab4:	2301      	moveq	r3, #1
 8006ab6:	2300      	movne	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	79fb      	ldrb	r3, [r7, #7]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d0cd      	beq.n	8006a5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ad8:	e02c      	b.n	8006b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 f8dc 	bl	8006c9c <I2C_IsAcknowledgeFailed>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e02a      	b.n	8006b44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006af4:	d01e      	beq.n	8006b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af6:	f7fe f80f 	bl	8004b18 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d302      	bcc.n	8006b0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d113      	bne.n	8006b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b10:	f043 0220 	orr.w	r2, r3, #32
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e007      	b.n	8006b44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d1cb      	bne.n	8006ada <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b58:	e028      	b.n	8006bac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f89c 	bl	8006c9c <I2C_IsAcknowledgeFailed>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e026      	b.n	8006bbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6e:	f7fd ffd3 	bl	8004b18 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d302      	bcc.n	8006b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d113      	bne.n	8006bac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b88:	f043 0220 	orr.w	r2, r3, #32
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e007      	b.n	8006bbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b20      	cmp	r3, #32
 8006bb8:	d1cf      	bne.n	8006b5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bd0:	e055      	b.n	8006c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 f860 	bl	8006c9c <I2C_IsAcknowledgeFailed>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e053      	b.n	8006c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	f003 0320 	and.w	r3, r3, #32
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d129      	bne.n	8006c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d105      	bne.n	8006c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e03f      	b.n	8006c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2220      	movs	r2, #32
 8006c14:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6859      	ldr	r1, [r3, #4]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4b1d      	ldr	r3, [pc, #116]	; (8006c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006c22:	400b      	ands	r3, r1
 8006c24:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e022      	b.n	8006c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c48:	f7fd ff66 	bl	8004b18 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d302      	bcc.n	8006c5e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10f      	bne.n	8006c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c62:	f043 0220 	orr.w	r2, r3, #32
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e007      	b.n	8006c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d1a2      	bne.n	8006bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	fe00e800 	.word	0xfe00e800

08006c9c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f003 0310 	and.w	r3, r3, #16
 8006cb2:	2b10      	cmp	r3, #16
 8006cb4:	d151      	bne.n	8006d5a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cb6:	e022      	b.n	8006cfe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cbe:	d01e      	beq.n	8006cfe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc0:	f7fd ff2a 	bl	8004b18 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d302      	bcc.n	8006cd6 <I2C_IsAcknowledgeFailed+0x3a>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d113      	bne.n	8006cfe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e02e      	b.n	8006d5c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	d1d5      	bne.n	8006cb8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2210      	movs	r2, #16
 8006d12:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff fe71 	bl	8006a04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6859      	ldr	r1, [r3, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <I2C_IsAcknowledgeFailed+0xc8>)
 8006d2e:	400b      	ands	r3, r1
 8006d30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d36:	f043 0204 	orr.w	r2, r3, #4
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	fe00e800 	.word	0xfe00e800

08006d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	607b      	str	r3, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	817b      	strh	r3, [r7, #10]
 8006d76:	4613      	mov	r3, r2
 8006d78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	0d5b      	lsrs	r3, r3, #21
 8006d84:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006d88:	4b0d      	ldr	r3, [pc, #52]	; (8006dc0 <I2C_TransferConfig+0x58>)
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	ea02 0103 	and.w	r1, r2, r3
 8006d92:	897b      	ldrh	r3, [r7, #10]
 8006d94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d98:	7a7b      	ldrb	r3, [r7, #9]
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	431a      	orrs	r2, r3
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	03ff63ff 	.word	0x03ff63ff

08006dc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	d138      	bne.n	8006e4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e032      	b.n	8006e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2224      	movs	r2, #36	; 0x24
 8006df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0201 	bic.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6819      	ldr	r1, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0201 	orr.w	r2, r2, #1
 8006e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	e000      	b.n	8006e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e4c:	2302      	movs	r3, #2
  }
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b085      	sub	sp, #20
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d139      	bne.n	8006ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d101      	bne.n	8006e7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e033      	b.n	8006ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2224      	movs	r2, #36	; 0x24
 8006e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0201 	bic.w	r2, r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006eac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	021b      	lsls	r3, r3, #8
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	e000      	b.n	8006ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ee4:	2302      	movs	r3, #2
  }
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006f00:	f7fd fe0a 	bl	8004b18 <HAL_GetTick>
 8006f04:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	73fb      	strb	r3, [r7, #15]
 8006f10:	e09a      	b.n	8007048 <HAL_OSPI_Init+0x154>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8093 	bne.w	8007048 <HAL_OSPI_Init+0x154>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fd f83e 	bl	8003fa4 <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006f28:	f241 3188 	movw	r1, #5000	; 0x1388
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f893 	bl	8007058 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	4b46      	ldr	r3, [pc, #280]	; (8007054 <HAL_OSPI_Init+0x160>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	68d1      	ldr	r1, [r2, #12]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6912      	ldr	r2, [r2, #16]
 8006f44:	3a01      	subs	r2, #1
 8006f46:	0412      	lsls	r2, r2, #16
 8006f48:	4311      	orrs	r1, r2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6952      	ldr	r2, [r2, #20]
 8006f4e:	3a01      	subs	r2, #1
 8006f50:	0212      	lsls	r2, r2, #8
 8006f52:	4311      	orrs	r1, r2
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f58:	4311      	orrs	r1, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	69d2      	ldr	r2, [r2, #28]
 8006f5e:	4311      	orrs	r1, r2
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6812      	ldr	r2, [r2, #0]
 8006f64:	430b      	orrs	r3, r1
 8006f66:	6093      	str	r3, [r2, #8]
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	0419      	lsls	r1, r3, #16
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	611a      	str	r2, [r3, #16]
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
#endif

#if   defined (OCTOSPI_DCR4_REFRESH)
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f82:	615a      	str	r2, [r3, #20]
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	021a      	lsls	r2, r3, #8
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2120      	movs	r1, #32
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fd7a 	bl	8007aa4 <OSPI_WaitFlagStateUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d146      	bne.n	8007048 <HAL_OSPI_Init+0x154>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	1e5a      	subs	r2, r3, #1
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006ff0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d107      	bne.n	8007030 <HAL_OSPI_Init+0x13c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0202 	orr.w	r2, r2, #2
 800702e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007038:	d103      	bne.n	8007042 <HAL_OSPI_Init+0x14e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	64da      	str	r2, [r3, #76]	; 0x4c
 8007040:	e002      	b.n	8007048 <HAL_OSPI_Init+0x154>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	f8e0c0f4 	.word	0xf8e0c0f4

08007058 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
	...

08007078 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b094      	sub	sp, #80	; 0x50
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 800708a:	2300      	movs	r3, #0
 800708c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4aa3      	ldr	r2, [pc, #652]	; (8007324 <HAL_OSPIM_Config+0x2ac>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d105      	bne.n	80070a6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800709e:	2301      	movs	r3, #1
 80070a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80070a4:	e004      	b.n	80070b0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80070a6:	2301      	movs	r3, #1
 80070a8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80070b0:	2300      	movs	r3, #0
 80070b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80070b6:	e01d      	b.n	80070f4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80070b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80070bc:	3301      	adds	r3, #1
 80070be:	b2d8      	uxtb	r0, r3
 80070c0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80070c4:	f107 0114 	add.w	r1, r7, #20
 80070c8:	4613      	mov	r3, r2
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	4413      	add	r3, r2
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	440b      	add	r3, r1
 80070d2:	4619      	mov	r1, r3
 80070d4:	f000 fd1e 	bl	8007b14 <OSPIM_GetConfig>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2208      	movs	r2, #8
 80070e8:	651a      	str	r2, [r3, #80]	; 0x50
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80070ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80070ee:	3301      	adds	r3, #1
 80070f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80070f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d9dd      	bls.n	80070b8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80070fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007100:	2b00      	cmp	r3, #0
 8007102:	f040 84c3 	bne.w	8007a8c <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007106:	4b87      	ldr	r3, [pc, #540]	; (8007324 <HAL_OSPIM_Config+0x2ac>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007112:	4b84      	ldr	r3, [pc, #528]	; (8007324 <HAL_OSPIM_Config+0x2ac>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a83      	ldr	r2, [pc, #524]	; (8007324 <HAL_OSPIM_Config+0x2ac>)
 8007118:	f023 0301 	bic.w	r3, r3, #1
 800711c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800711e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800712a:	4b7f      	ldr	r3, [pc, #508]	; (8007328 <HAL_OSPIM_Config+0x2b0>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00b      	beq.n	800714e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007136:	4b7c      	ldr	r3, [pc, #496]	; (8007328 <HAL_OSPIM_Config+0x2b0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a7b      	ldr	r2, [pc, #492]	; (8007328 <HAL_OSPIM_Config+0x2b0>)
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8007142:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007146:	f043 0302 	orr.w	r3, r3, #2
 800714a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800714e:	4977      	ldr	r1, [pc, #476]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 8007150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007152:	4613      	mov	r3, r2
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	4413      	add	r3, r2
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800715e:	4413      	add	r3, r2
 8007160:	3b34      	subs	r3, #52	; 0x34
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3b01      	subs	r3, #1
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	6859      	ldr	r1, [r3, #4]
 800716c:	486f      	ldr	r0, [pc, #444]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 800716e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007170:	4613      	mov	r3, r2
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	4413      	add	r3, r2
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800717c:	4413      	add	r3, r2
 800717e:	3b34      	subs	r3, #52	; 0x34
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3b01      	subs	r3, #1
 8007184:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4403      	add	r3, r0
 800718c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800718e:	4b67      	ldr	r3, [pc, #412]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80ca 	beq.w	8007330 <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800719c:	4b63      	ldr	r3, [pc, #396]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a62      	ldr	r2, [pc, #392]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 80071a2:	f023 0301 	bic.w	r3, r3, #1
 80071a6:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80071a8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	f040 8178 	bne.w	80074a2 <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 80071b2:	495e      	ldr	r1, [pc, #376]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 80071b4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80071b8:	4613      	mov	r3, r2
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	4413      	add	r3, r2
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80071c4:	4413      	add	r3, r2
 80071c6:	3b3c      	subs	r3, #60	; 0x3c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	6859      	ldr	r1, [r3, #4]
 80071d2:	4856      	ldr	r0, [pc, #344]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 80071d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80071d8:	4613      	mov	r3, r2
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	4413      	add	r3, r2
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80071e4:	4413      	add	r3, r2
 80071e6:	3b3c      	subs	r3, #60	; 0x3c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	f041 0202 	orr.w	r2, r1, #2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4403      	add	r3, r0
 80071f4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80071f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80071fa:	4613      	mov	r3, r2
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	4413      	add	r3, r2
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007206:	4413      	add	r3, r2
 8007208:	3b38      	subs	r3, #56	; 0x38
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d021      	beq.n	8007254 <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8007210:	4946      	ldr	r1, [pc, #280]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 8007212:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007216:	4613      	mov	r3, r2
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	4413      	add	r3, r2
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007222:	4413      	add	r3, r2
 8007224:	3b38      	subs	r3, #56	; 0x38
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3b01      	subs	r3, #1
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	6859      	ldr	r1, [r3, #4]
 8007230:	483e      	ldr	r0, [pc, #248]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 8007232:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007236:	4613      	mov	r3, r2
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	4413      	add	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007242:	4413      	add	r3, r2
 8007244:	3b38      	subs	r3, #56	; 0x38
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3b01      	subs	r3, #1
 800724a:	f041 0220 	orr.w	r2, r1, #32
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4403      	add	r3, r0
 8007252:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007254:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007258:	4613      	mov	r3, r2
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	4413      	add	r3, r2
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007264:	4413      	add	r3, r2
 8007266:	3b30      	subs	r3, #48	; 0x30
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d025      	beq.n	80072ba <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 800726e:	492f      	ldr	r1, [pc, #188]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 8007270:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007274:	4613      	mov	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	4413      	add	r3, r2
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007280:	4413      	add	r3, r2
 8007282:	3b30      	subs	r3, #48	; 0x30
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3b01      	subs	r3, #1
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	440b      	add	r3, r1
 8007290:	6859      	ldr	r1, [r3, #4]
 8007292:	4826      	ldr	r0, [pc, #152]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 8007294:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007298:	4613      	mov	r3, r2
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	4413      	add	r3, r2
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80072a4:	4413      	add	r3, r2
 80072a6:	3b30      	subs	r3, #48	; 0x30
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4403      	add	r3, r0
 80072b8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80072ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80072be:	4613      	mov	r3, r2
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	4413      	add	r3, r2
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80072ca:	4413      	add	r3, r2
 80072cc:	3b2c      	subs	r3, #44	; 0x2c
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 80e6 	beq.w	80074a2 <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 80072d6:	4915      	ldr	r1, [pc, #84]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 80072d8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80072dc:	4613      	mov	r3, r2
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	4413      	add	r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80072e8:	4413      	add	r3, r2
 80072ea:	3b2c      	subs	r3, #44	; 0x2c
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	6859      	ldr	r1, [r3, #4]
 80072fa:	480c      	ldr	r0, [pc, #48]	; (800732c <HAL_OSPIM_Config+0x2b4>)
 80072fc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007300:	4613      	mov	r3, r2
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	4413      	add	r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800730c:	4413      	add	r3, r2
 800730e:	3b2c      	subs	r3, #44	; 0x2c
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3b01      	subs	r3, #1
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4403      	add	r3, r0
 8007320:	605a      	str	r2, [r3, #4]
 8007322:	e0be      	b.n	80074a2 <HAL_OSPIM_Config+0x42a>
 8007324:	a0001000 	.word	0xa0001000
 8007328:	a0001400 	.word	0xa0001400
 800732c:	50061c00 	.word	0x50061c00
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8007330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007332:	4613      	mov	r3, r2
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	4413      	add	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800733e:	4413      	add	r3, r2
 8007340:	3b3c      	subs	r3, #60	; 0x3c
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 80ac 	beq.w	80074a2 <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800734a:	499d      	ldr	r1, [pc, #628]	; (80075c0 <HAL_OSPIM_Config+0x548>)
 800734c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800734e:	4613      	mov	r3, r2
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	4413      	add	r3, r2
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800735a:	4413      	add	r3, r2
 800735c:	3b3c      	subs	r3, #60	; 0x3c
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3b01      	subs	r3, #1
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	6859      	ldr	r1, [r3, #4]
 8007368:	4895      	ldr	r0, [pc, #596]	; (80075c0 <HAL_OSPIM_Config+0x548>)
 800736a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800736c:	4613      	mov	r3, r2
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	4413      	add	r3, r2
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007378:	4413      	add	r3, r2
 800737a:	3b3c      	subs	r3, #60	; 0x3c
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3b01      	subs	r3, #1
 8007380:	f021 0201 	bic.w	r2, r1, #1
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4403      	add	r3, r0
 8007388:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800738a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800738c:	4613      	mov	r3, r2
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	4413      	add	r3, r2
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007398:	4413      	add	r3, r2
 800739a:	3b38      	subs	r3, #56	; 0x38
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01f      	beq.n	80073e2 <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80073a2:	4987      	ldr	r1, [pc, #540]	; (80075c0 <HAL_OSPIM_Config+0x548>)
 80073a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073a6:	4613      	mov	r3, r2
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	4413      	add	r3, r2
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80073b2:	4413      	add	r3, r2
 80073b4:	3b38      	subs	r3, #56	; 0x38
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	6859      	ldr	r1, [r3, #4]
 80073c0:	487f      	ldr	r0, [pc, #508]	; (80075c0 <HAL_OSPIM_Config+0x548>)
 80073c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073c4:	4613      	mov	r3, r2
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	4413      	add	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80073d0:	4413      	add	r3, r2
 80073d2:	3b38      	subs	r3, #56	; 0x38
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	f021 0210 	bic.w	r2, r1, #16
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4403      	add	r3, r0
 80073e0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80073e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073e4:	4613      	mov	r3, r2
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	4413      	add	r3, r2
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80073f0:	4413      	add	r3, r2
 80073f2:	3b30      	subs	r3, #48	; 0x30
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d023      	beq.n	8007442 <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80073fa:	4971      	ldr	r1, [pc, #452]	; (80075c0 <HAL_OSPIM_Config+0x548>)
 80073fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073fe:	4613      	mov	r3, r2
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	4413      	add	r3, r2
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800740a:	4413      	add	r3, r2
 800740c:	3b30      	subs	r3, #48	; 0x30
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3b01      	subs	r3, #1
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	440b      	add	r3, r1
 800741a:	6859      	ldr	r1, [r3, #4]
 800741c:	4868      	ldr	r0, [pc, #416]	; (80075c0 <HAL_OSPIM_Config+0x548>)
 800741e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007420:	4613      	mov	r3, r2
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	4413      	add	r3, r2
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800742c:	4413      	add	r3, r2
 800742e:	3b30      	subs	r3, #48	; 0x30
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3b01      	subs	r3, #1
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4403      	add	r3, r0
 8007440:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007444:	4613      	mov	r3, r2
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	4413      	add	r3, r2
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007450:	4413      	add	r3, r2
 8007452:	3b2c      	subs	r3, #44	; 0x2c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d023      	beq.n	80074a2 <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800745a:	4959      	ldr	r1, [pc, #356]	; (80075c0 <HAL_OSPIM_Config+0x548>)
 800745c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800745e:	4613      	mov	r3, r2
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	4413      	add	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800746a:	4413      	add	r3, r2
 800746c:	3b2c      	subs	r3, #44	; 0x2c
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3b01      	subs	r3, #1
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	440b      	add	r3, r1
 800747a:	6859      	ldr	r1, [r3, #4]
 800747c:	4850      	ldr	r0, [pc, #320]	; (80075c0 <HAL_OSPIM_Config+0x548>)
 800747e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007480:	4613      	mov	r3, r2
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	4413      	add	r3, r2
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800748c:	4413      	add	r3, r2
 800748e:	3b2c      	subs	r3, #44	; 0x2c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3b01      	subs	r3, #1
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4403      	add	r3, r0
 80074a0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6819      	ldr	r1, [r3, #0]
 80074a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074aa:	4613      	mov	r3, r2
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	4413      	add	r3, r2
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80074b6:	4413      	add	r3, r2
 80074b8:	3b3c      	subs	r3, #60	; 0x3c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4299      	cmp	r1, r3
 80074be:	d03c      	beq.n	800753a <HAL_OSPIM_Config+0x4c2>
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	6859      	ldr	r1, [r3, #4]
 80074c4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074c8:	4613      	mov	r3, r2
 80074ca:	005b      	lsls	r3, r3, #1
 80074cc:	4413      	add	r3, r2
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80074d4:	4413      	add	r3, r2
 80074d6:	3b38      	subs	r3, #56	; 0x38
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4299      	cmp	r1, r3
 80074dc:	d02d      	beq.n	800753a <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6899      	ldr	r1, [r3, #8]
 80074e2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074e6:	4613      	mov	r3, r2
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	4413      	add	r3, r2
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80074f2:	4413      	add	r3, r2
 80074f4:	3b34      	subs	r3, #52	; 0x34
 80074f6:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80074f8:	4299      	cmp	r1, r3
 80074fa:	d01e      	beq.n	800753a <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	68d9      	ldr	r1, [r3, #12]
 8007500:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007504:	4613      	mov	r3, r2
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	4413      	add	r3, r2
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007510:	4413      	add	r3, r2
 8007512:	3b30      	subs	r3, #48	; 0x30
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4299      	cmp	r1, r3
 8007518:	d00f      	beq.n	800753a <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6919      	ldr	r1, [r3, #16]
 800751e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007522:	4613      	mov	r3, r2
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	4413      	add	r3, r2
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800752e:	4413      	add	r3, r2
 8007530:	3b2c      	subs	r3, #44	; 0x2c
 8007532:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007534:	4299      	cmp	r1, r3
 8007536:	f040 811e 	bne.w	8007776 <HAL_OSPIM_Config+0x6fe>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort) &&
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6819      	ldr	r1, [r3, #0]
 800753e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007542:	4613      	mov	r3, r2
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	4413      	add	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800754e:	4413      	add	r3, r2
 8007550:	3b3c      	subs	r3, #60	; 0x3c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4299      	cmp	r1, r3
 8007556:	d135      	bne.n	80075c4 <HAL_OSPIM_Config+0x54c>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	6859      	ldr	r1, [r3, #4]
 800755c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007560:	4613      	mov	r3, r2
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	4413      	add	r3, r2
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800756c:	4413      	add	r3, r2
 800756e:	3b38      	subs	r3, #56	; 0x38
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4299      	cmp	r1, r3
 8007574:	d126      	bne.n	80075c4 <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	68d9      	ldr	r1, [r3, #12]
 800757a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800757e:	4613      	mov	r3, r2
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	4413      	add	r3, r2
 8007584:	00db      	lsls	r3, r3, #3
 8007586:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800758a:	4413      	add	r3, r2
 800758c:	3b30      	subs	r3, #48	; 0x30
 800758e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort) &&
 8007590:	4299      	cmp	r1, r3
 8007592:	d117      	bne.n	80075c4 <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	6919      	ldr	r1, [r3, #16]
 8007598:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800759c:	4613      	mov	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80075a8:	4413      	add	r3, r2
 80075aa:	3b2c      	subs	r3, #44	; 0x2c
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4299      	cmp	r1, r3
 80075b0:	d108      	bne.n	80075c4 <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80075b2:	4b03      	ldr	r3, [pc, #12]	; (80075c0 <HAL_OSPIM_Config+0x548>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a02      	ldr	r2, [pc, #8]	; (80075c0 <HAL_OSPIM_Config+0x548>)
 80075b8:	f043 0301 	orr.w	r3, r3, #1
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	e0da      	b.n	8007776 <HAL_OSPIM_Config+0x6fe>
 80075c0:	50061c00 	.word	0x50061c00
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80075c4:	49c2      	ldr	r1, [pc, #776]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80075c6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80075ca:	4613      	mov	r3, r2
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	4413      	add	r3, r2
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80075d6:	4413      	add	r3, r2
 80075d8:	3b3c      	subs	r3, #60	; 0x3c
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3b01      	subs	r3, #1
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	6859      	ldr	r1, [r3, #4]
 80075e4:	48ba      	ldr	r0, [pc, #744]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80075e6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80075ea:	4613      	mov	r3, r2
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	4413      	add	r3, r2
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80075f6:	4413      	add	r3, r2
 80075f8:	3b3c      	subs	r3, #60	; 0x3c
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	f021 0201 	bic.w	r2, r1, #1
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4403      	add	r3, r0
 8007606:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007608:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800760c:	4613      	mov	r3, r2
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	4413      	add	r3, r2
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007618:	4413      	add	r3, r2
 800761a:	3b38      	subs	r3, #56	; 0x38
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d021      	beq.n	8007666 <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8007622:	49ab      	ldr	r1, [pc, #684]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 8007624:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007628:	4613      	mov	r3, r2
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	4413      	add	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007634:	4413      	add	r3, r2
 8007636:	3b38      	subs	r3, #56	; 0x38
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3b01      	subs	r3, #1
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	440b      	add	r3, r1
 8007640:	6859      	ldr	r1, [r3, #4]
 8007642:	48a3      	ldr	r0, [pc, #652]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 8007644:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007648:	4613      	mov	r3, r2
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	4413      	add	r3, r2
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007654:	4413      	add	r3, r2
 8007656:	3b38      	subs	r3, #56	; 0x38
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3b01      	subs	r3, #1
 800765c:	f021 0210 	bic.w	r2, r1, #16
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4403      	add	r3, r0
 8007664:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007666:	499a      	ldr	r1, [pc, #616]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 8007668:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800766c:	4613      	mov	r3, r2
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	4413      	add	r3, r2
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007678:	4413      	add	r3, r2
 800767a:	3b34      	subs	r3, #52	; 0x34
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3b01      	subs	r3, #1
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	440b      	add	r3, r1
 8007684:	6859      	ldr	r1, [r3, #4]
 8007686:	4892      	ldr	r0, [pc, #584]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 8007688:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800768c:	4613      	mov	r3, r2
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	4413      	add	r3, r2
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007698:	4413      	add	r3, r2
 800769a:	3b34      	subs	r3, #52	; 0x34
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3b01      	subs	r3, #1
 80076a0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4403      	add	r3, r0
 80076a8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80076aa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80076ae:	4613      	mov	r3, r2
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	4413      	add	r3, r2
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80076ba:	4413      	add	r3, r2
 80076bc:	3b30      	subs	r3, #48	; 0x30
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d025      	beq.n	8007710 <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80076c4:	4982      	ldr	r1, [pc, #520]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80076c6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80076ca:	4613      	mov	r3, r2
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	4413      	add	r3, r2
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80076d6:	4413      	add	r3, r2
 80076d8:	3b30      	subs	r3, #48	; 0x30
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3b01      	subs	r3, #1
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	6859      	ldr	r1, [r3, #4]
 80076e8:	4879      	ldr	r0, [pc, #484]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80076ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80076ee:	4613      	mov	r3, r2
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80076fa:	4413      	add	r3, r2
 80076fc:	3b30      	subs	r3, #48	; 0x30
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3b01      	subs	r3, #1
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4403      	add	r3, r0
 800770e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007710:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007714:	4613      	mov	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	4413      	add	r3, r2
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007720:	4413      	add	r3, r2
 8007722:	3b2c      	subs	r3, #44	; 0x2c
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d025      	beq.n	8007776 <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800772a:	4969      	ldr	r1, [pc, #420]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 800772c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007730:	4613      	mov	r3, r2
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	4413      	add	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800773c:	4413      	add	r3, r2
 800773e:	3b2c      	subs	r3, #44	; 0x2c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3b01      	subs	r3, #1
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	6859      	ldr	r1, [r3, #4]
 800774e:	4860      	ldr	r0, [pc, #384]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 8007750:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007754:	4613      	mov	r3, r2
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	4413      	add	r3, r2
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007760:	4413      	add	r3, r2
 8007762:	3b2c      	subs	r3, #44	; 0x2c
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3b01      	subs	r3, #1
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4403      	add	r3, r0
 8007774:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 8007776:	4a56      	ldr	r2, [pc, #344]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	3b01      	subs	r3, #1
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800778a:	025b      	lsls	r3, r3, #9
 800778c:	431a      	orrs	r2, r3
 800778e:	4950      	ldr	r1, [pc, #320]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	3b01      	subs	r3, #1
 8007796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	605a      	str	r2, [r3, #4]

#if   defined (OCTOSPIM_CR_MUXEN)
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	1e5a      	subs	r2, r3, #1
 80077a6:	4b4a      	ldr	r3, [pc, #296]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	0c1b      	lsrs	r3, r3, #16
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d90a      	bls.n	80077c8 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80077b2:	4b47      	ldr	r3, [pc, #284]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	3b01      	subs	r3, #1
 80077c0:	041b      	lsls	r3, r3, #16
 80077c2:	4943      	ldr	r1, [pc, #268]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80077c8:	4b41      	ldr	r3, [pc, #260]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 809b 	beq.w	800790c <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80077d6:	4a3e      	ldr	r2, [pc, #248]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3b01      	subs	r3, #1
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f023 0203 	bic.w	r2, r3, #3
 80077e8:	4939      	ldr	r1, [pc, #228]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	f042 0201 	orr.w	r2, r2, #1
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d011      	beq.n	8007826 <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007802:	4a33      	ldr	r2, [pc, #204]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	3b01      	subs	r3, #1
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007814:	492e      	ldr	r1, [pc, #184]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	3b01      	subs	r3, #1
 800781c:	f042 0210 	orr.w	r2, r2, #16
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d016      	beq.n	8007860 <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
 8007832:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	3b01      	subs	r3, #1
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007848:	4921      	ldr	r1, [pc, #132]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	3b01      	subs	r3, #1
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	605a      	str	r2, [r3, #4]
 800785e:	e019      	b.n	8007894 <HAL_OSPIM_Config+0x81c>
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d015      	beq.n	8007894 <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC), OCTOSPIM_PCR_IOHEN);
 8007868:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	3b01      	subs	r3, #1
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800787e:	4914      	ldr	r1, [pc, #80]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	3b01      	subs	r3, #1
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	440b      	add	r3, r1
 8007892:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d019      	beq.n	80078d4 <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
 80078a0:	4a0b      	ldr	r2, [pc, #44]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80078b6:	4906      	ldr	r1, [pc, #24]	; (80078d0 <HAL_OSPIM_Config+0x858>)
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	3b01      	subs	r3, #1
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	440b      	add	r3, r1
 80078ca:	605a      	str	r2, [r3, #4]
 80078cc:	e0c6      	b.n	8007a5c <HAL_OSPIM_Config+0x9e4>
 80078ce:	bf00      	nop
 80078d0:	50061c00 	.word	0x50061c00
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 80bf 	beq.w	8007a5c <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC), (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC_0));
 80078de:	4a6e      	ldr	r2, [pc, #440]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80078f4:	4968      	ldr	r1, [pc, #416]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	440b      	add	r3, r1
 8007908:	605a      	str	r2, [r3, #4]
 800790a:	e0a7      	b.n	8007a5c <HAL_OSPIM_Config+0x9e4>
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 800790c:	4a62      	ldr	r2, [pc, #392]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3b01      	subs	r3, #1
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f023 0203 	bic.w	r2, r3, #3
 800791e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	431a      	orrs	r2, r3
 8007924:	495c      	ldr	r1, [pc, #368]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3b01      	subs	r3, #1
 800792c:	f042 0201 	orr.w	r2, r2, #1
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	440b      	add	r3, r1
 8007934:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d014      	beq.n	8007968 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 800793e:	4a56      	ldr	r2, [pc, #344]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	3b01      	subs	r3, #1
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007952:	015b      	lsls	r3, r3, #5
 8007954:	431a      	orrs	r2, r3
 8007956:	4950      	ldr	r1, [pc, #320]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	3b01      	subs	r3, #1
 800795e:	f042 0210 	orr.w	r2, r2, #16
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	440b      	add	r3, r1
 8007966:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d019      	beq.n	80079a8 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8007974:	4a48      	ldr	r2, [pc, #288]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	3b01      	subs	r3, #1
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800798a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800798c:	049b      	lsls	r3, r3, #18
 800798e:	431a      	orrs	r2, r3
 8007990:	4941      	ldr	r1, [pc, #260]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	3b01      	subs	r3, #1
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	440b      	add	r3, r1
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	e01c      	b.n	80079e2 <HAL_OSPIM_Config+0x96a>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d018      	beq.n	80079e2 <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 80079b0:	4a39      	ldr	r2, [pc, #228]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80079c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c8:	069b      	lsls	r3, r3, #26
 80079ca:	431a      	orrs	r2, r3
 80079cc:	4932      	ldr	r1, [pc, #200]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	440b      	add	r3, r1
 80079e0:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d019      	beq.n	8007a22 <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 80079ee:	4a2a      	ldr	r2, [pc, #168]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a06:	049b      	lsls	r3, r3, #18
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	4923      	ldr	r1, [pc, #140]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	605a      	str	r2, [r3, #4]
 8007a20:	e01c      	b.n	8007a5c <HAL_OSPIM_Config+0x9e4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d018      	beq.n	8007a5c <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8007a2a:	4a1b      	ldr	r2, [pc, #108]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a42:	069b      	lsls	r3, r3, #26
 8007a44:	431a      	orrs	r2, r3
 8007a46:	4914      	ldr	r1, [pc, #80]	; (8007a98 <HAL_OSPIM_Config+0xa20>)
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007a5c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007a68:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <HAL_OSPIM_Config+0xa24>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a0b      	ldr	r2, [pc, #44]	; (8007a9c <HAL_OSPIM_Config+0xa24>)
 8007a6e:	f043 0301 	orr.w	r3, r3, #1
 8007a72:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007a74:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007a80:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <HAL_OSPIM_Config+0xa28>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a06      	ldr	r2, [pc, #24]	; (8007aa0 <HAL_OSPIM_Config+0xa28>)
 8007a86:	f043 0301 	orr.w	r3, r3, #1
 8007a8a:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007a8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3750      	adds	r7, #80	; 0x50
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	50061c00 	.word	0x50061c00
 8007a9c:	a0001000 	.word	0xa0001000
 8007aa0:	a0001400 	.word	0xa0001400

08007aa4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007ab4:	e01a      	b.n	8007aec <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007abc:	d016      	beq.n	8007aec <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007abe:	f7fd f82b 	bl	8004b18 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d302      	bcc.n	8007ad4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10b      	bne.n	8007aec <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ada:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae0:	f043 0201 	orr.w	r2, r3, #1
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e00e      	b.n	8007b0a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a1a      	ldr	r2, [r3, #32]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	4013      	ands	r3, r2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bf14      	ite	ne
 8007afa:	2301      	movne	r3, #1
 8007afc:	2300      	moveq	r3, #0
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	461a      	mov	r2, r3
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d1d6      	bne.n	8007ab6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <OSPIM_GetConfig+0x26>
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d802      	bhi.n	8007b3a <OSPIM_GetConfig+0x26>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d102      	bne.n	8007b40 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	75fb      	strb	r3, [r7, #23]
 8007b3e:	e098      	b.n	8007c72 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2200      	movs	r2, #0
 8007b56:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d10b      	bne.n	8007b7c <OSPIM_GetConfig+0x68>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007b64:	4b46      	ldr	r3, [pc, #280]	; (8007c80 <OSPIM_GetConfig+0x16c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <OSPIM_GetConfig+0x62>
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 8007b70:	4b44      	ldr	r3, [pc, #272]	; (8007c84 <OSPIM_GetConfig+0x170>)
 8007b72:	613b      	str	r3, [r7, #16]
 8007b74:	e002      	b.n	8007b7c <OSPIM_GetConfig+0x68>
#if   defined (OCTOSPIM_CR_MUXEN)
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b7a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	e074      	b.n	8007c6c <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8007b82:	4a3f      	ldr	r2, [pc, #252]	; (8007c80 <OSPIM_GetConfig+0x16c>)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	4053      	eors	r3, r2
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d103      	bne.n	8007bae <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	4053      	eors	r3, r2
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d103      	bne.n	8007bce <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	4053      	eors	r3, r2
 8007bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d103      	bne.n	8007bee <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d018      	beq.n	8007c2a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4053      	eors	r3, r2
 8007bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d111      	bne.n	8007c2a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d106      	bne.n	8007c1e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	60da      	str	r2, [r3, #12]
 8007c1c:	e005      	b.n	8007c2a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3301      	adds	r3, #1
 8007c22:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d018      	beq.n	8007c66 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	4053      	eors	r3, r2
 8007c3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d111      	bne.n	8007c66 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d106      	bne.n	8007c5a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	611a      	str	r2, [r3, #16]
 8007c58:	e005      	b.n	8007c66 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d987      	bls.n	8007b82 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	371c      	adds	r7, #28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	50061c00 	.word	0x50061c00
 8007c84:	04040222 	.word	0x04040222

08007c88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c8a:	b08f      	sub	sp, #60	; 0x3c
 8007c8c:	af0a      	add	r7, sp, #40	; 0x28
 8007c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e116      	b.n	8007ec8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d106      	bne.n	8007cba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7fc fcf9 	bl	80046ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2203      	movs	r2, #3
 8007cbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d102      	bne.n	8007cd4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f005 ff9b 	bl	800dc14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	687e      	ldr	r6, [r7, #4]
 8007ce6:	466d      	mov	r5, sp
 8007ce8:	f106 0410 	add.w	r4, r6, #16
 8007cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007cf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007cfc:	1d33      	adds	r3, r6, #4
 8007cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d00:	6838      	ldr	r0, [r7, #0]
 8007d02:	f005 ff35 	bl	800db70 <USB_CoreInit>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d005      	beq.n	8007d18 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e0d7      	b.n	8007ec8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f005 ff89 	bl	800dc36 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d24:	2300      	movs	r3, #0
 8007d26:	73fb      	strb	r3, [r7, #15]
 8007d28:	e04a      	b.n	8007dc0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007d2a:	7bfa      	ldrb	r2, [r7, #15]
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	1a9b      	subs	r3, r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	440b      	add	r3, r1
 8007d38:	333d      	adds	r3, #61	; 0x3d
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007d3e:	7bfa      	ldrb	r2, [r7, #15]
 8007d40:	6879      	ldr	r1, [r7, #4]
 8007d42:	4613      	mov	r3, r2
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	1a9b      	subs	r3, r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	440b      	add	r3, r1
 8007d4c:	333c      	adds	r3, #60	; 0x3c
 8007d4e:	7bfa      	ldrb	r2, [r7, #15]
 8007d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007d52:	7bfa      	ldrb	r2, [r7, #15]
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	b298      	uxth	r0, r3
 8007d58:	6879      	ldr	r1, [r7, #4]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	440b      	add	r3, r1
 8007d64:	3342      	adds	r3, #66	; 0x42
 8007d66:	4602      	mov	r2, r0
 8007d68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d6a:	7bfa      	ldrb	r2, [r7, #15]
 8007d6c:	6879      	ldr	r1, [r7, #4]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	00db      	lsls	r3, r3, #3
 8007d72:	1a9b      	subs	r3, r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	440b      	add	r3, r1
 8007d78:	333f      	adds	r3, #63	; 0x3f
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d7e:	7bfa      	ldrb	r2, [r7, #15]
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	3344      	adds	r3, #68	; 0x44
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d92:	7bfa      	ldrb	r2, [r7, #15]
 8007d94:	6879      	ldr	r1, [r7, #4]
 8007d96:	4613      	mov	r3, r2
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	1a9b      	subs	r3, r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	440b      	add	r3, r1
 8007da0:	3348      	adds	r3, #72	; 0x48
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007da6:	7bfa      	ldrb	r2, [r7, #15]
 8007da8:	6879      	ldr	r1, [r7, #4]
 8007daa:	4613      	mov	r3, r2
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	1a9b      	subs	r3, r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	440b      	add	r3, r1
 8007db4:	3350      	adds	r3, #80	; 0x50
 8007db6:	2200      	movs	r2, #0
 8007db8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	73fb      	strb	r3, [r7, #15]
 8007dc0:	7bfa      	ldrb	r2, [r7, #15]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d3af      	bcc.n	8007d2a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]
 8007dce:	e044      	b.n	8007e5a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007dd0:	7bfa      	ldrb	r2, [r7, #15]
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	1a9b      	subs	r3, r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007de2:	2200      	movs	r2, #0
 8007de4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007de6:	7bfa      	ldrb	r2, [r7, #15]
 8007de8:	6879      	ldr	r1, [r7, #4]
 8007dea:	4613      	mov	r3, r2
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	1a9b      	subs	r3, r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	440b      	add	r3, r1
 8007df4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007df8:	7bfa      	ldrb	r2, [r7, #15]
 8007dfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007dfc:	7bfa      	ldrb	r2, [r7, #15]
 8007dfe:	6879      	ldr	r1, [r7, #4]
 8007e00:	4613      	mov	r3, r2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	1a9b      	subs	r3, r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	440b      	add	r3, r1
 8007e0a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007e12:	7bfa      	ldrb	r2, [r7, #15]
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	00db      	lsls	r3, r3, #3
 8007e1a:	1a9b      	subs	r3, r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	440b      	add	r3, r1
 8007e20:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007e28:	7bfa      	ldrb	r2, [r7, #15]
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007e3e:	7bfa      	ldrb	r2, [r7, #15]
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	4613      	mov	r3, r2
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	440b      	add	r3, r1
 8007e4c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	3301      	adds	r3, #1
 8007e58:	73fb      	strb	r3, [r7, #15]
 8007e5a:	7bfa      	ldrb	r2, [r7, #15]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d3b5      	bcc.n	8007dd0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	603b      	str	r3, [r7, #0]
 8007e6a:	687e      	ldr	r6, [r7, #4]
 8007e6c:	466d      	mov	r5, sp
 8007e6e:	f106 0410 	add.w	r4, r6, #16
 8007e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007e82:	1d33      	adds	r3, r6, #4
 8007e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e86:	6838      	ldr	r0, [r7, #0]
 8007e88:	f005 ff00 	bl	800dc8c <USB_DevInit>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d005      	beq.n	8007e9e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e014      	b.n	8007ec8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d102      	bne.n	8007ebc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f80a 	bl	8007ed0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f006 f890 	bl	800dfe6 <USB_DevDisconnect>

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ed0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f02:	f043 0303 	orr.w	r3, r3, #3
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f28:	d102      	bne.n	8007f30 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8007f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f2e:	e00b      	b.n	8007f48 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007f30:	4b08      	ldr	r3, [pc, #32]	; (8007f54 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f3e:	d102      	bne.n	8007f46 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f44:	e000      	b.n	8007f48 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8007f46:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	40007000 	.word	0x40007000

08007f58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d141      	bne.n	8007fea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f66:	4b4b      	ldr	r3, [pc, #300]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f72:	d131      	bne.n	8007fd8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f74:	4b47      	ldr	r3, [pc, #284]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f7a:	4a46      	ldr	r2, [pc, #280]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f84:	4b43      	ldr	r3, [pc, #268]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f8c:	4a41      	ldr	r2, [pc, #260]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007f94:	4b40      	ldr	r3, [pc, #256]	; (8008098 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2232      	movs	r2, #50	; 0x32
 8007f9a:	fb02 f303 	mul.w	r3, r2, r3
 8007f9e:	4a3f      	ldr	r2, [pc, #252]	; (800809c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa4:	0c9b      	lsrs	r3, r3, #18
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007faa:	e002      	b.n	8007fb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fb2:	4b38      	ldr	r3, [pc, #224]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fbe:	d102      	bne.n	8007fc6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f2      	bne.n	8007fac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007fc6:	4b33      	ldr	r3, [pc, #204]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd2:	d158      	bne.n	8008086 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e057      	b.n	8008088 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fd8:	4b2e      	ldr	r3, [pc, #184]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fde:	4a2d      	ldr	r2, [pc, #180]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fe4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007fe8:	e04d      	b.n	8008086 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ff0:	d141      	bne.n	8008076 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ff2:	4b28      	ldr	r3, [pc, #160]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ffe:	d131      	bne.n	8008064 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008000:	4b24      	ldr	r3, [pc, #144]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008006:	4a23      	ldr	r2, [pc, #140]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800800c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008010:	4b20      	ldr	r3, [pc, #128]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008018:	4a1e      	ldr	r2, [pc, #120]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800801a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800801e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008020:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2232      	movs	r2, #50	; 0x32
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	4a1c      	ldr	r2, [pc, #112]	; (800809c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800802c:	fba2 2303 	umull	r2, r3, r2, r3
 8008030:	0c9b      	lsrs	r3, r3, #18
 8008032:	3301      	adds	r3, #1
 8008034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008036:	e002      	b.n	800803e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3b01      	subs	r3, #1
 800803c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800803e:	4b15      	ldr	r3, [pc, #84]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800804a:	d102      	bne.n	8008052 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f2      	bne.n	8008038 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008052:	4b10      	ldr	r3, [pc, #64]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800805a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800805e:	d112      	bne.n	8008086 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e011      	b.n	8008088 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008064:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800806a:	4a0a      	ldr	r2, [pc, #40]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800806c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008070:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008074:	e007      	b.n	8008086 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008076:	4b07      	ldr	r3, [pc, #28]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800807e:	4a05      	ldr	r2, [pc, #20]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008084:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	40007000 	.word	0x40007000
 8008098:	20000000 	.word	0x20000000
 800809c:	431bde83 	.word	0x431bde83

080080a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80080a0:	b480      	push	{r7}
 80080a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80080a4:	4b05      	ldr	r3, [pc, #20]	; (80080bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4a04      	ldr	r2, [pc, #16]	; (80080bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80080aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080ae:	6053      	str	r3, [r2, #4]
}
 80080b0:	bf00      	nop
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	40007000 	.word	0x40007000

080080c0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80080c4:	4b05      	ldr	r3, [pc, #20]	; (80080dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	4a04      	ldr	r2, [pc, #16]	; (80080dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80080ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080ce:	6053      	str	r3, [r2, #4]
}
 80080d0:	bf00      	nop
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	40007000 	.word	0x40007000

080080e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08a      	sub	sp, #40	; 0x28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	f000 bc76 	b.w	80089e0 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080f4:	4ba1      	ldr	r3, [pc, #644]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f003 030c 	and.w	r3, r3, #12
 80080fc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080fe:	4b9f      	ldr	r3, [pc, #636]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f003 0303 	and.w	r3, r3, #3
 8008106:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0310 	and.w	r3, r3, #16
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 80e6 	beq.w	80082e2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <HAL_RCC_OscConfig+0x4c>
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	2b0c      	cmp	r3, #12
 8008120:	f040 808d 	bne.w	800823e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	2b01      	cmp	r3, #1
 8008128:	f040 8089 	bne.w	800823e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800812c:	4b93      	ldr	r3, [pc, #588]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0302 	and.w	r3, r3, #2
 8008134:	2b00      	cmp	r3, #0
 8008136:	d006      	beq.n	8008146 <HAL_RCC_OscConfig+0x66>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d102      	bne.n	8008146 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	f000 bc4d 	b.w	80089e0 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800814a:	4b8c      	ldr	r3, [pc, #560]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0308 	and.w	r3, r3, #8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d004      	beq.n	8008160 <HAL_RCC_OscConfig+0x80>
 8008156:	4b89      	ldr	r3, [pc, #548]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800815e:	e005      	b.n	800816c <HAL_RCC_OscConfig+0x8c>
 8008160:	4b86      	ldr	r3, [pc, #536]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008166:	091b      	lsrs	r3, r3, #4
 8008168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800816c:	4293      	cmp	r3, r2
 800816e:	d224      	bcs.n	80081ba <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	4618      	mov	r0, r3
 8008176:	f000 fe29 	bl	8008dcc <RCC_SetFlashLatencyFromMSIRange>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	f000 bc2d 	b.w	80089e0 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008186:	4b7d      	ldr	r3, [pc, #500]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a7c      	ldr	r2, [pc, #496]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 800818c:	f043 0308 	orr.w	r3, r3, #8
 8008190:	6013      	str	r3, [r2, #0]
 8008192:	4b7a      	ldr	r3, [pc, #488]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	4977      	ldr	r1, [pc, #476]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081a4:	4b75      	ldr	r3, [pc, #468]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	4972      	ldr	r1, [pc, #456]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	604b      	str	r3, [r1, #4]
 80081b8:	e025      	b.n	8008206 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081ba:	4b70      	ldr	r3, [pc, #448]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a6f      	ldr	r2, [pc, #444]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80081c0:	f043 0308 	orr.w	r3, r3, #8
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	4b6d      	ldr	r3, [pc, #436]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	496a      	ldr	r1, [pc, #424]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081d8:	4b68      	ldr	r3, [pc, #416]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	021b      	lsls	r3, r3, #8
 80081e6:	4965      	ldr	r1, [pc, #404]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d109      	bne.n	8008206 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fde8 	bl	8008dcc <RCC_SetFlashLatencyFromMSIRange>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e3ec      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008206:	f000 fd1f 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800820a:	4601      	mov	r1, r0
 800820c:	4b5b      	ldr	r3, [pc, #364]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	091b      	lsrs	r3, r3, #4
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	4a5a      	ldr	r2, [pc, #360]	; (8008380 <HAL_RCC_OscConfig+0x2a0>)
 8008218:	5cd3      	ldrb	r3, [r2, r3]
 800821a:	f003 031f 	and.w	r3, r3, #31
 800821e:	fa21 f303 	lsr.w	r3, r1, r3
 8008222:	4a58      	ldr	r2, [pc, #352]	; (8008384 <HAL_RCC_OscConfig+0x2a4>)
 8008224:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008226:	4b58      	ldr	r3, [pc, #352]	; (8008388 <HAL_RCC_OscConfig+0x2a8>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f7fc fc24 	bl	8004a78 <HAL_InitTick>
 8008230:	4603      	mov	r3, r0
 8008232:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d052      	beq.n	80082e0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	e3d0      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d032      	beq.n	80082ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008246:	4b4d      	ldr	r3, [pc, #308]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a4c      	ldr	r2, [pc, #304]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 800824c:	f043 0301 	orr.w	r3, r3, #1
 8008250:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008252:	f7fc fc61 	bl	8004b18 <HAL_GetTick>
 8008256:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008258:	e008      	b.n	800826c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800825a:	f7fc fc5d 	bl	8004b18 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d901      	bls.n	800826c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e3b9      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800826c:	4b43      	ldr	r3, [pc, #268]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0f0      	beq.n	800825a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008278:	4b40      	ldr	r3, [pc, #256]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a3f      	ldr	r2, [pc, #252]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 800827e:	f043 0308 	orr.w	r3, r3, #8
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	4b3d      	ldr	r3, [pc, #244]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	493a      	ldr	r1, [pc, #232]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008292:	4313      	orrs	r3, r2
 8008294:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008296:	4b39      	ldr	r3, [pc, #228]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	4935      	ldr	r1, [pc, #212]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	604b      	str	r3, [r1, #4]
 80082aa:	e01a      	b.n	80082e2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80082ac:	4b33      	ldr	r3, [pc, #204]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a32      	ldr	r2, [pc, #200]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80082b2:	f023 0301 	bic.w	r3, r3, #1
 80082b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80082b8:	f7fc fc2e 	bl	8004b18 <HAL_GetTick>
 80082bc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80082be:	e008      	b.n	80082d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082c0:	f7fc fc2a 	bl	8004b18 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e386      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80082d2:	4b2a      	ldr	r3, [pc, #168]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1f0      	bne.n	80082c0 <HAL_RCC_OscConfig+0x1e0>
 80082de:	e000      	b.n	80082e2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80082e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d073      	beq.n	80083d6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d005      	beq.n	8008300 <HAL_RCC_OscConfig+0x220>
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	2b0c      	cmp	r3, #12
 80082f8:	d10e      	bne.n	8008318 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d10b      	bne.n	8008318 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008300:	4b1e      	ldr	r3, [pc, #120]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d063      	beq.n	80083d4 <HAL_RCC_OscConfig+0x2f4>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d15f      	bne.n	80083d4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e363      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008320:	d106      	bne.n	8008330 <HAL_RCC_OscConfig+0x250>
 8008322:	4b16      	ldr	r3, [pc, #88]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a15      	ldr	r2, [pc, #84]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	e01d      	b.n	800836c <HAL_RCC_OscConfig+0x28c>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008338:	d10c      	bne.n	8008354 <HAL_RCC_OscConfig+0x274>
 800833a:	4b10      	ldr	r3, [pc, #64]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a0f      	ldr	r2, [pc, #60]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a0c      	ldr	r2, [pc, #48]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 800834c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008350:	6013      	str	r3, [r2, #0]
 8008352:	e00b      	b.n	800836c <HAL_RCC_OscConfig+0x28c>
 8008354:	4b09      	ldr	r3, [pc, #36]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a08      	ldr	r2, [pc, #32]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 800835a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800835e:	6013      	str	r3, [r2, #0]
 8008360:	4b06      	ldr	r3, [pc, #24]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a05      	ldr	r2, [pc, #20]	; (800837c <HAL_RCC_OscConfig+0x29c>)
 8008366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800836a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d01b      	beq.n	80083ac <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008374:	f7fc fbd0 	bl	8004b18 <HAL_GetTick>
 8008378:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800837a:	e010      	b.n	800839e <HAL_RCC_OscConfig+0x2be>
 800837c:	40021000 	.word	0x40021000
 8008380:	08011ef8 	.word	0x08011ef8
 8008384:	20000000 	.word	0x20000000
 8008388:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800838c:	f7fc fbc4 	bl	8004b18 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b64      	cmp	r3, #100	; 0x64
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e320      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800839e:	4ba0      	ldr	r3, [pc, #640]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0f0      	beq.n	800838c <HAL_RCC_OscConfig+0x2ac>
 80083aa:	e014      	b.n	80083d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ac:	f7fc fbb4 	bl	8004b18 <HAL_GetTick>
 80083b0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083b2:	e008      	b.n	80083c6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083b4:	f7fc fbb0 	bl	8004b18 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b64      	cmp	r3, #100	; 0x64
 80083c0:	d901      	bls.n	80083c6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e30c      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083c6:	4b96      	ldr	r3, [pc, #600]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f0      	bne.n	80083b4 <HAL_RCC_OscConfig+0x2d4>
 80083d2:	e000      	b.n	80083d6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d060      	beq.n	80084a4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	d005      	beq.n	80083f4 <HAL_RCC_OscConfig+0x314>
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	2b0c      	cmp	r3, #12
 80083ec:	d119      	bne.n	8008422 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d116      	bne.n	8008422 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083f4:	4b8a      	ldr	r3, [pc, #552]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <HAL_RCC_OscConfig+0x32c>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e2e9      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800840c:	4b84      	ldr	r3, [pc, #528]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	061b      	lsls	r3, r3, #24
 800841a:	4981      	ldr	r1, [pc, #516]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 800841c:	4313      	orrs	r3, r2
 800841e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008420:	e040      	b.n	80084a4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d023      	beq.n	8008472 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800842a:	4b7d      	ldr	r3, [pc, #500]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a7c      	ldr	r2, [pc, #496]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 8008430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008436:	f7fc fb6f 	bl	8004b18 <HAL_GetTick>
 800843a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800843c:	e008      	b.n	8008450 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800843e:	f7fc fb6b 	bl	8004b18 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d901      	bls.n	8008450 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e2c7      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008450:	4b73      	ldr	r3, [pc, #460]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0f0      	beq.n	800843e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800845c:	4b70      	ldr	r3, [pc, #448]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	061b      	lsls	r3, r3, #24
 800846a:	496d      	ldr	r1, [pc, #436]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 800846c:	4313      	orrs	r3, r2
 800846e:	604b      	str	r3, [r1, #4]
 8008470:	e018      	b.n	80084a4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008472:	4b6b      	ldr	r3, [pc, #428]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a6a      	ldr	r2, [pc, #424]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 8008478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800847c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847e:	f7fc fb4b 	bl	8004b18 <HAL_GetTick>
 8008482:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008484:	e008      	b.n	8008498 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008486:	f7fc fb47 	bl	8004b18 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e2a3      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008498:	4b61      	ldr	r3, [pc, #388]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1f0      	bne.n	8008486 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0308 	and.w	r3, r3, #8
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d07f      	beq.n	80085b0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d05f      	beq.n	8008578 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80084b8:	4b59      	ldr	r3, [pc, #356]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 80084ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084be:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	699a      	ldr	r2, [r3, #24]
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f003 0310 	and.w	r3, r3, #16
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d037      	beq.n	800853e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d006      	beq.n	80084e6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e27c      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01b      	beq.n	8008528 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80084f0:	4b4b      	ldr	r3, [pc, #300]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 80084f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084f6:	4a4a      	ldr	r2, [pc, #296]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008500:	f7fc fb0a 	bl	8004b18 <HAL_GetTick>
 8008504:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008506:	e008      	b.n	800851a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008508:	f7fc fb06 	bl	8004b18 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b11      	cmp	r3, #17
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e262      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800851a:	4b41      	ldr	r3, [pc, #260]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 800851c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1ef      	bne.n	8008508 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8008528:	4b3d      	ldr	r3, [pc, #244]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 800852a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800852e:	f023 0210 	bic.w	r2, r3, #16
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	493a      	ldr	r1, [pc, #232]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 8008538:	4313      	orrs	r3, r2
 800853a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800853e:	4b38      	ldr	r3, [pc, #224]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 8008540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008544:	4a36      	ldr	r2, [pc, #216]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 8008546:	f043 0301 	orr.w	r3, r3, #1
 800854a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800854e:	f7fc fae3 	bl	8004b18 <HAL_GetTick>
 8008552:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008554:	e008      	b.n	8008568 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008556:	f7fc fadf 	bl	8004b18 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b11      	cmp	r3, #17
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e23b      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008568:	4b2d      	ldr	r3, [pc, #180]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 800856a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0ef      	beq.n	8008556 <HAL_RCC_OscConfig+0x476>
 8008576:	e01b      	b.n	80085b0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008578:	4b29      	ldr	r3, [pc, #164]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 800857a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800857e:	4a28      	ldr	r2, [pc, #160]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 8008580:	f023 0301 	bic.w	r3, r3, #1
 8008584:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008588:	f7fc fac6 	bl	8004b18 <HAL_GetTick>
 800858c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800858e:	e008      	b.n	80085a2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008590:	f7fc fac2 	bl	8004b18 <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	2b11      	cmp	r3, #17
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e21e      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085a2:	4b1f      	ldr	r3, [pc, #124]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 80085a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1ef      	bne.n	8008590 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 80c1 	beq.w	8008740 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085be:	2300      	movs	r3, #0
 80085c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80085c4:	4b16      	ldr	r3, [pc, #88]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 80085c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10e      	bne.n	80085ee <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085d0:	4b13      	ldr	r3, [pc, #76]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 80085d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d4:	4a12      	ldr	r2, [pc, #72]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 80085d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085da:	6593      	str	r3, [r2, #88]	; 0x58
 80085dc:	4b10      	ldr	r3, [pc, #64]	; (8008620 <HAL_RCC_OscConfig+0x540>)
 80085de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80085e8:	2301      	movs	r3, #1
 80085ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085ee:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <HAL_RCC_OscConfig+0x544>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d11c      	bne.n	8008634 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085fa:	4b0a      	ldr	r3, [pc, #40]	; (8008624 <HAL_RCC_OscConfig+0x544>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a09      	ldr	r2, [pc, #36]	; (8008624 <HAL_RCC_OscConfig+0x544>)
 8008600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008606:	f7fc fa87 	bl	8004b18 <HAL_GetTick>
 800860a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800860c:	e00c      	b.n	8008628 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800860e:	f7fc fa83 	bl	8004b18 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d905      	bls.n	8008628 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e1df      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
 8008620:	40021000 	.word	0x40021000
 8008624:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008628:	4b99      	ldr	r3, [pc, #612]	; (8008890 <HAL_RCC_OscConfig+0x7b0>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0ec      	beq.n	800860e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	d02c      	beq.n	800869a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8008640:	4b94      	ldr	r3, [pc, #592]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008652:	4990      	ldr	r1, [pc, #576]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008654:	4313      	orrs	r3, r2
 8008656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d010      	beq.n	8008688 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008666:	4b8b      	ldr	r3, [pc, #556]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866c:	4a89      	ldr	r2, [pc, #548]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 800866e:	f043 0304 	orr.w	r3, r3, #4
 8008672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008676:	4b87      	ldr	r3, [pc, #540]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867c:	4a85      	ldr	r2, [pc, #532]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 800867e:	f043 0301 	orr.w	r3, r3, #1
 8008682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008686:	e018      	b.n	80086ba <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008688:	4b82      	ldr	r3, [pc, #520]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 800868a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800868e:	4a81      	ldr	r2, [pc, #516]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008690:	f043 0301 	orr.w	r3, r3, #1
 8008694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008698:	e00f      	b.n	80086ba <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800869a:	4b7e      	ldr	r3, [pc, #504]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 800869c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a0:	4a7c      	ldr	r2, [pc, #496]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 80086a2:	f023 0301 	bic.w	r3, r3, #1
 80086a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80086aa:	4b7a      	ldr	r3, [pc, #488]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 80086ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b0:	4a78      	ldr	r2, [pc, #480]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 80086b2:	f023 0304 	bic.w	r3, r3, #4
 80086b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d016      	beq.n	80086f0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c2:	f7fc fa29 	bl	8004b18 <HAL_GetTick>
 80086c6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086c8:	e00a      	b.n	80086e0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ca:	f7fc fa25 	bl	8004b18 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d8:	4293      	cmp	r3, r2
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e17f      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086e0:	4b6c      	ldr	r3, [pc, #432]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 80086e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0ed      	beq.n	80086ca <HAL_RCC_OscConfig+0x5ea>
 80086ee:	e01d      	b.n	800872c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f0:	f7fc fa12 	bl	8004b18 <HAL_GetTick>
 80086f4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086f6:	e00a      	b.n	800870e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086f8:	f7fc fa0e 	bl	8004b18 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	f241 3288 	movw	r2, #5000	; 0x1388
 8008706:	4293      	cmp	r3, r2
 8008708:	d901      	bls.n	800870e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e168      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800870e:	4b61      	ldr	r3, [pc, #388]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1ed      	bne.n	80086f8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800871c:	4b5d      	ldr	r3, [pc, #372]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 800871e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008722:	4a5c      	ldr	r2, [pc, #368]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800872c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008730:	2b01      	cmp	r3, #1
 8008732:	d105      	bne.n	8008740 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008734:	4b57      	ldr	r3, [pc, #348]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008738:	4a56      	ldr	r2, [pc, #344]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 800873a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800873e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d03c      	beq.n	80087c6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008750:	2b00      	cmp	r3, #0
 8008752:	d01c      	beq.n	800878e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008754:	4b4f      	ldr	r3, [pc, #316]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800875a:	4a4e      	ldr	r2, [pc, #312]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 800875c:	f043 0301 	orr.w	r3, r3, #1
 8008760:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008764:	f7fc f9d8 	bl	8004b18 <HAL_GetTick>
 8008768:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800876c:	f7fc f9d4 	bl	8004b18 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b02      	cmp	r3, #2
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e130      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800877e:	4b45      	ldr	r3, [pc, #276]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d0ef      	beq.n	800876c <HAL_RCC_OscConfig+0x68c>
 800878c:	e01b      	b.n	80087c6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800878e:	4b41      	ldr	r3, [pc, #260]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008794:	4a3f      	ldr	r2, [pc, #252]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008796:	f023 0301 	bic.w	r3, r3, #1
 800879a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800879e:	f7fc f9bb 	bl	8004b18 <HAL_GetTick>
 80087a2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087a6:	f7fc f9b7 	bl	8004b18 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e113      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80087b8:	4b36      	ldr	r3, [pc, #216]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 80087ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1ef      	bne.n	80087a6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 8107 	beq.w	80089de <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	f040 80cf 	bne.w	8008978 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80087da:	4b2e      	ldr	r3, [pc, #184]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	f003 0203 	and.w	r2, r3, #3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d12c      	bne.n	8008848 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f8:	3b01      	subs	r3, #1
 80087fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d123      	bne.n	8008848 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800880c:	429a      	cmp	r2, r3
 800880e:	d11b      	bne.n	8008848 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800881c:	429a      	cmp	r2, r3
 800881e:	d113      	bne.n	8008848 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882a:	085b      	lsrs	r3, r3, #1
 800882c:	3b01      	subs	r3, #1
 800882e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008830:	429a      	cmp	r2, r3
 8008832:	d109      	bne.n	8008848 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883e:	085b      	lsrs	r3, r3, #1
 8008840:	3b01      	subs	r3, #1
 8008842:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008844:	429a      	cmp	r2, r3
 8008846:	d071      	beq.n	800892c <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	2b0c      	cmp	r3, #12
 800884c:	d06c      	beq.n	8008928 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800884e:	4b11      	ldr	r3, [pc, #68]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d105      	bne.n	8008866 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800885a:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e0ba      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800886a:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a09      	ldr	r2, [pc, #36]	; (8008894 <HAL_RCC_OscConfig+0x7b4>)
 8008870:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008874:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008876:	f7fc f94f 	bl	8004b18 <HAL_GetTick>
 800887a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800887c:	e00c      	b.n	8008898 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800887e:	f7fc f94b 	bl	8004b18 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d905      	bls.n	8008898 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e0a7      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
 8008890:	40007000 	.word	0x40007000
 8008894:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008898:	4b53      	ldr	r3, [pc, #332]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1ec      	bne.n	800887e <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088a4:	4b50      	ldr	r3, [pc, #320]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	4b50      	ldr	r3, [pc, #320]	; (80089ec <HAL_RCC_OscConfig+0x90c>)
 80088aa:	4013      	ands	r3, r2
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80088b4:	3a01      	subs	r2, #1
 80088b6:	0112      	lsls	r2, r2, #4
 80088b8:	4311      	orrs	r1, r2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088be:	0212      	lsls	r2, r2, #8
 80088c0:	4311      	orrs	r1, r2
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80088c6:	0852      	lsrs	r2, r2, #1
 80088c8:	3a01      	subs	r2, #1
 80088ca:	0552      	lsls	r2, r2, #21
 80088cc:	4311      	orrs	r1, r2
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80088d2:	0852      	lsrs	r2, r2, #1
 80088d4:	3a01      	subs	r2, #1
 80088d6:	0652      	lsls	r2, r2, #25
 80088d8:	4311      	orrs	r1, r2
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80088de:	06d2      	lsls	r2, r2, #27
 80088e0:	430a      	orrs	r2, r1
 80088e2:	4941      	ldr	r1, [pc, #260]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80088e8:	4b3f      	ldr	r3, [pc, #252]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a3e      	ldr	r2, [pc, #248]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 80088ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80088f4:	4b3c      	ldr	r3, [pc, #240]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	4a3b      	ldr	r2, [pc, #236]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 80088fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008900:	f7fc f90a 	bl	8004b18 <HAL_GetTick>
 8008904:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008906:	e008      	b.n	800891a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008908:	f7fc f906 	bl	8004b18 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b02      	cmp	r3, #2
 8008914:	d901      	bls.n	800891a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e062      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800891a:	4b33      	ldr	r3, [pc, #204]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0f0      	beq.n	8008908 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008926:	e05a      	b.n	80089de <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e059      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800892c:	4b2e      	ldr	r3, [pc, #184]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d152      	bne.n	80089de <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008938:	4b2b      	ldr	r3, [pc, #172]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a2a      	ldr	r2, [pc, #168]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 800893e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008942:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008944:	4b28      	ldr	r3, [pc, #160]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	4a27      	ldr	r2, [pc, #156]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 800894a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800894e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008950:	f7fc f8e2 	bl	8004b18 <HAL_GetTick>
 8008954:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008956:	e008      	b.n	800896a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008958:	f7fc f8de 	bl	8004b18 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	2b02      	cmp	r3, #2
 8008964:	d901      	bls.n	800896a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e03a      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800896a:	4b1f      	ldr	r3, [pc, #124]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0f0      	beq.n	8008958 <HAL_RCC_OscConfig+0x878>
 8008976:	e032      	b.n	80089de <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	2b0c      	cmp	r3, #12
 800897c:	d02d      	beq.n	80089da <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800897e:	4b1a      	ldr	r3, [pc, #104]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a19      	ldr	r2, [pc, #100]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 8008984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008988:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800898a:	4b17      	ldr	r3, [pc, #92]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d105      	bne.n	80089a2 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008996:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	4a13      	ldr	r2, [pc, #76]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 800899c:	f023 0303 	bic.w	r3, r3, #3
 80089a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80089a2:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	4a10      	ldr	r2, [pc, #64]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 80089a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80089ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b2:	f7fc f8b1 	bl	8004b18 <HAL_GetTick>
 80089b6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089b8:	e008      	b.n	80089cc <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089ba:	f7fc f8ad 	bl	8004b18 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d901      	bls.n	80089cc <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e009      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089cc:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <HAL_RCC_OscConfig+0x908>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1f0      	bne.n	80089ba <HAL_RCC_OscConfig+0x8da>
 80089d8:	e001      	b.n	80089de <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3728      	adds	r7, #40	; 0x28
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40021000 	.word	0x40021000
 80089ec:	019d800c 	.word	0x019d800c

080089f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e10f      	b.n	8008c28 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a08:	4b89      	ldr	r3, [pc, #548]	; (8008c30 <HAL_RCC_ClockConfig+0x240>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 030f 	and.w	r3, r3, #15
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d910      	bls.n	8008a38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a16:	4b86      	ldr	r3, [pc, #536]	; (8008c30 <HAL_RCC_ClockConfig+0x240>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f023 020f 	bic.w	r2, r3, #15
 8008a1e:	4984      	ldr	r1, [pc, #528]	; (8008c30 <HAL_RCC_ClockConfig+0x240>)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a26:	4b82      	ldr	r3, [pc, #520]	; (8008c30 <HAL_RCC_ClockConfig+0x240>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 030f 	and.w	r3, r3, #15
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d001      	beq.n	8008a38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e0f7      	b.n	8008c28 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8089 	beq.w	8008b58 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d133      	bne.n	8008ab6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a4e:	4b79      	ldr	r3, [pc, #484]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e0e4      	b.n	8008c28 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008a5e:	f000 fa0f 	bl	8008e80 <RCC_GetSysClockFreqFromPLLSource>
 8008a62:	4602      	mov	r2, r0
 8008a64:	4b74      	ldr	r3, [pc, #464]	; (8008c38 <HAL_RCC_ClockConfig+0x248>)
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d955      	bls.n	8008b16 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008a6a:	4b72      	ldr	r3, [pc, #456]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10a      	bne.n	8008a8c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008a76:	4b6f      	ldr	r3, [pc, #444]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a7e:	4a6d      	ldr	r2, [pc, #436]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008a86:	2380      	movs	r3, #128	; 0x80
 8008a88:	617b      	str	r3, [r7, #20]
 8008a8a:	e044      	b.n	8008b16 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d03e      	beq.n	8008b16 <HAL_RCC_ClockConfig+0x126>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d13a      	bne.n	8008b16 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008aa0:	4b64      	ldr	r3, [pc, #400]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aa8:	4a62      	ldr	r2, [pc, #392]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008ab0:	2380      	movs	r3, #128	; 0x80
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	e02f      	b.n	8008b16 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d107      	bne.n	8008ace <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008abe:	4b5d      	ldr	r3, [pc, #372]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d115      	bne.n	8008af6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e0ac      	b.n	8008c28 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d107      	bne.n	8008ae6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008ad6:	4b57      	ldr	r3, [pc, #348]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d109      	bne.n	8008af6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e0a0      	b.n	8008c28 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ae6:	4b53      	ldr	r3, [pc, #332]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e098      	b.n	8008c28 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008af6:	f000 f8a7 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8008afa:	4602      	mov	r2, r0
 8008afc:	4b4e      	ldr	r3, [pc, #312]	; (8008c38 <HAL_RCC_ClockConfig+0x248>)
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d909      	bls.n	8008b16 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008b02:	4b4c      	ldr	r3, [pc, #304]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b0a:	4a4a      	ldr	r2, [pc, #296]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008b12:	2380      	movs	r3, #128	; 0x80
 8008b14:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b16:	4b47      	ldr	r3, [pc, #284]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f023 0203 	bic.w	r2, r3, #3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	4944      	ldr	r1, [pc, #272]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b28:	f7fb fff6 	bl	8004b18 <HAL_GetTick>
 8008b2c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b2e:	e00a      	b.n	8008b46 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b30:	f7fb fff2 	bl	8004b18 <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e070      	b.n	8008c28 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b46:	4b3b      	ldr	r3, [pc, #236]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f003 020c 	and.w	r2, r3, #12
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d1eb      	bne.n	8008b30 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0302 	and.w	r3, r3, #2
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d009      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b64:	4b33      	ldr	r3, [pc, #204]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	4930      	ldr	r1, [pc, #192]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	608b      	str	r3, [r1, #8]
 8008b76:	e008      	b.n	8008b8a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	2b80      	cmp	r3, #128	; 0x80
 8008b7c:	d105      	bne.n	8008b8a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008b7e:	4b2d      	ldr	r3, [pc, #180]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	4a2c      	ldr	r2, [pc, #176]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008b84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b88:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b8a:	4b29      	ldr	r3, [pc, #164]	; (8008c30 <HAL_RCC_ClockConfig+0x240>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 030f 	and.w	r3, r3, #15
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d210      	bcs.n	8008bba <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b98:	4b25      	ldr	r3, [pc, #148]	; (8008c30 <HAL_RCC_ClockConfig+0x240>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f023 020f 	bic.w	r2, r3, #15
 8008ba0:	4923      	ldr	r1, [pc, #140]	; (8008c30 <HAL_RCC_ClockConfig+0x240>)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ba8:	4b21      	ldr	r3, [pc, #132]	; (8008c30 <HAL_RCC_ClockConfig+0x240>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 030f 	and.w	r3, r3, #15
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d001      	beq.n	8008bba <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e036      	b.n	8008c28 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0304 	and.w	r3, r3, #4
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d008      	beq.n	8008bd8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bc6:	4b1b      	ldr	r3, [pc, #108]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	4918      	ldr	r1, [pc, #96]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0308 	and.w	r3, r3, #8
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d009      	beq.n	8008bf8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008be4:	4b13      	ldr	r3, [pc, #76]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	00db      	lsls	r3, r3, #3
 8008bf2:	4910      	ldr	r1, [pc, #64]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008bf8:	f000 f826 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8008bfc:	4601      	mov	r1, r0
 8008bfe:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <HAL_RCC_ClockConfig+0x244>)
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	091b      	lsrs	r3, r3, #4
 8008c04:	f003 030f 	and.w	r3, r3, #15
 8008c08:	4a0c      	ldr	r2, [pc, #48]	; (8008c3c <HAL_RCC_ClockConfig+0x24c>)
 8008c0a:	5cd3      	ldrb	r3, [r2, r3]
 8008c0c:	f003 031f 	and.w	r3, r3, #31
 8008c10:	fa21 f303 	lsr.w	r3, r1, r3
 8008c14:	4a0a      	ldr	r2, [pc, #40]	; (8008c40 <HAL_RCC_ClockConfig+0x250>)
 8008c16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008c18:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <HAL_RCC_ClockConfig+0x254>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fb ff2b 	bl	8004a78 <HAL_InitTick>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]

  return status;
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	40022000 	.word	0x40022000
 8008c34:	40021000 	.word	0x40021000
 8008c38:	04c4b400 	.word	0x04c4b400
 8008c3c:	08011ef8 	.word	0x08011ef8
 8008c40:	20000000 	.word	0x20000000
 8008c44:	20000004 	.word	0x20000004

08008c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b089      	sub	sp, #36	; 0x24
 8008c4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
 8008c52:	2300      	movs	r3, #0
 8008c54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c56:	4b3d      	ldr	r3, [pc, #244]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f003 030c 	and.w	r3, r3, #12
 8008c5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c60:	4b3a      	ldr	r3, [pc, #232]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d005      	beq.n	8008c7c <HAL_RCC_GetSysClockFreq+0x34>
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2b0c      	cmp	r3, #12
 8008c74:	d121      	bne.n	8008cba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d11e      	bne.n	8008cba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008c7c:	4b33      	ldr	r3, [pc, #204]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0308 	and.w	r3, r3, #8
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d107      	bne.n	8008c98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008c88:	4b30      	ldr	r3, [pc, #192]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8008c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c8e:	0a1b      	lsrs	r3, r3, #8
 8008c90:	f003 030f 	and.w	r3, r3, #15
 8008c94:	61fb      	str	r3, [r7, #28]
 8008c96:	e005      	b.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008c98:	4b2c      	ldr	r3, [pc, #176]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	091b      	lsrs	r3, r3, #4
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ca4:	4a2a      	ldr	r2, [pc, #168]	; (8008d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10d      	bne.n	8008cd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008cb8:	e00a      	b.n	8008cd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d102      	bne.n	8008cc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008cc0:	4b24      	ldr	r3, [pc, #144]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008cc2:	61bb      	str	r3, [r7, #24]
 8008cc4:	e004      	b.n	8008cd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d101      	bne.n	8008cd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ccc:	4b22      	ldr	r3, [pc, #136]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8008cce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	2b0c      	cmp	r3, #12
 8008cd4:	d133      	bne.n	8008d3e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008cd6:	4b1d      	ldr	r3, [pc, #116]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f003 0303 	and.w	r3, r3, #3
 8008cde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d002      	beq.n	8008cec <HAL_RCC_GetSysClockFreq+0xa4>
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d003      	beq.n	8008cf2 <HAL_RCC_GetSysClockFreq+0xaa>
 8008cea:	e005      	b.n	8008cf8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008cec:	4b19      	ldr	r3, [pc, #100]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008cee:	617b      	str	r3, [r7, #20]
      break;
 8008cf0:	e005      	b.n	8008cfe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008cf2:	4b19      	ldr	r3, [pc, #100]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8008cf4:	617b      	str	r3, [r7, #20]
      break;
 8008cf6:	e002      	b.n	8008cfe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	617b      	str	r3, [r7, #20]
      break;
 8008cfc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008cfe:	4b13      	ldr	r3, [pc, #76]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	091b      	lsrs	r3, r3, #4
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	3301      	adds	r3, #1
 8008d0a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008d0c:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	0a1b      	lsrs	r3, r3, #8
 8008d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	fb02 f203 	mul.w	r2, r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d22:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008d24:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	0e5b      	lsrs	r3, r3, #25
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	3301      	adds	r3, #1
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3724      	adds	r7, #36	; 0x24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	40021000 	.word	0x40021000
 8008d50:	08011f10 	.word	0x08011f10
 8008d54:	00f42400 	.word	0x00f42400
 8008d58:	016e3600 	.word	0x016e3600

08008d5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d60:	4b03      	ldr	r3, [pc, #12]	; (8008d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d62:	681b      	ldr	r3, [r3, #0]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	20000000 	.word	0x20000000

08008d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008d78:	f7ff fff0 	bl	8008d5c <HAL_RCC_GetHCLKFreq>
 8008d7c:	4601      	mov	r1, r0
 8008d7e:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	0a1b      	lsrs	r3, r3, #8
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	4a04      	ldr	r2, [pc, #16]	; (8008d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d8a:	5cd3      	ldrb	r3, [r2, r3]
 8008d8c:	f003 031f 	and.w	r3, r3, #31
 8008d90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40021000 	.word	0x40021000
 8008d9c:	08011f08 	.word	0x08011f08

08008da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008da4:	f7ff ffda 	bl	8008d5c <HAL_RCC_GetHCLKFreq>
 8008da8:	4601      	mov	r1, r0
 8008daa:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	0adb      	lsrs	r3, r3, #11
 8008db0:	f003 0307 	and.w	r3, r3, #7
 8008db4:	4a04      	ldr	r2, [pc, #16]	; (8008dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008db6:	5cd3      	ldrb	r3, [r2, r3]
 8008db8:	f003 031f 	and.w	r3, r3, #31
 8008dbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	40021000 	.word	0x40021000
 8008dc8:	08011f08 	.word	0x08011f08

08008dcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008dd8:	4b27      	ldr	r3, [pc, #156]	; (8008e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008de4:	f7ff f898 	bl	8007f18 <HAL_PWREx_GetVoltageRange>
 8008de8:	6178      	str	r0, [r7, #20]
 8008dea:	e014      	b.n	8008e16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008dec:	4b22      	ldr	r3, [pc, #136]	; (8008e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df0:	4a21      	ldr	r2, [pc, #132]	; (8008e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008df6:	6593      	str	r3, [r2, #88]	; 0x58
 8008df8:	4b1f      	ldr	r3, [pc, #124]	; (8008e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e00:	60fb      	str	r3, [r7, #12]
 8008e02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008e04:	f7ff f888 	bl	8007f18 <HAL_PWREx_GetVoltageRange>
 8008e08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008e0a:	4b1b      	ldr	r3, [pc, #108]	; (8008e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e0e:	4a1a      	ldr	r2, [pc, #104]	; (8008e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e1c:	d10b      	bne.n	8008e36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b80      	cmp	r3, #128	; 0x80
 8008e22:	d913      	bls.n	8008e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2ba0      	cmp	r3, #160	; 0xa0
 8008e28:	d902      	bls.n	8008e30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	613b      	str	r3, [r7, #16]
 8008e2e:	e00d      	b.n	8008e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008e30:	2301      	movs	r3, #1
 8008e32:	613b      	str	r3, [r7, #16]
 8008e34:	e00a      	b.n	8008e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b7f      	cmp	r3, #127	; 0x7f
 8008e3a:	d902      	bls.n	8008e42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	613b      	str	r3, [r7, #16]
 8008e40:	e004      	b.n	8008e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b70      	cmp	r3, #112	; 0x70
 8008e46:	d101      	bne.n	8008e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008e48:	2301      	movs	r3, #1
 8008e4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	; (8008e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f023 020f 	bic.w	r2, r3, #15
 8008e54:	4909      	ldr	r1, [pc, #36]	; (8008e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008e5c:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 030f 	and.w	r3, r3, #15
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d001      	beq.n	8008e6e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3718      	adds	r7, #24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40021000 	.word	0x40021000
 8008e7c:	40022000 	.word	0x40022000

08008e80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8008e8a:	4b2d      	ldr	r3, [pc, #180]	; (8008f40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d118      	bne.n	8008ec8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008e96:	4b2a      	ldr	r3, [pc, #168]	; (8008f40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0308 	and.w	r3, r3, #8
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d107      	bne.n	8008eb2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008ea2:	4b27      	ldr	r3, [pc, #156]	; (8008f40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ea8:	0a1b      	lsrs	r3, r3, #8
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	617b      	str	r3, [r7, #20]
 8008eb0:	e005      	b.n	8008ebe <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008eb2:	4b23      	ldr	r3, [pc, #140]	; (8008f40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	091b      	lsrs	r3, r3, #4
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ebe:	4a21      	ldr	r2, [pc, #132]	; (8008f44 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ec6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ec8:	4b1d      	ldr	r3, [pc, #116]	; (8008f40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f003 0303 	and.w	r3, r3, #3
 8008ed0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d002      	beq.n	8008ede <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d003      	beq.n	8008ee4 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8008edc:	e005      	b.n	8008eea <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008ede:	4b1a      	ldr	r3, [pc, #104]	; (8008f48 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8008ee0:	613b      	str	r3, [r7, #16]
    break;
 8008ee2:	e005      	b.n	8008ef0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008ee4:	4b19      	ldr	r3, [pc, #100]	; (8008f4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008ee6:	613b      	str	r3, [r7, #16]
    break;
 8008ee8:	e002      	b.n	8008ef0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	613b      	str	r3, [r7, #16]
    break;
 8008eee:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ef0:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	091b      	lsrs	r3, r3, #4
 8008ef6:	f003 030f 	and.w	r3, r3, #15
 8008efa:	3301      	adds	r3, #1
 8008efc:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008efe:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	0a1b      	lsrs	r3, r3, #8
 8008f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	fb02 f203 	mul.w	r2, r2, r3
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f14:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f16:	4b0a      	ldr	r3, [pc, #40]	; (8008f40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	0e5b      	lsrs	r3, r3, #25
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	3301      	adds	r3, #1
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008f30:	683b      	ldr	r3, [r7, #0]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	371c      	adds	r7, #28
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	40021000 	.word	0x40021000
 8008f44:	08011f10 	.word	0x08011f10
 8008f48:	00f42400 	.word	0x00f42400
 8008f4c:	016e3600 	.word	0x016e3600

08008f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f58:	2300      	movs	r3, #0
 8008f5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d03d      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f70:	2b40      	cmp	r3, #64	; 0x40
 8008f72:	d00b      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8008f74:	2b40      	cmp	r3, #64	; 0x40
 8008f76:	d804      	bhi.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00e      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8008f7c:	2b20      	cmp	r3, #32
 8008f7e:	d015      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008f80:	e01d      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008f82:	2b60      	cmp	r3, #96	; 0x60
 8008f84:	d01e      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008f86:	2b80      	cmp	r3, #128	; 0x80
 8008f88:	d01c      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008f8a:	e018      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008f8c:	4b86      	ldr	r3, [pc, #536]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	4a85      	ldr	r2, [pc, #532]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008f98:	e015      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 f927 	bl	800a1f4 <RCCEx_PLLSAI1_Config>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008faa:	e00c      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	3320      	adds	r3, #32
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 fa0e 	bl	800a3d4 <RCCEx_PLLSAI2_Config>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008fbc:	e003      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8008fc2:	e000      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8008fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc6:	7cfb      	ldrb	r3, [r7, #19]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10b      	bne.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fcc:	4b76      	ldr	r3, [pc, #472]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fd2:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fda:	4973      	ldr	r1, [pc, #460]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008fe2:	e001      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe4:	7cfb      	ldrb	r3, [r7, #19]
 8008fe6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d042      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ffc:	d00f      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8008ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009002:	d805      	bhi.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8009004:	2b00      	cmp	r3, #0
 8009006:	d011      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8009008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800900c:	d017      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800900e:	e01f      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8009010:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009014:	d01f      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800901a:	d01c      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800901c:	e018      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800901e:	4b62      	ldr	r3, [pc, #392]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	4a61      	ldr	r2, [pc, #388]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009028:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800902a:	e015      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3304      	adds	r3, #4
 8009030:	2100      	movs	r1, #0
 8009032:	4618      	mov	r0, r3
 8009034:	f001 f8de 	bl	800a1f4 <RCCEx_PLLSAI1_Config>
 8009038:	4603      	mov	r3, r0
 800903a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800903c:	e00c      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	3320      	adds	r3, #32
 8009042:	2100      	movs	r1, #0
 8009044:	4618      	mov	r0, r3
 8009046:	f001 f9c5 	bl	800a3d4 <RCCEx_PLLSAI2_Config>
 800904a:	4603      	mov	r3, r0
 800904c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800904e:	e003      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	74fb      	strb	r3, [r7, #19]
      break;
 8009054:	e000      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8009056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009058:	7cfb      	ldrb	r3, [r7, #19]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10b      	bne.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800905e:	4b52      	ldr	r3, [pc, #328]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009060:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906c:	494e      	ldr	r1, [pc, #312]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800906e:	4313      	orrs	r3, r2
 8009070:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009074:	e001      	b.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009076:	7cfb      	ldrb	r3, [r7, #19]
 8009078:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 809f 	beq.w	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009088:	2300      	movs	r3, #0
 800908a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800908c:	4b46      	ldr	r3, [pc, #280]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800908e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009098:	2301      	movs	r3, #1
 800909a:	e000      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800909c:	2300      	movs	r3, #0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00d      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090a2:	4b41      	ldr	r3, [pc, #260]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80090a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a6:	4a40      	ldr	r2, [pc, #256]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80090a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ac:	6593      	str	r3, [r2, #88]	; 0x58
 80090ae:	4b3e      	ldr	r3, [pc, #248]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80090b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b6:	60bb      	str	r3, [r7, #8]
 80090b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090ba:	2301      	movs	r3, #1
 80090bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090be:	4b3b      	ldr	r3, [pc, #236]	; (80091ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a3a      	ldr	r2, [pc, #232]	; (80091ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80090c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090ca:	f7fb fd25 	bl	8004b18 <HAL_GetTick>
 80090ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80090d0:	e009      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090d2:	f7fb fd21 	bl	8004b18 <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d902      	bls.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	74fb      	strb	r3, [r7, #19]
        break;
 80090e4:	e005      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80090e6:	4b31      	ldr	r3, [pc, #196]	; (80091ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0ef      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80090f2:	7cfb      	ldrb	r3, [r7, #19]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d15b      	bne.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80090f8:	4b2b      	ldr	r3, [pc, #172]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80090fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009102:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d01f      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	429a      	cmp	r2, r3
 8009114:	d019      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009116:	4b24      	ldr	r3, [pc, #144]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800911c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009120:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009122:	4b21      	ldr	r3, [pc, #132]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009128:	4a1f      	ldr	r2, [pc, #124]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800912a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800912e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009132:	4b1d      	ldr	r3, [pc, #116]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009138:	4a1b      	ldr	r2, [pc, #108]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800913a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800913e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009142:	4a19      	ldr	r2, [pc, #100]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d016      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009154:	f7fb fce0 	bl	8004b18 <HAL_GetTick>
 8009158:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800915a:	e00b      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800915c:	f7fb fcdc 	bl	8004b18 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	f241 3288 	movw	r2, #5000	; 0x1388
 800916a:	4293      	cmp	r3, r2
 800916c:	d902      	bls.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	74fb      	strb	r3, [r7, #19]
            break;
 8009172:	e006      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009174:	4b0c      	ldr	r3, [pc, #48]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0ec      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8009182:	7cfb      	ldrb	r3, [r7, #19]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10c      	bne.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009188:	4b07      	ldr	r3, [pc, #28]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800918a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800918e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009198:	4903      	ldr	r1, [pc, #12]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800919a:	4313      	orrs	r3, r2
 800919c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80091a0:	e008      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091a2:	7cfb      	ldrb	r3, [r7, #19]
 80091a4:	74bb      	strb	r3, [r7, #18]
 80091a6:	e005      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80091a8:	40021000 	.word	0x40021000
 80091ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b0:	7cfb      	ldrb	r3, [r7, #19]
 80091b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091b4:	7c7b      	ldrb	r3, [r7, #17]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d105      	bne.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091ba:	4ba0      	ldr	r3, [pc, #640]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091be:	4a9f      	ldr	r2, [pc, #636]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80091d2:	4b9a      	ldr	r3, [pc, #616]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d8:	f023 0203 	bic.w	r2, r3, #3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e0:	4996      	ldr	r1, [pc, #600]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0302 	and.w	r3, r3, #2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00a      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80091f4:	4b91      	ldr	r3, [pc, #580]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091fa:	f023 020c 	bic.w	r2, r3, #12
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	498e      	ldr	r1, [pc, #568]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009204:	4313      	orrs	r3, r2
 8009206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0304 	and.w	r3, r3, #4
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009216:	4b89      	ldr	r3, [pc, #548]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800921c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009224:	4985      	ldr	r1, [pc, #532]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009226:	4313      	orrs	r3, r2
 8009228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0308 	and.w	r3, r3, #8
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009238:	4b80      	ldr	r3, [pc, #512]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800923a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800923e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009246:	497d      	ldr	r1, [pc, #500]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009248:	4313      	orrs	r3, r2
 800924a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0310 	and.w	r3, r3, #16
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800925a:	4b78      	ldr	r3, [pc, #480]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800925c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009268:	4974      	ldr	r1, [pc, #464]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800926a:	4313      	orrs	r3, r2
 800926c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0320 	and.w	r3, r3, #32
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800927c:	4b6f      	ldr	r3, [pc, #444]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800927e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009282:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800928a:	496c      	ldr	r1, [pc, #432]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800928c:	4313      	orrs	r3, r2
 800928e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800929e:	4b67      	ldr	r3, [pc, #412]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ac:	4963      	ldr	r1, [pc, #396]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00a      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80092c0:	4b5e      	ldr	r3, [pc, #376]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ce:	495b      	ldr	r1, [pc, #364]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092e2:	4b56      	ldr	r3, [pc, #344]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f0:	4952      	ldr	r1, [pc, #328]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00a      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009304:	4b4d      	ldr	r3, [pc, #308]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009312:	494a      	ldr	r1, [pc, #296]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009314:	4313      	orrs	r3, r2
 8009316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009326:	4b45      	ldr	r3, [pc, #276]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800932c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009334:	4941      	ldr	r1, [pc, #260]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009336:	4313      	orrs	r3, r2
 8009338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00a      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009348:	4b3c      	ldr	r3, [pc, #240]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800934a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800934e:	f023 0203 	bic.w	r2, r3, #3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009356:	4939      	ldr	r1, [pc, #228]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009358:	4313      	orrs	r3, r2
 800935a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d028      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800936a:	4b34      	ldr	r3, [pc, #208]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800936c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009370:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009378:	4930      	ldr	r1, [pc, #192]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800937a:	4313      	orrs	r3, r2
 800937c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009388:	d106      	bne.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800938a:	4b2c      	ldr	r3, [pc, #176]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	4a2b      	ldr	r2, [pc, #172]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009394:	60d3      	str	r3, [r2, #12]
 8009396:	e011      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800939c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093a0:	d10c      	bne.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	3304      	adds	r3, #4
 80093a6:	2101      	movs	r1, #1
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 ff23 	bl	800a1f4 <RCCEx_PLLSAI1_Config>
 80093ae:	4603      	mov	r3, r0
 80093b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80093b2:	7cfb      	ldrb	r3, [r7, #19]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80093b8:	7cfb      	ldrb	r3, [r7, #19]
 80093ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d04d      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093d0:	d108      	bne.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80093d2:	4b1a      	ldr	r3, [pc, #104]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093d8:	4a18      	ldr	r2, [pc, #96]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80093e2:	e012      	b.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80093e4:	4b15      	ldr	r3, [pc, #84]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093ea:	4a14      	ldr	r2, [pc, #80]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80093f4:	4b11      	ldr	r3, [pc, #68]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009402:	490e      	ldr	r1, [pc, #56]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009404:	4313      	orrs	r3, r2
 8009406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800940e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009412:	d106      	bne.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009414:	4b09      	ldr	r3, [pc, #36]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	4a08      	ldr	r2, [pc, #32]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800941a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800941e:	60d3      	str	r3, [r2, #12]
 8009420:	e020      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800942a:	d109      	bne.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800942c:	4b03      	ldr	r3, [pc, #12]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	4a02      	ldr	r2, [pc, #8]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009436:	60d3      	str	r3, [r2, #12]
 8009438:	e014      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800943a:	bf00      	nop
 800943c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009448:	d10c      	bne.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3304      	adds	r3, #4
 800944e:	2101      	movs	r1, #1
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fecf 	bl	800a1f4 <RCCEx_PLLSAI1_Config>
 8009456:	4603      	mov	r3, r0
 8009458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800945a:	7cfb      	ldrb	r3, [r7, #19]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009460:	7cfb      	ldrb	r3, [r7, #19]
 8009462:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d028      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009470:	4b68      	ldr	r3, [pc, #416]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800947e:	4965      	ldr	r1, [pc, #404]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009480:	4313      	orrs	r3, r2
 8009482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800948a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800948e:	d106      	bne.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009490:	4b60      	ldr	r3, [pc, #384]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	4a5f      	ldr	r2, [pc, #380]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800949a:	60d3      	str	r3, [r2, #12]
 800949c:	e011      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094a6:	d10c      	bne.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3304      	adds	r3, #4
 80094ac:	2101      	movs	r1, #1
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 fea0 	bl	800a1f4 <RCCEx_PLLSAI1_Config>
 80094b4:	4603      	mov	r3, r0
 80094b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80094b8:	7cfb      	ldrb	r3, [r7, #19]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80094be:	7cfb      	ldrb	r3, [r7, #19]
 80094c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d01e      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094ce:	4b51      	ldr	r3, [pc, #324]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80094d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094de:	494d      	ldr	r1, [pc, #308]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094f0:	d10c      	bne.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3304      	adds	r3, #4
 80094f6:	2102      	movs	r1, #2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 fe7b 	bl	800a1f4 <RCCEx_PLLSAI1_Config>
 80094fe:	4603      	mov	r3, r0
 8009500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009502:	7cfb      	ldrb	r3, [r7, #19]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8009508:	7cfb      	ldrb	r3, [r7, #19]
 800950a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00b      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009518:	4b3e      	ldr	r3, [pc, #248]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800951a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800951e:	f023 0204 	bic.w	r2, r3, #4
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009528:	493a      	ldr	r1, [pc, #232]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800952a:	4313      	orrs	r3, r2
 800952c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00b      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800953c:	4b35      	ldr	r3, [pc, #212]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800953e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009542:	f023 0218 	bic.w	r2, r3, #24
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800954c:	4931      	ldr	r1, [pc, #196]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800954e:	4313      	orrs	r3, r2
 8009550:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d035      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009560:	4b2c      	ldr	r3, [pc, #176]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a2b      	ldr	r2, [pc, #172]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800956a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800956c:	f7fb fad4 	bl	8004b18 <HAL_GetTick>
 8009570:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009572:	e009      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009574:	f7fb fad0 	bl	8004b18 <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b02      	cmp	r3, #2
 8009580:	d902      	bls.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	74fb      	strb	r3, [r7, #19]
        break;
 8009586:	e005      	b.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009588:	4b22      	ldr	r3, [pc, #136]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1ef      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8009594:	7cfb      	ldrb	r3, [r7, #19]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d113      	bne.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800959a:	4b1e      	ldr	r3, [pc, #120]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800959c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095aa:	491a      	ldr	r1, [pc, #104]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	3320      	adds	r3, #32
 80095b6:	2102      	movs	r1, #2
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 ff0b 	bl	800a3d4 <RCCEx_PLLSAI2_Config>
 80095be:	4603      	mov	r3, r0
 80095c0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80095c2:	7cfb      	ldrb	r3, [r7, #19]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 80095c8:	7cfb      	ldrb	r3, [r7, #19]
 80095ca:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d017      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80095d8:	4b0e      	ldr	r3, [pc, #56]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80095da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095e8:	490a      	ldr	r1, [pc, #40]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095fa:	d105      	bne.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095fc:	4b05      	ldr	r3, [pc, #20]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	4a04      	ldr	r2, [pc, #16]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009606:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009608:	7cbb      	ldrb	r3, [r7, #18]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	40021000 	.word	0x40021000

08009618 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800962a:	d142      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800962c:	4bb2      	ldr	r3, [pc, #712]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800962e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009636:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800963e:	d014      	beq.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009644:	d029      	beq.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8009646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800964a:	d001      	beq.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800964c:	f000 bdc9 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009650:	4ba9      	ldr	r3, [pc, #676]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009656:	f003 0302 	and.w	r3, r3, #2
 800965a:	2b02      	cmp	r3, #2
 800965c:	f040 85ba 	bne.w	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        frequency = LSE_VALUE;
 8009660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009664:	61fb      	str	r3, [r7, #28]
      break;
 8009666:	f000 bdb5 	b.w	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800966a:	4ba3      	ldr	r3, [pc, #652]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800966c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	2b02      	cmp	r3, #2
 8009676:	f040 85af 	bne.w	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
        if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800967a:	4b9f      	ldr	r3, [pc, #636]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800967c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009680:	f003 0310 	and.w	r3, r3, #16
 8009684:	2b10      	cmp	r3, #16
 8009686:	d103      	bne.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = LSI_VALUE/128U;
 8009688:	23fa      	movs	r3, #250	; 0xfa
 800968a:	61fb      	str	r3, [r7, #28]
      break;
 800968c:	f000 bda4 	b.w	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          frequency = LSI_VALUE;
 8009690:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009694:	61fb      	str	r3, [r7, #28]
      break;
 8009696:	f000 bd9f 	b.w	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800969a:	4b97      	ldr	r3, [pc, #604]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096a6:	f040 8599 	bne.w	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
        frequency = HSE_VALUE / 32U;
 80096aa:	4b94      	ldr	r3, [pc, #592]	; (80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80096ac:	61fb      	str	r3, [r7, #28]
      break;
 80096ae:	f000 bd95 	b.w	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80096b2:	4b91      	ldr	r3, [pc, #580]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d023      	beq.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d02e      	beq.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d139      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80096ca:	4b8b      	ldr	r3, [pc, #556]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d116      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80096d6:	4b88      	ldr	r3, [pc, #544]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0308 	and.w	r3, r3, #8
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d005      	beq.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80096e2:	4b85      	ldr	r3, [pc, #532]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	091b      	lsrs	r3, r3, #4
 80096e8:	f003 030f 	and.w	r3, r3, #15
 80096ec:	e005      	b.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 80096ee:	4b82      	ldr	r3, [pc, #520]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80096f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096f4:	0a1b      	lsrs	r3, r3, #8
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	4a81      	ldr	r2, [pc, #516]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80096fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009700:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009702:	e01f      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        pllvco = 0U;
 8009704:	2300      	movs	r3, #0
 8009706:	61bb      	str	r3, [r7, #24]
      break;
 8009708:	e01c      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800970a:	4b7b      	ldr	r3, [pc, #492]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009716:	d102      	bne.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x106>
      {
        pllvco = HSI_VALUE;
 8009718:	4b7a      	ldr	r3, [pc, #488]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800971a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800971c:	e012      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        pllvco = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	61bb      	str	r3, [r7, #24]
      break;
 8009722:	e00f      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009724:	4b74      	ldr	r3, [pc, #464]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800972c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009730:	d102      	bne.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      {
        pllvco = HSE_VALUE;
 8009732:	4b75      	ldr	r3, [pc, #468]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009734:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009736:	e005      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        pllvco = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	61bb      	str	r3, [r7, #24]
      break;
 800973c:	e002      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
    default:
      /* No source */
      pllvco = 0U;
 800973e:	2300      	movs	r3, #0
 8009740:	61bb      	str	r3, [r7, #24]
      break;
 8009742:	bf00      	nop
    }

    switch(PeriphClk)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800974a:	f000 8446 	beq.w	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800974e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009752:	d829      	bhi.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8009754:	2b10      	cmp	r3, #16
 8009756:	f000 82f2 	beq.w	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800975a:	2b10      	cmp	r3, #16
 800975c:	d811      	bhi.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 800975e:	2b02      	cmp	r3, #2
 8009760:	f000 823c 	beq.w	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8009764:	2b02      	cmp	r3, #2
 8009766:	d804      	bhi.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009768:	2b01      	cmp	r3, #1
 800976a:	f000 81f7 	beq.w	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800976e:	f000 bd38 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
    switch(PeriphClk)
 8009772:	2b04      	cmp	r3, #4
 8009774:	f000 827b 	beq.w	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 8009778:	2b08      	cmp	r3, #8
 800977a:	f000 82ac 	beq.w	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
      break;
 800977e:	f000 bd30 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
    switch(PeriphClk)
 8009782:	2b40      	cmp	r3, #64	; 0x40
 8009784:	f000 839f 	beq.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009788:	2b40      	cmp	r3, #64	; 0x40
 800978a:	d804      	bhi.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800978c:	2b20      	cmp	r3, #32
 800978e:	f000 830e 	beq.w	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x796>
      break;
 8009792:	f000 bd26 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
    switch(PeriphClk)
 8009796:	2b80      	cmp	r3, #128	; 0x80
 8009798:	f000 83b8 	beq.w	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 800979c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097a0:	f000 83d7 	beq.w	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
      break;
 80097a4:	f000 bd1d 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
    switch(PeriphClk)
 80097a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097ac:	f000 8337 	beq.w	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
 80097b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097b4:	d813      	bhi.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80097b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097ba:	d02a      	beq.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
 80097bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097c0:	d805      	bhi.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80097c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097c6:	f000 8453 	beq.w	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
      break;
 80097ca:	f000 bd0a 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
    switch(PeriphClk)
 80097ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d2:	d026      	beq.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80097d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097d8:	d02b      	beq.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
      break;
 80097da:	f000 bd02 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
    switch(PeriphClk)
 80097de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80097e2:	f000 80d6 	beq.w	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80097e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80097ea:	d808      	bhi.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80097ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f0:	f000 8358 	beq.w	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80097f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097f8:	d01b      	beq.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
      break;
 80097fa:	f000 bcf2 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
    switch(PeriphClk)
 80097fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009802:	f000 83c9 	beq.w	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800980a:	f000 847c 	beq.w	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      break;
 800980e:	f000 bce8 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009812:	69b9      	ldr	r1, [r7, #24]
 8009814:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009818:	f000 fecc 	bl	800a5b4 <RCCEx_GetSAIxPeriphCLKFreq>
 800981c:	61f8      	str	r0, [r7, #28]
      break;
 800981e:	f000 bce0 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8009822:	69b9      	ldr	r1, [r7, #24]
 8009824:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009828:	f000 fec4 	bl	800a5b4 <RCCEx_GetSAIxPeriphCLKFreq>
 800982c:	61f8      	str	r0, [r7, #28]
      break;
 800982e:	f000 bcd8 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009832:	4b31      	ldr	r3, [pc, #196]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009838:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800983c:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009844:	d062      	beq.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8009846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800984a:	d803      	bhi.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 808a 	beq.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          break;
 8009852:	e09c      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        switch(srcclk)
 8009854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009858:	d021      	beq.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 800985a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800985e:	d000      	beq.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          break;
 8009860:	e095      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009862:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b02      	cmp	r3, #2
 800986c:	f040 8085 	bne.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x362>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009870:	4b21      	ldr	r3, [pc, #132]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0308 	and.w	r3, r3, #8
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 800987c:	4b1e      	ldr	r3, [pc, #120]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	091b      	lsrs	r3, r3, #4
 8009882:	f003 030f 	and.w	r3, r3, #15
 8009886:	e005      	b.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8009888:	4b1b      	ldr	r3, [pc, #108]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800988a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800988e:	0a1b      	lsrs	r3, r3, #8
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	4a1a      	ldr	r2, [pc, #104]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8009896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800989a:	61fb      	str	r3, [r7, #28]
          break;
 800989c:	e06d      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800989e:	4b16      	ldr	r3, [pc, #88]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098aa:	d169      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80098ac:	4b12      	ldr	r3, [pc, #72]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098b8:	d162      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80098ba:	4b0f      	ldr	r3, [pc, #60]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	0a1b      	lsrs	r3, r3, #8
 80098c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	fb02 f203 	mul.w	r2, r2, r3
 80098ce:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	091b      	lsrs	r3, r3, #4
 80098d4:	f003 030f 	and.w	r3, r3, #15
 80098d8:	3301      	adds	r3, #1
 80098da:	fbb2 f3f3 	udiv	r3, r2, r3
 80098de:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80098e0:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	0d5b      	lsrs	r3, r3, #21
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	3301      	adds	r3, #1
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	69ba      	ldr	r2, [r7, #24]
 80098f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f4:	61fb      	str	r3, [r7, #28]
          break;
 80098f6:	e043      	b.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 80098f8:	40021000 	.word	0x40021000
 80098fc:	000b71b0 	.word	0x000b71b0
 8009900:	08011f10 	.word	0x08011f10
 8009904:	00f42400 	.word	0x00f42400
 8009908:	016e3600 	.word	0x016e3600
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800990c:	4baf      	ldr	r3, [pc, #700]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009918:	d135      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800991a:	4bac      	ldr	r3, [pc, #688]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009926:	d12e      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009928:	4ba8      	ldr	r3, [pc, #672]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	0a1b      	lsrs	r3, r3, #8
 800992e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009932:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	fb02 f203 	mul.w	r2, r2, r3
 800993c:	4ba3      	ldr	r3, [pc, #652]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	091b      	lsrs	r3, r3, #4
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	3301      	adds	r3, #1
 8009948:	fbb2 f3f3 	udiv	r3, r2, r3
 800994c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800994e:	4b9f      	ldr	r3, [pc, #636]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	0d5b      	lsrs	r3, r3, #21
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	3301      	adds	r3, #1
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009962:	61fb      	str	r3, [r7, #28]
          break;
 8009964:	e00f      	b.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8009966:	4b99      	ldr	r3, [pc, #612]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800996c:	f003 0302 	and.w	r3, r3, #2
 8009970:	2b02      	cmp	r3, #2
 8009972:	d10b      	bne.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x374>
            frequency = HSI48_VALUE;
 8009974:	4b96      	ldr	r3, [pc, #600]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8009976:	61fb      	str	r3, [r7, #28]
          break;
 8009978:	e008      	b.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x374>
          break;
 800997a:	bf00      	nop
 800997c:	f000 bc31 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 8009980:	bf00      	nop
 8009982:	f000 bc2e 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 8009986:	bf00      	nop
 8009988:	f000 bc2b 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 800998c:	bf00      	nop
        break;
 800998e:	f000 bc28 	b.w	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8009992:	4b8e      	ldr	r3, [pc, #568]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009994:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800999c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099a0:	d13c      	bne.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x404>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80099a2:	4b8a      	ldr	r3, [pc, #552]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099ae:	f040 8417 	bne.w	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80099b2:	4b86      	ldr	r3, [pc, #536]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099be:	f040 840f 	bne.w	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80099c2:	4b82      	ldr	r3, [pc, #520]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	0a1b      	lsrs	r3, r3, #8
 80099c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099cc:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	fb02 f203 	mul.w	r2, r2, r3
 80099d6:	4b7d      	ldr	r3, [pc, #500]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	091b      	lsrs	r3, r3, #4
 80099dc:	f003 030f 	and.w	r3, r3, #15
 80099e0:	3301      	adds	r3, #1
 80099e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e6:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80099e8:	4b78      	ldr	r3, [pc, #480]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	0edb      	lsrs	r3, r3, #27
 80099ee:	f003 031f 	and.w	r3, r3, #31
 80099f2:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80099fa:	4b74      	ldr	r3, [pc, #464]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
                pllp = 17U;
 8009a06:	2311      	movs	r3, #17
 8009a08:	617b      	str	r3, [r7, #20]
 8009a0a:	e001      	b.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
                pllp = 7U;
 8009a0c:	2307      	movs	r3, #7
 8009a0e:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a18:	61fb      	str	r3, [r7, #28]
      break;
 8009a1a:	e3e1      	b.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009a1c:	4b6b      	ldr	r3, [pc, #428]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a22:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009a26:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a2e:	d056      	beq.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8009a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a34:	d802      	bhi.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d07e      	beq.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          break;
 8009a3a:	e08e      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x542>
        switch(srcclk)
 8009a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a40:	d020      	beq.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
 8009a42:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009a46:	d000      	beq.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
          break;
 8009a48:	e087      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x542>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009a4a:	4b60      	ldr	r3, [pc, #384]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 0302 	and.w	r3, r3, #2
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d17a      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009a56:	4b5d      	ldr	r3, [pc, #372]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 0308 	and.w	r3, r3, #8
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d005      	beq.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8009a62:	4b5a      	ldr	r3, [pc, #360]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	091b      	lsrs	r3, r3, #4
 8009a68:	f003 030f 	and.w	r3, r3, #15
 8009a6c:	e005      	b.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8009a6e:	4b57      	ldr	r3, [pc, #348]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a74:	0a1b      	lsrs	r3, r3, #8
 8009a76:	f003 030f 	and.w	r3, r3, #15
 8009a7a:	4a56      	ldr	r2, [pc, #344]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>)
 8009a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a80:	61fb      	str	r3, [r7, #28]
          break;
 8009a82:	e063      	b.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009a84:	4b51      	ldr	r3, [pc, #324]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a90:	d15e      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009a92:	4b4e      	ldr	r3, [pc, #312]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a9e:	d157      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009aa0:	4b4a      	ldr	r3, [pc, #296]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	0a1b      	lsrs	r3, r3, #8
 8009aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aaa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	fb02 f203 	mul.w	r2, r2, r3
 8009ab4:	4b45      	ldr	r3, [pc, #276]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	091b      	lsrs	r3, r3, #4
 8009aba:	f003 030f 	and.w	r3, r3, #15
 8009abe:	3301      	adds	r3, #1
 8009ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009ac6:	4b41      	ldr	r3, [pc, #260]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	0d5b      	lsrs	r3, r3, #21
 8009acc:	f003 0303 	and.w	r3, r3, #3
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	69ba      	ldr	r2, [r7, #24]
 8009ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ada:	61fb      	str	r3, [r7, #28]
          break;
 8009adc:	e038      	b.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8009ade:	4b3b      	ldr	r3, [pc, #236]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009aea:	d133      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8009aec:	4b37      	ldr	r3, [pc, #220]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009af8:	d12c      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009afa:	4b34      	ldr	r3, [pc, #208]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	0a1b      	lsrs	r3, r3, #8
 8009b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b04:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	fb02 f203 	mul.w	r2, r2, r3
 8009b0e:	4b2f      	ldr	r3, [pc, #188]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	091b      	lsrs	r3, r3, #4
 8009b14:	f003 030f 	and.w	r3, r3, #15
 8009b18:	3301      	adds	r3, #1
 8009b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b1e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009b20:	4b2a      	ldr	r3, [pc, #168]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	0d5b      	lsrs	r3, r3, #21
 8009b26:	f003 0303 	and.w	r3, r3, #3
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	005b      	lsls	r3, r3, #1
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b34:	61fb      	str	r3, [r7, #28]
          break;
 8009b36:	e00d      	b.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8009b38:	4b24      	ldr	r3, [pc, #144]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d108      	bne.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
            frequency = HSI48_VALUE;
 8009b46:	4b22      	ldr	r3, [pc, #136]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8009b48:	61fb      	str	r3, [r7, #28]
          break;
 8009b4a:	e005      	b.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          break;
 8009b4c:	bf00      	nop
 8009b4e:	e347      	b.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
          break;
 8009b50:	bf00      	nop
 8009b52:	e345      	b.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
          break;
 8009b54:	bf00      	nop
 8009b56:	e343      	b.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
          break;
 8009b58:	bf00      	nop
      break;
 8009b5a:	e341      	b.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009b5c:	4b1b      	ldr	r3, [pc, #108]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b62:	f003 0303 	and.w	r3, r3, #3
 8009b66:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d827      	bhi.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009b6e:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8009b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b74:	08009b85 	.word	0x08009b85
 8009b78:	08009b8d 	.word	0x08009b8d
 8009b7c:	08009b95 	.word	0x08009b95
 8009b80:	08009ba9 	.word	0x08009ba9
          frequency = HAL_RCC_GetPCLK2Freq();
 8009b84:	f7ff f90c 	bl	8008da0 <HAL_RCC_GetPCLK2Freq>
 8009b88:	61f8      	str	r0, [r7, #28]
          break;
 8009b8a:	e01d      	b.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          frequency = HAL_RCC_GetSysClockFreq();
 8009b8c:	f7ff f85c 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009b90:	61f8      	str	r0, [r7, #28]
          break;
 8009b92:	e019      	b.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b94:	4b0d      	ldr	r3, [pc, #52]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ba0:	d10f      	bne.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSI_VALUE;
 8009ba2:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>)
 8009ba4:	61fb      	str	r3, [r7, #28]
          break;
 8009ba6:	e00c      	b.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009ba8:	4b08      	ldr	r3, [pc, #32]	; (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8009baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d107      	bne.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            frequency = LSE_VALUE;
 8009bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bba:	61fb      	str	r3, [r7, #28]
          break;
 8009bbc:	e003      	b.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
          break;
 8009bbe:	bf00      	nop
 8009bc0:	e30f      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 8009bc2:	bf00      	nop
 8009bc4:	e30d      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 8009bc6:	bf00      	nop
        break;
 8009bc8:	e30b      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
 8009bca:	bf00      	nop
 8009bcc:	40021000 	.word	0x40021000
 8009bd0:	02dc6c00 	.word	0x02dc6c00
 8009bd4:	08011f10 	.word	0x08011f10
 8009bd8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009bdc:	4baf      	ldr	r3, [pc, #700]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be2:	f003 030c 	and.w	r3, r3, #12
 8009be6:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b0c      	cmp	r3, #12
 8009bec:	d839      	bhi.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8009bee:	a201      	add	r2, pc, #4	; (adr r2, 8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8009bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf4:	08009c29 	.word	0x08009c29
 8009bf8:	08009c63 	.word	0x08009c63
 8009bfc:	08009c63 	.word	0x08009c63
 8009c00:	08009c63 	.word	0x08009c63
 8009c04:	08009c31 	.word	0x08009c31
 8009c08:	08009c63 	.word	0x08009c63
 8009c0c:	08009c63 	.word	0x08009c63
 8009c10:	08009c63 	.word	0x08009c63
 8009c14:	08009c39 	.word	0x08009c39
 8009c18:	08009c63 	.word	0x08009c63
 8009c1c:	08009c63 	.word	0x08009c63
 8009c20:	08009c63 	.word	0x08009c63
 8009c24:	08009c4d 	.word	0x08009c4d
          frequency = HAL_RCC_GetPCLK1Freq();
 8009c28:	f7ff f8a4 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 8009c2c:	61f8      	str	r0, [r7, #28]
          break;
 8009c2e:	e01d      	b.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = HAL_RCC_GetSysClockFreq();
 8009c30:	f7ff f80a 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009c34:	61f8      	str	r0, [r7, #28]
          break;
 8009c36:	e019      	b.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c38:	4b98      	ldr	r3, [pc, #608]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c44:	d10f      	bne.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
            frequency = HSI_VALUE;
 8009c46:	4b96      	ldr	r3, [pc, #600]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>)
 8009c48:	61fb      	str	r3, [r7, #28]
          break;
 8009c4a:	e00c      	b.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009c4c:	4b93      	ldr	r3, [pc, #588]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d107      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
            frequency = LSE_VALUE;
 8009c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c5e:	61fb      	str	r3, [r7, #28]
          break;
 8009c60:	e003      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          break;
 8009c62:	bf00      	nop
 8009c64:	e2bd      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 8009c66:	bf00      	nop
 8009c68:	e2bb      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 8009c6a:	bf00      	nop
        break;
 8009c6c:	e2b9      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009c6e:	4b8b      	ldr	r3, [pc, #556]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c78:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b10      	cmp	r3, #16
 8009c7e:	d00d      	beq.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009c80:	2b10      	cmp	r3, #16
 8009c82:	d802      	bhi.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d005      	beq.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
          break;
 8009c88:	e024      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
        switch(srcclk)
 8009c8a:	2b20      	cmp	r3, #32
 8009c8c:	d00a      	beq.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009c8e:	2b30      	cmp	r3, #48	; 0x30
 8009c90:	d012      	beq.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 8009c92:	e01f      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009c94:	f7ff f86e 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 8009c98:	61f8      	str	r0, [r7, #28]
          break;
 8009c9a:	e01b      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
          frequency = HAL_RCC_GetSysClockFreq();
 8009c9c:	f7fe ffd4 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009ca0:	61f8      	str	r0, [r7, #28]
          break;
 8009ca2:	e017      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ca4:	4b7d      	ldr	r3, [pc, #500]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cb0:	d10d      	bne.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
            frequency = HSI_VALUE;
 8009cb2:	4b7b      	ldr	r3, [pc, #492]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>)
 8009cb4:	61fb      	str	r3, [r7, #28]
          break;
 8009cb6:	e00a      	b.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009cb8:	4b78      	ldr	r3, [pc, #480]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d105      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
            frequency = LSE_VALUE;
 8009cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cca:	61fb      	str	r3, [r7, #28]
          break;
 8009ccc:	e001      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
          break;
 8009cce:	bf00      	nop
 8009cd0:	e287      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 8009cd2:	bf00      	nop
        break;
 8009cd4:	e285      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009cd6:	4b71      	ldr	r3, [pc, #452]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cdc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ce0:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b40      	cmp	r3, #64	; 0x40
 8009ce6:	d00d      	beq.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8009ce8:	2b40      	cmp	r3, #64	; 0x40
 8009cea:	d802      	bhi.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8009cf0:	e024      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
        switch(srcclk)
 8009cf2:	2b80      	cmp	r3, #128	; 0x80
 8009cf4:	d00a      	beq.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8009cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8009cf8:	d012      	beq.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
          break;
 8009cfa:	e01f      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009cfc:	f7ff f83a 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 8009d00:	61f8      	str	r0, [r7, #28]
          break;
 8009d02:	e01b      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 8009d04:	f7fe ffa0 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009d08:	61f8      	str	r0, [r7, #28]
          break;
 8009d0a:	e017      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d0c:	4b63      	ldr	r3, [pc, #396]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d18:	d10d      	bne.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 8009d1a:	4b61      	ldr	r3, [pc, #388]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>)
 8009d1c:	61fb      	str	r3, [r7, #28]
          break;
 8009d1e:	e00a      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009d20:	4b5e      	ldr	r3, [pc, #376]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d105      	bne.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 8009d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d32:	61fb      	str	r3, [r7, #28]
          break;
 8009d34:	e001      	b.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8009d36:	bf00      	nop
 8009d38:	e253      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 8009d3a:	bf00      	nop
        break;
 8009d3c:	e251      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009d3e:	4b57      	ldr	r3, [pc, #348]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d48:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d50:	d010      	beq.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8009d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d56:	d802      	bhi.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d007      	beq.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
          break;
 8009d5c:	e026      	b.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        switch(srcclk)
 8009d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d62:	d00b      	beq.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 8009d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d68:	d012      	beq.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          break;
 8009d6a:	e01f      	b.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009d6c:	f7ff f802 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 8009d70:	61f8      	str	r0, [r7, #28]
          break;
 8009d72:	e01b      	b.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
          frequency = HAL_RCC_GetSysClockFreq();
 8009d74:	f7fe ff68 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009d78:	61f8      	str	r0, [r7, #28]
          break;
 8009d7a:	e017      	b.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d7c:	4b47      	ldr	r3, [pc, #284]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d88:	d10d      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            frequency = HSI_VALUE;
 8009d8a:	4b45      	ldr	r3, [pc, #276]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>)
 8009d8c:	61fb      	str	r3, [r7, #28]
          break;
 8009d8e:	e00a      	b.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009d90:	4b42      	ldr	r3, [pc, #264]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d96:	f003 0302 	and.w	r3, r3, #2
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d105      	bne.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            frequency = LSE_VALUE;
 8009d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009da2:	61fb      	str	r3, [r7, #28]
          break;
 8009da4:	e001      	b.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x792>
          break;
 8009da6:	bf00      	nop
 8009da8:	e21b      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 8009daa:	bf00      	nop
        break;
 8009dac:	e219      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009dae:	4b3b      	ldr	r3, [pc, #236]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009db8:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dc0:	d010      	beq.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8009dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dc6:	d802      	bhi.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d007      	beq.n	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          break;
 8009dcc:	e026      	b.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
        switch(srcclk)
 8009dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dd2:	d00b      	beq.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8009dd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009dd8:	d012      	beq.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          break;
 8009dda:	e01f      	b.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009ddc:	f7fe ffca 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 8009de0:	61f8      	str	r0, [r7, #28]
          break;
 8009de2:	e01b      	b.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = HAL_RCC_GetSysClockFreq();
 8009de4:	f7fe ff30 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009de8:	61f8      	str	r0, [r7, #28]
          break;
 8009dea:	e017      	b.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009dec:	4b2b      	ldr	r3, [pc, #172]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009df8:	d10d      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
            frequency = HSI_VALUE;
 8009dfa:	4b29      	ldr	r3, [pc, #164]	; (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>)
 8009dfc:	61fb      	str	r3, [r7, #28]
          break;
 8009dfe:	e00a      	b.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009e00:	4b26      	ldr	r3, [pc, #152]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d105      	bne.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
            frequency = LSE_VALUE;
 8009e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e12:	61fb      	str	r3, [r7, #28]
          break;
 8009e14:	e001      	b.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
          break;
 8009e16:	bf00      	nop
 8009e18:	e1e3      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 8009e1a:	bf00      	nop
        break;
 8009e1c:	e1e1      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009e1e:	4b1f      	ldr	r3, [pc, #124]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e28:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e30:	d007      	beq.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8009e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e36:	d000      	beq.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x822>
          break;
 8009e38:	e02f      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
          frequency = HAL_RCC_GetSysClockFreq();
 8009e3a:	f7fe ff05 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009e3e:	61f8      	str	r0, [r7, #28]
          break;
 8009e40:	e02b      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8009e42:	4b16      	ldr	r3, [pc, #88]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e4e:	d123      	bne.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 8009e50:	4b12      	ldr	r3, [pc, #72]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d01d      	beq.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009e5c:	4b0f      	ldr	r3, [pc, #60]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	0a1b      	lsrs	r3, r3, #8
 8009e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e66:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	fb02 f203 	mul.w	r2, r2, r3
 8009e70:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	091b      	lsrs	r3, r3, #4
 8009e76:	f003 030f 	and.w	r3, r3, #15
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e80:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8009e82:	4b06      	ldr	r3, [pc, #24]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	0e5b      	lsrs	r3, r3, #25
 8009e88:	f003 0303 	and.w	r3, r3, #3
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	005b      	lsls	r3, r3, #1
 8009e90:	69ba      	ldr	r2, [r7, #24]
 8009e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e96:	61fb      	str	r3, [r7, #28]
          break;
 8009e98:	bf00      	nop
        break;
 8009e9a:	e1a2      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
 8009e9c:	40021000 	.word	0x40021000
 8009ea0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8009ea4:	4bab      	ldr	r3, [pc, #684]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009eaa:	f003 0304 	and.w	r3, r3, #4
 8009eae:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d103      	bne.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
          frequency = HAL_RCC_GetPCLK2Freq();
 8009eb6:	f7fe ff73 	bl	8008da0 <HAL_RCC_GetPCLK2Freq>
 8009eba:	61f8      	str	r0, [r7, #28]
        break;
 8009ebc:	e191      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          frequency = HAL_RCC_GetSysClockFreq();
 8009ebe:	f7fe fec3 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009ec2:	61f8      	str	r0, [r7, #28]
        break;
 8009ec4:	e18d      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009ec6:	4ba3      	ldr	r3, [pc, #652]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ecc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ed0:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ed8:	d009      	beq.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ede:	d00a      	beq.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d000      	beq.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8009ee4:	e011      	b.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009ee6:	f7fe ff45 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 8009eea:	61f8      	str	r0, [r7, #28]
          break;
 8009eec:	e00d      	b.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8009eee:	f7fe feab 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009ef2:	61f8      	str	r0, [r7, #28]
          break;
 8009ef4:	e009      	b.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ef6:	4b97      	ldr	r3, [pc, #604]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f02:	d101      	bne.n	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8009f04:	4b94      	ldr	r3, [pc, #592]	; (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8009f06:	61fb      	str	r3, [r7, #28]
          break;
 8009f08:	bf00      	nop
        break;
 8009f0a:	e16a      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009f0c:	4b91      	ldr	r3, [pc, #580]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009f16:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f1e:	d009      	beq.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8009f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f24:	d00a      	beq.n	8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d000      	beq.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 8009f2a:	e011      	b.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009f2c:	f7fe ff22 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 8009f30:	61f8      	str	r0, [r7, #28]
          break;
 8009f32:	e00d      	b.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          frequency = HAL_RCC_GetSysClockFreq();
 8009f34:	f7fe fe88 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009f38:	61f8      	str	r0, [r7, #28]
          break;
 8009f3a:	e009      	b.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f3c:	4b85      	ldr	r3, [pc, #532]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f48:	d101      	bne.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 8009f4a:	4b83      	ldr	r3, [pc, #524]	; (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8009f4c:	61fb      	str	r3, [r7, #28]
          break;
 8009f4e:	bf00      	nop
        break;
 8009f50:	e147      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009f52:	4b80      	ldr	r3, [pc, #512]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009f5c:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f64:	d009      	beq.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8009f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f6a:	d00a      	beq.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d000      	beq.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
          break;
 8009f70:	e011      	b.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009f72:	f7fe feff 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 8009f76:	61f8      	str	r0, [r7, #28]
          break;
 8009f78:	e00d      	b.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
          frequency = HAL_RCC_GetSysClockFreq();
 8009f7a:	f7fe fe65 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009f7e:	61f8      	str	r0, [r7, #28]
          break;
 8009f80:	e009      	b.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f82:	4b74      	ldr	r3, [pc, #464]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f8e:	d101      	bne.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
            frequency = HSI_VALUE;
 8009f90:	4b71      	ldr	r3, [pc, #452]	; (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8009f92:	61fb      	str	r3, [r7, #28]
          break;
 8009f94:	bf00      	nop
        break;
 8009f96:	e124      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009f98:	4b6e      	ldr	r3, [pc, #440]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d008      	beq.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d302      	bcc.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d008      	beq.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
          break;
 8009fb2:	e011      	b.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009fb4:	f7fe fede 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 8009fb8:	61f8      	str	r0, [r7, #28]
          break;
 8009fba:	e00d      	b.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c0>
          frequency = HAL_RCC_GetSysClockFreq();
 8009fbc:	f7fe fe44 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8009fc0:	61f8      	str	r0, [r7, #28]
          break;
 8009fc2:	e009      	b.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fc4:	4b63      	ldr	r3, [pc, #396]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fd0:	d101      	bne.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
            frequency = HSI_VALUE;
 8009fd2:	4b61      	ldr	r3, [pc, #388]	; (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8009fd4:	61fb      	str	r3, [r7, #28]
          break;
 8009fd6:	bf00      	nop
        break;
 8009fd8:	e103      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009fda:	4b5e      	ldr	r3, [pc, #376]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009fe4:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fec:	d010      	beq.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
 8009fee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ff2:	d802      	bhi.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d007      	beq.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
          break;
 8009ff8:	e039      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        switch(srcclk)
 8009ffa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ffe:	d01c      	beq.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 800a000:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a004:	d023      	beq.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
          break;
 800a006:	e032      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a008:	f7fe feb4 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 800a00c:	61f8      	str	r0, [r7, #28]
          break;
 800a00e:	e02e      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a010:	4b50      	ldr	r3, [pc, #320]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d122      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800a01e:	4b4d      	ldr	r3, [pc, #308]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a024:	f003 0310 	and.w	r3, r3, #16
 800a028:	2b10      	cmp	r3, #16
 800a02a:	d102      	bne.n	800a032 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
              frequency = LSI_VALUE/128U;
 800a02c:	23fa      	movs	r3, #250	; 0xfa
 800a02e:	61fb      	str	r3, [r7, #28]
          break;
 800a030:	e018      	b.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
              frequency = LSI_VALUE;
 800a032:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a036:	61fb      	str	r3, [r7, #28]
          break;
 800a038:	e014      	b.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a03a:	4b46      	ldr	r3, [pc, #280]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a046:	d10f      	bne.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
            frequency = HSI_VALUE;
 800a048:	4b43      	ldr	r3, [pc, #268]	; (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a04a:	61fb      	str	r3, [r7, #28]
          break;
 800a04c:	e00c      	b.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a04e:	4b41      	ldr	r3, [pc, #260]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a054:	f003 0302 	and.w	r3, r3, #2
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d107      	bne.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
            frequency = LSE_VALUE;
 800a05c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a060:	61fb      	str	r3, [r7, #28]
          break;
 800a062:	e003      	b.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
          break;
 800a064:	bf00      	nop
 800a066:	e0bc      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 800a068:	bf00      	nop
 800a06a:	e0ba      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 800a06c:	bf00      	nop
        break;
 800a06e:	e0b8      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a070:	4b38      	ldr	r3, [pc, #224]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a076:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a07a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a082:	d010      	beq.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 800a084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a088:	d802      	bhi.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d007      	beq.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          break;
 800a08e:	e039      	b.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        switch(srcclk)
 800a090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a094:	d01c      	beq.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800a096:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a09a:	d023      	beq.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>
          break;
 800a09c:	e032      	b.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a09e:	f7fe fe69 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 800a0a2:	61f8      	str	r0, [r7, #28]
          break;
 800a0a4:	e02e      	b.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a0a6:	4b2b      	ldr	r3, [pc, #172]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a0a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d122      	bne.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
            if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800a0b4:	4b27      	ldr	r3, [pc, #156]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a0b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0ba:	f003 0310 	and.w	r3, r3, #16
 800a0be:	2b10      	cmp	r3, #16
 800a0c0:	d102      	bne.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
              frequency = LSI_VALUE/128U;
 800a0c2:	23fa      	movs	r3, #250	; 0xfa
 800a0c4:	61fb      	str	r3, [r7, #28]
          break;
 800a0c6:	e018      	b.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
              frequency = LSI_VALUE;
 800a0c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a0cc:	61fb      	str	r3, [r7, #28]
          break;
 800a0ce:	e014      	b.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0d0:	4b20      	ldr	r3, [pc, #128]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0dc:	d10f      	bne.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
            frequency = HSI_VALUE;
 800a0de:	4b1e      	ldr	r3, [pc, #120]	; (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a0e0:	61fb      	str	r3, [r7, #28]
          break;
 800a0e2:	e00c      	b.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a0e4:	4b1b      	ldr	r3, [pc, #108]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d107      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
            frequency = LSE_VALUE;
 800a0f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0f6:	61fb      	str	r3, [r7, #28]
          break;
 800a0f8:	e003      	b.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
          break;
 800a0fa:	bf00      	nop
 800a0fc:	e071      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 800a0fe:	bf00      	nop
 800a100:	e06f      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 800a102:	bf00      	nop
        break;
 800a104:	e06d      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a106:	4b13      	ldr	r3, [pc, #76]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a108:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a10c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a110:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a118:	d009      	beq.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 800a11a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a11e:	d028      	beq.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800a120:	2b00      	cmp	r3, #0
 800a122:	d000      	beq.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          break;
 800a124:	e055      	b.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = HAL_RCC_GetSysClockFreq();
 800a126:	f7fe fd8f 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800a12a:	61f8      	str	r0, [r7, #28]
          break;
 800a12c:	e051      	b.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a12e:	4b09      	ldr	r3, [pc, #36]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	2b02      	cmp	r3, #2
 800a138:	d148      	bne.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a13a:	4b06      	ldr	r3, [pc, #24]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0308 	and.w	r3, r3, #8
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00a      	beq.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
 800a146:	4b03      	ldr	r3, [pc, #12]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	091b      	lsrs	r3, r3, #4
 800a14c:	f003 030f 	and.w	r3, r3, #15
 800a150:	e00a      	b.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800a152:	bf00      	nop
 800a154:	40021000 	.word	0x40021000
 800a158:	00f42400 	.word	0x00f42400
 800a15c:	4b23      	ldr	r3, [pc, #140]	; (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>)
 800a15e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a162:	0a1b      	lsrs	r3, r3, #8
 800a164:	f003 030f 	and.w	r3, r3, #15
 800a168:	4a21      	ldr	r2, [pc, #132]	; (800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>)
 800a16a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a16e:	61fb      	str	r3, [r7, #28]
          break;
 800a170:	e02c      	b.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a172:	4b1e      	ldr	r3, [pc, #120]	; (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a17a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a17e:	d127      	bne.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a180:	4b1a      	ldr	r3, [pc, #104]	; (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>)
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a18c:	d120      	bne.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a18e:	4b17      	ldr	r3, [pc, #92]	; (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>)
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	0a1b      	lsrs	r3, r3, #8
 800a194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a198:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	fb02 f203 	mul.w	r2, r2, r3
 800a1a2:	4b12      	ldr	r3, [pc, #72]	; (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>)
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	091b      	lsrs	r3, r3, #4
 800a1a8:	f003 030f 	and.w	r3, r3, #15
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a1b4:	4b0d      	ldr	r3, [pc, #52]	; (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>)
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	0d5b      	lsrs	r3, r3, #21
 800a1ba:	f003 0303 	and.w	r3, r3, #3
 800a1be:	3301      	adds	r3, #1
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	69ba      	ldr	r2, [r7, #24]
 800a1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c8:	61fb      	str	r3, [r7, #28]
          break;
 800a1ca:	e001      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          break;
 800a1cc:	bf00      	nop
 800a1ce:	e008      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
          break;
 800a1d0:	bf00      	nop
        break;
 800a1d2:	e006      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
      break;
 800a1d4:	bf00      	nop
 800a1d6:	e004      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
      break;
 800a1d8:	bf00      	nop
 800a1da:	e002      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
      break;
 800a1dc:	bf00      	nop
 800a1de:	e000      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
      break;
 800a1e0:	bf00      	nop
    }
  }

  return(frequency);
 800a1e2:	69fb      	ldr	r3, [r7, #28]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3720      	adds	r7, #32
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	40021000 	.word	0x40021000
 800a1f0:	08011f10 	.word	0x08011f10

0800a1f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a202:	4b70      	ldr	r3, [pc, #448]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00e      	beq.n	800a22c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a20e:	4b6d      	ldr	r3, [pc, #436]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	f003 0203 	and.w	r2, r3, #3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d103      	bne.n	800a226 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
       ||
 800a222:	2b00      	cmp	r3, #0
 800a224:	d13f      	bne.n	800a2a6 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	73fb      	strb	r3, [r7, #15]
 800a22a:	e03c      	b.n	800a2a6 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b02      	cmp	r3, #2
 800a232:	d00c      	beq.n	800a24e <RCCEx_PLLSAI1_Config+0x5a>
 800a234:	2b03      	cmp	r3, #3
 800a236:	d013      	beq.n	800a260 <RCCEx_PLLSAI1_Config+0x6c>
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d120      	bne.n	800a27e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a23c:	4b61      	ldr	r3, [pc, #388]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0302 	and.w	r3, r3, #2
 800a244:	2b00      	cmp	r3, #0
 800a246:	d11d      	bne.n	800a284 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a24c:	e01a      	b.n	800a284 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a24e:	4b5d      	ldr	r3, [pc, #372]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a256:	2b00      	cmp	r3, #0
 800a258:	d116      	bne.n	800a288 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a25e:	e013      	b.n	800a288 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a260:	4b58      	ldr	r3, [pc, #352]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10f      	bne.n	800a28c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a26c:	4b55      	ldr	r3, [pc, #340]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d109      	bne.n	800a28c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a27c:	e006      	b.n	800a28c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	73fb      	strb	r3, [r7, #15]
      break;
 800a282:	e004      	b.n	800a28e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800a284:	bf00      	nop
 800a286:	e002      	b.n	800a28e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800a288:	bf00      	nop
 800a28a:	e000      	b.n	800a28e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800a28c:	bf00      	nop
    }

    if(status == HAL_OK)
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d108      	bne.n	800a2a6 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800a294:	4b4b      	ldr	r3, [pc, #300]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f023 0203 	bic.w	r2, r3, #3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4948      	ldr	r1, [pc, #288]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f040 8086 	bne.w	800a3ba <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a2ae:	4b45      	ldr	r3, [pc, #276]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a44      	ldr	r2, [pc, #272]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a2b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a2b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2ba:	f7fa fc2d 	bl	8004b18 <HAL_GetTick>
 800a2be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a2c0:	e009      	b.n	800a2d6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a2c2:	f7fa fc29 	bl	8004b18 <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d902      	bls.n	800a2d6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	73fb      	strb	r3, [r7, #15]
        break;
 800a2d4:	e005      	b.n	800a2e2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a2d6:	4b3b      	ldr	r3, [pc, #236]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1ef      	bne.n	800a2c2 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d168      	bne.n	800a3ba <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d113      	bne.n	800a316 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a2ee:	4b35      	ldr	r3, [pc, #212]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a2f0:	691a      	ldr	r2, [r3, #16]
 800a2f2:	4b35      	ldr	r3, [pc, #212]	; (800a3c8 <RCCEx_PLLSAI1_Config+0x1d4>)
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6892      	ldr	r2, [r2, #8]
 800a2fa:	0211      	lsls	r1, r2, #8
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	68d2      	ldr	r2, [r2, #12]
 800a300:	06d2      	lsls	r2, r2, #27
 800a302:	4311      	orrs	r1, r2
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6852      	ldr	r2, [r2, #4]
 800a308:	3a01      	subs	r2, #1
 800a30a:	0112      	lsls	r2, r2, #4
 800a30c:	430a      	orrs	r2, r1
 800a30e:	492d      	ldr	r1, [pc, #180]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a310:	4313      	orrs	r3, r2
 800a312:	610b      	str	r3, [r1, #16]
 800a314:	e02d      	b.n	800a372 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d115      	bne.n	800a348 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a31c:	4b29      	ldr	r3, [pc, #164]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a31e:	691a      	ldr	r2, [r3, #16]
 800a320:	4b2a      	ldr	r3, [pc, #168]	; (800a3cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800a322:	4013      	ands	r3, r2
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	6892      	ldr	r2, [r2, #8]
 800a328:	0211      	lsls	r1, r2, #8
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	6912      	ldr	r2, [r2, #16]
 800a32e:	0852      	lsrs	r2, r2, #1
 800a330:	3a01      	subs	r2, #1
 800a332:	0552      	lsls	r2, r2, #21
 800a334:	4311      	orrs	r1, r2
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	6852      	ldr	r2, [r2, #4]
 800a33a:	3a01      	subs	r2, #1
 800a33c:	0112      	lsls	r2, r2, #4
 800a33e:	430a      	orrs	r2, r1
 800a340:	4920      	ldr	r1, [pc, #128]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a342:	4313      	orrs	r3, r2
 800a344:	610b      	str	r3, [r1, #16]
 800a346:	e014      	b.n	800a372 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a348:	4b1e      	ldr	r3, [pc, #120]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a34a:	691a      	ldr	r2, [r3, #16]
 800a34c:	4b20      	ldr	r3, [pc, #128]	; (800a3d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a34e:	4013      	ands	r3, r2
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	6892      	ldr	r2, [r2, #8]
 800a354:	0211      	lsls	r1, r2, #8
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	6952      	ldr	r2, [r2, #20]
 800a35a:	0852      	lsrs	r2, r2, #1
 800a35c:	3a01      	subs	r2, #1
 800a35e:	0652      	lsls	r2, r2, #25
 800a360:	4311      	orrs	r1, r2
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	6852      	ldr	r2, [r2, #4]
 800a366:	3a01      	subs	r2, #1
 800a368:	0112      	lsls	r2, r2, #4
 800a36a:	430a      	orrs	r2, r1
 800a36c:	4915      	ldr	r1, [pc, #84]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a372:	4b14      	ldr	r3, [pc, #80]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a13      	ldr	r2, [pc, #76]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a378:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a37c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a37e:	f7fa fbcb 	bl	8004b18 <HAL_GetTick>
 800a382:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a384:	e009      	b.n	800a39a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a386:	f7fa fbc7 	bl	8004b18 <HAL_GetTick>
 800a38a:	4602      	mov	r2, r0
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	2b02      	cmp	r3, #2
 800a392:	d902      	bls.n	800a39a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800a394:	2303      	movs	r3, #3
 800a396:	73fb      	strb	r3, [r7, #15]
          break;
 800a398:	e005      	b.n	800a3a6 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a39a:	4b0a      	ldr	r3, [pc, #40]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d0ef      	beq.n	800a386 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d106      	bne.n	800a3ba <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a3ac:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a3ae:	691a      	ldr	r2, [r3, #16]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	4903      	ldr	r1, [pc, #12]	; (800a3c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	40021000 	.word	0x40021000
 800a3c8:	07ff800f 	.word	0x07ff800f
 800a3cc:	ff9f800f 	.word	0xff9f800f
 800a3d0:	f9ff800f 	.word	0xf9ff800f

0800a3d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a3e2:	4b70      	ldr	r3, [pc, #448]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	f003 0303 	and.w	r3, r3, #3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00e      	beq.n	800a40c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a3ee:	4b6d      	ldr	r3, [pc, #436]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	f003 0203 	and.w	r2, r3, #3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d103      	bne.n	800a406 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
       ||
 800a402:	2b00      	cmp	r3, #0
 800a404:	d13f      	bne.n	800a486 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	73fb      	strb	r3, [r7, #15]
 800a40a:	e03c      	b.n	800a486 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b02      	cmp	r3, #2
 800a412:	d00c      	beq.n	800a42e <RCCEx_PLLSAI2_Config+0x5a>
 800a414:	2b03      	cmp	r3, #3
 800a416:	d013      	beq.n	800a440 <RCCEx_PLLSAI2_Config+0x6c>
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d120      	bne.n	800a45e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a41c:	4b61      	ldr	r3, [pc, #388]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0302 	and.w	r3, r3, #2
 800a424:	2b00      	cmp	r3, #0
 800a426:	d11d      	bne.n	800a464 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a42c:	e01a      	b.n	800a464 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a42e:	4b5d      	ldr	r3, [pc, #372]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a436:	2b00      	cmp	r3, #0
 800a438:	d116      	bne.n	800a468 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a43e:	e013      	b.n	800a468 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a440:	4b58      	ldr	r3, [pc, #352]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10f      	bne.n	800a46c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a44c:	4b55      	ldr	r3, [pc, #340]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d109      	bne.n	800a46c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a45c:	e006      	b.n	800a46c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	73fb      	strb	r3, [r7, #15]
      break;
 800a462:	e004      	b.n	800a46e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800a464:	bf00      	nop
 800a466:	e002      	b.n	800a46e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800a468:	bf00      	nop
 800a46a:	e000      	b.n	800a46e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800a46c:	bf00      	nop
    }

    if(status == HAL_OK)
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d108      	bne.n	800a486 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800a474:	4b4b      	ldr	r3, [pc, #300]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f023 0203 	bic.w	r2, r3, #3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4948      	ldr	r1, [pc, #288]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a482:	4313      	orrs	r3, r2
 800a484:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f040 8086 	bne.w	800a59a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a48e:	4b45      	ldr	r3, [pc, #276]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a44      	ldr	r2, [pc, #272]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a49a:	f7fa fb3d 	bl	8004b18 <HAL_GetTick>
 800a49e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a4a0:	e009      	b.n	800a4b6 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a4a2:	f7fa fb39 	bl	8004b18 <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d902      	bls.n	800a4b6 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	73fb      	strb	r3, [r7, #15]
        break;
 800a4b4:	e005      	b.n	800a4c2 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a4b6:	4b3b      	ldr	r3, [pc, #236]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1ef      	bne.n	800a4a2 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d168      	bne.n	800a59a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d113      	bne.n	800a4f6 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a4ce:	4b35      	ldr	r3, [pc, #212]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a4d0:	695a      	ldr	r2, [r3, #20]
 800a4d2:	4b35      	ldr	r3, [pc, #212]	; (800a5a8 <RCCEx_PLLSAI2_Config+0x1d4>)
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	6892      	ldr	r2, [r2, #8]
 800a4da:	0211      	lsls	r1, r2, #8
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	68d2      	ldr	r2, [r2, #12]
 800a4e0:	06d2      	lsls	r2, r2, #27
 800a4e2:	4311      	orrs	r1, r2
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	6852      	ldr	r2, [r2, #4]
 800a4e8:	3a01      	subs	r2, #1
 800a4ea:	0112      	lsls	r2, r2, #4
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	492d      	ldr	r1, [pc, #180]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	614b      	str	r3, [r1, #20]
 800a4f4:	e02d      	b.n	800a552 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d115      	bne.n	800a528 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a4fc:	4b29      	ldr	r3, [pc, #164]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a4fe:	695a      	ldr	r2, [r3, #20]
 800a500:	4b2a      	ldr	r3, [pc, #168]	; (800a5ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800a502:	4013      	ands	r3, r2
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	6892      	ldr	r2, [r2, #8]
 800a508:	0211      	lsls	r1, r2, #8
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6912      	ldr	r2, [r2, #16]
 800a50e:	0852      	lsrs	r2, r2, #1
 800a510:	3a01      	subs	r2, #1
 800a512:	0552      	lsls	r2, r2, #21
 800a514:	4311      	orrs	r1, r2
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	6852      	ldr	r2, [r2, #4]
 800a51a:	3a01      	subs	r2, #1
 800a51c:	0112      	lsls	r2, r2, #4
 800a51e:	430a      	orrs	r2, r1
 800a520:	4920      	ldr	r1, [pc, #128]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a522:	4313      	orrs	r3, r2
 800a524:	614b      	str	r3, [r1, #20]
 800a526:	e014      	b.n	800a552 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a528:	4b1e      	ldr	r3, [pc, #120]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a52a:	695a      	ldr	r2, [r3, #20]
 800a52c:	4b20      	ldr	r3, [pc, #128]	; (800a5b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800a52e:	4013      	ands	r3, r2
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	6892      	ldr	r2, [r2, #8]
 800a534:	0211      	lsls	r1, r2, #8
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	6952      	ldr	r2, [r2, #20]
 800a53a:	0852      	lsrs	r2, r2, #1
 800a53c:	3a01      	subs	r2, #1
 800a53e:	0652      	lsls	r2, r2, #25
 800a540:	4311      	orrs	r1, r2
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	6852      	ldr	r2, [r2, #4]
 800a546:	3a01      	subs	r2, #1
 800a548:	0112      	lsls	r2, r2, #4
 800a54a:	430a      	orrs	r2, r1
 800a54c:	4915      	ldr	r1, [pc, #84]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a54e:	4313      	orrs	r3, r2
 800a550:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a552:	4b14      	ldr	r3, [pc, #80]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a13      	ldr	r2, [pc, #76]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a55c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a55e:	f7fa fadb 	bl	8004b18 <HAL_GetTick>
 800a562:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a564:	e009      	b.n	800a57a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a566:	f7fa fad7 	bl	8004b18 <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	2b02      	cmp	r3, #2
 800a572:	d902      	bls.n	800a57a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	73fb      	strb	r3, [r7, #15]
          break;
 800a578:	e005      	b.n	800a586 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a57a:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d0ef      	beq.n	800a566 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800a586:	7bfb      	ldrb	r3, [r7, #15]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d106      	bne.n	800a59a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a58e:	695a      	ldr	r2, [r3, #20]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	4903      	ldr	r1, [pc, #12]	; (800a5a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800a596:	4313      	orrs	r3, r2
 800a598:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	40021000 	.word	0x40021000
 800a5a8:	07ff800f 	.word	0x07ff800f
 800a5ac:	ff9f800f 	.word	0xff9f800f
 800a5b0:	f9ff800f 	.word	0xf9ff800f

0800a5b4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b089      	sub	sp, #36	; 0x24
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5d0:	d10b      	bne.n	800a5ea <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a5d2:	4b7e      	ldr	r3, [pc, #504]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a5d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a5d8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a5dc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	2b60      	cmp	r3, #96	; 0x60
 800a5e2:	d112      	bne.n	800a60a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a5e4:	4b7a      	ldr	r3, [pc, #488]	; (800a7d0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800a5e6:	61fb      	str	r3, [r7, #28]
 800a5e8:	e00f      	b.n	800a60a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f0:	d10b      	bne.n	800a60a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a5f2:	4b76      	ldr	r3, [pc, #472]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a5f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a5f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5fc:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a604:	d101      	bne.n	800a60a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800a606:	4b72      	ldr	r3, [pc, #456]	; (800a7d0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800a608:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f040 80d6 	bne.w	800a7be <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	2b40      	cmp	r3, #64	; 0x40
 800a61a:	d003      	beq.n	800a624 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a622:	d13b      	bne.n	800a69c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a624:	4b69      	ldr	r3, [pc, #420]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a62c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a630:	f040 80c4 	bne.w	800a7bc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800a634:	4b65      	ldr	r3, [pc, #404]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 80bd 	beq.w	800a7bc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a642:	4b62      	ldr	r3, [pc, #392]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	091b      	lsrs	r3, r3, #4
 800a648:	f003 030f 	and.w	r3, r3, #15
 800a64c:	3301      	adds	r3, #1
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	fbb2 f3f3 	udiv	r3, r2, r3
 800a654:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a656:	4b5d      	ldr	r3, [pc, #372]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	0a1b      	lsrs	r3, r3, #8
 800a65c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a660:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a662:	4b5a      	ldr	r3, [pc, #360]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	0edb      	lsrs	r3, r3, #27
 800a668:	f003 031f 	and.w	r3, r3, #31
 800a66c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10a      	bne.n	800a68a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a674:	4b55      	ldr	r3, [pc, #340]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800a680:	2311      	movs	r3, #17
 800a682:	617b      	str	r3, [r7, #20]
 800a684:	e001      	b.n	800a68a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800a686:	2307      	movs	r3, #7
 800a688:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	fb02 f203 	mul.w	r2, r2, r3
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	fbb2 f3f3 	udiv	r3, r2, r3
 800a698:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a69a:	e08f      	b.n	800a7bc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d13a      	bne.n	800a718 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800a6a2:	4b4a      	ldr	r3, [pc, #296]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6ae:	f040 8086 	bne.w	800a7be <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800a6b2:	4b46      	ldr	r3, [pc, #280]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d07f      	beq.n	800a7be <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a6be:	4b43      	ldr	r3, [pc, #268]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	091b      	lsrs	r3, r3, #4
 800a6c4:	f003 030f 	and.w	r3, r3, #15
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	693a      	ldr	r2, [r7, #16]
 800a6cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a6d2:	4b3e      	ldr	r3, [pc, #248]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	0a1b      	lsrs	r3, r3, #8
 800a6d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6dc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800a6de:	4b3b      	ldr	r3, [pc, #236]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	0edb      	lsrs	r3, r3, #27
 800a6e4:	f003 031f 	and.w	r3, r3, #31
 800a6e8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800a6f0:	4b36      	ldr	r3, [pc, #216]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800a6fc:	2311      	movs	r3, #17
 800a6fe:	617b      	str	r3, [r7, #20]
 800a700:	e001      	b.n	800a706 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800a702:	2307      	movs	r3, #7
 800a704:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	fb02 f203 	mul.w	r2, r2, r3
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	fbb2 f3f3 	udiv	r3, r2, r3
 800a714:	61fb      	str	r3, [r7, #28]
 800a716:	e052      	b.n	800a7be <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	2b80      	cmp	r3, #128	; 0x80
 800a71c:	d003      	beq.n	800a726 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a724:	d109      	bne.n	800a73a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a726:	4b29      	ldr	r3, [pc, #164]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a72e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a732:	d144      	bne.n	800a7be <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800a734:	4b27      	ldr	r3, [pc, #156]	; (800a7d4 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800a736:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a738:	e041      	b.n	800a7be <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	2b20      	cmp	r3, #32
 800a73e:	d003      	beq.n	800a748 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a746:	d13a      	bne.n	800a7be <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800a748:	4b20      	ldr	r3, [pc, #128]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a754:	d133      	bne.n	800a7be <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800a756:	4b1d      	ldr	r3, [pc, #116]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d02d      	beq.n	800a7be <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800a762:	4b1a      	ldr	r3, [pc, #104]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	091b      	lsrs	r3, r3, #4
 800a768:	f003 030f 	and.w	r3, r3, #15
 800a76c:	3301      	adds	r3, #1
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	fbb2 f3f3 	udiv	r3, r2, r3
 800a774:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a776:	4b15      	ldr	r3, [pc, #84]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	0a1b      	lsrs	r3, r3, #8
 800a77c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a780:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800a782:	4b12      	ldr	r3, [pc, #72]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	0edb      	lsrs	r3, r3, #27
 800a788:	f003 031f 	and.w	r3, r3, #31
 800a78c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10a      	bne.n	800a7aa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800a794:	4b0d      	ldr	r3, [pc, #52]	; (800a7cc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800a7a0:	2311      	movs	r3, #17
 800a7a2:	617b      	str	r3, [r7, #20]
 800a7a4:	e001      	b.n	800a7aa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800a7a6:	2307      	movs	r3, #7
 800a7a8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	fb02 f203 	mul.w	r2, r2, r3
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b8:	61fb      	str	r3, [r7, #28]
 800a7ba:	e000      	b.n	800a7be <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a7bc:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800a7be:	69fb      	ldr	r3, [r7, #28]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3724      	adds	r7, #36	; 0x24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	40021000 	.word	0x40021000
 800a7d0:	001fff68 	.word	0x001fff68
 800a7d4:	00f42400 	.word	0x00f42400

0800a7d8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08a      	sub	sp, #40	; 0x28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e1c5      	b.n	800ab76 <HAL_SAI_Init+0x39e>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d10e      	bne.n	800a812 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a80      	ldr	r2, [pc, #512]	; (800a9fc <HAL_SAI_Init+0x224>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d107      	bne.n	800a80e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800a802:	2b01      	cmp	r3, #1
 800a804:	d103      	bne.n	800a80e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e1b1      	b.n	800ab76 <HAL_SAI_Init+0x39e>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d106      	bne.n	800a82c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7f9 ffac 	bl	8004784 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f9af 	bl	800ab90 <SAI_Disable>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e19c      	b.n	800ab76 <HAL_SAI_Init+0x39e>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2202      	movs	r2, #2
 800a840:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d007      	beq.n	800a85c <HAL_SAI_Init+0x84>
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d302      	bcc.n	800a856 <HAL_SAI_Init+0x7e>
 800a850:	2b02      	cmp	r3, #2
 800a852:	d006      	beq.n	800a862 <HAL_SAI_Init+0x8a>
 800a854:	e008      	b.n	800a868 <HAL_SAI_Init+0x90>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a85a:	e008      	b.n	800a86e <HAL_SAI_Init+0x96>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a85c:	2310      	movs	r3, #16
 800a85e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a860:	e005      	b.n	800a86e <HAL_SAI_Init+0x96>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a862:	2320      	movs	r3, #32
 800a864:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a866:	e002      	b.n	800a86e <HAL_SAI_Init+0x96>
    default :
      tmpregisterGCR = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a86c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	2b03      	cmp	r3, #3
 800a874:	d81d      	bhi.n	800a8b2 <HAL_SAI_Init+0xda>
 800a876:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <HAL_SAI_Init+0xa4>)
 800a878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87c:	0800a88d 	.word	0x0800a88d
 800a880:	0800a893 	.word	0x0800a893
 800a884:	0800a89b 	.word	0x0800a89b
 800a888:	0800a8a3 	.word	0x0800a8a3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	61fb      	str	r3, [r7, #28]
      break;
 800a890:	e012      	b.n	800a8b8 <HAL_SAI_Init+0xe0>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a896:	61fb      	str	r3, [r7, #28]
      break;
 800a898:	e00e      	b.n	800a8b8 <HAL_SAI_Init+0xe0>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a89a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a89e:	61fb      	str	r3, [r7, #28]
      break;
 800a8a0:	e00a      	b.n	800a8b8 <HAL_SAI_Init+0xe0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a8a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8a6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	f043 0301 	orr.w	r3, r3, #1
 800a8ae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a8b0:	e002      	b.n	800a8b8 <HAL_SAI_Init+0xe0>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	61fb      	str	r3, [r7, #28]
      break;
 800a8b6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a4f      	ldr	r2, [pc, #316]	; (800a9fc <HAL_SAI_Init+0x224>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d004      	beq.n	800a8cc <HAL_SAI_Init+0xf4>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a4e      	ldr	r2, [pc, #312]	; (800aa00 <HAL_SAI_Init+0x228>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d103      	bne.n	800a8d4 <HAL_SAI_Init+0xfc>
  {
    SAI1->GCR = tmpregisterGCR;
 800a8cc:	4a4d      	ldr	r2, [pc, #308]	; (800aa04 <HAL_SAI_Init+0x22c>)
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	6013      	str	r3, [r2, #0]
 800a8d2:	e002      	b.n	800a8da <HAL_SAI_Init+0x102>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a8d4:	4a4c      	ldr	r2, [pc, #304]	; (800aa08 <HAL_SAI_Init+0x230>)
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	69db      	ldr	r3, [r3, #28]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d073      	beq.n	800a9ca <HAL_SAI_Init+0x1f2>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a45      	ldr	r2, [pc, #276]	; (800a9fc <HAL_SAI_Init+0x224>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d004      	beq.n	800a8f6 <HAL_SAI_Init+0x11e>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a43      	ldr	r2, [pc, #268]	; (800aa00 <HAL_SAI_Init+0x228>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d105      	bne.n	800a902 <HAL_SAI_Init+0x12a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a8f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a8fa:	f7fe fe8d 	bl	8009618 <HAL_RCCEx_GetPeriphCLKFreq>
 800a8fe:	61b8      	str	r0, [r7, #24]
 800a900:	e004      	b.n	800a90c <HAL_SAI_Init+0x134>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a902:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a906:	f7fe fe87 	bl	8009618 <HAL_RCCEx_GetPeriphCLKFreq>
 800a90a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a914:	d120      	bne.n	800a958 <HAL_SAI_Init+0x180>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91a:	2b04      	cmp	r3, #4
 800a91c:	d102      	bne.n	800a924 <HAL_SAI_Init+0x14c>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800a91e:	2340      	movs	r3, #64	; 0x40
 800a920:	613b      	str	r3, [r7, #16]
 800a922:	e00a      	b.n	800a93a <HAL_SAI_Init+0x162>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a928:	2b08      	cmp	r3, #8
 800a92a:	d103      	bne.n	800a934 <HAL_SAI_Init+0x15c>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800a92c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a930:	613b      	str	r3, [r7, #16]
 800a932:	e002      	b.n	800a93a <HAL_SAI_Init+0x162>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a938:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	4613      	mov	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	4619      	mov	r1, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	69db      	ldr	r3, [r3, #28]
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	fb02 f303 	mul.w	r3, r2, r3
 800a950:	fbb1 f3f3 	udiv	r3, r1, r3
 800a954:	617b      	str	r3, [r7, #20]
 800a956:	e017      	b.n	800a988 <HAL_SAI_Init+0x1b0>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a960:	d101      	bne.n	800a966 <HAL_SAI_Init+0x18e>
 800a962:	2302      	movs	r3, #2
 800a964:	e000      	b.n	800a968 <HAL_SAI_Init+0x190>
 800a966:	2301      	movs	r3, #1
 800a968:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	4613      	mov	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	4619      	mov	r1, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	fb02 f303 	mul.w	r3, r2, r3
 800a980:	021b      	lsls	r3, r3, #8
 800a982:	fbb1 f3f3 	udiv	r3, r1, r3
 800a986:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	4a20      	ldr	r2, [pc, #128]	; (800aa0c <HAL_SAI_Init+0x234>)
 800a98c:	fba2 2303 	umull	r2, r3, r2, r3
 800a990:	08da      	lsrs	r2, r3, #3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a996:	6979      	ldr	r1, [r7, #20]
 800a998:	4b1c      	ldr	r3, [pc, #112]	; (800aa0c <HAL_SAI_Init+0x234>)
 800a99a:	fba3 2301 	umull	r2, r3, r3, r1
 800a99e:	08da      	lsrs	r2, r3, #3
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	005b      	lsls	r3, r3, #1
 800a9a8:	1aca      	subs	r2, r1, r3
 800a9aa:	2a08      	cmp	r2, #8
 800a9ac:	d904      	bls.n	800a9b8 <HAL_SAI_Init+0x1e0>
    {
      hsai->Init.Mckdiv += 1U;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d104      	bne.n	800a9ca <HAL_SAI_Init+0x1f2>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	085a      	lsrs	r2, r3, #1
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <HAL_SAI_Init+0x202>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d109      	bne.n	800a9ee <HAL_SAI_Init+0x216>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d101      	bne.n	800a9e6 <HAL_SAI_Init+0x20e>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e001      	b.n	800a9ea <HAL_SAI_Init+0x212>
 800a9e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9ea:	623b      	str	r3, [r7, #32]
 800a9ec:	e012      	b.n	800aa14 <HAL_SAI_Init+0x23c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d10c      	bne.n	800aa10 <HAL_SAI_Init+0x238>
 800a9f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9fa:	e00a      	b.n	800aa12 <HAL_SAI_Init+0x23a>
 800a9fc:	40015404 	.word	0x40015404
 800aa00:	40015424 	.word	0x40015424
 800aa04:	40015400 	.word	0x40015400
 800aa08:	40015800 	.word	0x40015800
 800aa0c:	cccccccd 	.word	0xcccccccd
 800aa10:	2300      	movs	r3, #0
 800aa12:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6819      	ldr	r1, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	4b58      	ldr	r3, [pc, #352]	; (800ab80 <HAL_SAI_Init+0x3a8>)
 800aa20:	400b      	ands	r3, r1
 800aa22:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6819      	ldr	r1, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa38:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa3e:	431a      	orrs	r2, r3
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800aa4c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa58:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	051b      	lsls	r3, r3, #20
 800aa60:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa66:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	430a      	orrs	r2, r1
 800aa6e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	6812      	ldr	r2, [r2, #0]
 800aa7a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800aa7e:	f023 030f 	bic.w	r3, r3, #15
 800aa82:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6859      	ldr	r1, [r3, #4]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	699a      	ldr	r2, [r3, #24]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	431a      	orrs	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	430a      	orrs	r2, r1
 800aaa0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6899      	ldr	r1, [r3, #8]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	4b35      	ldr	r3, [pc, #212]	; (800ab84 <HAL_SAI_Init+0x3ac>)
 800aaae:	400b      	ands	r3, r1
 800aab0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	6899      	ldr	r1, [r3, #8]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aabc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aac2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 800aac8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800aace:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad4:	3b01      	subs	r3, #1
 800aad6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800aad8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	430a      	orrs	r2, r1
 800aae0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68d9      	ldr	r1, [r3, #12]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	f24f 0320 	movw	r3, #61472	; 0xf020
 800aaf0:	400b      	ands	r3, r1
 800aaf2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68d9      	ldr	r1, [r3, #12]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab02:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab08:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ab0a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab10:	3b01      	subs	r3, #1
 800ab12:	021b      	lsls	r3, r3, #8
 800ab14:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	430a      	orrs	r2, r1
 800ab1c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a19      	ldr	r2, [pc, #100]	; (800ab88 <HAL_SAI_Init+0x3b0>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d119      	bne.n	800ab5c <HAL_SAI_Init+0x384>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ab28:	4b18      	ldr	r3, [pc, #96]	; (800ab8c <HAL_SAI_Init+0x3b4>)
 800ab2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab2c:	4a17      	ldr	r2, [pc, #92]	; (800ab8c <HAL_SAI_Init+0x3b4>)
 800ab2e:	f023 0301 	bic.w	r3, r3, #1
 800ab32:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d10e      	bne.n	800ab5c <HAL_SAI_Init+0x384>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab46:	3b01      	subs	r3, #1
 800ab48:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ab4a:	4910      	ldr	r1, [pc, #64]	; (800ab8c <HAL_SAI_Init+0x3b4>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800ab50:	4b0e      	ldr	r3, [pc, #56]	; (800ab8c <HAL_SAI_Init+0x3b4>)
 800ab52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab54:	4a0d      	ldr	r2, [pc, #52]	; (800ab8c <HAL_SAI_Init+0x3b4>)
 800ab56:	f043 0301 	orr.w	r3, r3, #1
 800ab5a:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3728      	adds	r7, #40	; 0x28
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	f805c010 	.word	0xf805c010
 800ab84:	fff88000 	.word	0xfff88000
 800ab88:	40015404 	.word	0x40015404
 800ab8c:	40015400 	.word	0x40015400

0800ab90 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ab98:	4b18      	ldr	r3, [pc, #96]	; (800abfc <SAI_Disable+0x6c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a18      	ldr	r2, [pc, #96]	; (800ac00 <SAI_Disable+0x70>)
 800ab9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aba2:	0b1b      	lsrs	r3, r3, #12
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800abba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10a      	bne.n	800abd8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800abd2:	2303      	movs	r3, #3
 800abd4:	72fb      	strb	r3, [r7, #11]
      break;
 800abd6:	e009      	b.n	800abec <SAI_Disable+0x5c>
    }
    count--;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	3b01      	subs	r3, #1
 800abdc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1e7      	bne.n	800abbc <SAI_Disable+0x2c>

  return status;
 800abec:	7afb      	ldrb	r3, [r7, #11]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	20000000 	.word	0x20000000
 800ac00:	95cbec1b 	.word	0x95cbec1b

0800ac04 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b08a      	sub	sp, #40	; 0x28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d101      	bne.n	800ac16 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	e075      	b.n	800ad02 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7f9 faf5 	bl	8004218 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2203      	movs	r2, #3
 800ac32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f868 	bl	800ad0c <HAL_SD_InitCard>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e05d      	b.n	800ad02 <HAL_SD_Init+0xfe>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ac46:	f107 0308 	add.w	r3, r7, #8
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 fab3 	bl	800b1b8 <HAL_SD_GetCardStatus>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e052      	b.n	800ad02 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ac5c:	7e3b      	ldrb	r3, [r7, #24]
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ac62:	7e7b      	ldrb	r3, [r7, #25]
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d10a      	bne.n	800ac86 <HAL_SD_Init+0x82>
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d102      	bne.n	800ac7c <HAL_SD_Init+0x78>
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac82:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac84:	e00b      	b.n	800ac9e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d104      	bne.n	800ac98 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac94:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac96:	e002      	b.n	800ac9e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fb3d 	bl	800b324 <HAL_SD_ConfigWideBusOperation>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d001      	beq.n	800acb4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	e026      	b.n	800ad02 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800acb4:	f7f9 ff30 	bl	8004b18 <HAL_GetTick>
 800acb8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800acba:	e011      	b.n	800ace0 <HAL_SD_Init+0xdc>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800acbc:	f7f9 ff2c 	bl	8004b18 <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acca:	d109      	bne.n	800ace0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800acd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e010      	b.n	800ad02 <HAL_SD_Init+0xfe>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fbc9 	bl	800b478 <HAL_SD_GetCardState>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b04      	cmp	r3, #4
 800acea:	d1e7      	bne.n	800acbc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3728      	adds	r7, #40	; 0x28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
	...

0800ad0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad0c:	b5b0      	push	{r4, r5, r7, lr}
 800ad0e:	b090      	sub	sp, #64	; 0x40
 800ad10:	af04      	add	r7, sp, #16
 800ad12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ad14:	2300      	movs	r3, #0
 800ad16:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ad20:	2300      	movs	r3, #0
 800ad22:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800ad24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ad28:	f7fe fc76 	bl	8009618 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d109      	bne.n	800ad48 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad42:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e088      	b.n	800ae5a <HAL_SD_InitCard+0x14e>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk/400000U) - 2U);
#else
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	0a1b      	lsrs	r3, r3, #8
 800ad4c:	4a45      	ldr	r2, [pc, #276]	; (800ae64 <HAL_SD_InitCard+0x158>)
 800ad4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad52:	091b      	lsrs	r3, r3, #4
 800ad54:	61fb      	str	r3, [r7, #28]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d107      	bne.n	800ad6e <HAL_SD_InitCard+0x62>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f042 0210 	orr.w	r2, r2, #16
 800ad6c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681d      	ldr	r5, [r3, #0]
 800ad72:	466c      	mov	r4, sp
 800ad74:	f107 0318 	add.w	r3, r7, #24
 800ad78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad80:	f107 030c 	add.w	r3, r7, #12
 800ad84:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad86:	4628      	mov	r0, r5
 800ad88:	f002 f9de 	bl	800d148 <SDMMC_Init>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 800ad92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <HAL_SD_InitCard+0x92>
  {
    return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e05d      	b.n	800ae5a <HAL_SD_InitCard+0x14e>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4618      	mov	r0, r3
 800ada4:	f002 fa07 	bl	800d1b6 <SDMMC_PowerState_ON>
 800ada8:	4603      	mov	r3, r0
 800adaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 800adae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <HAL_SD_InitCard+0xae>
  {
    return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e04f      	b.n	800ae5a <HAL_SD_InitCard+0x14e>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	005b      	lsls	r3, r3, #1
 800adbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc4:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800adc6:	4a28      	ldr	r2, [pc, #160]	; (800ae68 <HAL_SD_InitCard+0x15c>)
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	fbb2 f3f3 	udiv	r3, r2, r3
 800adce:	3301      	adds	r3, #1
 800add0:	4618      	mov	r0, r3
 800add2:	f7f9 fead 	bl	8004b30 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fc2c 	bl	800b634 <SD_PowerON>
 800addc:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00b      	beq.n	800adfc <HAL_SD_InitCard+0xf0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	431a      	orrs	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e02e      	b.n	800ae5a <HAL_SD_InitCard+0x14e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fb5b 	bl	800b4b8 <SD_InitCard>
 800ae02:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00b      	beq.n	800ae22 <HAL_SD_InitCard+0x116>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	431a      	orrs	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e01b      	b.n	800ae5a <HAL_SD_InitCard+0x14e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f002 fa5a 	bl	800d2e4 <SDMMC_CmdBlockLength>
 800ae30:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00f      	beq.n	800ae58 <HAL_SD_InitCard+0x14c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a0b      	ldr	r2, [pc, #44]	; (800ae6c <HAL_SD_InitCard+0x160>)
 800ae3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	431a      	orrs	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	e000      	b.n	800ae5a <HAL_SD_InitCard+0x14e>
  }

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3730      	adds	r7, #48	; 0x30
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bdb0      	pop	{r4, r5, r7, pc}
 800ae62:	bf00      	nop
 800ae64:	014f8b59 	.word	0x014f8b59
 800ae68:	00012110 	.word	0x00012110
 800ae6c:	1fe00fff 	.word	0x1fe00fff

0800ae70 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae7e:	0f9b      	lsrs	r3, r3, #30
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae8a:	0e9b      	lsrs	r3, r3, #26
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	f003 030f 	and.w	r3, r3, #15
 800ae92:	b2da      	uxtb	r2, r3
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae9c:	0e1b      	lsrs	r3, r3, #24
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	f003 0303 	and.w	r3, r3, #3
 800aea4:	b2da      	uxtb	r2, r3
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeae:	0c1b      	lsrs	r3, r3, #16
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeba:	0a1b      	lsrs	r3, r3, #8
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aed0:	0d1b      	lsrs	r3, r3, #20
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aedc:	0c1b      	lsrs	r3, r3, #16
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	f003 030f 	and.w	r3, r3, #15
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aeee:	0bdb      	lsrs	r3, r3, #15
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	f003 0301 	and.w	r3, r3, #1
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af00:	0b9b      	lsrs	r3, r3, #14
 800af02:	b2db      	uxtb	r3, r3
 800af04:	f003 0301 	and.w	r3, r3, #1
 800af08:	b2da      	uxtb	r2, r3
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af12:	0b5b      	lsrs	r3, r3, #13
 800af14:	b2db      	uxtb	r3, r3
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af24:	0b1b      	lsrs	r3, r3, #12
 800af26:	b2db      	uxtb	r3, r3
 800af28:	f003 0301 	and.w	r3, r3, #1
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	2200      	movs	r2, #0
 800af36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d163      	bne.n	800b008 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af44:	009a      	lsls	r2, r3, #2
 800af46:	f640 73fc 	movw	r3, #4092	; 0xffc
 800af4a:	4013      	ands	r3, r2
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800af50:	0f92      	lsrs	r2, r2, #30
 800af52:	431a      	orrs	r2, r3
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af5c:	0edb      	lsrs	r3, r3, #27
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	f003 0307 	and.w	r3, r3, #7
 800af64:	b2da      	uxtb	r2, r3
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af6e:	0e1b      	lsrs	r3, r3, #24
 800af70:	b2db      	uxtb	r3, r3
 800af72:	f003 0307 	and.w	r3, r3, #7
 800af76:	b2da      	uxtb	r2, r3
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af80:	0d5b      	lsrs	r3, r3, #21
 800af82:	b2db      	uxtb	r3, r3
 800af84:	f003 0307 	and.w	r3, r3, #7
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af92:	0c9b      	lsrs	r3, r3, #18
 800af94:	b2db      	uxtb	r3, r3
 800af96:	f003 0307 	and.w	r3, r3, #7
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afa4:	0bdb      	lsrs	r3, r3, #15
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	f003 0307 	and.w	r3, r3, #7
 800afac:	b2da      	uxtb	r2, r3
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	7e1b      	ldrb	r3, [r3, #24]
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	f003 0307 	and.w	r3, r3, #7
 800afc6:	3302      	adds	r3, #2
 800afc8:	2201      	movs	r2, #1
 800afca:	fa02 f303 	lsl.w	r3, r2, r3
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800afd2:	fb02 f203 	mul.w	r2, r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	7a1b      	ldrb	r3, [r3, #8]
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	f003 030f 	and.w	r3, r3, #15
 800afe4:	2201      	movs	r2, #1
 800afe6:	409a      	lsls	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aff4:	0a52      	lsrs	r2, r2, #9
 800aff6:	fb02 f203 	mul.w	r2, r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b004:	659a      	str	r2, [r3, #88]	; 0x58
 800b006:	e031      	b.n	800b06c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d11d      	bne.n	800b04c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b014:	041b      	lsls	r3, r3, #16
 800b016:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b01e:	0c1b      	lsrs	r3, r3, #16
 800b020:	431a      	orrs	r2, r3
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	3301      	adds	r3, #1
 800b02c:	029a      	lsls	r2, r3, #10
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b040:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	659a      	str	r2, [r3, #88]	; 0x58
 800b04a:	e00f      	b.n	800b06c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a58      	ldr	r2, [pc, #352]	; (800b1b4 <HAL_SD_GetCardCSD+0x344>)
 800b052:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b058:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e09d      	b.n	800b1a8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b070:	0b9b      	lsrs	r3, r3, #14
 800b072:	b2db      	uxtb	r3, r3
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b082:	09db      	lsrs	r3, r3, #7
 800b084:	b2db      	uxtb	r3, r3
 800b086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b094:	b2db      	uxtb	r3, r3
 800b096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0a4:	0fdb      	lsrs	r3, r3, #31
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0b0:	0f5b      	lsrs	r3, r3, #29
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	f003 0303 	and.w	r3, r3, #3
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0c2:	0e9b      	lsrs	r3, r3, #26
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	f003 0307 	and.w	r3, r3, #7
 800b0ca:	b2da      	uxtb	r2, r3
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d4:	0d9b      	lsrs	r3, r3, #22
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	f003 030f 	and.w	r3, r3, #15
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e6:	0d5b      	lsrs	r3, r3, #21
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	b2da      	uxtb	r2, r3
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b102:	0c1b      	lsrs	r3, r3, #16
 800b104:	b2db      	uxtb	r3, r3
 800b106:	f003 0301 	and.w	r3, r3, #1
 800b10a:	b2da      	uxtb	r2, r3
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b116:	0bdb      	lsrs	r3, r3, #15
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b12a:	0b9b      	lsrs	r3, r3, #14
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	b2da      	uxtb	r2, r3
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b13e:	0b5b      	lsrs	r3, r3, #13
 800b140:	b2db      	uxtb	r3, r3
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	b2da      	uxtb	r2, r3
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b152:	0b1b      	lsrs	r3, r3, #12
 800b154:	b2db      	uxtb	r3, r3
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b166:	0a9b      	lsrs	r3, r3, #10
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b17a:	0a1b      	lsrs	r3, r3, #8
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	f003 0303 	and.w	r3, r3, #3
 800b182:	b2da      	uxtb	r2, r3
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b18e:	085b      	lsrs	r3, r3, #1
 800b190:	b2db      	uxtb	r3, r3
 800b192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b196:	b2da      	uxtb	r2, r3
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	1fe00fff 	.word	0x1fe00fff

0800b1b8 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b094      	sub	sp, #80	; 0x50
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b1c8:	f107 0308 	add.w	r3, r7, #8
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fb3c 	bl	800b84c <SD_SendSDStatus>
 800b1d4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d011      	beq.n	800b200 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a4f      	ldr	r2, [pc, #316]	; (800b320 <HAL_SD_GetCardStatus+0x168>)
 800b1e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b1fe:	e070      	b.n	800b2e2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	099b      	lsrs	r3, r3, #6
 800b204:	b2db      	uxtb	r3, r3
 800b206:	f003 0303 	and.w	r3, r3, #3
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	095b      	lsrs	r3, r3, #5
 800b214:	b2db      	uxtb	r3, r3
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	0a1b      	lsrs	r3, r3, #8
 800b224:	b29b      	uxth	r3, r3
 800b226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	0e1b      	lsrs	r3, r3, #24
 800b230:	b29b      	uxth	r3, r3
 800b232:	4313      	orrs	r3, r2
 800b234:	b29a      	uxth	r2, r3
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	061a      	lsls	r2, r3, #24
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	021b      	lsls	r3, r3, #8
 800b242:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b246:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	0a1b      	lsrs	r3, r3, #8
 800b24c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b250:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	0e1b      	lsrs	r3, r3, #24
 800b256:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	0a1b      	lsrs	r3, r3, #8
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	0d1b      	lsrs	r3, r3, #20
 800b272:	b2db      	uxtb	r3, r3
 800b274:	f003 030f 	and.w	r3, r3, #15
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	0c1b      	lsrs	r3, r3, #16
 800b282:	b29b      	uxth	r3, r3
 800b284:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b288:	b29a      	uxth	r2, r3
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	b29b      	uxth	r3, r3
 800b292:	4313      	orrs	r3, r2
 800b294:	b29a      	uxth	r2, r3
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	0a9b      	lsrs	r3, r3, #10
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	0a1b      	lsrs	r3, r3, #8
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	f003 0303 	and.w	r3, r3, #3
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	091b      	lsrs	r3, r3, #4
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	f003 030f 	and.w	r3, r3, #15
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	f003 030f 	and.w	r3, r3, #15
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	0e1b      	lsrs	r3, r3, #24
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f001 fffa 	bl	800d2e4 <SDMMC_CmdBlockLength>
 800b2f0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00d      	beq.n	800b314 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a08      	ldr	r2, [pc, #32]	; (800b320 <HAL_SD_GetCardStatus+0x168>)
 800b2fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b304:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800b314:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3750      	adds	r7, #80	; 0x50
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	1fe00fff 	.word	0x1fe00fff

0800b324 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b324:	b5b0      	push	{r4, r5, r7, lr}
 800b326:	b08e      	sub	sp, #56	; 0x38
 800b328:	af04      	add	r7, sp, #16
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2203      	movs	r2, #3
 800b338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b340:	2b03      	cmp	r3, #3
 800b342:	d02e      	beq.n	800b3a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b34a:	d106      	bne.n	800b35a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b350:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	639a      	str	r2, [r3, #56]	; 0x38
 800b358:	e029      	b.n	800b3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b360:	d10a      	bne.n	800b378 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fb6a 	bl	800ba3c <SD_WideBus_Enable>
 800b368:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	431a      	orrs	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	639a      	str	r2, [r3, #56]	; 0x38
 800b376:	e01a      	b.n	800b3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10a      	bne.n	800b394 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 fba7 	bl	800bad2 <SD_WideBus_Disable>
 800b384:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	431a      	orrs	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	639a      	str	r2, [r3, #56]	; 0x38
 800b392:	e00c      	b.n	800b3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b398:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	639a      	str	r2, [r3, #56]	; 0x38
 800b3a0:	e005      	b.n	800b3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d007      	beq.n	800b3c6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a2e      	ldr	r2, [pc, #184]	; (800b474 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b3bc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3c4:	e034      	b.n	800b430 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	617b      	str	r3, [r7, #20]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	695b      	ldr	r3, [r3, #20]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d903      	bls.n	800b3ec <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	61bb      	str	r3, [r7, #24]
 800b3ea:	e012      	b.n	800b412 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3f4:	d103      	bne.n	800b3fe <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	61bb      	str	r3, [r7, #24]
 800b3fc:	e009      	b.n	800b412 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b406:	d102      	bne.n	800b40e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800b408:	2302      	movs	r3, #2
 800b40a:	61bb      	str	r3, [r7, #24]
 800b40c:	e001      	b.n	800b412 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800b40e:	2303      	movs	r3, #3
 800b410:	61bb      	str	r3, [r7, #24]
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681d      	ldr	r5, [r3, #0]
 800b416:	466c      	mov	r4, sp
 800b418:	f107 0314 	add.w	r3, r7, #20
 800b41c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b420:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b424:	f107 0308 	add.w	r3, r7, #8
 800b428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b42a:	4628      	mov	r0, r5
 800b42c:	f001 fe8c 	bl	800d148 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b438:	4618      	mov	r0, r3
 800b43a:	f001 ff53 	bl	800d2e4 <SDMMC_CmdBlockLength>
 800b43e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00c      	beq.n	800b460 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a0a      	ldr	r2, [pc, #40]	; (800b474 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b44c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	431a      	orrs	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3728      	adds	r7, #40	; 0x28
 800b470:	46bd      	mov	sp, r7
 800b472:	bdb0      	pop	{r4, r5, r7, pc}
 800b474:	1fe00fff 	.word	0x1fe00fff

0800b478 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b484:	f107 030c 	add.w	r3, r7, #12
 800b488:	4619      	mov	r1, r3
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 faae 	bl	800b9ec <SD_SendStatus>
 800b490:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d005      	beq.n	800b4a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	431a      	orrs	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	0a5b      	lsrs	r3, r3, #9
 800b4a8:	f003 030f 	and.w	r3, r3, #15
 800b4ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b4ae:	693b      	ldr	r3, [r7, #16]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b4b8:	b590      	push	{r4, r7, lr}
 800b4ba:	b091      	sub	sp, #68	; 0x44
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f001 fe86 	bl	800d1da <SDMMC_GetPowerState>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d102      	bne.n	800b4da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b4d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b4d8:	e0a8      	b.n	800b62c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d02e      	beq.n	800b540 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f002 f809 	bl	800d4fe <SDMMC_CmdSendCID>
 800b4ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d001      	beq.n	800b4f8 <SD_InitCard+0x40>
    {
      return errorstate;
 800b4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f6:	e099      	b.n	800b62c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	4618      	mov	r0, r3
 800b500:	f001 feb1 	bl	800d266 <SDMMC_GetResponse>
 800b504:	4602      	mov	r2, r0
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2104      	movs	r1, #4
 800b510:	4618      	mov	r0, r3
 800b512:	f001 fea8 	bl	800d266 <SDMMC_GetResponse>
 800b516:	4602      	mov	r2, r0
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2108      	movs	r1, #8
 800b522:	4618      	mov	r0, r3
 800b524:	f001 fe9f 	bl	800d266 <SDMMC_GetResponse>
 800b528:	4602      	mov	r2, r0
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	210c      	movs	r1, #12
 800b534:	4618      	mov	r0, r3
 800b536:	f001 fe96 	bl	800d266 <SDMMC_GetResponse>
 800b53a:	4602      	mov	r2, r0
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b544:	2b03      	cmp	r3, #3
 800b546:	d00d      	beq.n	800b564 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f107 020e 	add.w	r2, r7, #14
 800b550:	4611      	mov	r1, r2
 800b552:	4618      	mov	r0, r3
 800b554:	f002 f812 	bl	800d57c <SDMMC_CmdSetRelAdd>
 800b558:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d001      	beq.n	800b564 <SD_InitCard+0xac>
    {
      return errorstate;
 800b560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b562:	e063      	b.n	800b62c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d036      	beq.n	800b5da <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b56c:	89fb      	ldrh	r3, [r7, #14]
 800b56e:	461a      	mov	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b57c:	041b      	lsls	r3, r3, #16
 800b57e:	4619      	mov	r1, r3
 800b580:	4610      	mov	r0, r2
 800b582:	f001 ffdb 	bl	800d53c <SDMMC_CmdSendCSD>
 800b586:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d001      	beq.n	800b592 <SD_InitCard+0xda>
    {
      return errorstate;
 800b58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b590:	e04c      	b.n	800b62c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2100      	movs	r1, #0
 800b598:	4618      	mov	r0, r3
 800b59a:	f001 fe64 	bl	800d266 <SDMMC_GetResponse>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2104      	movs	r1, #4
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f001 fe5b 	bl	800d266 <SDMMC_GetResponse>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2108      	movs	r1, #8
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f001 fe52 	bl	800d266 <SDMMC_GetResponse>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	210c      	movs	r1, #12
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f001 fe49 	bl	800d266 <SDMMC_GetResponse>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2104      	movs	r1, #4
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f001 fe40 	bl	800d266 <SDMMC_GetResponse>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	0d1a      	lsrs	r2, r3, #20
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b5ee:	f107 0310 	add.w	r3, r7, #16
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff fc3b 	bl	800ae70 <HAL_SD_GetCardCSD>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b604:	e012      	b.n	800b62c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6819      	ldr	r1, [r3, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b60e:	041b      	lsls	r3, r3, #16
 800b610:	f04f 0400 	mov.w	r4, #0
 800b614:	461a      	mov	r2, r3
 800b616:	4623      	mov	r3, r4
 800b618:	4608      	mov	r0, r1
 800b61a:	f001 fe86 	bl	800d32a <SDMMC_CmdSelDesel>
 800b61e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b622:	2b00      	cmp	r3, #0
 800b624:	d001      	beq.n	800b62a <SD_InitCard+0x172>
  {
    return errorstate;
 800b626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b628:	e000      	b.n	800b62c <SD_InitCard+0x174>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3744      	adds	r7, #68	; 0x44
 800b630:	46bd      	mov	sp, r7
 800b632:	bd90      	pop	{r4, r7, pc}

0800b634 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b63c:	2300      	movs	r3, #0
 800b63e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800b640:	2300      	movs	r3, #0
 800b642:	61fb      	str	r3, [r7, #28]
 800b644:	2300      	movs	r3, #0
 800b646:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800b648:	f7f9 fa66 	bl	8004b18 <HAL_GetTick>
 800b64c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4618      	mov	r0, r3
 800b654:	f001 fe8d 	bl	800d372 <SDMMC_CmdGoIdleState>
 800b658:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <SD_PowerON+0x30>
  {
    return errorstate;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	e0ed      	b.n	800b840 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4618      	mov	r0, r3
 800b66a:	f001 fea0 	bl	800d3ae <SDMMC_CmdOperCond>
 800b66e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00d      	beq.n	800b692 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4618      	mov	r0, r3
 800b682:	f001 fe76 	bl	800d372 <SDMMC_CmdGoIdleState>
 800b686:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d004      	beq.n	800b698 <SD_PowerON+0x64>
    {
      return errorstate;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	e0d6      	b.n	800b840 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d137      	bne.n	800b710 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f001 fea1 	bl	800d3ee <SDMMC_CmdAppCommand>
 800b6ac:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d02d      	beq.n	800b710 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b6b8:	e0c2      	b.n	800b840 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2100      	movs	r1, #0
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f001 fe94 	bl	800d3ee <SDMMC_CmdAppCommand>
 800b6c6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <SD_PowerON+0x9e>
    {
      return errorstate;
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	e0b6      	b.n	800b840 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	495c      	ldr	r1, [pc, #368]	; (800b848 <SD_PowerON+0x214>)
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f001 feab 	bl	800d434 <SDMMC_CmdAppOperCommand>
 800b6de:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b6ea:	e0a9      	b.n	800b840 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f001 fdb7 	bl	800d266 <SDMMC_GetResponse>
 800b6f8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	0fdb      	lsrs	r3, r3, #31
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d101      	bne.n	800b706 <SD_PowerON+0xd2>
 800b702:	2301      	movs	r3, #1
 800b704:	e000      	b.n	800b708 <SD_PowerON+0xd4>
 800b706:	2300      	movs	r3, #0
 800b708:	61bb      	str	r3, [r7, #24]

    count++;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	3301      	adds	r3, #1
 800b70e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b716:	4293      	cmp	r3, r2
 800b718:	d802      	bhi.n	800b720 <SD_PowerON+0xec>
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d0cc      	beq.n	800b6ba <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b726:	4293      	cmp	r3, r2
 800b728:	d902      	bls.n	800b730 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b72a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b72e:	e087      	b.n	800b840 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b736:	2b00      	cmp	r3, #0
 800b738:	d07e      	beq.n	800b838 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d17a      	bne.n	800b83e <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d075      	beq.n	800b83e <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b758:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f042 0208 	orr.w	r2, r2, #8
 800b768:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4618      	mov	r0, r3
 800b770:	f001 ff6b 	bl	800d64a <SDMMC_CmdVoltageSwitch>
 800b774:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00c      	beq.n	800b796 <SD_PowerON+0x162>
        {
          return errorstate;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	e05f      	b.n	800b840 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b780:	f7f9 f9ca 	bl	8004b18 <HAL_GetTick>
 800b784:	4602      	mov	r2, r0
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b78e:	d102      	bne.n	800b796 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800b790:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b794:	e054      	b.n	800b840 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7a4:	d1ec      	bne.n	800b780 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b7ae:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7be:	d002      	beq.n	800b7c6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800b7c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b7c4:	e03c      	b.n	800b840 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800b7c6:	2001      	movs	r0, #1
 800b7c8:	f000 fa9e 	bl	800bd08 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f042 0204 	orr.w	r2, r2, #4
 800b7da:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b7dc:	e00a      	b.n	800b7f4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b7de:	f7f9 f99b 	bl	8004b18 <HAL_GetTick>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7ec:	d102      	bne.n	800b7f4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800b7ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7f2:	e025      	b.n	800b840 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b802:	d1ec      	bne.n	800b7de <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b80c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b81c:	d102      	bne.n	800b824 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b81e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b822:	e00d      	b.n	800b840 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2213      	movs	r2, #19
 800b82a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b834:	639a      	str	r2, [r3, #56]	; 0x38
 800b836:	e002      	b.n	800b83e <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3720      	adds	r7, #32
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	c1100000 	.word	0xc1100000

0800b84c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08c      	sub	sp, #48	; 0x30
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b856:	f7f9 f95f 	bl	8004b18 <HAL_GetTick>
 800b85a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2100      	movs	r1, #0
 800b866:	4618      	mov	r0, r3
 800b868:	f001 fcfd 	bl	800d266 <SDMMC_GetResponse>
 800b86c:	4603      	mov	r3, r0
 800b86e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b872:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b876:	d102      	bne.n	800b87e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b878:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b87c:	e0b0      	b.n	800b9e0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2140      	movs	r1, #64	; 0x40
 800b884:	4618      	mov	r0, r3
 800b886:	f001 fd2d 	bl	800d2e4 <SDMMC_CmdBlockLength>
 800b88a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d005      	beq.n	800b89e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	e0a0      	b.n	800b9e0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8a6:	041b      	lsls	r3, r3, #16
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	f001 fd9f 	bl	800d3ee <SDMMC_CmdAppCommand>
 800b8b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8b2:	6a3b      	ldr	r3, [r7, #32]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d005      	beq.n	800b8c4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	e08d      	b.n	800b9e0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b8c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8c8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b8ca:	2340      	movs	r3, #64	; 0x40
 800b8cc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b8ce:	2360      	movs	r3, #96	; 0x60
 800b8d0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b8d2:	2302      	movs	r3, #2
 800b8d4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f107 0208 	add.w	r2, r7, #8
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f001 fccf 	bl	800d28c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 fe87 	bl	800d606 <SDMMC_CmdStatusRegister>
 800b8f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d02b      	beq.n	800b958 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	e069      	b.n	800b9e0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b916:	2b00      	cmp	r3, #0
 800b918:	d013      	beq.n	800b942 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800b91a:	2300      	movs	r3, #0
 800b91c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b91e:	e00d      	b.n	800b93c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4618      	mov	r0, r3
 800b926:	f001 fc39 	bl	800d19c <SDMMC_ReadFIFO>
 800b92a:	4602      	mov	r2, r0
 800b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92e:	601a      	str	r2, [r3, #0]
        pData++;
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	3304      	adds	r3, #4
 800b934:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800b936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b938:	3301      	adds	r3, #1
 800b93a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	2b07      	cmp	r3, #7
 800b940:	d9ee      	bls.n	800b920 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b942:	f7f9 f8e9 	bl	8004b18 <HAL_GetTick>
 800b946:	4602      	mov	r2, r0
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b950:	d102      	bne.n	800b958 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b952:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b956:	e043      	b.n	800b9e0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b95e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b962:	2b00      	cmp	r3, #0
 800b964:	d0d2      	beq.n	800b90c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b96c:	f003 0308 	and.w	r3, r3, #8
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b974:	2308      	movs	r3, #8
 800b976:	e033      	b.n	800b9e0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97e:	f003 0302 	and.w	r3, r3, #2
 800b982:	2b00      	cmp	r3, #0
 800b984:	d001      	beq.n	800b98a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b986:	2302      	movs	r3, #2
 800b988:	e02a      	b.n	800b9e0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b990:	f003 0320 	and.w	r3, r3, #32
 800b994:	2b00      	cmp	r3, #0
 800b996:	d017      	beq.n	800b9c8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b998:	2320      	movs	r3, #32
 800b99a:	e021      	b.n	800b9e0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f001 fbfb 	bl	800d19c <SDMMC_ReadFIFO>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9aa:	601a      	str	r2, [r3, #0]
    pData++;
 800b9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b9b2:	f7f9 f8b1 	bl	8004b18 <HAL_GetTick>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9c0:	d102      	bne.n	800b9c8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b9c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9c6:	e00b      	b.n	800b9e0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1e2      	bne.n	800b99c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a03      	ldr	r2, [pc, #12]	; (800b9e8 <SD_SendSDStatus+0x19c>)
 800b9dc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3730      	adds	r7, #48	; 0x30
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	18000f3a 	.word	0x18000f3a

0800b9ec <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d102      	bne.n	800ba02 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b9fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba00:	e018      	b.n	800ba34 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba0a:	041b      	lsls	r3, r3, #16
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4610      	mov	r0, r2
 800ba10:	f001 fdd6 	bl	800d5c0 <SDMMC_CmdSendStatus>
 800ba14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	e009      	b.n	800ba34 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2100      	movs	r1, #0
 800ba26:	4618      	mov	r0, r3
 800ba28:	f001 fc1d 	bl	800d266 <SDMMC_GetResponse>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ba44:	2300      	movs	r3, #0
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2100      	movs	r1, #0
 800ba52:	4618      	mov	r0, r3
 800ba54:	f001 fc07 	bl	800d266 <SDMMC_GetResponse>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba62:	d102      	bne.n	800ba6a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba68:	e02f      	b.n	800baca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ba6a:	f107 030c 	add.w	r3, r7, #12
 800ba6e:	4619      	mov	r1, r3
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f879 	bl	800bb68 <SD_FindSCR>
 800ba76:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d001      	beq.n	800ba82 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	e023      	b.n	800baca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d01c      	beq.n	800bac6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba94:	041b      	lsls	r3, r3, #16
 800ba96:	4619      	mov	r1, r3
 800ba98:	4610      	mov	r0, r2
 800ba9a:	f001 fca8 	bl	800d3ee <SDMMC_CmdAppCommand>
 800ba9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	e00f      	b.n	800baca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2102      	movs	r1, #2
 800bab0:	4618      	mov	r0, r3
 800bab2:	f001 fcdf 	bl	800d474 <SDMMC_CmdBusWidth>
 800bab6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	e003      	b.n	800baca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bac2:	2300      	movs	r3, #0
 800bac4:	e001      	b.n	800baca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bac6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b086      	sub	sp, #24
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bada:	2300      	movs	r3, #0
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	2300      	movs	r3, #0
 800bae0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2100      	movs	r1, #0
 800bae8:	4618      	mov	r0, r3
 800baea:	f001 fbbc 	bl	800d266 <SDMMC_GetResponse>
 800baee:	4603      	mov	r3, r0
 800baf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baf8:	d102      	bne.n	800bb00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bafa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bafe:	e02f      	b.n	800bb60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bb00:	f107 030c 	add.w	r3, r7, #12
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f82e 	bl	800bb68 <SD_FindSCR>
 800bb0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	e023      	b.n	800bb60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d01c      	beq.n	800bb5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb2a:	041b      	lsls	r3, r3, #16
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4610      	mov	r0, r2
 800bb30:	f001 fc5d 	bl	800d3ee <SDMMC_CmdAppCommand>
 800bb34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	e00f      	b.n	800bb60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2100      	movs	r1, #0
 800bb46:	4618      	mov	r0, r3
 800bb48:	f001 fc94 	bl	800d474 <SDMMC_CmdBusWidth>
 800bb4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	e003      	b.n	800bb60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	e001      	b.n	800bb60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b08e      	sub	sp, #56	; 0x38
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bb72:	f7f8 ffd1 	bl	8004b18 <HAL_GetTick>
 800bb76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	60bb      	str	r3, [r7, #8]
 800bb80:	2300      	movs	r3, #0
 800bb82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2108      	movs	r1, #8
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f001 fba8 	bl	800d2e4 <SDMMC_CmdBlockLength>
 800bb94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9e:	e0ad      	b.n	800bcfc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bba8:	041b      	lsls	r3, r3, #16
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4610      	mov	r0, r2
 800bbae:	f001 fc1e 	bl	800d3ee <SDMMC_CmdAppCommand>
 800bbb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <SD_FindSCR+0x56>
  {
    return errorstate;
 800bbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbc:	e09e      	b.n	800bcfc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bbbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbc2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bbc4:	2308      	movs	r3, #8
 800bbc6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bbc8:	2330      	movs	r3, #48	; 0x30
 800bbca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bbcc:	2302      	movs	r3, #2
 800bbce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f107 0210 	add.w	r2, r7, #16
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f001 fb52 	bl	800d28c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f001 fc64 	bl	800d4ba <SDMMC_CmdSendSCR>
 800bbf2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d027      	beq.n	800bc4a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	e07e      	b.n	800bcfc <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d113      	bne.n	800bc34 <SD_FindSCR+0xcc>
 800bc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d110      	bne.n	800bc34 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f001 fac0 	bl	800d19c <SDMMC_ReadFIFO>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f001 fab9 	bl	800d19c <SDMMC_ReadFIFO>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	60fb      	str	r3, [r7, #12]
      index++;
 800bc2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc30:	3301      	adds	r3, #1
 800bc32:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bc34:	f7f8 ff70 	bl	8004b18 <HAL_GetTick>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc42:	d102      	bne.n	800bc4a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bc44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc48:	e058      	b.n	800bcfc <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc50:	f240 532a 	movw	r3, #1322	; 0x52a
 800bc54:	4013      	ands	r3, r2
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d0d1      	beq.n	800bbfe <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc60:	f003 0308 	and.w	r3, r3, #8
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d005      	beq.n	800bc74 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2208      	movs	r2, #8
 800bc6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bc70:	2308      	movs	r3, #8
 800bc72:	e043      	b.n	800bcfc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d005      	beq.n	800bc8e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2202      	movs	r2, #2
 800bc88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	e036      	b.n	800bcfc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc94:	f003 0320 	and.w	r3, r3, #32
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d005      	beq.n	800bca8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2220      	movs	r2, #32
 800bca2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bca4:	2320      	movs	r3, #32
 800bca6:	e029      	b.n	800bcfc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a15      	ldr	r2, [pc, #84]	; (800bd04 <SD_FindSCR+0x19c>)
 800bcae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	061a      	lsls	r2, r3, #24
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	021b      	lsls	r3, r3, #8
 800bcb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bcbc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	0a1b      	lsrs	r3, r3, #8
 800bcc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bcc6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	0e1b      	lsrs	r3, r3, #24
 800bccc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd0:	601a      	str	r2, [r3, #0]
    scr++;
 800bcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	061a      	lsls	r2, r3, #24
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	021b      	lsls	r3, r3, #8
 800bce0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bce4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	0a1b      	lsrs	r3, r3, #8
 800bcea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bcee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	0e1b      	lsrs	r3, r3, #24
 800bcf4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3738      	adds	r7, #56	; 0x38
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	18000f3a 	.word	0x18000f3a

0800bd08 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800bd12:	bf00      	nop
 800bd14:	370c      	adds	r7, #12
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr

0800bd1e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b084      	sub	sp, #16
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e095      	b.n	800be5c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d108      	bne.n	800bd4a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd40:	d009      	beq.n	800bd56 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	61da      	str	r2, [r3, #28]
 800bd48:	e005      	b.n	800bd56 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f7f8 fae3 	bl	800433c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2202      	movs	r2, #2
 800bd7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd8c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd96:	d902      	bls.n	800bd9e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	60fb      	str	r3, [r7, #12]
 800bd9c:	e002      	b.n	800bda4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bd9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bda2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bdac:	d007      	beq.n	800bdbe <HAL_SPI_Init+0xa0>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bdb6:	d002      	beq.n	800bdbe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bdce:	431a      	orrs	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	f003 0302 	and.w	r3, r3, #2
 800bdd8:	431a      	orrs	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	f003 0301 	and.w	r3, r3, #1
 800bde2:	431a      	orrs	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdec:	431a      	orrs	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	69db      	ldr	r3, [r3, #28]
 800bdf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a1b      	ldr	r3, [r3, #32]
 800bdfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be00:	ea42 0103 	orr.w	r1, r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	430a      	orrs	r2, r1
 800be12:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	0c1b      	lsrs	r3, r3, #16
 800be1a:	f003 0204 	and.w	r2, r3, #4
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be22:	f003 0310 	and.w	r3, r3, #16
 800be26:	431a      	orrs	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be2c:	f003 0308 	and.w	r3, r3, #8
 800be30:	431a      	orrs	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800be3a:	ea42 0103 	orr.w	r1, r2, r3
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	430a      	orrs	r2, r1
 800be4a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d101      	bne.n	800be76 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800be72:	2301      	movs	r3, #1
 800be74:	e049      	b.n	800bf0a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d106      	bne.n	800be90 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7f8 faec 	bl	8004468 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2202      	movs	r2, #2
 800be94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	3304      	adds	r3, #4
 800bea0:	4619      	mov	r1, r3
 800bea2:	4610      	mov	r0, r2
 800bea4:	f000 f8ca 	bl	800c03c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2201      	movs	r2, #1
 800beac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b084      	sub	sp, #16
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	60f8      	str	r0, [r7, #12]
 800bf1a:	60b9      	str	r1, [r7, #8]
 800bf1c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d101      	bne.n	800bf2c <HAL_TIM_IC_ConfigChannel+0x1a>
 800bf28:	2302      	movs	r3, #2
 800bf2a:	e082      	b.n	800c032 <HAL_TIM_IC_ConfigChannel+0x120>
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d11b      	bne.n	800bf72 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6818      	ldr	r0, [r3, #0]
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	6819      	ldr	r1, [r3, #0]
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	f000 f911 	bl	800c170 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	699a      	ldr	r2, [r3, #24]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f022 020c 	bic.w	r2, r2, #12
 800bf5c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6999      	ldr	r1, [r3, #24]
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	689a      	ldr	r2, [r3, #8]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	430a      	orrs	r2, r1
 800bf6e:	619a      	str	r2, [r3, #24]
 800bf70:	e05a      	b.n	800c028 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b04      	cmp	r3, #4
 800bf76:	d11c      	bne.n	800bfb2 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6818      	ldr	r0, [r3, #0]
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	6819      	ldr	r1, [r3, #0]
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	f000 f960 	bl	800c24c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	699a      	ldr	r2, [r3, #24]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bf9a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6999      	ldr	r1, [r3, #24]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	021a      	lsls	r2, r3, #8
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	430a      	orrs	r2, r1
 800bfae:	619a      	str	r2, [r3, #24]
 800bfb0:	e03a      	b.n	800c028 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b08      	cmp	r3, #8
 800bfb6:	d11b      	bne.n	800bff0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6818      	ldr	r0, [r3, #0]
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	6819      	ldr	r1, [r3, #0]
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	f000 f97d 	bl	800c2c6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	69da      	ldr	r2, [r3, #28]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f022 020c 	bic.w	r2, r2, #12
 800bfda:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	69d9      	ldr	r1, [r3, #28]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	689a      	ldr	r2, [r3, #8]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	430a      	orrs	r2, r1
 800bfec:	61da      	str	r2, [r3, #28]
 800bfee:	e01b      	b.n	800c028 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6818      	ldr	r0, [r3, #0]
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	6819      	ldr	r1, [r3, #0]
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	f000 f99d 	bl	800c33e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	69da      	ldr	r2, [r3, #28]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c012:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	69d9      	ldr	r1, [r3, #28]
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	021a      	lsls	r2, r3, #8
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	430a      	orrs	r2, r1
 800c026:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
	...

0800c03c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a40      	ldr	r2, [pc, #256]	; (800c150 <TIM_Base_SetConfig+0x114>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d013      	beq.n	800c07c <TIM_Base_SetConfig+0x40>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c05a:	d00f      	beq.n	800c07c <TIM_Base_SetConfig+0x40>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a3d      	ldr	r2, [pc, #244]	; (800c154 <TIM_Base_SetConfig+0x118>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d00b      	beq.n	800c07c <TIM_Base_SetConfig+0x40>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a3c      	ldr	r2, [pc, #240]	; (800c158 <TIM_Base_SetConfig+0x11c>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d007      	beq.n	800c07c <TIM_Base_SetConfig+0x40>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a3b      	ldr	r2, [pc, #236]	; (800c15c <TIM_Base_SetConfig+0x120>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d003      	beq.n	800c07c <TIM_Base_SetConfig+0x40>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a3a      	ldr	r2, [pc, #232]	; (800c160 <TIM_Base_SetConfig+0x124>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d108      	bne.n	800c08e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a2f      	ldr	r2, [pc, #188]	; (800c150 <TIM_Base_SetConfig+0x114>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d01f      	beq.n	800c0d6 <TIM_Base_SetConfig+0x9a>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c09c:	d01b      	beq.n	800c0d6 <TIM_Base_SetConfig+0x9a>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a2c      	ldr	r2, [pc, #176]	; (800c154 <TIM_Base_SetConfig+0x118>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d017      	beq.n	800c0d6 <TIM_Base_SetConfig+0x9a>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a2b      	ldr	r2, [pc, #172]	; (800c158 <TIM_Base_SetConfig+0x11c>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d013      	beq.n	800c0d6 <TIM_Base_SetConfig+0x9a>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a2a      	ldr	r2, [pc, #168]	; (800c15c <TIM_Base_SetConfig+0x120>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d00f      	beq.n	800c0d6 <TIM_Base_SetConfig+0x9a>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a29      	ldr	r2, [pc, #164]	; (800c160 <TIM_Base_SetConfig+0x124>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d00b      	beq.n	800c0d6 <TIM_Base_SetConfig+0x9a>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a28      	ldr	r2, [pc, #160]	; (800c164 <TIM_Base_SetConfig+0x128>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d007      	beq.n	800c0d6 <TIM_Base_SetConfig+0x9a>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a27      	ldr	r2, [pc, #156]	; (800c168 <TIM_Base_SetConfig+0x12c>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d003      	beq.n	800c0d6 <TIM_Base_SetConfig+0x9a>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a26      	ldr	r2, [pc, #152]	; (800c16c <TIM_Base_SetConfig+0x130>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d108      	bne.n	800c0e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	695b      	ldr	r3, [r3, #20]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	689a      	ldr	r2, [r3, #8]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4a10      	ldr	r2, [pc, #64]	; (800c150 <TIM_Base_SetConfig+0x114>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d00f      	beq.n	800c134 <TIM_Base_SetConfig+0xf8>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a12      	ldr	r2, [pc, #72]	; (800c160 <TIM_Base_SetConfig+0x124>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d00b      	beq.n	800c134 <TIM_Base_SetConfig+0xf8>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a11      	ldr	r2, [pc, #68]	; (800c164 <TIM_Base_SetConfig+0x128>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d007      	beq.n	800c134 <TIM_Base_SetConfig+0xf8>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a10      	ldr	r2, [pc, #64]	; (800c168 <TIM_Base_SetConfig+0x12c>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d003      	beq.n	800c134 <TIM_Base_SetConfig+0xf8>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a0f      	ldr	r2, [pc, #60]	; (800c16c <TIM_Base_SetConfig+0x130>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d103      	bne.n	800c13c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	691a      	ldr	r2, [r3, #16]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	615a      	str	r2, [r3, #20]
}
 800c142:	bf00      	nop
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	40012c00 	.word	0x40012c00
 800c154:	40000400 	.word	0x40000400
 800c158:	40000800 	.word	0x40000800
 800c15c:	40000c00 	.word	0x40000c00
 800c160:	40013400 	.word	0x40013400
 800c164:	40014000 	.word	0x40014000
 800c168:	40014400 	.word	0x40014400
 800c16c:	40014800 	.word	0x40014800

0800c170 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c170:	b480      	push	{r7}
 800c172:	b087      	sub	sp, #28
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
 800c17c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6a1b      	ldr	r3, [r3, #32]
 800c182:	f023 0201 	bic.w	r2, r3, #1
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6a1b      	ldr	r3, [r3, #32]
 800c194:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	4a26      	ldr	r2, [pc, #152]	; (800c234 <TIM_TI1_SetConfig+0xc4>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d017      	beq.n	800c1ce <TIM_TI1_SetConfig+0x5e>
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1a4:	d013      	beq.n	800c1ce <TIM_TI1_SetConfig+0x5e>
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	4a23      	ldr	r2, [pc, #140]	; (800c238 <TIM_TI1_SetConfig+0xc8>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d00f      	beq.n	800c1ce <TIM_TI1_SetConfig+0x5e>
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	4a22      	ldr	r2, [pc, #136]	; (800c23c <TIM_TI1_SetConfig+0xcc>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d00b      	beq.n	800c1ce <TIM_TI1_SetConfig+0x5e>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4a21      	ldr	r2, [pc, #132]	; (800c240 <TIM_TI1_SetConfig+0xd0>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d007      	beq.n	800c1ce <TIM_TI1_SetConfig+0x5e>
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	4a20      	ldr	r2, [pc, #128]	; (800c244 <TIM_TI1_SetConfig+0xd4>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d003      	beq.n	800c1ce <TIM_TI1_SetConfig+0x5e>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	4a1f      	ldr	r2, [pc, #124]	; (800c248 <TIM_TI1_SetConfig+0xd8>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d101      	bne.n	800c1d2 <TIM_TI1_SetConfig+0x62>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e000      	b.n	800c1d4 <TIM_TI1_SetConfig+0x64>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d008      	beq.n	800c1ea <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	f023 0303 	bic.w	r3, r3, #3
 800c1de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c1e0:	697a      	ldr	r2, [r7, #20]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	617b      	str	r3, [r7, #20]
 800c1e8:	e003      	b.n	800c1f2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	f043 0301 	orr.w	r3, r3, #1
 800c1f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c1f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	011b      	lsls	r3, r3, #4
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	697a      	ldr	r2, [r7, #20]
 800c202:	4313      	orrs	r3, r2
 800c204:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	f023 030a 	bic.w	r3, r3, #10
 800c20c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	f003 030a 	and.w	r3, r3, #10
 800c214:	693a      	ldr	r2, [r7, #16]
 800c216:	4313      	orrs	r3, r2
 800c218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	621a      	str	r2, [r3, #32]
}
 800c226:	bf00      	nop
 800c228:	371c      	adds	r7, #28
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	40012c00 	.word	0x40012c00
 800c238:	40000400 	.word	0x40000400
 800c23c:	40000800 	.word	0x40000800
 800c240:	40000c00 	.word	0x40000c00
 800c244:	40013400 	.word	0x40013400
 800c248:	40014000 	.word	0x40014000

0800c24c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b087      	sub	sp, #28
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
 800c258:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	6a1b      	ldr	r3, [r3, #32]
 800c25e:	f023 0210 	bic.w	r2, r3, #16
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6a1b      	ldr	r3, [r3, #32]
 800c270:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	021b      	lsls	r3, r3, #8
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	4313      	orrs	r3, r2
 800c282:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c28a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	031b      	lsls	r3, r3, #12
 800c290:	b29b      	uxth	r3, r3
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	4313      	orrs	r3, r2
 800c296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c29e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	011b      	lsls	r3, r3, #4
 800c2a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	621a      	str	r2, [r3, #32]
}
 800c2ba:	bf00      	nop
 800c2bc:	371c      	adds	r7, #28
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c2c6:	b480      	push	{r7}
 800c2c8:	b087      	sub	sp, #28
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	60f8      	str	r0, [r7, #12]
 800c2ce:	60b9      	str	r1, [r7, #8]
 800c2d0:	607a      	str	r2, [r7, #4]
 800c2d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6a1b      	ldr	r3, [r3, #32]
 800c2d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	69db      	ldr	r3, [r3, #28]
 800c2e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6a1b      	ldr	r3, [r3, #32]
 800c2ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	f023 0303 	bic.w	r3, r3, #3
 800c2f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c2f4:	697a      	ldr	r2, [r7, #20]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c302:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	011b      	lsls	r3, r3, #4
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	697a      	ldr	r2, [r7, #20]
 800c30c:	4313      	orrs	r3, r2
 800c30e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c316:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	021b      	lsls	r3, r3, #8
 800c31c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	4313      	orrs	r3, r2
 800c324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	693a      	ldr	r2, [r7, #16]
 800c330:	621a      	str	r2, [r3, #32]
}
 800c332:	bf00      	nop
 800c334:	371c      	adds	r7, #28
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c33e:	b480      	push	{r7}
 800c340:	b087      	sub	sp, #28
 800c342:	af00      	add	r7, sp, #0
 800c344:	60f8      	str	r0, [r7, #12]
 800c346:	60b9      	str	r1, [r7, #8]
 800c348:	607a      	str	r2, [r7, #4]
 800c34a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6a1b      	ldr	r3, [r3, #32]
 800c350:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	69db      	ldr	r3, [r3, #28]
 800c35c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c36a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	021b      	lsls	r3, r3, #8
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	4313      	orrs	r3, r2
 800c374:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c37c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	031b      	lsls	r3, r3, #12
 800c382:	b29b      	uxth	r3, r3
 800c384:	697a      	ldr	r2, [r7, #20]
 800c386:	4313      	orrs	r3, r2
 800c388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c390:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	031b      	lsls	r3, r3, #12
 800c396:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c39a:	693a      	ldr	r2, [r7, #16]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	697a      	ldr	r2, [r7, #20]
 800c3a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	621a      	str	r2, [r3, #32]
}
 800c3ac:	bf00      	nop
 800c3ae:	371c      	adds	r7, #28
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d101      	bne.n	800c3d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3cc:	2302      	movs	r3, #2
 800c3ce:	e068      	b.n	800c4a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2202      	movs	r2, #2
 800c3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a2e      	ldr	r2, [pc, #184]	; (800c4b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d004      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a2d      	ldr	r2, [pc, #180]	; (800c4b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d108      	bne.n	800c416 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c40a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	4313      	orrs	r3, r2
 800c414:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c41c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	4313      	orrs	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a1e      	ldr	r2, [pc, #120]	; (800c4b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d01d      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c442:	d018      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a1b      	ldr	r2, [pc, #108]	; (800c4b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d013      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a1a      	ldr	r2, [pc, #104]	; (800c4bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d00e      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a18      	ldr	r2, [pc, #96]	; (800c4c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d009      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a13      	ldr	r2, [pc, #76]	; (800c4b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d004      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a14      	ldr	r2, [pc, #80]	; (800c4c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d10c      	bne.n	800c490 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c47c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	4313      	orrs	r3, r2
 800c486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	40012c00 	.word	0x40012c00
 800c4b4:	40013400 	.word	0x40013400
 800c4b8:	40000400 	.word	0x40000400
 800c4bc:	40000800 	.word	0x40000800
 800c4c0:	40000c00 	.word	0x40000c00
 800c4c4:	40014000 	.word	0x40014000

0800c4c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e042      	b.n	800c560 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d106      	bne.n	800c4f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f7f8 f867 	bl	80045c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2224      	movs	r2, #36	; 0x24
 800c4f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f022 0201 	bic.w	r2, r2, #1
 800c508:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f8c2 	bl	800c694 <UART_SetConfig>
 800c510:	4603      	mov	r3, r0
 800c512:	2b01      	cmp	r3, #1
 800c514:	d101      	bne.n	800c51a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c516:	2301      	movs	r3, #1
 800c518:	e022      	b.n	800c560 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d002      	beq.n	800c528 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fb88 	bl	800cc38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	685a      	ldr	r2, [r3, #4]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	689a      	ldr	r2, [r3, #8]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f042 0201 	orr.w	r2, r2, #1
 800c556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fc0f 	bl	800cd7c <UART_CheckIdleState>
 800c55e:	4603      	mov	r3, r0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08a      	sub	sp, #40	; 0x28
 800c56c:	af02      	add	r7, sp, #8
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	603b      	str	r3, [r7, #0]
 800c574:	4613      	mov	r3, r2
 800c576:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c57e:	2b20      	cmp	r3, #32
 800c580:	f040 8083 	bne.w	800c68a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d002      	beq.n	800c590 <HAL_UART_Transmit+0x28>
 800c58a:	88fb      	ldrh	r3, [r7, #6]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d101      	bne.n	800c594 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	e07b      	b.n	800c68c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d101      	bne.n	800c5a2 <HAL_UART_Transmit+0x3a>
 800c59e:	2302      	movs	r3, #2
 800c5a0:	e074      	b.n	800c68c <HAL_UART_Transmit+0x124>
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2221      	movs	r2, #33	; 0x21
 800c5b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c5ba:	f7f8 faad 	bl	8004b18 <HAL_GetTick>
 800c5be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	88fa      	ldrh	r2, [r7, #6]
 800c5c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	88fa      	ldrh	r2, [r7, #6]
 800c5cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5d8:	d108      	bne.n	800c5ec <HAL_UART_Transmit+0x84>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d104      	bne.n	800c5ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	61bb      	str	r3, [r7, #24]
 800c5ea:	e003      	b.n	800c5f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800c5fc:	e02c      	b.n	800c658 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	2200      	movs	r2, #0
 800c606:	2180      	movs	r1, #128	; 0x80
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f000 fbff 	bl	800ce0c <UART_WaitOnFlagUntilTimeout>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d001      	beq.n	800c618 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c614:	2303      	movs	r3, #3
 800c616:	e039      	b.n	800c68c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10b      	bne.n	800c636 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	881b      	ldrh	r3, [r3, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c62c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	3302      	adds	r3, #2
 800c632:	61bb      	str	r3, [r7, #24]
 800c634:	e007      	b.n	800c646 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	781a      	ldrb	r2, [r3, #0]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	3301      	adds	r3, #1
 800c644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	3b01      	subs	r3, #1
 800c650:	b29a      	uxth	r2, r3
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c65e:	b29b      	uxth	r3, r3
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1cc      	bne.n	800c5fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2200      	movs	r2, #0
 800c66c:	2140      	movs	r1, #64	; 0x40
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	f000 fbcc 	bl	800ce0c <UART_WaitOnFlagUntilTimeout>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c67a:	2303      	movs	r3, #3
 800c67c:	e006      	b.n	800c68c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2220      	movs	r2, #32
 800c682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800c686:	2300      	movs	r3, #0
 800c688:	e000      	b.n	800c68c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c68a:	2302      	movs	r3, #2
  }
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3720      	adds	r7, #32
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c694:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c698:	b088      	sub	sp, #32
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	689a      	ldr	r2, [r3, #8]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	431a      	orrs	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	695b      	ldr	r3, [r3, #20]
 800c6b0:	431a      	orrs	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	69db      	ldr	r3, [r3, #28]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6be:	69fa      	ldr	r2, [r7, #28]
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	4bb1      	ldr	r3, [pc, #708]	; (800c990 <UART_SetConfig+0x2fc>)
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	6812      	ldr	r2, [r2, #0]
 800c6d2:	69f9      	ldr	r1, [r7, #28]
 800c6d4:	430b      	orrs	r3, r1
 800c6d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68da      	ldr	r2, [r3, #12]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	430a      	orrs	r2, r1
 800c6ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	699b      	ldr	r3, [r3, #24]
 800c6f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4aa6      	ldr	r2, [pc, #664]	; (800c994 <UART_SetConfig+0x300>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d004      	beq.n	800c708 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a1b      	ldr	r3, [r3, #32]
 800c702:	69fa      	ldr	r2, [r7, #28]
 800c704:	4313      	orrs	r3, r2
 800c706:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c712:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	6812      	ldr	r2, [r2, #0]
 800c71a:	69f9      	ldr	r1, [r7, #28]
 800c71c:	430b      	orrs	r3, r1
 800c71e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c726:	f023 010f 	bic.w	r1, r3, #15
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	430a      	orrs	r2, r1
 800c734:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a97      	ldr	r2, [pc, #604]	; (800c998 <UART_SetConfig+0x304>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d121      	bne.n	800c784 <UART_SetConfig+0xf0>
 800c740:	4b96      	ldr	r3, [pc, #600]	; (800c99c <UART_SetConfig+0x308>)
 800c742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c746:	f003 0303 	and.w	r3, r3, #3
 800c74a:	2b03      	cmp	r3, #3
 800c74c:	d816      	bhi.n	800c77c <UART_SetConfig+0xe8>
 800c74e:	a201      	add	r2, pc, #4	; (adr r2, 800c754 <UART_SetConfig+0xc0>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c765 	.word	0x0800c765
 800c758:	0800c771 	.word	0x0800c771
 800c75c:	0800c76b 	.word	0x0800c76b
 800c760:	0800c777 	.word	0x0800c777
 800c764:	2301      	movs	r3, #1
 800c766:	76fb      	strb	r3, [r7, #27]
 800c768:	e0e8      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c76a:	2302      	movs	r3, #2
 800c76c:	76fb      	strb	r3, [r7, #27]
 800c76e:	e0e5      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c770:	2304      	movs	r3, #4
 800c772:	76fb      	strb	r3, [r7, #27]
 800c774:	e0e2      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c776:	2308      	movs	r3, #8
 800c778:	76fb      	strb	r3, [r7, #27]
 800c77a:	e0df      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c77c:	2310      	movs	r3, #16
 800c77e:	76fb      	strb	r3, [r7, #27]
 800c780:	bf00      	nop
 800c782:	e0db      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a85      	ldr	r2, [pc, #532]	; (800c9a0 <UART_SetConfig+0x30c>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d134      	bne.n	800c7f8 <UART_SetConfig+0x164>
 800c78e:	4b83      	ldr	r3, [pc, #524]	; (800c99c <UART_SetConfig+0x308>)
 800c790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c794:	f003 030c 	and.w	r3, r3, #12
 800c798:	2b0c      	cmp	r3, #12
 800c79a:	d829      	bhi.n	800c7f0 <UART_SetConfig+0x15c>
 800c79c:	a201      	add	r2, pc, #4	; (adr r2, 800c7a4 <UART_SetConfig+0x110>)
 800c79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a2:	bf00      	nop
 800c7a4:	0800c7d9 	.word	0x0800c7d9
 800c7a8:	0800c7f1 	.word	0x0800c7f1
 800c7ac:	0800c7f1 	.word	0x0800c7f1
 800c7b0:	0800c7f1 	.word	0x0800c7f1
 800c7b4:	0800c7e5 	.word	0x0800c7e5
 800c7b8:	0800c7f1 	.word	0x0800c7f1
 800c7bc:	0800c7f1 	.word	0x0800c7f1
 800c7c0:	0800c7f1 	.word	0x0800c7f1
 800c7c4:	0800c7df 	.word	0x0800c7df
 800c7c8:	0800c7f1 	.word	0x0800c7f1
 800c7cc:	0800c7f1 	.word	0x0800c7f1
 800c7d0:	0800c7f1 	.word	0x0800c7f1
 800c7d4:	0800c7eb 	.word	0x0800c7eb
 800c7d8:	2300      	movs	r3, #0
 800c7da:	76fb      	strb	r3, [r7, #27]
 800c7dc:	e0ae      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c7de:	2302      	movs	r3, #2
 800c7e0:	76fb      	strb	r3, [r7, #27]
 800c7e2:	e0ab      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c7e4:	2304      	movs	r3, #4
 800c7e6:	76fb      	strb	r3, [r7, #27]
 800c7e8:	e0a8      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c7ea:	2308      	movs	r3, #8
 800c7ec:	76fb      	strb	r3, [r7, #27]
 800c7ee:	e0a5      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c7f0:	2310      	movs	r3, #16
 800c7f2:	76fb      	strb	r3, [r7, #27]
 800c7f4:	bf00      	nop
 800c7f6:	e0a1      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a69      	ldr	r2, [pc, #420]	; (800c9a4 <UART_SetConfig+0x310>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d120      	bne.n	800c844 <UART_SetConfig+0x1b0>
 800c802:	4b66      	ldr	r3, [pc, #408]	; (800c99c <UART_SetConfig+0x308>)
 800c804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c808:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c80c:	2b10      	cmp	r3, #16
 800c80e:	d00f      	beq.n	800c830 <UART_SetConfig+0x19c>
 800c810:	2b10      	cmp	r3, #16
 800c812:	d802      	bhi.n	800c81a <UART_SetConfig+0x186>
 800c814:	2b00      	cmp	r3, #0
 800c816:	d005      	beq.n	800c824 <UART_SetConfig+0x190>
 800c818:	e010      	b.n	800c83c <UART_SetConfig+0x1a8>
 800c81a:	2b20      	cmp	r3, #32
 800c81c:	d005      	beq.n	800c82a <UART_SetConfig+0x196>
 800c81e:	2b30      	cmp	r3, #48	; 0x30
 800c820:	d009      	beq.n	800c836 <UART_SetConfig+0x1a2>
 800c822:	e00b      	b.n	800c83c <UART_SetConfig+0x1a8>
 800c824:	2300      	movs	r3, #0
 800c826:	76fb      	strb	r3, [r7, #27]
 800c828:	e088      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c82a:	2302      	movs	r3, #2
 800c82c:	76fb      	strb	r3, [r7, #27]
 800c82e:	e085      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c830:	2304      	movs	r3, #4
 800c832:	76fb      	strb	r3, [r7, #27]
 800c834:	e082      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c836:	2308      	movs	r3, #8
 800c838:	76fb      	strb	r3, [r7, #27]
 800c83a:	e07f      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c83c:	2310      	movs	r3, #16
 800c83e:	76fb      	strb	r3, [r7, #27]
 800c840:	bf00      	nop
 800c842:	e07b      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a57      	ldr	r2, [pc, #348]	; (800c9a8 <UART_SetConfig+0x314>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d120      	bne.n	800c890 <UART_SetConfig+0x1fc>
 800c84e:	4b53      	ldr	r3, [pc, #332]	; (800c99c <UART_SetConfig+0x308>)
 800c850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c854:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c858:	2b40      	cmp	r3, #64	; 0x40
 800c85a:	d00f      	beq.n	800c87c <UART_SetConfig+0x1e8>
 800c85c:	2b40      	cmp	r3, #64	; 0x40
 800c85e:	d802      	bhi.n	800c866 <UART_SetConfig+0x1d2>
 800c860:	2b00      	cmp	r3, #0
 800c862:	d005      	beq.n	800c870 <UART_SetConfig+0x1dc>
 800c864:	e010      	b.n	800c888 <UART_SetConfig+0x1f4>
 800c866:	2b80      	cmp	r3, #128	; 0x80
 800c868:	d005      	beq.n	800c876 <UART_SetConfig+0x1e2>
 800c86a:	2bc0      	cmp	r3, #192	; 0xc0
 800c86c:	d009      	beq.n	800c882 <UART_SetConfig+0x1ee>
 800c86e:	e00b      	b.n	800c888 <UART_SetConfig+0x1f4>
 800c870:	2300      	movs	r3, #0
 800c872:	76fb      	strb	r3, [r7, #27]
 800c874:	e062      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c876:	2302      	movs	r3, #2
 800c878:	76fb      	strb	r3, [r7, #27]
 800c87a:	e05f      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c87c:	2304      	movs	r3, #4
 800c87e:	76fb      	strb	r3, [r7, #27]
 800c880:	e05c      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c882:	2308      	movs	r3, #8
 800c884:	76fb      	strb	r3, [r7, #27]
 800c886:	e059      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c888:	2310      	movs	r3, #16
 800c88a:	76fb      	strb	r3, [r7, #27]
 800c88c:	bf00      	nop
 800c88e:	e055      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a45      	ldr	r2, [pc, #276]	; (800c9ac <UART_SetConfig+0x318>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d124      	bne.n	800c8e4 <UART_SetConfig+0x250>
 800c89a:	4b40      	ldr	r3, [pc, #256]	; (800c99c <UART_SetConfig+0x308>)
 800c89c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8a8:	d012      	beq.n	800c8d0 <UART_SetConfig+0x23c>
 800c8aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ae:	d802      	bhi.n	800c8b6 <UART_SetConfig+0x222>
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d007      	beq.n	800c8c4 <UART_SetConfig+0x230>
 800c8b4:	e012      	b.n	800c8dc <UART_SetConfig+0x248>
 800c8b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8ba:	d006      	beq.n	800c8ca <UART_SetConfig+0x236>
 800c8bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8c0:	d009      	beq.n	800c8d6 <UART_SetConfig+0x242>
 800c8c2:	e00b      	b.n	800c8dc <UART_SetConfig+0x248>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	76fb      	strb	r3, [r7, #27]
 800c8c8:	e038      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c8ca:	2302      	movs	r3, #2
 800c8cc:	76fb      	strb	r3, [r7, #27]
 800c8ce:	e035      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c8d0:	2304      	movs	r3, #4
 800c8d2:	76fb      	strb	r3, [r7, #27]
 800c8d4:	e032      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c8d6:	2308      	movs	r3, #8
 800c8d8:	76fb      	strb	r3, [r7, #27]
 800c8da:	e02f      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c8dc:	2310      	movs	r3, #16
 800c8de:	76fb      	strb	r3, [r7, #27]
 800c8e0:	bf00      	nop
 800c8e2:	e02b      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a2a      	ldr	r2, [pc, #168]	; (800c994 <UART_SetConfig+0x300>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d124      	bne.n	800c938 <UART_SetConfig+0x2a4>
 800c8ee:	4b2b      	ldr	r3, [pc, #172]	; (800c99c <UART_SetConfig+0x308>)
 800c8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c8f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8fc:	d012      	beq.n	800c924 <UART_SetConfig+0x290>
 800c8fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c902:	d802      	bhi.n	800c90a <UART_SetConfig+0x276>
 800c904:	2b00      	cmp	r3, #0
 800c906:	d007      	beq.n	800c918 <UART_SetConfig+0x284>
 800c908:	e012      	b.n	800c930 <UART_SetConfig+0x29c>
 800c90a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c90e:	d006      	beq.n	800c91e <UART_SetConfig+0x28a>
 800c910:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c914:	d009      	beq.n	800c92a <UART_SetConfig+0x296>
 800c916:	e00b      	b.n	800c930 <UART_SetConfig+0x29c>
 800c918:	2300      	movs	r3, #0
 800c91a:	76fb      	strb	r3, [r7, #27]
 800c91c:	e00e      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c91e:	2302      	movs	r3, #2
 800c920:	76fb      	strb	r3, [r7, #27]
 800c922:	e00b      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c924:	2304      	movs	r3, #4
 800c926:	76fb      	strb	r3, [r7, #27]
 800c928:	e008      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c92a:	2308      	movs	r3, #8
 800c92c:	76fb      	strb	r3, [r7, #27]
 800c92e:	e005      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c930:	2310      	movs	r3, #16
 800c932:	76fb      	strb	r3, [r7, #27]
 800c934:	bf00      	nop
 800c936:	e001      	b.n	800c93c <UART_SetConfig+0x2a8>
 800c938:	2310      	movs	r3, #16
 800c93a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a14      	ldr	r2, [pc, #80]	; (800c994 <UART_SetConfig+0x300>)
 800c942:	4293      	cmp	r3, r2
 800c944:	f040 80a1 	bne.w	800ca8a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c948:	7efb      	ldrb	r3, [r7, #27]
 800c94a:	2b08      	cmp	r3, #8
 800c94c:	d836      	bhi.n	800c9bc <UART_SetConfig+0x328>
 800c94e:	a201      	add	r2, pc, #4	; (adr r2, 800c954 <UART_SetConfig+0x2c0>)
 800c950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c954:	0800c979 	.word	0x0800c979
 800c958:	0800c9bd 	.word	0x0800c9bd
 800c95c:	0800c981 	.word	0x0800c981
 800c960:	0800c9bd 	.word	0x0800c9bd
 800c964:	0800c987 	.word	0x0800c987
 800c968:	0800c9bd 	.word	0x0800c9bd
 800c96c:	0800c9bd 	.word	0x0800c9bd
 800c970:	0800c9bd 	.word	0x0800c9bd
 800c974:	0800c9b5 	.word	0x0800c9b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c978:	f7fc f9fc 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 800c97c:	6178      	str	r0, [r7, #20]
        break;
 800c97e:	e022      	b.n	800c9c6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c980:	4b0b      	ldr	r3, [pc, #44]	; (800c9b0 <UART_SetConfig+0x31c>)
 800c982:	617b      	str	r3, [r7, #20]
        break;
 800c984:	e01f      	b.n	800c9c6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c986:	f7fc f95f 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800c98a:	6178      	str	r0, [r7, #20]
        break;
 800c98c:	e01b      	b.n	800c9c6 <UART_SetConfig+0x332>
 800c98e:	bf00      	nop
 800c990:	cfff69f3 	.word	0xcfff69f3
 800c994:	40008000 	.word	0x40008000
 800c998:	40013800 	.word	0x40013800
 800c99c:	40021000 	.word	0x40021000
 800c9a0:	40004400 	.word	0x40004400
 800c9a4:	40004800 	.word	0x40004800
 800c9a8:	40004c00 	.word	0x40004c00
 800c9ac:	40005000 	.word	0x40005000
 800c9b0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9b8:	617b      	str	r3, [r7, #20]
        break;
 800c9ba:	e004      	b.n	800c9c6 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	76bb      	strb	r3, [r7, #26]
        break;
 800c9c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 811d 	beq.w	800cc08 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d2:	4a97      	ldr	r2, [pc, #604]	; (800cc30 <UART_SetConfig+0x59c>)
 800c9d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9d8:	461a      	mov	r2, r3
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9e0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	685a      	ldr	r2, [r3, #4]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	4413      	add	r3, r2
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d305      	bcc.n	800c9fe <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d902      	bls.n	800ca04 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	76bb      	strb	r3, [r7, #26]
 800ca02:	e101      	b.n	800cc08 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f04f 0100 	mov.w	r1, #0
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca10:	4a87      	ldr	r2, [pc, #540]	; (800cc30 <UART_SetConfig+0x59c>)
 800ca12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	f04f 0400 	mov.w	r4, #0
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	4623      	mov	r3, r4
 800ca20:	f7f4 f924 	bl	8000c6c <__aeabi_uldivmod>
 800ca24:	4603      	mov	r3, r0
 800ca26:	460c      	mov	r4, r1
 800ca28:	4619      	mov	r1, r3
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	f04f 0300 	mov.w	r3, #0
 800ca30:	f04f 0400 	mov.w	r4, #0
 800ca34:	0214      	lsls	r4, r2, #8
 800ca36:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ca3a:	020b      	lsls	r3, r1, #8
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	6852      	ldr	r2, [r2, #4]
 800ca40:	0852      	lsrs	r2, r2, #1
 800ca42:	4611      	mov	r1, r2
 800ca44:	f04f 0200 	mov.w	r2, #0
 800ca48:	eb13 0b01 	adds.w	fp, r3, r1
 800ca4c:	eb44 0c02 	adc.w	ip, r4, r2
 800ca50:	4658      	mov	r0, fp
 800ca52:	4661      	mov	r1, ip
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	f04f 0400 	mov.w	r4, #0
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	4623      	mov	r3, r4
 800ca60:	f7f4 f904 	bl	8000c6c <__aeabi_uldivmod>
 800ca64:	4603      	mov	r3, r0
 800ca66:	460c      	mov	r4, r1
 800ca68:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca70:	d308      	bcc.n	800ca84 <UART_SetConfig+0x3f0>
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca78:	d204      	bcs.n	800ca84 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	693a      	ldr	r2, [r7, #16]
 800ca80:	60da      	str	r2, [r3, #12]
 800ca82:	e0c1      	b.n	800cc08 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	76bb      	strb	r3, [r7, #26]
 800ca88:	e0be      	b.n	800cc08 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	69db      	ldr	r3, [r3, #28]
 800ca8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca92:	d164      	bne.n	800cb5e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800ca94:	7efb      	ldrb	r3, [r7, #27]
 800ca96:	2b08      	cmp	r3, #8
 800ca98:	d827      	bhi.n	800caea <UART_SetConfig+0x456>
 800ca9a:	a201      	add	r2, pc, #4	; (adr r2, 800caa0 <UART_SetConfig+0x40c>)
 800ca9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa0:	0800cac5 	.word	0x0800cac5
 800caa4:	0800cacd 	.word	0x0800cacd
 800caa8:	0800cad5 	.word	0x0800cad5
 800caac:	0800caeb 	.word	0x0800caeb
 800cab0:	0800cadb 	.word	0x0800cadb
 800cab4:	0800caeb 	.word	0x0800caeb
 800cab8:	0800caeb 	.word	0x0800caeb
 800cabc:	0800caeb 	.word	0x0800caeb
 800cac0:	0800cae3 	.word	0x0800cae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cac4:	f7fc f956 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 800cac8:	6178      	str	r0, [r7, #20]
        break;
 800caca:	e013      	b.n	800caf4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cacc:	f7fc f968 	bl	8008da0 <HAL_RCC_GetPCLK2Freq>
 800cad0:	6178      	str	r0, [r7, #20]
        break;
 800cad2:	e00f      	b.n	800caf4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cad4:	4b57      	ldr	r3, [pc, #348]	; (800cc34 <UART_SetConfig+0x5a0>)
 800cad6:	617b      	str	r3, [r7, #20]
        break;
 800cad8:	e00c      	b.n	800caf4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cada:	f7fc f8b5 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800cade:	6178      	str	r0, [r7, #20]
        break;
 800cae0:	e008      	b.n	800caf4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cae6:	617b      	str	r3, [r7, #20]
        break;
 800cae8:	e004      	b.n	800caf4 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800caea:	2300      	movs	r3, #0
 800caec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800caee:	2301      	movs	r3, #1
 800caf0:	76bb      	strb	r3, [r7, #26]
        break;
 800caf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	f000 8086 	beq.w	800cc08 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb00:	4a4b      	ldr	r2, [pc, #300]	; (800cc30 <UART_SetConfig+0x59c>)
 800cb02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb06:	461a      	mov	r2, r3
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb0e:	005a      	lsls	r2, r3, #1
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	085b      	lsrs	r3, r3, #1
 800cb16:	441a      	add	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	2b0f      	cmp	r3, #15
 800cb28:	d916      	bls.n	800cb58 <UART_SetConfig+0x4c4>
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb30:	d212      	bcs.n	800cb58 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	f023 030f 	bic.w	r3, r3, #15
 800cb3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	085b      	lsrs	r3, r3, #1
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	89fb      	ldrh	r3, [r7, #14]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	89fa      	ldrh	r2, [r7, #14]
 800cb54:	60da      	str	r2, [r3, #12]
 800cb56:	e057      	b.n	800cc08 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	76bb      	strb	r3, [r7, #26]
 800cb5c:	e054      	b.n	800cc08 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb5e:	7efb      	ldrb	r3, [r7, #27]
 800cb60:	2b08      	cmp	r3, #8
 800cb62:	d828      	bhi.n	800cbb6 <UART_SetConfig+0x522>
 800cb64:	a201      	add	r2, pc, #4	; (adr r2, 800cb6c <UART_SetConfig+0x4d8>)
 800cb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb6a:	bf00      	nop
 800cb6c:	0800cb91 	.word	0x0800cb91
 800cb70:	0800cb99 	.word	0x0800cb99
 800cb74:	0800cba1 	.word	0x0800cba1
 800cb78:	0800cbb7 	.word	0x0800cbb7
 800cb7c:	0800cba7 	.word	0x0800cba7
 800cb80:	0800cbb7 	.word	0x0800cbb7
 800cb84:	0800cbb7 	.word	0x0800cbb7
 800cb88:	0800cbb7 	.word	0x0800cbb7
 800cb8c:	0800cbaf 	.word	0x0800cbaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb90:	f7fc f8f0 	bl	8008d74 <HAL_RCC_GetPCLK1Freq>
 800cb94:	6178      	str	r0, [r7, #20]
        break;
 800cb96:	e013      	b.n	800cbc0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb98:	f7fc f902 	bl	8008da0 <HAL_RCC_GetPCLK2Freq>
 800cb9c:	6178      	str	r0, [r7, #20]
        break;
 800cb9e:	e00f      	b.n	800cbc0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cba0:	4b24      	ldr	r3, [pc, #144]	; (800cc34 <UART_SetConfig+0x5a0>)
 800cba2:	617b      	str	r3, [r7, #20]
        break;
 800cba4:	e00c      	b.n	800cbc0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cba6:	f7fc f84f 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800cbaa:	6178      	str	r0, [r7, #20]
        break;
 800cbac:	e008      	b.n	800cbc0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbb2:	617b      	str	r3, [r7, #20]
        break;
 800cbb4:	e004      	b.n	800cbc0 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	76bb      	strb	r3, [r7, #26]
        break;
 800cbbe:	bf00      	nop
    }

    if (pclk != 0U)
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d020      	beq.n	800cc08 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbca:	4a19      	ldr	r2, [pc, #100]	; (800cc30 <UART_SetConfig+0x59c>)
 800cbcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	085b      	lsrs	r3, r3, #1
 800cbde:	441a      	add	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	2b0f      	cmp	r3, #15
 800cbf0:	d908      	bls.n	800cc04 <UART_SetConfig+0x570>
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbf8:	d204      	bcs.n	800cc04 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	693a      	ldr	r2, [r7, #16]
 800cc00:	60da      	str	r2, [r3, #12]
 800cc02:	e001      	b.n	800cc08 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800cc24:	7ebb      	ldrb	r3, [r7, #26]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3720      	adds	r7, #32
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800cc30:	08011f40 	.word	0x08011f40
 800cc34:	00f42400 	.word	0x00f42400

0800cc38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc44:	f003 0301 	and.w	r3, r3, #1
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00a      	beq.n	800cc62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	430a      	orrs	r2, r1
 800cc60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc66:	f003 0302 	and.w	r3, r3, #2
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00a      	beq.n	800cc84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	430a      	orrs	r2, r1
 800cc82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc88:	f003 0304 	and.w	r3, r3, #4
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00a      	beq.n	800cca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	430a      	orrs	r2, r1
 800cca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccaa:	f003 0308 	and.w	r3, r3, #8
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00a      	beq.n	800ccc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	430a      	orrs	r2, r1
 800ccc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cccc:	f003 0310 	and.w	r3, r3, #16
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00a      	beq.n	800ccea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	430a      	orrs	r2, r1
 800cce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccee:	f003 0320 	and.w	r3, r3, #32
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00a      	beq.n	800cd0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	430a      	orrs	r2, r1
 800cd0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d01a      	beq.n	800cd4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	430a      	orrs	r2, r1
 800cd2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd36:	d10a      	bne.n	800cd4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	430a      	orrs	r2, r1
 800cd4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00a      	beq.n	800cd70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	430a      	orrs	r2, r1
 800cd6e:	605a      	str	r2, [r3, #4]
  }
}
 800cd70:	bf00      	nop
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af02      	add	r7, sp, #8
 800cd82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800cd8c:	f7f7 fec4 	bl	8004b18 <HAL_GetTick>
 800cd90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f003 0308 	and.w	r3, r3, #8
 800cd9c:	2b08      	cmp	r3, #8
 800cd9e:	d10e      	bne.n	800cdbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cda0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 f82c 	bl	800ce0c <UART_WaitOnFlagUntilTimeout>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d001      	beq.n	800cdbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	e022      	b.n	800ce04 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 0304 	and.w	r3, r3, #4
 800cdc8:	2b04      	cmp	r3, #4
 800cdca:	d10e      	bne.n	800cdea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f816 	bl	800ce0c <UART_WaitOnFlagUntilTimeout>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d001      	beq.n	800cdea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cde6:	2303      	movs	r3, #3
 800cde8:	e00c      	b.n	800ce04 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2220      	movs	r2, #32
 800cdee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2220      	movs	r2, #32
 800cdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	603b      	str	r3, [r7, #0]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce1c:	e062      	b.n	800cee4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce24:	d05e      	beq.n	800cee4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce26:	f7f7 fe77 	bl	8004b18 <HAL_GetTick>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	69ba      	ldr	r2, [r7, #24]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d302      	bcc.n	800ce3c <UART_WaitOnFlagUntilTimeout+0x30>
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d11d      	bne.n	800ce78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ce4a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	689a      	ldr	r2, [r3, #8]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f022 0201 	bic.w	r2, r2, #1
 800ce5a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2220      	movs	r2, #32
 800ce60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2220      	movs	r2, #32
 800ce68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ce74:	2303      	movs	r3, #3
 800ce76:	e045      	b.n	800cf04 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f003 0304 	and.w	r3, r3, #4
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d02e      	beq.n	800cee4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	69db      	ldr	r3, [r3, #28]
 800ce8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce94:	d126      	bne.n	800cee4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce9e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ceae:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	689a      	ldr	r2, [r3, #8]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f022 0201 	bic.w	r2, r2, #1
 800cebe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2220      	movs	r2, #32
 800cec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2220      	movs	r2, #32
 800cecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2220      	movs	r2, #32
 800ced4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800cee0:	2303      	movs	r3, #3
 800cee2:	e00f      	b.n	800cf04 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	69da      	ldr	r2, [r3, #28]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	4013      	ands	r3, r2
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	bf0c      	ite	eq
 800cef4:	2301      	moveq	r3, #1
 800cef6:	2300      	movne	r3, #0
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	461a      	mov	r2, r3
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d08d      	beq.n	800ce1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf02:	2300      	movs	r3, #0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d101      	bne.n	800cf22 <HAL_UARTEx_DisableFifoMode+0x16>
 800cf1e:	2302      	movs	r3, #2
 800cf20:	e027      	b.n	800cf72 <HAL_UARTEx_DisableFifoMode+0x66>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2201      	movs	r2, #1
 800cf26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2224      	movs	r2, #36	; 0x24
 800cf2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f022 0201 	bic.w	r2, r2, #1
 800cf48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cf50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2220      	movs	r2, #32
 800cf64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3714      	adds	r7, #20
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr

0800cf7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b084      	sub	sp, #16
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
 800cf86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d101      	bne.n	800cf96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf92:	2302      	movs	r3, #2
 800cf94:	e02d      	b.n	800cff2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2224      	movs	r2, #36	; 0x24
 800cfa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f022 0201 	bic.w	r2, r2, #1
 800cfbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	683a      	ldr	r2, [r7, #0]
 800cfce:	430a      	orrs	r2, r1
 800cfd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f850 	bl	800d078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2220      	movs	r2, #32
 800cfe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cff0:	2300      	movs	r3, #0
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b084      	sub	sp, #16
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d101      	bne.n	800d012 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d00e:	2302      	movs	r3, #2
 800d010:	e02d      	b.n	800d06e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2201      	movs	r2, #1
 800d016:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2224      	movs	r2, #36	; 0x24
 800d01e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f022 0201 	bic.w	r2, r2, #1
 800d038:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	683a      	ldr	r2, [r7, #0]
 800d04a:	430a      	orrs	r2, r1
 800d04c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 f812 	bl	800d078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2220      	movs	r2, #32
 800d060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d078:	b480      	push	{r7}
 800d07a:	b089      	sub	sp, #36	; 0x24
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d080:	4a2f      	ldr	r2, [pc, #188]	; (800d140 <UARTEx_SetNbDataToProcess+0xc8>)
 800d082:	f107 0314 	add.w	r3, r7, #20
 800d086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d08a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d08e:	4a2d      	ldr	r2, [pc, #180]	; (800d144 <UARTEx_SetNbDataToProcess+0xcc>)
 800d090:	f107 030c 	add.w	r3, r7, #12
 800d094:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d098:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d108      	bne.n	800d0b6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d0b4:	e03d      	b.n	800d132 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d0b6:	2308      	movs	r3, #8
 800d0b8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d0ba:	2308      	movs	r3, #8
 800d0bc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	0e5b      	lsrs	r3, r3, #25
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	f003 0307 	and.w	r3, r3, #7
 800d0cc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	0f5b      	lsrs	r3, r3, #29
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	f003 0307 	and.w	r3, r3, #7
 800d0dc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d0de:	7fbb      	ldrb	r3, [r7, #30]
 800d0e0:	7f3a      	ldrb	r2, [r7, #28]
 800d0e2:	f107 0120 	add.w	r1, r7, #32
 800d0e6:	440a      	add	r2, r1
 800d0e8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d0ec:	fb02 f303 	mul.w	r3, r2, r3
 800d0f0:	7f3a      	ldrb	r2, [r7, #28]
 800d0f2:	f107 0120 	add.w	r1, r7, #32
 800d0f6:	440a      	add	r2, r1
 800d0f8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d0fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d100:	b29a      	uxth	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d108:	7ffb      	ldrb	r3, [r7, #31]
 800d10a:	7f7a      	ldrb	r2, [r7, #29]
 800d10c:	f107 0120 	add.w	r1, r7, #32
 800d110:	440a      	add	r2, r1
 800d112:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d116:	fb02 f303 	mul.w	r3, r2, r3
 800d11a:	7f7a      	ldrb	r2, [r7, #29]
 800d11c:	f107 0120 	add.w	r1, r7, #32
 800d120:	440a      	add	r2, r1
 800d122:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d126:	fb93 f3f2 	sdiv	r3, r3, r2
 800d12a:	b29a      	uxth	r2, r3
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d132:	bf00      	nop
 800d134:	3724      	adds	r7, #36	; 0x24
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop
 800d140:	08011cac 	.word	0x08011cac
 800d144:	08011cb4 	.word	0x08011cb4

0800d148 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d148:	b084      	sub	sp, #16
 800d14a:	b480      	push	{r7}
 800d14c:	b085      	sub	sp, #20
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
 800d152:	f107 001c 	add.w	r0, r7, #28
 800d156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d15a:	2300      	movs	r3, #0
 800d15c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800d15e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d160:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d162:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800d166:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d168:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800d16a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800d16e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	4313      	orrs	r3, r2
 800d174:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	685a      	ldr	r2, [r3, #4]
 800d17a:	4b07      	ldr	r3, [pc, #28]	; (800d198 <SDMMC_Init+0x50>)
 800d17c:	4013      	ands	r3, r2
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	431a      	orrs	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d186:	2300      	movs	r3, #0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3714      	adds	r7, #20
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	b004      	add	sp, #16
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	ffc02c00 	.word	0xffc02c00

0800d19c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	370c      	adds	r7, #12
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr

0800d1b6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b082      	sub	sp, #8
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f043 0203 	orr.w	r2, r3, #3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d1ca:	2002      	movs	r0, #2
 800d1cc:	f7f7 fcb0 	bl	8004b30 <HAL_Delay>

  return HAL_OK;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3708      	adds	r7, #8
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d1da:	b480      	push	{r7}
 800d1dc:	b083      	sub	sp, #12
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f003 0303 	and.w	r3, r3, #3
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	370c      	adds	r7, #12
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
	...

0800d1f8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d216:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d21c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d222:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	4313      	orrs	r3, r2
 800d228:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	68da      	ldr	r2, [r3, #12]
 800d22e:	4b06      	ldr	r3, [pc, #24]	; (800d248 <SDMMC_SendCommand+0x50>)
 800d230:	4013      	ands	r3, r2
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	431a      	orrs	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3714      	adds	r7, #20
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	fffee0c0 	.word	0xfffee0c0

0800d24c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	691b      	ldr	r3, [r3, #16]
 800d258:	b2db      	uxtb	r3, r3
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	370c      	adds	r7, #12
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d266:	b480      	push	{r7}
 800d268:	b085      	sub	sp, #20
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	3314      	adds	r3, #20
 800d274:	461a      	mov	r2, r3
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	4413      	add	r3, r2
 800d27a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	685a      	ldr	r2, [r3, #4]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d2b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d2b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d2be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	431a      	orrs	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d2d6:	2300      	movs	r3, #0

}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3714      	adds	r7, #20
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b088      	sub	sp, #32
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d2f2:	2310      	movs	r3, #16
 800d2f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d304:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d306:	f107 0308 	add.w	r3, r7, #8
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7ff ff73 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d312:	f241 3288 	movw	r2, #5000	; 0x1388
 800d316:	2110      	movs	r1, #16
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 f9b9 	bl	800d690 <SDMMC_GetCmdResp1>
 800d31e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d320:	69fb      	ldr	r3, [r7, #28]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3720      	adds	r7, #32
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b08a      	sub	sp, #40	; 0x28
 800d32e:	af00      	add	r7, sp, #0
 800d330:	60f8      	str	r0, [r7, #12]
 800d332:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d33a:	2307      	movs	r3, #7
 800d33c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d33e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d342:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d344:	2300      	movs	r3, #0
 800d346:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d34c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d34e:	f107 0310 	add.w	r3, r7, #16
 800d352:	4619      	mov	r1, r3
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f7ff ff4f 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d35a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d35e:	2107      	movs	r1, #7
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f000 f995 	bl	800d690 <SDMMC_GetCmdResp1>
 800d366:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3728      	adds	r7, #40	; 0x28
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}

0800d372 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d372:	b580      	push	{r7, lr}
 800d374:	b088      	sub	sp, #32
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d37a:	2300      	movs	r3, #0
 800d37c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d37e:	2300      	movs	r3, #0
 800d380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d382:	2300      	movs	r3, #0
 800d384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d386:	2300      	movs	r3, #0
 800d388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d38a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d38e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d390:	f107 0308 	add.w	r3, r7, #8
 800d394:	4619      	mov	r1, r3
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff ff2e 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fbb9 	bl	800db14 <SDMMC_GetCmdError>
 800d3a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3a4:	69fb      	ldr	r3, [r7, #28]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3720      	adds	r7, #32
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b088      	sub	sp, #32
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d3b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d3ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d3bc:	2308      	movs	r3, #8
 800d3be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3d0:	f107 0308 	add.w	r3, r7, #8
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f7ff ff0e 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 fb4b 	bl	800da78 <SDMMC_GetCmdResp7>
 800d3e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3e4:	69fb      	ldr	r3, [r7, #28]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3720      	adds	r7, #32
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b088      	sub	sp, #32
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d3fc:	2337      	movs	r3, #55	; 0x37
 800d3fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d400:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d406:	2300      	movs	r3, #0
 800d408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d40a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d40e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d410:	f107 0308 	add.w	r3, r7, #8
 800d414:	4619      	mov	r1, r3
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7ff feee 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d41c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d420:	2137      	movs	r1, #55	; 0x37
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 f934 	bl	800d690 <SDMMC_GetCmdResp1>
 800d428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d42a:	69fb      	ldr	r3, [r7, #28]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3720      	adds	r7, #32
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b088      	sub	sp, #32
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d442:	2329      	movs	r3, #41	; 0x29
 800d444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d44a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d44c:	2300      	movs	r3, #0
 800d44e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d454:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d456:	f107 0308 	add.w	r3, r7, #8
 800d45a:	4619      	mov	r1, r3
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7ff fecb 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 fa50 	bl	800d908 <SDMMC_GetCmdResp3>
 800d468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d46a:	69fb      	ldr	r3, [r7, #28]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3720      	adds	r7, #32
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b088      	sub	sp, #32
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d482:	2306      	movs	r3, #6
 800d484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d48a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d48c:	2300      	movs	r3, #0
 800d48e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d494:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d496:	f107 0308 	add.w	r3, r7, #8
 800d49a:	4619      	mov	r1, r3
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f7ff feab 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d4a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4a6:	2106      	movs	r1, #6
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 f8f1 	bl	800d690 <SDMMC_GetCmdResp1>
 800d4ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4b0:	69fb      	ldr	r3, [r7, #28]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3720      	adds	r7, #32
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b088      	sub	sp, #32
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d4c6:	2333      	movs	r3, #51	; 0x33
 800d4c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4da:	f107 0308 	add.w	r3, r7, #8
 800d4de:	4619      	mov	r1, r3
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f7ff fe89 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d4e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4ea:	2133      	movs	r1, #51	; 0x33
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f8cf 	bl	800d690 <SDMMC_GetCmdResp1>
 800d4f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4f4:	69fb      	ldr	r3, [r7, #28]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3720      	adds	r7, #32
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b088      	sub	sp, #32
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d506:	2300      	movs	r3, #0
 800d508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d50a:	2302      	movs	r3, #2
 800d50c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d50e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d514:	2300      	movs	r3, #0
 800d516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d51c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d51e:	f107 0308 	add.w	r3, r7, #8
 800d522:	4619      	mov	r1, r3
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7ff fe67 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 f9a2 	bl	800d874 <SDMMC_GetCmdResp2>
 800d530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d532:	69fb      	ldr	r3, [r7, #28]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3720      	adds	r7, #32
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b088      	sub	sp, #32
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d54a:	2309      	movs	r3, #9
 800d54c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d54e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d554:	2300      	movs	r3, #0
 800d556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d55c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d55e:	f107 0308 	add.w	r3, r7, #8
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff fe47 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 f982 	bl	800d874 <SDMMC_GetCmdResp2>
 800d570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d572:	69fb      	ldr	r3, [r7, #28]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3720      	adds	r7, #32
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b088      	sub	sp, #32
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d586:	2300      	movs	r3, #0
 800d588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d58a:	2303      	movs	r3, #3
 800d58c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d58e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d594:	2300      	movs	r3, #0
 800d596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d59c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d59e:	f107 0308 	add.w	r3, r7, #8
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f7ff fe27 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d5aa:	683a      	ldr	r2, [r7, #0]
 800d5ac:	2103      	movs	r1, #3
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f9ea 	bl	800d988 <SDMMC_GetCmdResp6>
 800d5b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5b6:	69fb      	ldr	r3, [r7, #28]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3720      	adds	r7, #32
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b088      	sub	sp, #32
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d5ce:	230d      	movs	r3, #13
 800d5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5e2:	f107 0308 	add.w	r3, r7, #8
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7ff fe05 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d5ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5f2:	210d      	movs	r1, #13
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 f84b 	bl	800d690 <SDMMC_GetCmdResp1>
 800d5fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5fc:	69fb      	ldr	r3, [r7, #28]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3720      	adds	r7, #32
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b088      	sub	sp, #32
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d60e:	2300      	movs	r3, #0
 800d610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d612:	230d      	movs	r3, #13
 800d614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d61a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d61c:	2300      	movs	r3, #0
 800d61e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d626:	f107 0308 	add.w	r3, r7, #8
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f7ff fde3 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d632:	f241 3288 	movw	r2, #5000	; 0x1388
 800d636:	210d      	movs	r1, #13
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f829 	bl	800d690 <SDMMC_GetCmdResp1>
 800d63e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d640:	69fb      	ldr	r3, [r7, #28]
}
 800d642:	4618      	mov	r0, r3
 800d644:	3720      	adds	r7, #32
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b088      	sub	sp, #32
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800d652:	2300      	movs	r3, #0
 800d654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d656:	230b      	movs	r3, #11
 800d658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d65a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d65e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d660:	2300      	movs	r3, #0
 800d662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d66a:	f107 0308 	add.w	r3, r7, #8
 800d66e:	4619      	mov	r1, r3
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7ff fdc1 	bl	800d1f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d676:	f241 3288 	movw	r2, #5000	; 0x1388
 800d67a:	210b      	movs	r1, #11
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 f807 	bl	800d690 <SDMMC_GetCmdResp1>
 800d682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d684:	69fb      	ldr	r3, [r7, #28]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3720      	adds	r7, #32
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
	...

0800d690 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b088      	sub	sp, #32
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	460b      	mov	r3, r1
 800d69a:	607a      	str	r2, [r7, #4]
 800d69c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d69e:	4b70      	ldr	r3, [pc, #448]	; (800d860 <SDMMC_GetCmdResp1+0x1d0>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4a70      	ldr	r2, [pc, #448]	; (800d864 <SDMMC_GetCmdResp1+0x1d4>)
 800d6a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a8:	0a5a      	lsrs	r2, r3, #9
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	fb02 f303 	mul.w	r3, r2, r3
 800d6b0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	1e5a      	subs	r2, r3, #1
 800d6b6:	61fa      	str	r2, [r7, #28]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d102      	bne.n	800d6c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6c0:	e0c9      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d6c8:	69ba      	ldr	r2, [r7, #24]
 800d6ca:	4b67      	ldr	r3, [pc, #412]	; (800d868 <SDMMC_GetCmdResp1+0x1d8>)
 800d6cc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d0ef      	beq.n	800d6b2 <SDMMC_GetCmdResp1+0x22>
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d1ea      	bne.n	800d6b2 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e0:	f003 0304 	and.w	r3, r3, #4
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d004      	beq.n	800d6f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2204      	movs	r2, #4
 800d6ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6ee:	2304      	movs	r3, #4
 800d6f0:	e0b1      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d004      	beq.n	800d708 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2201      	movs	r2, #1
 800d702:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d704:	2301      	movs	r3, #1
 800d706:	e0a6      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	4a58      	ldr	r2, [pc, #352]	; (800d86c <SDMMC_GetCmdResp1+0x1dc>)
 800d70c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f7ff fd9c 	bl	800d24c <SDMMC_GetCommandResponse>
 800d714:	4603      	mov	r3, r0
 800d716:	461a      	mov	r2, r3
 800d718:	7afb      	ldrb	r3, [r7, #11]
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d001      	beq.n	800d722 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d71e:	2301      	movs	r3, #1
 800d720:	e099      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d722:	2100      	movs	r1, #0
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f7ff fd9e 	bl	800d266 <SDMMC_GetResponse>
 800d72a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d72c:	697a      	ldr	r2, [r7, #20]
 800d72e:	4b50      	ldr	r3, [pc, #320]	; (800d870 <SDMMC_GetCmdResp1+0x1e0>)
 800d730:	4013      	ands	r3, r2
 800d732:	2b00      	cmp	r3, #0
 800d734:	d101      	bne.n	800d73a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d736:	2300      	movs	r3, #0
 800d738:	e08d      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	da02      	bge.n	800d746 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d740:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d744:	e087      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d001      	beq.n	800d754 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d750:	2340      	movs	r3, #64	; 0x40
 800d752:	e080      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d001      	beq.n	800d762 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d75e:	2380      	movs	r3, #128	; 0x80
 800d760:	e079      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d002      	beq.n	800d772 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d76c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d770:	e071      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d77c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d780:	e069      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d78c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d790:	e061      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d79c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d7a0:	e059      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d7ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7b0:	e051      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d7bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d7c0:	e049      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d7cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d7d0:	e041      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d7dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7e0:	e039      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d7ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7f0:	e031      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d7fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d800:	e029      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d80c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d810:	e021      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d002      	beq.n	800d822 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d81c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d820:	e019      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d002      	beq.n	800d832 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d82c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d830:	e011      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d002      	beq.n	800d842 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d83c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d840:	e009      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	f003 0308 	and.w	r3, r3, #8
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d002      	beq.n	800d852 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d84c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d850:	e001      	b.n	800d856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d856:	4618      	mov	r0, r3
 800d858:	3720      	adds	r7, #32
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	20000000 	.word	0x20000000
 800d864:	10624dd3 	.word	0x10624dd3
 800d868:	00200045 	.word	0x00200045
 800d86c:	002000c5 	.word	0x002000c5
 800d870:	fdffe008 	.word	0xfdffe008

0800d874 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d874:	b480      	push	{r7}
 800d876:	b085      	sub	sp, #20
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d87c:	4b1f      	ldr	r3, [pc, #124]	; (800d8fc <SDMMC_GetCmdResp2+0x88>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a1f      	ldr	r2, [pc, #124]	; (800d900 <SDMMC_GetCmdResp2+0x8c>)
 800d882:	fba2 2303 	umull	r2, r3, r2, r3
 800d886:	0a5b      	lsrs	r3, r3, #9
 800d888:	f241 3288 	movw	r2, #5000	; 0x1388
 800d88c:	fb02 f303 	mul.w	r3, r2, r3
 800d890:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	1e5a      	subs	r2, r3, #1
 800d896:	60fa      	str	r2, [r7, #12]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d102      	bne.n	800d8a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d89c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d8a0:	e026      	b.n	800d8f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d0ef      	beq.n	800d892 <SDMMC_GetCmdResp2+0x1e>
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1ea      	bne.n	800d892 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8c0:	f003 0304 	and.w	r3, r3, #4
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d004      	beq.n	800d8d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2204      	movs	r2, #4
 800d8cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8ce:	2304      	movs	r3, #4
 800d8d0:	e00e      	b.n	800d8f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d6:	f003 0301 	and.w	r3, r3, #1
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d004      	beq.n	800d8e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e003      	b.n	800d8f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a06      	ldr	r2, [pc, #24]	; (800d904 <SDMMC_GetCmdResp2+0x90>)
 800d8ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d8ee:	2300      	movs	r3, #0
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3714      	adds	r7, #20
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr
 800d8fc:	20000000 	.word	0x20000000
 800d900:	10624dd3 	.word	0x10624dd3
 800d904:	002000c5 	.word	0x002000c5

0800d908 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d910:	4b1a      	ldr	r3, [pc, #104]	; (800d97c <SDMMC_GetCmdResp3+0x74>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a1a      	ldr	r2, [pc, #104]	; (800d980 <SDMMC_GetCmdResp3+0x78>)
 800d916:	fba2 2303 	umull	r2, r3, r2, r3
 800d91a:	0a5b      	lsrs	r3, r3, #9
 800d91c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d920:	fb02 f303 	mul.w	r3, r2, r3
 800d924:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	1e5a      	subs	r2, r3, #1
 800d92a:	60fa      	str	r2, [r7, #12]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d102      	bne.n	800d936 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d934:	e01b      	b.n	800d96e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d942:	2b00      	cmp	r3, #0
 800d944:	d0ef      	beq.n	800d926 <SDMMC_GetCmdResp3+0x1e>
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1ea      	bne.n	800d926 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d954:	f003 0304 	and.w	r3, r3, #4
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d004      	beq.n	800d966 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2204      	movs	r2, #4
 800d960:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d962:	2304      	movs	r3, #4
 800d964:	e003      	b.n	800d96e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	4a06      	ldr	r2, [pc, #24]	; (800d984 <SDMMC_GetCmdResp3+0x7c>)
 800d96a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d96c:	2300      	movs	r3, #0
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3714      	adds	r7, #20
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	20000000 	.word	0x20000000
 800d980:	10624dd3 	.word	0x10624dd3
 800d984:	002000c5 	.word	0x002000c5

0800d988 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b088      	sub	sp, #32
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	460b      	mov	r3, r1
 800d992:	607a      	str	r2, [r7, #4]
 800d994:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d996:	4b35      	ldr	r3, [pc, #212]	; (800da6c <SDMMC_GetCmdResp6+0xe4>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a35      	ldr	r2, [pc, #212]	; (800da70 <SDMMC_GetCmdResp6+0xe8>)
 800d99c:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a0:	0a5b      	lsrs	r3, r3, #9
 800d9a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9a6:	fb02 f303 	mul.w	r3, r2, r3
 800d9aa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	1e5a      	subs	r2, r3, #1
 800d9b0:	61fa      	str	r2, [r7, #28]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d102      	bne.n	800d9bc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9ba:	e052      	b.n	800da62 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9c0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d0ef      	beq.n	800d9ac <SDMMC_GetCmdResp6+0x24>
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d1ea      	bne.n	800d9ac <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9da:	f003 0304 	and.w	r3, r3, #4
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d004      	beq.n	800d9ec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2204      	movs	r2, #4
 800d9e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9e8:	2304      	movs	r3, #4
 800d9ea:	e03a      	b.n	800da62 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f0:	f003 0301 	and.w	r3, r3, #1
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d004      	beq.n	800da02 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9fe:	2301      	movs	r3, #1
 800da00:	e02f      	b.n	800da62 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800da02:	68f8      	ldr	r0, [r7, #12]
 800da04:	f7ff fc22 	bl	800d24c <SDMMC_GetCommandResponse>
 800da08:	4603      	mov	r3, r0
 800da0a:	461a      	mov	r2, r3
 800da0c:	7afb      	ldrb	r3, [r7, #11]
 800da0e:	4293      	cmp	r3, r2
 800da10:	d001      	beq.n	800da16 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da12:	2301      	movs	r3, #1
 800da14:	e025      	b.n	800da62 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	4a16      	ldr	r2, [pc, #88]	; (800da74 <SDMMC_GetCmdResp6+0xec>)
 800da1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800da1c:	2100      	movs	r1, #0
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f7ff fc21 	bl	800d266 <SDMMC_GetResponse>
 800da24:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d106      	bne.n	800da3e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	0c1b      	lsrs	r3, r3, #16
 800da34:	b29a      	uxth	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800da3a:	2300      	movs	r3, #0
 800da3c:	e011      	b.n	800da62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da44:	2b00      	cmp	r3, #0
 800da46:	d002      	beq.n	800da4e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da4c:	e009      	b.n	800da62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da54:	2b00      	cmp	r3, #0
 800da56:	d002      	beq.n	800da5e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da5c:	e001      	b.n	800da62 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800da62:	4618      	mov	r0, r3
 800da64:	3720      	adds	r7, #32
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	20000000 	.word	0x20000000
 800da70:	10624dd3 	.word	0x10624dd3
 800da74:	002000c5 	.word	0x002000c5

0800da78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da80:	4b22      	ldr	r3, [pc, #136]	; (800db0c <SDMMC_GetCmdResp7+0x94>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a22      	ldr	r2, [pc, #136]	; (800db10 <SDMMC_GetCmdResp7+0x98>)
 800da86:	fba2 2303 	umull	r2, r3, r2, r3
 800da8a:	0a5b      	lsrs	r3, r3, #9
 800da8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800da90:	fb02 f303 	mul.w	r3, r2, r3
 800da94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	1e5a      	subs	r2, r3, #1
 800da9a:	60fa      	str	r2, [r7, #12]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d102      	bne.n	800daa6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800daa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800daa4:	e02c      	b.n	800db00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d0ef      	beq.n	800da96 <SDMMC_GetCmdResp7+0x1e>
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1ea      	bne.n	800da96 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac4:	f003 0304 	and.w	r3, r3, #4
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d004      	beq.n	800dad6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2204      	movs	r2, #4
 800dad0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dad2:	2304      	movs	r3, #4
 800dad4:	e014      	b.n	800db00 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d004      	beq.n	800daec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2201      	movs	r2, #1
 800dae6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dae8:	2301      	movs	r3, #1
 800daea:	e009      	b.n	800db00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d002      	beq.n	800dafe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2240      	movs	r2, #64	; 0x40
 800dafc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dafe:	2300      	movs	r3, #0

}
 800db00:	4618      	mov	r0, r3
 800db02:	3714      	adds	r7, #20
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr
 800db0c:	20000000 	.word	0x20000000
 800db10:	10624dd3 	.word	0x10624dd3

0800db14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db1c:	4b11      	ldr	r3, [pc, #68]	; (800db64 <SDMMC_GetCmdError+0x50>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a11      	ldr	r2, [pc, #68]	; (800db68 <SDMMC_GetCmdError+0x54>)
 800db22:	fba2 2303 	umull	r2, r3, r2, r3
 800db26:	0a5b      	lsrs	r3, r3, #9
 800db28:	f241 3288 	movw	r2, #5000	; 0x1388
 800db2c:	fb02 f303 	mul.w	r3, r2, r3
 800db30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	1e5a      	subs	r2, r3, #1
 800db36:	60fa      	str	r2, [r7, #12]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d102      	bne.n	800db42 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db40:	e009      	b.n	800db56 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d0f1      	beq.n	800db32 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4a06      	ldr	r2, [pc, #24]	; (800db6c <SDMMC_GetCmdError+0x58>)
 800db52:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800db54:	2300      	movs	r3, #0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	20000000 	.word	0x20000000
 800db68:	10624dd3 	.word	0x10624dd3
 800db6c:	002000c5 	.word	0x002000c5

0800db70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db70:	b084      	sub	sp, #16
 800db72:	b580      	push	{r7, lr}
 800db74:	b084      	sub	sp, #16
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
 800db7a:	f107 001c 	add.w	r0, r7, #28
 800db7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db84:	2b01      	cmp	r3, #1
 800db86:	d122      	bne.n	800dbce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800db9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dbb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d105      	bne.n	800dbc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 fa30 	bl	800e028 <USB_CoreReset>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	73fb      	strb	r3, [r7, #15]
 800dbcc:	e01a      	b.n	800dc04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 fa24 	bl	800e028 <USB_CoreReset>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d106      	bne.n	800dbf8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	639a      	str	r2, [r3, #56]	; 0x38
 800dbf6:	e005      	b.n	800dc04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800dc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc10:	b004      	add	sp, #16
 800dc12:	4770      	bx	lr

0800dc14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	f023 0201 	bic.w	r2, r3, #1
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	370c      	adds	r7, #12
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr

0800dc36 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b082      	sub	sp, #8
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
 800dc3e:	460b      	mov	r3, r1
 800dc40:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dc4e:	78fb      	ldrb	r3, [r7, #3]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d106      	bne.n	800dc62 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	60da      	str	r2, [r3, #12]
 800dc60:	e00b      	b.n	800dc7a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800dc62:	78fb      	ldrb	r3, [r7, #3]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d106      	bne.n	800dc76 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	60da      	str	r2, [r3, #12]
 800dc74:	e001      	b.n	800dc7a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	e003      	b.n	800dc82 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800dc7a:	2032      	movs	r0, #50	; 0x32
 800dc7c:	f7f6 ff58 	bl	8004b30 <HAL_Delay>

  return HAL_OK;
 800dc80:	2300      	movs	r3, #0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
	...

0800dc8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc8c:	b084      	sub	sp, #16
 800dc8e:	b580      	push	{r7, lr}
 800dc90:	b086      	sub	sp, #24
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
 800dc96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dc9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dca6:	2300      	movs	r3, #0
 800dca8:	613b      	str	r3, [r7, #16]
 800dcaa:	e009      	b.n	800dcc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	3340      	adds	r3, #64	; 0x40
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	4413      	add	r3, r2
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	613b      	str	r3, [r7, #16]
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2b0e      	cmp	r3, #14
 800dcc4:	d9f2      	bls.n	800dcac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dcc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d11c      	bne.n	800dd06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	68fa      	ldr	r2, [r7, #12]
 800dcd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dcda:	f043 0302 	orr.w	r3, r3, #2
 800dcde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	601a      	str	r2, [r3, #0]
 800dd04:	e005      	b.n	800dd12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd18:	461a      	mov	r2, r3
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd24:	4619      	mov	r1, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	680b      	ldr	r3, [r1, #0]
 800dd30:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dd32:	2103      	movs	r1, #3
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 f93d 	bl	800dfb4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dd3a:	2110      	movs	r1, #16
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 f8f1 	bl	800df24 <USB_FlushTxFifo>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d001      	beq.n	800dd4c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 f90f 	bl	800df70 <USB_FlushRxFifo>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd62:	461a      	mov	r2, r3
 800dd64:	2300      	movs	r3, #0
 800dd66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd6e:	461a      	mov	r2, r3
 800dd70:	2300      	movs	r3, #0
 800dd72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd80:	2300      	movs	r3, #0
 800dd82:	613b      	str	r3, [r7, #16]
 800dd84:	e043      	b.n	800de0e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	015a      	lsls	r2, r3, #5
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd9c:	d118      	bne.n	800ddd0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10a      	bne.n	800ddba <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	015a      	lsls	r2, r3, #5
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	4413      	add	r3, r2
 800ddac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ddb6:	6013      	str	r3, [r2, #0]
 800ddb8:	e013      	b.n	800dde2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	015a      	lsls	r2, r3, #5
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ddcc:	6013      	str	r3, [r2, #0]
 800ddce:	e008      	b.n	800dde2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	015a      	lsls	r2, r3, #5
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dddc:	461a      	mov	r2, r3
 800ddde:	2300      	movs	r3, #0
 800dde0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	015a      	lsls	r2, r3, #5
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	4413      	add	r3, r2
 800ddea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddee:	461a      	mov	r2, r3
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	015a      	lsls	r2, r3, #5
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de00:	461a      	mov	r2, r3
 800de02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800de06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	3301      	adds	r3, #1
 800de0c:	613b      	str	r3, [r7, #16]
 800de0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de10:	693a      	ldr	r2, [r7, #16]
 800de12:	429a      	cmp	r2, r3
 800de14:	d3b7      	bcc.n	800dd86 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de16:	2300      	movs	r3, #0
 800de18:	613b      	str	r3, [r7, #16]
 800de1a:	e043      	b.n	800dea4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	015a      	lsls	r2, r3, #5
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	4413      	add	r3, r2
 800de24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de32:	d118      	bne.n	800de66 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d10a      	bne.n	800de50 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	015a      	lsls	r2, r3, #5
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	4413      	add	r3, r2
 800de42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de46:	461a      	mov	r2, r3
 800de48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800de4c:	6013      	str	r3, [r2, #0]
 800de4e:	e013      	b.n	800de78 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	015a      	lsls	r2, r3, #5
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	4413      	add	r3, r2
 800de58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de5c:	461a      	mov	r2, r3
 800de5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800de62:	6013      	str	r3, [r2, #0]
 800de64:	e008      	b.n	800de78 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	015a      	lsls	r2, r3, #5
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	4413      	add	r3, r2
 800de6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de72:	461a      	mov	r2, r3
 800de74:	2300      	movs	r3, #0
 800de76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	015a      	lsls	r2, r3, #5
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	4413      	add	r3, r2
 800de80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de84:	461a      	mov	r2, r3
 800de86:	2300      	movs	r3, #0
 800de88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	015a      	lsls	r2, r3, #5
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	4413      	add	r3, r2
 800de92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de96:	461a      	mov	r2, r3
 800de98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800de9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	3301      	adds	r3, #1
 800dea2:	613b      	str	r3, [r7, #16]
 800dea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea6:	693a      	ldr	r2, [r7, #16]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d3b7      	bcc.n	800de1c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deb2:	691b      	ldr	r3, [r3, #16]
 800deb4:	68fa      	ldr	r2, [r7, #12]
 800deb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800deba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800debe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800decc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	699b      	ldr	r3, [r3, #24]
 800ded2:	f043 0210 	orr.w	r2, r3, #16
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	699a      	ldr	r2, [r3, #24]
 800dede:	4b10      	ldr	r3, [pc, #64]	; (800df20 <USB_DevInit+0x294>)
 800dee0:	4313      	orrs	r3, r2
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d005      	beq.n	800def8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	699b      	ldr	r3, [r3, #24]
 800def0:	f043 0208 	orr.w	r2, r3, #8
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800def8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800defa:	2b01      	cmp	r3, #1
 800defc:	d107      	bne.n	800df0e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	699b      	ldr	r3, [r3, #24]
 800df02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df06:	f043 0304 	orr.w	r3, r3, #4
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800df0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3718      	adds	r7, #24
 800df14:	46bd      	mov	sp, r7
 800df16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df1a:	b004      	add	sp, #16
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	803c3800 	.word	0x803c3800

0800df24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800df24:	b480      	push	{r7}
 800df26:	b085      	sub	sp, #20
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800df2e:	2300      	movs	r3, #0
 800df30:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	019b      	lsls	r3, r3, #6
 800df36:	f043 0220 	orr.w	r2, r3, #32
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	3301      	adds	r3, #1
 800df42:	60fb      	str	r3, [r7, #12]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	4a09      	ldr	r2, [pc, #36]	; (800df6c <USB_FlushTxFifo+0x48>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d901      	bls.n	800df50 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800df4c:	2303      	movs	r3, #3
 800df4e:	e006      	b.n	800df5e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	691b      	ldr	r3, [r3, #16]
 800df54:	f003 0320 	and.w	r3, r3, #32
 800df58:	2b20      	cmp	r3, #32
 800df5a:	d0f0      	beq.n	800df3e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3714      	adds	r7, #20
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	00030d40 	.word	0x00030d40

0800df70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800df78:	2300      	movs	r3, #0
 800df7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2210      	movs	r2, #16
 800df80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	3301      	adds	r3, #1
 800df86:	60fb      	str	r3, [r7, #12]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	4a09      	ldr	r2, [pc, #36]	; (800dfb0 <USB_FlushRxFifo+0x40>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d901      	bls.n	800df94 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800df90:	2303      	movs	r3, #3
 800df92:	e006      	b.n	800dfa2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	f003 0310 	and.w	r3, r3, #16
 800df9c:	2b10      	cmp	r3, #16
 800df9e:	d0f0      	beq.n	800df82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop
 800dfb0:	00030d40 	.word	0x00030d40

0800dfb4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	78fb      	ldrb	r3, [r7, #3]
 800dfce:	68f9      	ldr	r1, [r7, #12]
 800dfd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3714      	adds	r7, #20
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr

0800dfe6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dfe6:	b480      	push	{r7}
 800dfe8:	b085      	sub	sp, #20
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e000:	f023 0303 	bic.w	r3, r3, #3
 800e004:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e014:	f043 0302 	orr.w	r3, r3, #2
 800e018:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e030:	2300      	movs	r3, #0
 800e032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	3301      	adds	r3, #1
 800e038:	60fb      	str	r3, [r7, #12]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	4a13      	ldr	r2, [pc, #76]	; (800e08c <USB_CoreReset+0x64>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d901      	bls.n	800e046 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e042:	2303      	movs	r3, #3
 800e044:	e01b      	b.n	800e07e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	daf2      	bge.n	800e034 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e04e:	2300      	movs	r3, #0
 800e050:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	691b      	ldr	r3, [r3, #16]
 800e056:	f043 0201 	orr.w	r2, r3, #1
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	3301      	adds	r3, #1
 800e062:	60fb      	str	r3, [r7, #12]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	4a09      	ldr	r2, [pc, #36]	; (800e08c <USB_CoreReset+0x64>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d901      	bls.n	800e070 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e06c:	2303      	movs	r3, #3
 800e06e:	e006      	b.n	800e07e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	691b      	ldr	r3, [r3, #16]
 800e074:	f003 0301 	and.w	r3, r3, #1
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d0f0      	beq.n	800e05e <USB_CoreReset+0x36>

  return HAL_OK;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3714      	adds	r7, #20
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	00030d40 	.word	0x00030d40

0800e090 <JAtoN>:
                                 * The "E" may actually be an "e".  E and X
                                 * may both be omitted (but not just one).
                                 */
    char **endPtr;              /* If non-NULL, store terminating character's
                                 * address here. */
{
 800e090:	b5b0      	push	{r4, r5, r7, lr}
 800e092:	b096      	sub	sp, #88	; 0x58
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
    int sign, expSign = FALSE;
 800e09a:	2300      	movs	r3, #0
 800e09c:	653b      	str	r3, [r7, #80]	; 0x50
    JNUMBER fraction, dblExp;
    register const char *p;
    register int c;
    int exp = 0;                /* Exponent read from "EX" field. */
 800e09e:	2300      	movs	r3, #0
 800e0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    int fracExp = 0;            /* Exponent that derives from the fractional
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Strip off leading blanks and check for a sign.
     */

    p = string;
 800e0a6:	68fc      	ldr	r4, [r7, #12]
    while (*p == ' ') {
 800e0a8:	e000      	b.n	800e0ac <JAtoN+0x1c>
        p += 1;
 800e0aa:	3401      	adds	r4, #1
    while (*p == ' ') {
 800e0ac:	7823      	ldrb	r3, [r4, #0]
 800e0ae:	2b20      	cmp	r3, #32
 800e0b0:	d0fb      	beq.n	800e0aa <JAtoN+0x1a>
    }
    if (*p == '-') {
 800e0b2:	7823      	ldrb	r3, [r4, #0]
 800e0b4:	2b2d      	cmp	r3, #45	; 0x2d
 800e0b6:	d103      	bne.n	800e0c0 <JAtoN+0x30>
        sign = TRUE;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	657b      	str	r3, [r7, #84]	; 0x54
        p += 1;
 800e0bc:	3401      	adds	r4, #1
 800e0be:	e005      	b.n	800e0cc <JAtoN+0x3c>
    } else {
        if (*p == '+') {
 800e0c0:	7823      	ldrb	r3, [r4, #0]
 800e0c2:	2b2b      	cmp	r3, #43	; 0x2b
 800e0c4:	d100      	bne.n	800e0c8 <JAtoN+0x38>
            p += 1;
 800e0c6:	3401      	adds	r4, #1
        }
        sign = FALSE;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	657b      	str	r3, [r7, #84]	; 0x54
    /*
     * Count the number of digits in the mantissa (including the decimal
     * point), and also locate the decimal point.
     */

    decPt = -1;
 800e0cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0d0:	633b      	str	r3, [r7, #48]	; 0x30
    for (mantSize = 0; ; mantSize += 1)
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        c = *p;
 800e0d6:	7823      	ldrb	r3, [r4, #0]
 800e0d8:	461d      	mov	r5, r3
        if (c < '0' || c > '9') {
 800e0da:	2d2f      	cmp	r5, #47	; 0x2f
 800e0dc:	dd01      	ble.n	800e0e2 <JAtoN+0x52>
 800e0de:	2d39      	cmp	r5, #57	; 0x39
 800e0e0:	dd06      	ble.n	800e0f0 <JAtoN+0x60>
            if ((c != '.') || (decPt >= 0)) {
 800e0e2:	2d2e      	cmp	r5, #46	; 0x2e
 800e0e4:	d109      	bne.n	800e0fa <JAtoN+0x6a>
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	da06      	bge.n	800e0fa <JAtoN+0x6a>
                break;
            }
            decPt = mantSize;
 800e0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ee:	633b      	str	r3, [r7, #48]	; 0x30
        }
        p += 1;
 800e0f0:	3401      	adds	r4, #1
    for (mantSize = 0; ; mantSize += 1)
 800e0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	637b      	str	r3, [r7, #52]	; 0x34
        c = *p;
 800e0f8:	e7ed      	b.n	800e0d6 <JAtoN+0x46>
     * collect 9 digits each (this is faster than using floating-point).
     * If the mantissa has more than 18 digits, ignore the extras, since
     * they can't affect the value anyway.
     */
    
    pExp  = p;
 800e0fa:	617c      	str	r4, [r7, #20]
    p -= mantSize;
 800e0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0fe:	425b      	negs	r3, r3
 800e100:	441c      	add	r4, r3
    if (decPt < 0) {
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	2b00      	cmp	r3, #0
 800e106:	da02      	bge.n	800e10e <JAtoN+0x7e>
        decPt = mantSize;
 800e108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10a:	633b      	str	r3, [r7, #48]	; 0x30
 800e10c:	e002      	b.n	800e114 <JAtoN+0x84>
    } else {
        mantSize -= 1;                  /* One of the digits was the point. */
 800e10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e110:	3b01      	subs	r3, #1
 800e112:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (mantSize > 18) {
 800e114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e116:	2b12      	cmp	r3, #18
 800e118:	dd05      	ble.n	800e126 <JAtoN+0x96>
        fracExp = decPt - 18;
 800e11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11c:	3b12      	subs	r3, #18
 800e11e:	63bb      	str	r3, [r7, #56]	; 0x38
        mantSize = 18;
 800e120:	2312      	movs	r3, #18
 800e122:	637b      	str	r3, [r7, #52]	; 0x34
 800e124:	e003      	b.n	800e12e <JAtoN+0x9e>
    } else {
        fracExp = decPt - mantSize;
 800e126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    if (mantSize == 0) {
 800e12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e130:	2b00      	cmp	r3, #0
 800e132:	d107      	bne.n	800e144 <JAtoN+0xb4>
        fraction = 0.0;
 800e134:	f04f 0300 	mov.w	r3, #0
 800e138:	f04f 0400 	mov.w	r4, #0
 800e13c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        p = string;
 800e140:	68fc      	ldr	r4, [r7, #12]
        goto done;
 800e142:	e12c      	b.n	800e39e <JAtoN+0x30e>
    } else {
        long frac1, frac2;
        frac1 = 0L;
 800e144:	2300      	movs	r3, #0
 800e146:	62fb      	str	r3, [r7, #44]	; 0x2c
        for ( ; mantSize > 9; mantSize -= 1)
 800e148:	e014      	b.n	800e174 <JAtoN+0xe4>
        {
            c = *p;
 800e14a:	7823      	ldrb	r3, [r4, #0]
 800e14c:	461d      	mov	r5, r3
            p += 1;
 800e14e:	3401      	adds	r4, #1
            if (c == '.') {
 800e150:	2d2e      	cmp	r5, #46	; 0x2e
 800e152:	d102      	bne.n	800e15a <JAtoN+0xca>
                c = *p;
 800e154:	7823      	ldrb	r3, [r4, #0]
 800e156:	461d      	mov	r5, r3
                p += 1;
 800e158:	3401      	adds	r4, #1
            }
            frac1 = 10*frac1 + (c - '0');
 800e15a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e15c:	4613      	mov	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4413      	add	r3, r2
 800e162:	005b      	lsls	r3, r3, #1
 800e164:	461a      	mov	r2, r3
 800e166:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800e16a:	4413      	add	r3, r2
 800e16c:	62fb      	str	r3, [r7, #44]	; 0x2c
        for ( ; mantSize > 9; mantSize -= 1)
 800e16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e170:	3b01      	subs	r3, #1
 800e172:	637b      	str	r3, [r7, #52]	; 0x34
 800e174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e176:	2b09      	cmp	r3, #9
 800e178:	dce7      	bgt.n	800e14a <JAtoN+0xba>
        }
        frac2 = 0L;
 800e17a:	2300      	movs	r3, #0
 800e17c:	62bb      	str	r3, [r7, #40]	; 0x28
        for (; mantSize > 0; mantSize -= 1)
 800e17e:	e014      	b.n	800e1aa <JAtoN+0x11a>
        {
            c = *p;
 800e180:	7823      	ldrb	r3, [r4, #0]
 800e182:	461d      	mov	r5, r3
            p += 1;
 800e184:	3401      	adds	r4, #1
            if (c == '.') {
 800e186:	2d2e      	cmp	r5, #46	; 0x2e
 800e188:	d102      	bne.n	800e190 <JAtoN+0x100>
                c = *p;
 800e18a:	7823      	ldrb	r3, [r4, #0]
 800e18c:	461d      	mov	r5, r3
                p += 1;
 800e18e:	3401      	adds	r4, #1
            }
            frac2 = 10*frac2 + (c - '0');
 800e190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e192:	4613      	mov	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4413      	add	r3, r2
 800e198:	005b      	lsls	r3, r3, #1
 800e19a:	461a      	mov	r2, r3
 800e19c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800e1a0:	4413      	add	r3, r2
 800e1a2:	62bb      	str	r3, [r7, #40]	; 0x28
        for (; mantSize > 0; mantSize -= 1)
 800e1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1a6:	3b01      	subs	r3, #1
 800e1a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	dce7      	bgt.n	800e180 <JAtoN+0xf0>
        }
        fraction = (1.0e9 * frac1) + frac2;
 800e1b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1b2:	f7f2 f9df 	bl	8000574 <__aeabi_i2d>
 800e1b6:	a399      	add	r3, pc, #612	; (adr r3, 800e41c <JAtoN+0x38c>)
 800e1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1bc:	f7f2 fa44 	bl	8000648 <__aeabi_dmul>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	4625      	mov	r5, r4
 800e1c6:	461c      	mov	r4, r3
 800e1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1ca:	f7f2 f9d3 	bl	8000574 <__aeabi_i2d>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	f7f2 f881 	bl	80002dc <__adddf3>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	460c      	mov	r4, r1
 800e1de:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

    /*
     * Skim off the exponent.
     */

    p = pExp;
 800e1e2:	697c      	ldr	r4, [r7, #20]
    if ((*p == 'E') || (*p == 'e')) {
 800e1e4:	7823      	ldrb	r3, [r4, #0]
 800e1e6:	2b45      	cmp	r3, #69	; 0x45
 800e1e8:	d002      	beq.n	800e1f0 <JAtoN+0x160>
 800e1ea:	7823      	ldrb	r3, [r4, #0]
 800e1ec:	2b65      	cmp	r3, #101	; 0x65
 800e1ee:	d11f      	bne.n	800e230 <JAtoN+0x1a0>
        p += 1;
 800e1f0:	3401      	adds	r4, #1
        if (*p == '-') {
 800e1f2:	7823      	ldrb	r3, [r4, #0]
 800e1f4:	2b2d      	cmp	r3, #45	; 0x2d
 800e1f6:	d103      	bne.n	800e200 <JAtoN+0x170>
            expSign = TRUE;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	653b      	str	r3, [r7, #80]	; 0x50
            p += 1;
 800e1fc:	3401      	adds	r4, #1
 800e1fe:	e011      	b.n	800e224 <JAtoN+0x194>
        } else {
            if (*p == '+') {
 800e200:	7823      	ldrb	r3, [r4, #0]
 800e202:	2b2b      	cmp	r3, #43	; 0x2b
 800e204:	d100      	bne.n	800e208 <JAtoN+0x178>
                p += 1;
 800e206:	3401      	adds	r4, #1
            }
            expSign = FALSE;
 800e208:	2300      	movs	r3, #0
 800e20a:	653b      	str	r3, [r7, #80]	; 0x50
        }
        while (*p >= '0' && *p <= '9') {
 800e20c:	e00a      	b.n	800e224 <JAtoN+0x194>
            exp = exp * 10 + (*p - '0');
 800e20e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e210:	4613      	mov	r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	4413      	add	r3, r2
 800e216:	005b      	lsls	r3, r3, #1
 800e218:	461a      	mov	r2, r3
 800e21a:	7823      	ldrb	r3, [r4, #0]
 800e21c:	3b30      	subs	r3, #48	; 0x30
 800e21e:	4413      	add	r3, r2
 800e220:	63fb      	str	r3, [r7, #60]	; 0x3c
            p += 1;
 800e222:	3401      	adds	r4, #1
        while (*p >= '0' && *p <= '9') {
 800e224:	7823      	ldrb	r3, [r4, #0]
 800e226:	2b2f      	cmp	r3, #47	; 0x2f
 800e228:	d902      	bls.n	800e230 <JAtoN+0x1a0>
 800e22a:	7823      	ldrb	r3, [r4, #0]
 800e22c:	2b39      	cmp	r3, #57	; 0x39
 800e22e:	d9ee      	bls.n	800e20e <JAtoN+0x17e>
        }
    }
    if (expSign) {
 800e230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e232:	2b00      	cmp	r3, #0
 800e234:	d004      	beq.n	800e240 <JAtoN+0x1b0>
        exp = fracExp - exp;
 800e236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e23a:	1ad3      	subs	r3, r2, r3
 800e23c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e23e:	e003      	b.n	800e248 <JAtoN+0x1b8>
    } else {
        exp = fracExp + exp;
 800e240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e244:	4413      	add	r3, r2
 800e246:	63fb      	str	r3, [r7, #60]	; 0x3c
     * Do this by processing the exponent one bit at a time to combine
     * many powers of 2 of 10. Then combine the exponent with the
     * fraction.
     */
    
    if (exp < 0) {
 800e248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	da05      	bge.n	800e25a <JAtoN+0x1ca>
        expSign = TRUE;
 800e24e:	2301      	movs	r3, #1
 800e250:	653b      	str	r3, [r7, #80]	; 0x50
        exp = -exp;
 800e252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e254:	425b      	negs	r3, r3
 800e256:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e258:	e001      	b.n	800e25e <JAtoN+0x1ce>
    } else {
        expSign = FALSE;
 800e25a:	2300      	movs	r3, #0
 800e25c:	653b      	str	r3, [r7, #80]	; 0x50
    }
    if (exp > MAX_EXPONENT) {
 800e25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e264:	db02      	blt.n	800e26c <JAtoN+0x1dc>
        exp = MAX_EXPONENT;
 800e266:	f240 13ff 	movw	r3, #511	; 0x1ff
 800e26a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    dblExp = 1.0;
 800e26c:	f04f 0200 	mov.w	r2, #0
 800e270:	4b67      	ldr	r3, [pc, #412]	; (800e410 <JAtoN+0x380>)
 800e272:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	int d;
    for (d = 0; exp != 0; exp >>= 1, d += 1) {
 800e276:	2300      	movs	r3, #0
 800e278:	627b      	str	r3, [r7, #36]	; 0x24
 800e27a:	e073      	b.n	800e364 <JAtoN+0x2d4>
		/* Table giving binary powers of 10.  Entry */
		/* is 10^2^i.  Used to convert decimal */
		/* exponents into floating-point numbers. */
		JNUMBER p10 = 0.0;
 800e27c:	f04f 0200 	mov.w	r2, #0
 800e280:	f04f 0300 	mov.w	r3, #0
 800e284:	e9c7 2306 	strd	r2, r3, [r7, #24]
		switch (d) {
 800e288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28a:	2b08      	cmp	r3, #8
 800e28c:	d84a      	bhi.n	800e324 <JAtoN+0x294>
 800e28e:	a201      	add	r2, pc, #4	; (adr r2, 800e294 <JAtoN+0x204>)
 800e290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e294:	0800e2b9 	.word	0x0800e2b9
 800e298:	0800e2c5 	.word	0x0800e2c5
 800e29c:	0800e2d1 	.word	0x0800e2d1
 800e2a0:	0800e2dd 	.word	0x0800e2dd
 800e2a4:	0800e2e9 	.word	0x0800e2e9
 800e2a8:	0800e2f5 	.word	0x0800e2f5
 800e2ac:	0800e301 	.word	0x0800e301
 800e2b0:	0800e30d 	.word	0x0800e30d
 800e2b4:	0800e319 	.word	0x0800e319
		case 0:
			p10 = 10.0;
 800e2b8:	f04f 0200 	mov.w	r2, #0
 800e2bc:	4b55      	ldr	r3, [pc, #340]	; (800e414 <JAtoN+0x384>)
 800e2be:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 800e2c2:	e02f      	b.n	800e324 <JAtoN+0x294>
		case 1:
			p10 = 100.0;
 800e2c4:	f04f 0200 	mov.w	r2, #0
 800e2c8:	4b53      	ldr	r3, [pc, #332]	; (800e418 <JAtoN+0x388>)
 800e2ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 800e2ce:	e029      	b.n	800e324 <JAtoN+0x294>
		case 2:
			p10 = 1.0e4;
 800e2d0:	a341      	add	r3, pc, #260	; (adr r3, 800e3d8 <JAtoN+0x348>)
 800e2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 800e2da:	e023      	b.n	800e324 <JAtoN+0x294>
		case 3:
			p10 = 1.0e8;
 800e2dc:	a340      	add	r3, pc, #256	; (adr r3, 800e3e0 <JAtoN+0x350>)
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 800e2e6:	e01d      	b.n	800e324 <JAtoN+0x294>
		case 4:
			p10 = 1.0e16;
 800e2e8:	a33f      	add	r3, pc, #252	; (adr r3, 800e3e8 <JAtoN+0x358>)
 800e2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 800e2f2:	e017      	b.n	800e324 <JAtoN+0x294>
		case 5:
			p10 = 1.0e32;
 800e2f4:	a33e      	add	r3, pc, #248	; (adr r3, 800e3f0 <JAtoN+0x360>)
 800e2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 800e2fe:	e011      	b.n	800e324 <JAtoN+0x294>
#ifndef NOTE_FLOAT
		case 6:
			p10 = 1.0e64;
 800e300:	a33d      	add	r3, pc, #244	; (adr r3, 800e3f8 <JAtoN+0x368>)
 800e302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e306:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 800e30a:	e00b      	b.n	800e324 <JAtoN+0x294>
		case 7:
			p10 = 1.0e128;
 800e30c:	a33c      	add	r3, pc, #240	; (adr r3, 800e400 <JAtoN+0x370>)
 800e30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e312:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 800e316:	e005      	b.n	800e324 <JAtoN+0x294>
		case 8:
			p10 = 1.0e256;
 800e318:	a33b      	add	r3, pc, #236	; (adr r3, 800e408 <JAtoN+0x378>)
 800e31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31e:	e9c7 2306 	strd	r2, r3, [r7, #24]
			break;
 800e322:	bf00      	nop
#endif
		}
		if (p10 == 0.0)
 800e324:	f04f 0200 	mov.w	r2, #0
 800e328:	f04f 0300 	mov.w	r3, #0
 800e32c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e330:	f7f2 fbf2 	bl	8000b18 <__aeabi_dcmpeq>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d118      	bne.n	800e36c <JAtoN+0x2dc>
			break;
        if (exp & 01) {
 800e33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e33c:	f003 0301 	and.w	r3, r3, #1
 800e340:	2b00      	cmp	r3, #0
 800e342:	d009      	beq.n	800e358 <JAtoN+0x2c8>
            dblExp *= p10;
 800e344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e348:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e34c:	f7f2 f97c 	bl	8000648 <__aeabi_dmul>
 800e350:	4602      	mov	r2, r0
 800e352:	460b      	mov	r3, r1
 800e354:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    for (d = 0; exp != 0; exp >>= 1, d += 1) {
 800e358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e35a:	105b      	asrs	r3, r3, #1
 800e35c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e360:	3301      	adds	r3, #1
 800e362:	627b      	str	r3, [r7, #36]	; 0x24
 800e364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e366:	2b00      	cmp	r3, #0
 800e368:	d188      	bne.n	800e27c <JAtoN+0x1ec>
 800e36a:	e000      	b.n	800e36e <JAtoN+0x2de>
			break;
 800e36c:	bf00      	nop
        }
    }
    if (expSign) {
 800e36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e370:	2b00      	cmp	r3, #0
 800e372:	d00a      	beq.n	800e38a <JAtoN+0x2fa>
        fraction /= dblExp;
 800e374:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e378:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e37c:	f7f2 fa8e 	bl	800089c <__aeabi_ddiv>
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800e388:	e009      	b.n	800e39e <JAtoN+0x30e>
    } else {
        fraction *= dblExp;
 800e38a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e38e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e392:	f7f2 f959 	bl	8000648 <__aeabi_dmul>
 800e396:	4602      	mov	r2, r0
 800e398:	460b      	mov	r3, r1
 800e39a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

done:
    if (endPtr != NULL) {
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d001      	beq.n	800e3a8 <JAtoN+0x318>
        *endPtr = (char *) p;
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	601c      	str	r4, [r3, #0]
    }

    if (sign) {
 800e3a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d006      	beq.n	800e3bc <JAtoN+0x32c>
        return -fraction;
 800e3ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3b0:	603b      	str	r3, [r7, #0]
 800e3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e3b8:	607b      	str	r3, [r7, #4]
 800e3ba:	e003      	b.n	800e3c4 <JAtoN+0x334>
    }
    return fraction;
 800e3bc:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800e3c0:	ed87 7b00 	vstr	d7, [r7]
 800e3c4:	ed97 7b00 	vldr	d7, [r7]
}
 800e3c8:	eeb0 0a47 	vmov.f32	s0, s14
 800e3cc:	eef0 0a67 	vmov.f32	s1, s15
 800e3d0:	3758      	adds	r7, #88	; 0x58
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bdb0      	pop	{r4, r5, r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	00000000 	.word	0x00000000
 800e3dc:	40c38800 	.word	0x40c38800
 800e3e0:	00000000 	.word	0x00000000
 800e3e4:	4197d784 	.word	0x4197d784
 800e3e8:	37e08000 	.word	0x37e08000
 800e3ec:	4341c379 	.word	0x4341c379
 800e3f0:	b5056e17 	.word	0xb5056e17
 800e3f4:	4693b8b5 	.word	0x4693b8b5
 800e3f8:	e93ff9f5 	.word	0xe93ff9f5
 800e3fc:	4d384f03 	.word	0x4d384f03
 800e400:	f9301d32 	.word	0xf9301d32
 800e404:	5a827748 	.word	0x5a827748
 800e408:	7f73bf3c 	.word	0x7f73bf3c
 800e40c:	75154fdd 	.word	0x75154fdd
 800e410:	3ff00000 	.word	0x3ff00000
 800e414:	40240000 	.word	0x40240000
 800e418:	40590000 	.word	0x40590000
 800e41c:	00000000 	.word	0x00000000
 800e420:	41cdcd65 	.word	0x41cdcd65

0800e424 <case_insensitive_strcmp>:
    return STRINGIFY(N_CJSON_VERSION_MAJOR) "." STRINGIFY(N_CJSON_VERSION_MINOR) "." STRINGIFY(N_CJSON_VERSION_PATCH);
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800e424:	b590      	push	{r4, r7, lr}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d002      	beq.n	800e43a <case_insensitive_strcmp+0x16>
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d101      	bne.n	800e43e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800e43a:	2301      	movs	r3, #1
 800e43c:	e05e      	b.n	800e4fc <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	429a      	cmp	r2, r3
 800e444:	d10d      	bne.n	800e462 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800e446:	2300      	movs	r3, #0
 800e448:	e058      	b.n	800e4fc <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d101      	bne.n	800e456 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800e452:	2300      	movs	r3, #0
 800e454:	e052      	b.n	800e4fc <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	3301      	adds	r3, #1
 800e45a:	607b      	str	r3, [r7, #4]
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	3301      	adds	r3, #1
 800e460:	603b      	str	r3, [r7, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	73fb      	strb	r3, [r7, #15]
 800e468:	f002 fe88 	bl	801117c <__locale_ctype_ptr>
 800e46c:	4602      	mov	r2, r0
 800e46e:	7bfb      	ldrb	r3, [r7, #15]
 800e470:	3301      	adds	r3, #1
 800e472:	4413      	add	r3, r2
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	f003 0303 	and.w	r3, r3, #3
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d103      	bne.n	800e486 <case_insensitive_strcmp+0x62>
 800e47e:	7bfb      	ldrb	r3, [r7, #15]
 800e480:	f103 0420 	add.w	r4, r3, #32
 800e484:	e000      	b.n	800e488 <case_insensitive_strcmp+0x64>
 800e486:	7bfc      	ldrb	r4, [r7, #15]
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	73bb      	strb	r3, [r7, #14]
 800e48e:	f002 fe75 	bl	801117c <__locale_ctype_ptr>
 800e492:	4602      	mov	r2, r0
 800e494:	7bbb      	ldrb	r3, [r7, #14]
 800e496:	3301      	adds	r3, #1
 800e498:	4413      	add	r3, r2
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	f003 0303 	and.w	r3, r3, #3
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d102      	bne.n	800e4aa <case_insensitive_strcmp+0x86>
 800e4a4:	7bbb      	ldrb	r3, [r7, #14]
 800e4a6:	3320      	adds	r3, #32
 800e4a8:	e000      	b.n	800e4ac <case_insensitive_strcmp+0x88>
 800e4aa:	7bbb      	ldrb	r3, [r7, #14]
 800e4ac:	429c      	cmp	r4, r3
 800e4ae:	d0cc      	beq.n	800e44a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	737b      	strb	r3, [r7, #13]
 800e4b6:	f002 fe61 	bl	801117c <__locale_ctype_ptr>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	7b7b      	ldrb	r3, [r7, #13]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	4413      	add	r3, r2
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	f003 0303 	and.w	r3, r3, #3
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d103      	bne.n	800e4d4 <case_insensitive_strcmp+0xb0>
 800e4cc:	7b7b      	ldrb	r3, [r7, #13]
 800e4ce:	f103 0420 	add.w	r4, r3, #32
 800e4d2:	e000      	b.n	800e4d6 <case_insensitive_strcmp+0xb2>
 800e4d4:	7b7c      	ldrb	r4, [r7, #13]
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	733b      	strb	r3, [r7, #12]
 800e4dc:	f002 fe4e 	bl	801117c <__locale_ctype_ptr>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	7b3b      	ldrb	r3, [r7, #12]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	4413      	add	r3, r2
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	f003 0303 	and.w	r3, r3, #3
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d102      	bne.n	800e4f8 <case_insensitive_strcmp+0xd4>
 800e4f2:	7b3b      	ldrb	r3, [r7, #12]
 800e4f4:	3320      	adds	r3, #32
 800e4f6:	e000      	b.n	800e4fa <case_insensitive_strcmp+0xd6>
 800e4f8:	7b3b      	ldrb	r3, [r7, #12]
 800e4fa:	1ae3      	subs	r3, r4, r3
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3714      	adds	r7, #20
 800e500:	46bd      	mov	sp, r7
 800e502:	bd90      	pop	{r4, r7, pc}

0800e504 <Jstrdup>:

static unsigned char* Jstrdup(const unsigned char* string)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
    size_t length = 0;
 800e50c:	2300      	movs	r3, #0
 800e50e:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800e510:	2300      	movs	r3, #0
 800e512:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d101      	bne.n	800e51e <Jstrdup+0x1a>
    {
        return NULL;
 800e51a:	2300      	movs	r3, #0
 800e51c:	e014      	b.n	800e548 <Jstrdup+0x44>
    }

    length = strlen((const char*)string) + sizeof("");
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f7f1 fe78 	bl	8000214 <strlen>
 800e524:	4603      	mov	r3, r0
 800e526:	3301      	adds	r3, #1
 800e528:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)_Malloc(length);
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f002 f9fc 	bl	8010928 <NoteMalloc>
 800e530:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d101      	bne.n	800e53c <Jstrdup+0x38>
    {
        return NULL;
 800e538:	2300      	movs	r3, #0
 800e53a:	e005      	b.n	800e548 <Jstrdup+0x44>
    }
    memcpy(copy, string, length);
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	6879      	ldr	r1, [r7, #4]
 800e540:	68b8      	ldr	r0, [r7, #8]
 800e542:	f002 fe4b 	bl	80111dc <memcpy>

    return copy;
 800e546:	68bb      	ldr	r3, [r7, #8]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <JFree>:

N_CJSON_PUBLIC(void *) JMalloc(size_t size) {
    return _Malloc(size);
}
N_CJSON_PUBLIC(void) JFree(void *p) {
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
    _Free(p);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f002 f9fb 	bl	8010954 <NoteFree>
}
 800e55e:	bf00      	nop
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <JNew_Item>:

/* Internal constructor. */
static J *JNew_Item()
{
 800e566:	b580      	push	{r7, lr}
 800e568:	b082      	sub	sp, #8
 800e56a:	af00      	add	r7, sp, #0
    J* node = (J*)_Malloc(sizeof(J));
 800e56c:	2028      	movs	r0, #40	; 0x28
 800e56e:	f002 f9db 	bl	8010928 <NoteMalloc>
 800e572:	6078      	str	r0, [r7, #4]
    if (node)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d004      	beq.n	800e584 <JNew_Item+0x1e>
    {
        memset(node, '\0', sizeof(J));
 800e57a:	2228      	movs	r2, #40	; 0x28
 800e57c:	2100      	movs	r1, #0
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f002 fe50 	bl	8011224 <memset>
    }

    return node;
 800e584:	687b      	ldr	r3, [r7, #4]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <JDelete>:

/* Delete a J structure. */
N_CJSON_PUBLIC(void) JDelete(J *item)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b084      	sub	sp, #16
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
    J *next = NULL;
 800e596:	2300      	movs	r3, #0
 800e598:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800e59a:	e034      	b.n	800e606 <JDelete+0x78>
    {
        next = item->next;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	60fb      	str	r3, [r7, #12]
        if (!(item->type & JIsReference) && (item->child != NULL))
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d108      	bne.n	800e5c0 <JDelete+0x32>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	689b      	ldr	r3, [r3, #8]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d004      	beq.n	800e5c0 <JDelete+0x32>
        {
            JDelete(item->child);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7ff ffe7 	bl	800e58e <JDelete>
        }
        if (!(item->type & JIsReference) && (item->valuestring != NULL))
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d108      	bne.n	800e5de <JDelete+0x50>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	691b      	ldr	r3, [r3, #16]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d004      	beq.n	800e5de <JDelete+0x50>
        {
            _Free(item->valuestring);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	691b      	ldr	r3, [r3, #16]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f002 f9bb 	bl	8010954 <NoteFree>
        }
        if (!(item->type & JStringIsConst) && (item->string != NULL))
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d108      	bne.n	800e5fc <JDelete+0x6e>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6a1b      	ldr	r3, [r3, #32]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d004      	beq.n	800e5fc <JDelete+0x6e>
        {
            _Free(item->string);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f002 f9ac 	bl	8010954 <NoteFree>
        }
        _Free(item);
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f002 f9a9 	bl	8010954 <NoteFree>
        item = next;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d1c7      	bne.n	800e59c <JDelete+0xe>
    }
}
 800e60c:	bf00      	nop
 800e60e:	3710      	adds	r7, #16
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800e614:	b480      	push	{r7}
 800e616:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800e618:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr
 800e624:	0000      	movs	r0, r0
	...

0800e628 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static Jbool parse_number(J * const item, parse_buffer * const input_buffer)
{
 800e628:	b590      	push	{r4, r7, lr}
 800e62a:	b099      	sub	sp, #100	; 0x64
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
    JNUMBER number = 0;
 800e632:	f04f 0300 	mov.w	r3, #0
 800e636:	f04f 0400 	mov.w	r4, #0
 800e63a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800e63e:	2300      	movs	r3, #0
 800e640:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800e642:	f7ff ffe7 	bl	800e614 <get_decimal_point>
 800e646:	4603      	mov	r3, r0
 800e648:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800e64c:	2300      	movs	r3, #0
 800e64e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d003      	beq.n	800e65e <parse_number+0x36>
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d101      	bne.n	800e662 <parse_number+0x3a>
    {
        return false;
 800e65e:	2300      	movs	r3, #0
 800e660:	e104      	b.n	800e86c <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800e662:	2300      	movs	r3, #0
 800e664:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e666:	e09f      	b.n	800e7a8 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	6899      	ldr	r1, [r3, #8]
 800e670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e672:	440b      	add	r3, r1
 800e674:	4413      	add	r3, r2
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	3b2b      	subs	r3, #43	; 0x2b
 800e67a:	2b3a      	cmp	r3, #58	; 0x3a
 800e67c:	f200 80a4 	bhi.w	800e7c8 <parse_number+0x1a0>
 800e680:	a201      	add	r2, pc, #4	; (adr r2, 800e688 <parse_number+0x60>)
 800e682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e686:	bf00      	nop
 800e688:	0800e775 	.word	0x0800e775
 800e68c:	0800e7c9 	.word	0x0800e7c9
 800e690:	0800e775 	.word	0x0800e775
 800e694:	0800e793 	.word	0x0800e793
 800e698:	0800e7c9 	.word	0x0800e7c9
 800e69c:	0800e775 	.word	0x0800e775
 800e6a0:	0800e775 	.word	0x0800e775
 800e6a4:	0800e775 	.word	0x0800e775
 800e6a8:	0800e775 	.word	0x0800e775
 800e6ac:	0800e775 	.word	0x0800e775
 800e6b0:	0800e775 	.word	0x0800e775
 800e6b4:	0800e775 	.word	0x0800e775
 800e6b8:	0800e775 	.word	0x0800e775
 800e6bc:	0800e775 	.word	0x0800e775
 800e6c0:	0800e775 	.word	0x0800e775
 800e6c4:	0800e7c9 	.word	0x0800e7c9
 800e6c8:	0800e7c9 	.word	0x0800e7c9
 800e6cc:	0800e7c9 	.word	0x0800e7c9
 800e6d0:	0800e7c9 	.word	0x0800e7c9
 800e6d4:	0800e7c9 	.word	0x0800e7c9
 800e6d8:	0800e7c9 	.word	0x0800e7c9
 800e6dc:	0800e7c9 	.word	0x0800e7c9
 800e6e0:	0800e7c9 	.word	0x0800e7c9
 800e6e4:	0800e7c9 	.word	0x0800e7c9
 800e6e8:	0800e7c9 	.word	0x0800e7c9
 800e6ec:	0800e7c9 	.word	0x0800e7c9
 800e6f0:	0800e775 	.word	0x0800e775
 800e6f4:	0800e7c9 	.word	0x0800e7c9
 800e6f8:	0800e7c9 	.word	0x0800e7c9
 800e6fc:	0800e7c9 	.word	0x0800e7c9
 800e700:	0800e7c9 	.word	0x0800e7c9
 800e704:	0800e7c9 	.word	0x0800e7c9
 800e708:	0800e7c9 	.word	0x0800e7c9
 800e70c:	0800e7c9 	.word	0x0800e7c9
 800e710:	0800e7c9 	.word	0x0800e7c9
 800e714:	0800e7c9 	.word	0x0800e7c9
 800e718:	0800e7c9 	.word	0x0800e7c9
 800e71c:	0800e7c9 	.word	0x0800e7c9
 800e720:	0800e7c9 	.word	0x0800e7c9
 800e724:	0800e7c9 	.word	0x0800e7c9
 800e728:	0800e7c9 	.word	0x0800e7c9
 800e72c:	0800e7c9 	.word	0x0800e7c9
 800e730:	0800e7c9 	.word	0x0800e7c9
 800e734:	0800e7c9 	.word	0x0800e7c9
 800e738:	0800e7c9 	.word	0x0800e7c9
 800e73c:	0800e7c9 	.word	0x0800e7c9
 800e740:	0800e7c9 	.word	0x0800e7c9
 800e744:	0800e7c9 	.word	0x0800e7c9
 800e748:	0800e7c9 	.word	0x0800e7c9
 800e74c:	0800e7c9 	.word	0x0800e7c9
 800e750:	0800e7c9 	.word	0x0800e7c9
 800e754:	0800e7c9 	.word	0x0800e7c9
 800e758:	0800e7c9 	.word	0x0800e7c9
 800e75c:	0800e7c9 	.word	0x0800e7c9
 800e760:	0800e7c9 	.word	0x0800e7c9
 800e764:	0800e7c9 	.word	0x0800e7c9
 800e768:	0800e7c9 	.word	0x0800e7c9
 800e76c:	0800e7c9 	.word	0x0800e7c9
 800e770:	0800e775 	.word	0x0800e775
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	6899      	ldr	r1, [r3, #8]
 800e77c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e77e:	440b      	add	r3, r1
 800e780:	4413      	add	r3, r2
 800e782:	7819      	ldrb	r1, [r3, #0]
 800e784:	f107 0208 	add.w	r2, r7, #8
 800e788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e78a:	4413      	add	r3, r2
 800e78c:	460a      	mov	r2, r1
 800e78e:	701a      	strb	r2, [r3, #0]
                break;
 800e790:	e007      	b.n	800e7a2 <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 800e792:	f107 0208 	add.w	r2, r7, #8
 800e796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e798:	4413      	add	r3, r2
 800e79a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e79e:	701a      	strb	r2, [r3, #0]
                break;
 800e7a0:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800e7a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7aa:	2b3e      	cmp	r3, #62	; 0x3e
 800e7ac:	d80e      	bhi.n	800e7cc <parse_number+0x1a4>
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d00b      	beq.n	800e7cc <parse_number+0x1a4>
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	689a      	ldr	r2, [r3, #8]
 800e7b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7ba:	441a      	add	r2, r3
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	f4ff af51 	bcc.w	800e668 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800e7c6:	e001      	b.n	800e7cc <parse_number+0x1a4>
                goto loop_end;
 800e7c8:	bf00      	nop
 800e7ca:	e000      	b.n	800e7ce <parse_number+0x1a6>
loop_end:
 800e7cc:	bf00      	nop
    number_c_string[i] = '\0';
 800e7ce:	f107 0208 	add.w	r2, r7, #8
 800e7d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7d4:	4413      	add	r3, r2
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	701a      	strb	r2, [r3, #0]

    /* some platforms may not have locale support */
#if !MINIMIZE_CLIB_DEPENDENCIES
    number = strtod((const char*)number_c_string, (char**)&after_end);
#else
    number = JAtoN((const char*)number_c_string, (char**)&after_end);
 800e7da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e7de:	f107 0308 	add.w	r3, r7, #8
 800e7e2:	4611      	mov	r1, r2
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7ff fc53 	bl	800e090 <JAtoN>
 800e7ea:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
#endif
    if (number_c_string == after_end)
 800e7ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7f0:	f107 0308 	add.w	r3, r7, #8
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d101      	bne.n	800e7fc <parse_number+0x1d4>
    {
        return false; /* parse_error */
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	e037      	b.n	800e86c <parse_number+0x244>
    }

    item->valuenumber = number;
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800e802:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800e806:	a31d      	add	r3, pc, #116	; (adr r3, 800e87c <parse_number+0x254>)
 800e808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e810:	f7f2 f9a0 	bl	8000b54 <__aeabi_dcmpge>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d004      	beq.n	800e824 <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e820:	615a      	str	r2, [r3, #20]
 800e822:	e015      	b.n	800e850 <parse_number+0x228>
    }
    else if (number <= INT_MIN)
 800e824:	f04f 0200 	mov.w	r2, #0
 800e828:	4b13      	ldr	r3, [pc, #76]	; (800e878 <parse_number+0x250>)
 800e82a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e82e:	f7f2 f987 	bl	8000b40 <__aeabi_dcmple>
 800e832:	4603      	mov	r3, r0
 800e834:	2b00      	cmp	r3, #0
 800e836:	d004      	beq.n	800e842 <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e83e:	615a      	str	r2, [r3, #20]
 800e840:	e006      	b.n	800e850 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 800e842:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e846:	f7f2 f999 	bl	8000b7c <__aeabi_d2iz>
 800e84a:	4602      	mov	r2, r0
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	615a      	str	r2, [r3, #20]
    }

    item->type = JNumber;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2208      	movs	r2, #8
 800e854:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	689b      	ldr	r3, [r3, #8]
 800e85a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e85c:	4611      	mov	r1, r2
 800e85e:	f107 0208 	add.w	r2, r7, #8
 800e862:	1a8a      	subs	r2, r1, r2
 800e864:	441a      	add	r2, r3
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	609a      	str	r2, [r3, #8]
    return true;
 800e86a:	2301      	movs	r3, #1
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3764      	adds	r7, #100	; 0x64
 800e870:	46bd      	mov	sp, r7
 800e872:	bd90      	pop	{r4, r7, pc}
 800e874:	f3af 8000 	nop.w
 800e878:	c1e00000 	.word	0xc1e00000
 800e87c:	ffc00000 	.word	0xffc00000
 800e880:	41dfffff 	.word	0x41dfffff

0800e884 <ensure>:
    Jbool format; /* is this print a formatted print */
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800e88e:	2300      	movs	r3, #0
 800e890:	60bb      	str	r3, [r7, #8]
    size_t newsize = 0;
 800e892:	2300      	movs	r3, #0
 800e894:	60fb      	str	r3, [r7, #12]

    if ((p == NULL) || (p->buffer == NULL))
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d003      	beq.n	800e8a4 <ensure+0x20>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d101      	bne.n	800e8a8 <ensure+0x24>
    {
        return NULL;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	e066      	b.n	800e976 <ensure+0xf2>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d007      	beq.n	800e8c0 <ensure+0x3c>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	689a      	ldr	r2, [r3, #8]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d301      	bcc.n	800e8c0 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	e05a      	b.n	800e976 <ensure+0xf2>
    }

    if (needed > INT_MAX)
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	da01      	bge.n	800e8ca <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	e055      	b.n	800e976 <ensure+0xf2>
    }

    needed += p->offset + 1;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	689a      	ldr	r2, [r3, #8]
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d805      	bhi.n	800e8ec <ensure+0x68>
    {
        return p->buffer + p->offset;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	689b      	ldr	r3, [r3, #8]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	e044      	b.n	800e976 <ensure+0xf2>
    }

    if (p->noalloc) {
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d001      	beq.n	800e8f8 <ensure+0x74>
        return NULL;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	e03e      	b.n	800e976 <ensure+0xf2>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8fe:	d308      	bcc.n	800e912 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	db03      	blt.n	800e90e <ensure+0x8a>
        {
            newsize = INT_MAX;
 800e906:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e90a:	60fb      	str	r3, [r7, #12]
 800e90c:	e004      	b.n	800e918 <ensure+0x94>
        }
        else
        {
            return NULL;
 800e90e:	2300      	movs	r3, #0
 800e910:	e031      	b.n	800e976 <ensure+0xf2>
        }
    }
    else
    {
        newsize = needed * 2;
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	005b      	lsls	r3, r3, #1
 800e916:	60fb      	str	r3, [r7, #12]
    }

    /* otherwise reallocate manually */
    newbuffer = (unsigned char*)_Malloc(newsize);
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f002 f805 	bl	8010928 <NoteMalloc>
 800e91e:	60b8      	str	r0, [r7, #8]
    if (!newbuffer)
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d10c      	bne.n	800e940 <ensure+0xbc>
    {
        _Free(p->buffer);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	4618      	mov	r0, r3
 800e92c:	f002 f812 	bl	8010954 <NoteFree>
        p->length = 0;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2200      	movs	r2, #0
 800e934:	605a      	str	r2, [r3, #4]
        p->buffer = NULL;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2200      	movs	r2, #0
 800e93a:	601a      	str	r2, [r3, #0]
        return NULL;
 800e93c:	2300      	movs	r3, #0
 800e93e:	e01a      	b.n	800e976 <ensure+0xf2>
    }
    if (newbuffer)
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d008      	beq.n	800e958 <ensure+0xd4>
    {
        memcpy(newbuffer, p->buffer, p->offset + 1);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6819      	ldr	r1, [r3, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	3301      	adds	r3, #1
 800e950:	461a      	mov	r2, r3
 800e952:	68b8      	ldr	r0, [r7, #8]
 800e954:	f002 fc42 	bl	80111dc <memcpy>
    }
    _Free(p->buffer);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4618      	mov	r0, r3
 800e95e:	f001 fff9 	bl	8010954 <NoteFree>

    p->length = newsize;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	68ba      	ldr	r2, [r7, #8]
 800e96c:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	689b      	ldr	r3, [r3, #8]
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	4413      	add	r3, r2
}
 800e976:	4618      	mov	r0, r3
 800e978:	3710      	adds	r7, #16
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800e97e:	b590      	push	{r4, r7, lr}
 800e980:	b085      	sub	sp, #20
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800e986:	2300      	movs	r3, #0
 800e988:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d013      	beq.n	800e9b8 <update_offset+0x3a>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00f      	beq.n	800e9b8 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	689c      	ldr	r4, [r3, #8]
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f7f1 fc33 	bl	8000214 <strlen>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	18e2      	adds	r2, r4, r3
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	609a      	str	r2, [r3, #8]
 800e9b6:	e000      	b.n	800e9ba <update_offset+0x3c>
        return;
 800e9b8:	bf00      	nop
}
 800e9ba:	3714      	adds	r7, #20
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd90      	pop	{r4, r7, pc}

0800e9c0 <print_number>:

/* Render the number nicely from the given item into a string. */
static Jbool print_number(const J * const item, printbuffer * const output_buffer)
{
 800e9c0:	b590      	push	{r4, r7, lr}
 800e9c2:	b093      	sub	sp, #76	; 0x4c
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    JNUMBER d = item->valuenumber;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800e9d4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int length = 0;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26]; /* temporary buffer to print the number into */
    unsigned char decimal_point = get_decimal_point();
 800e9e0:	f7ff fe18 	bl	800e614 <get_decimal_point>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (output_buffer == NULL)
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d101      	bne.n	800e9f4 <print_number+0x34>
    {
        return false;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	e074      	b.n	800eade <print_number+0x11e>
    }

    /* This checks for NaN and Infinity */
    if ((d * 0) != 0)
 800e9f4:	f04f 0200 	mov.w	r2, #0
 800e9f8:	f04f 0300 	mov.w	r3, #0
 800e9fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ea00:	f7f1 fe22 	bl	8000648 <__aeabi_dmul>
 800ea04:	4603      	mov	r3, r0
 800ea06:	460c      	mov	r4, r1
 800ea08:	4618      	mov	r0, r3
 800ea0a:	4621      	mov	r1, r4
 800ea0c:	f04f 0200 	mov.w	r2, #0
 800ea10:	f04f 0300 	mov.w	r3, #0
 800ea14:	f7f2 f880 	bl	8000b18 <__aeabi_dcmpeq>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10e      	bne.n	800ea3c <print_number+0x7c>
    {
        char *nbuf = (char *) number_buffer;
 800ea1e:	f107 0308 	add.w	r3, r7, #8
 800ea22:	627b      	str	r3, [r7, #36]	; 0x24
        strcpy(nbuf, "null");
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	4a30      	ldr	r2, [pc, #192]	; (800eae8 <print_number+0x128>)
 800ea28:	6810      	ldr	r0, [r2, #0]
 800ea2a:	6018      	str	r0, [r3, #0]
 800ea2c:	7912      	ldrb	r2, [r2, #4]
 800ea2e:	711a      	strb	r2, [r3, #4]
        length = strlen(nbuf);
 800ea30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea32:	f7f1 fbef 	bl	8000214 <strlen>
 800ea36:	4603      	mov	r3, r0
 800ea38:	647b      	str	r3, [r7, #68]	; 0x44
 800ea3a:	e00e      	b.n	800ea5a <print_number+0x9a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
        }
#else
        char *nbuf = (char *) number_buffer;
 800ea3c:	f107 0308 	add.w	r3, r7, #8
 800ea40:	62bb      	str	r3, [r7, #40]	; 0x28
        JNtoA(d, nbuf, -1);
 800ea42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ea46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea48:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800ea4c:	f001 fcfc 	bl	8010448 <JNtoA>
        length = strlen(nbuf);
 800ea50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea52:	f7f1 fbdf 	bl	8000214 <strlen>
 800ea56:	4603      	mov	r3, r0
 800ea58:	647b      	str	r3, [r7, #68]	; 0x44
#endif
    }

    /* conversion failed or buffer overrun occured */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800ea5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	db02      	blt.n	800ea66 <print_number+0xa6>
 800ea60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea62:	2b19      	cmp	r3, #25
 800ea64:	dd01      	ble.n	800ea6a <print_number+0xaa>
    {
        return false;
 800ea66:	2300      	movs	r3, #0
 800ea68:	e039      	b.n	800eade <print_number+0x11e>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800ea6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	4619      	mov	r1, r3
 800ea70:	6838      	ldr	r0, [r7, #0]
 800ea72:	f7ff ff07 	bl	800e884 <ensure>
 800ea76:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 800ea78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d101      	bne.n	800ea82 <print_number+0xc2>
    {
        return false;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	e02d      	b.n	800eade <print_number+0x11e>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800ea82:	2300      	movs	r3, #0
 800ea84:	643b      	str	r3, [r7, #64]	; 0x40
 800ea86:	e01a      	b.n	800eabe <print_number+0xfe>
    {
        if (number_buffer[i] == decimal_point)
 800ea88:	f107 0208 	add.w	r2, r7, #8
 800ea8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea8e:	4413      	add	r3, r2
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d105      	bne.n	800eaa6 <print_number+0xe6>
        {
            output_pointer[i] = '.';
 800ea9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea9e:	4413      	add	r3, r2
 800eaa0:	222e      	movs	r2, #46	; 0x2e
 800eaa2:	701a      	strb	r2, [r3, #0]
            continue;
 800eaa4:	e008      	b.n	800eab8 <print_number+0xf8>
        }

        output_pointer[i] = number_buffer[i];
 800eaa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eaa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaaa:	4413      	add	r3, r2
 800eaac:	f107 0108 	add.w	r1, r7, #8
 800eab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eab2:	440a      	add	r2, r1
 800eab4:	7812      	ldrb	r2, [r2, #0]
 800eab6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800eab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaba:	3301      	adds	r3, #1
 800eabc:	643b      	str	r3, [r7, #64]	; 0x40
 800eabe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d3e0      	bcc.n	800ea88 <print_number+0xc8>
    }
    output_pointer[i] = '\0';
 800eac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaca:	4413      	add	r3, r2
 800eacc:	2200      	movs	r2, #0
 800eace:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	689a      	ldr	r2, [r3, #8]
 800ead4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ead6:	441a      	add	r2, r3
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	609a      	str	r2, [r3, #8]

    return true;
 800eadc:	2301      	movs	r3, #1
}
 800eade:	4618      	mov	r0, r3
 800eae0:	374c      	adds	r7, #76	; 0x4c
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd90      	pop	{r4, r7, pc}
 800eae6:	bf00      	nop
 800eae8:	08011cc4 	.word	0x08011cc4

0800eaec <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b085      	sub	sp, #20
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800eafc:	2300      	movs	r3, #0
 800eafe:	60bb      	str	r3, [r7, #8]
 800eb00:	e04c      	b.n	800eb9c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	4413      	add	r3, r2
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	2b2f      	cmp	r3, #47	; 0x2f
 800eb0c:	d90f      	bls.n	800eb2e <parse_hex4+0x42>
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	4413      	add	r3, r2
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b39      	cmp	r3, #57	; 0x39
 800eb18:	d809      	bhi.n	800eb2e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	4413      	add	r3, r2
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	461a      	mov	r2, r3
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	4413      	add	r3, r2
 800eb28:	3b30      	subs	r3, #48	; 0x30
 800eb2a:	60fb      	str	r3, [r7, #12]
 800eb2c:	e02d      	b.n	800eb8a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	4413      	add	r3, r2
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	2b40      	cmp	r3, #64	; 0x40
 800eb38:	d90f      	bls.n	800eb5a <parse_hex4+0x6e>
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	4413      	add	r3, r2
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	2b46      	cmp	r3, #70	; 0x46
 800eb44:	d809      	bhi.n	800eb5a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	4413      	add	r3, r2
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	4413      	add	r3, r2
 800eb54:	3b37      	subs	r3, #55	; 0x37
 800eb56:	60fb      	str	r3, [r7, #12]
 800eb58:	e017      	b.n	800eb8a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	4413      	add	r3, r2
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	2b60      	cmp	r3, #96	; 0x60
 800eb64:	d90f      	bls.n	800eb86 <parse_hex4+0x9a>
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	4413      	add	r3, r2
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	2b66      	cmp	r3, #102	; 0x66
 800eb70:	d809      	bhi.n	800eb86 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	4413      	add	r3, r2
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	4413      	add	r3, r2
 800eb80:	3b57      	subs	r3, #87	; 0x57
 800eb82:	60fb      	str	r3, [r7, #12]
 800eb84:	e001      	b.n	800eb8a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800eb86:	2300      	movs	r3, #0
 800eb88:	e00c      	b.n	800eba4 <parse_hex4+0xb8>
        }

        if (i < 3)
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	2b02      	cmp	r3, #2
 800eb8e:	d802      	bhi.n	800eb96 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	011b      	lsls	r3, r3, #4
 800eb94:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	60bb      	str	r3, [r7, #8]
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	2b03      	cmp	r3, #3
 800eba0:	d9af      	bls.n	800eb02 <parse_hex4+0x16>
        }
    }

    return h;
 800eba2:	68fb      	ldr	r3, [r7, #12]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b08a      	sub	sp, #40	; 0x28
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800ebe0:	68ba      	ldr	r2, [r7, #8]
 800ebe2:	69bb      	ldr	r3, [r7, #24]
 800ebe4:	1ad3      	subs	r3, r2, r3
 800ebe6:	2b05      	cmp	r3, #5
 800ebe8:	f340 80b7 	ble.w	800ed5a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	3302      	adds	r3, #2
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff ff7b 	bl	800eaec <parse_hex4>
 800ebf6:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800ebfe:	d304      	bcc.n	800ec0a <utf16_literal_to_utf8+0x5a>
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800ec06:	f0c0 80aa 	bcc.w	800ed5e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800ec10:	d337      	bcc.n	800ec82 <utf16_literal_to_utf8+0xd2>
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800ec18:	d233      	bcs.n	800ec82 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800ec1a:	69bb      	ldr	r3, [r7, #24]
 800ec1c:	3306      	adds	r3, #6
 800ec1e:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800ec24:	230c      	movs	r3, #12
 800ec26:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800ec2a:	68ba      	ldr	r2, [r7, #8]
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	1ad3      	subs	r3, r2, r3
 800ec30:	2b05      	cmp	r3, #5
 800ec32:	f340 8096 	ble.w	800ed62 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	2b5c      	cmp	r3, #92	; 0x5c
 800ec3c:	f040 8093 	bne.w	800ed66 <utf16_literal_to_utf8+0x1b6>
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	3301      	adds	r3, #1
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	2b75      	cmp	r3, #117	; 0x75
 800ec48:	f040 808d 	bne.w	800ed66 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	3302      	adds	r3, #2
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7ff ff4b 	bl	800eaec <parse_hex4>
 800ec56:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800ec5e:	f0c0 8082 	bcc.w	800ed66 <utf16_literal_to_utf8+0x1b6>
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800ec68:	d27d      	bcs.n	800ed66 <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	029a      	lsls	r2, r3, #10
 800ec6e:	4b42      	ldr	r3, [pc, #264]	; (800ed78 <utf16_literal_to_utf8+0x1c8>)
 800ec70:	4013      	ands	r3, r2
 800ec72:	693a      	ldr	r2, [r7, #16]
 800ec74:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ec7e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800ec80:	e004      	b.n	800ec8c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800ec82:	2306      	movs	r3, #6
 800ec84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	2b7f      	cmp	r3, #127	; 0x7f
 800ec90:	d803      	bhi.n	800ec9a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800ec92:	2301      	movs	r3, #1
 800ec94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ec98:	e01f      	b.n	800ecda <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eca0:	d206      	bcs.n	800ecb0 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800eca2:	2302      	movs	r3, #2
 800eca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800eca8:	23c0      	movs	r3, #192	; 0xc0
 800ecaa:	f887 3020 	strb.w	r3, [r7, #32]
 800ecae:	e014      	b.n	800ecda <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800ecb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecb6:	d206      	bcs.n	800ecc6 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800ecbe:	23e0      	movs	r3, #224	; 0xe0
 800ecc0:	f887 3020 	strb.w	r3, [r7, #32]
 800ecc4:	e009      	b.n	800ecda <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800eccc:	d24d      	bcs.n	800ed6a <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800ecce:	2304      	movs	r3, #4
 800ecd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800ecd4:	23f0      	movs	r3, #240	; 0xf0
 800ecd6:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800ecda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ecde:	3b01      	subs	r3, #1
 800ece0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ece4:	e015      	b.n	800ed12 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800ece6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ecee:	b2da      	uxtb	r2, r3
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6819      	ldr	r1, [r3, #0]
 800ecf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ecf8:	440b      	add	r3, r1
 800ecfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ecfe:	b2d2      	uxtb	r2, r2
 800ed00:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800ed02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed04:	099b      	lsrs	r3, r3, #6
 800ed06:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800ed08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ed12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1e5      	bne.n	800ece6 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800ed1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d909      	bls.n	800ed36 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800ed22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed24:	b2d9      	uxtb	r1, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	b2d2      	uxtb	r2, r2
 800ed32:	701a      	strb	r2, [r3, #0]
 800ed34:	e007      	b.n	800ed46 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800ed36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed38:	b2da      	uxtb	r2, r3
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed42:	b2d2      	uxtb	r2, r2
 800ed44:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed4e:	441a      	add	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800ed54:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ed58:	e009      	b.n	800ed6e <utf16_literal_to_utf8+0x1be>
        goto fail;
 800ed5a:	bf00      	nop
 800ed5c:	e006      	b.n	800ed6c <utf16_literal_to_utf8+0x1bc>
        goto fail;
 800ed5e:	bf00      	nop
 800ed60:	e004      	b.n	800ed6c <utf16_literal_to_utf8+0x1bc>
            goto fail;
 800ed62:	bf00      	nop
 800ed64:	e002      	b.n	800ed6c <utf16_literal_to_utf8+0x1bc>

fail:
 800ed66:	bf00      	nop
 800ed68:	e000      	b.n	800ed6c <utf16_literal_to_utf8+0x1bc>
        goto fail;
 800ed6a:	bf00      	nop
    return 0;
 800ed6c:	2300      	movs	r3, #0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3728      	adds	r7, #40	; 0x28
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	000ffc00 	.word	0x000ffc00

0800ed7c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static Jbool parse_string(J * const item, parse_buffer * const input_buffer)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b08a      	sub	sp, #40	; 0x28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	3301      	adds	r3, #1
 800ed90:	4413      	add	r3, r2
 800ed92:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	4413      	add	r3, r2
 800eda0:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800eda6:	2300      	movs	r3, #0
 800eda8:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	4413      	add	r3, r2
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	2b22      	cmp	r3, #34	; 0x22
 800edb8:	f040 816c 	bne.w	800f094 <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800edc4:	e018      	b.n	800edf8 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800edc6:	6a3b      	ldr	r3, [r7, #32]
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	2b5c      	cmp	r3, #92	; 0x5c
 800edcc:	d111      	bne.n	800edf2 <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800edce:	6a3b      	ldr	r3, [r7, #32]
 800edd0:	3301      	adds	r3, #1
 800edd2:	461a      	mov	r2, r3
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	1ad3      	subs	r3, r2, r3
 800edda:	461a      	mov	r2, r3
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	f080 8159 	bcs.w	800f098 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	3301      	adds	r3, #1
 800edea:	61bb      	str	r3, [r7, #24]
                input_end++;
 800edec:	6a3b      	ldr	r3, [r7, #32]
 800edee:	3301      	adds	r3, #1
 800edf0:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800edf2:	6a3b      	ldr	r3, [r7, #32]
 800edf4:	3301      	adds	r3, #1
 800edf6:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800edf8:	6a3b      	ldr	r3, [r7, #32]
 800edfa:	683a      	ldr	r2, [r7, #0]
 800edfc:	6812      	ldr	r2, [r2, #0]
 800edfe:	1a9b      	subs	r3, r3, r2
 800ee00:	461a      	mov	r2, r3
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d203      	bcs.n	800ee12 <parse_string+0x96>
 800ee0a:	6a3b      	ldr	r3, [r7, #32]
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	2b22      	cmp	r3, #34	; 0x22
 800ee10:	d1d9      	bne.n	800edc6 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800ee12:	6a3b      	ldr	r3, [r7, #32]
 800ee14:	683a      	ldr	r2, [r7, #0]
 800ee16:	6812      	ldr	r2, [r2, #0]
 800ee18:	1a9b      	subs	r3, r3, r2
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	f080 813b 	bcs.w	800f09c <parse_string+0x320>
 800ee26:	6a3b      	ldr	r3, [r7, #32]
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	2b22      	cmp	r3, #34	; 0x22
 800ee2c:	f040 8136 	bne.w	800f09c <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800ee30:	6a3b      	ldr	r3, [r7, #32]
 800ee32:	683a      	ldr	r2, [r7, #0]
 800ee34:	6811      	ldr	r1, [r2, #0]
 800ee36:	683a      	ldr	r2, [r7, #0]
 800ee38:	6892      	ldr	r2, [r2, #8]
 800ee3a:	440a      	add	r2, r1
 800ee3c:	1a9b      	subs	r3, r3, r2
 800ee3e:	461a      	mov	r2, r3
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	1ad3      	subs	r3, r2, r3
 800ee44:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)_Malloc(allocation_length + 1);	// trailing '\0'
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f001 fd6c 	bl	8010928 <NoteMalloc>
 800ee50:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f000 8123 	beq.w	800f0a0 <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800ee5e:	e0fd      	b.n	800f05c <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	2b5c      	cmp	r3, #92	; 0x5c
 800ee66:	d008      	beq.n	800ee7a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800ee68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee6a:	1c53      	adds	r3, r2, #1
 800ee6c:	627b      	str	r3, [r7, #36]	; 0x24
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	1c59      	adds	r1, r3, #1
 800ee72:	60f9      	str	r1, [r7, #12]
 800ee74:	7812      	ldrb	r2, [r2, #0]
 800ee76:	701a      	strb	r2, [r3, #0]
 800ee78:	e0f0      	b.n	800f05c <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800ee7a:	2302      	movs	r3, #2
 800ee7c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800ee7e:	6a3a      	ldr	r2, [r7, #32]
 800ee80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee82:	1ad3      	subs	r3, r2, r3
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f340 810d 	ble.w	800f0a4 <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800ee8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	3b22      	subs	r3, #34	; 0x22
 800ee92:	2b53      	cmp	r3, #83	; 0x53
 800ee94:	f200 8108 	bhi.w	800f0a8 <parse_string+0x32c>
 800ee98:	a201      	add	r2, pc, #4	; (adr r2, 800eea0 <parse_string+0x124>)
 800ee9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee9e:	bf00      	nop
 800eea0:	0800f02d 	.word	0x0800f02d
 800eea4:	0800f0a9 	.word	0x0800f0a9
 800eea8:	0800f0a9 	.word	0x0800f0a9
 800eeac:	0800f0a9 	.word	0x0800f0a9
 800eeb0:	0800f0a9 	.word	0x0800f0a9
 800eeb4:	0800f0a9 	.word	0x0800f0a9
 800eeb8:	0800f0a9 	.word	0x0800f0a9
 800eebc:	0800f0a9 	.word	0x0800f0a9
 800eec0:	0800f0a9 	.word	0x0800f0a9
 800eec4:	0800f0a9 	.word	0x0800f0a9
 800eec8:	0800f0a9 	.word	0x0800f0a9
 800eecc:	0800f0a9 	.word	0x0800f0a9
 800eed0:	0800f0a9 	.word	0x0800f0a9
 800eed4:	0800f02d 	.word	0x0800f02d
 800eed8:	0800f0a9 	.word	0x0800f0a9
 800eedc:	0800f0a9 	.word	0x0800f0a9
 800eee0:	0800f0a9 	.word	0x0800f0a9
 800eee4:	0800f0a9 	.word	0x0800f0a9
 800eee8:	0800f0a9 	.word	0x0800f0a9
 800eeec:	0800f0a9 	.word	0x0800f0a9
 800eef0:	0800f0a9 	.word	0x0800f0a9
 800eef4:	0800f0a9 	.word	0x0800f0a9
 800eef8:	0800f0a9 	.word	0x0800f0a9
 800eefc:	0800f0a9 	.word	0x0800f0a9
 800ef00:	0800f0a9 	.word	0x0800f0a9
 800ef04:	0800f0a9 	.word	0x0800f0a9
 800ef08:	0800f0a9 	.word	0x0800f0a9
 800ef0c:	0800f0a9 	.word	0x0800f0a9
 800ef10:	0800f0a9 	.word	0x0800f0a9
 800ef14:	0800f0a9 	.word	0x0800f0a9
 800ef18:	0800f0a9 	.word	0x0800f0a9
 800ef1c:	0800f0a9 	.word	0x0800f0a9
 800ef20:	0800f0a9 	.word	0x0800f0a9
 800ef24:	0800f0a9 	.word	0x0800f0a9
 800ef28:	0800f0a9 	.word	0x0800f0a9
 800ef2c:	0800f0a9 	.word	0x0800f0a9
 800ef30:	0800f0a9 	.word	0x0800f0a9
 800ef34:	0800f0a9 	.word	0x0800f0a9
 800ef38:	0800f0a9 	.word	0x0800f0a9
 800ef3c:	0800f0a9 	.word	0x0800f0a9
 800ef40:	0800f0a9 	.word	0x0800f0a9
 800ef44:	0800f0a9 	.word	0x0800f0a9
 800ef48:	0800f0a9 	.word	0x0800f0a9
 800ef4c:	0800f0a9 	.word	0x0800f0a9
 800ef50:	0800f0a9 	.word	0x0800f0a9
 800ef54:	0800f0a9 	.word	0x0800f0a9
 800ef58:	0800f0a9 	.word	0x0800f0a9
 800ef5c:	0800f0a9 	.word	0x0800f0a9
 800ef60:	0800f0a9 	.word	0x0800f0a9
 800ef64:	0800f0a9 	.word	0x0800f0a9
 800ef68:	0800f0a9 	.word	0x0800f0a9
 800ef6c:	0800f0a9 	.word	0x0800f0a9
 800ef70:	0800f0a9 	.word	0x0800f0a9
 800ef74:	0800f0a9 	.word	0x0800f0a9
 800ef78:	0800f0a9 	.word	0x0800f0a9
 800ef7c:	0800f0a9 	.word	0x0800f0a9
 800ef80:	0800f0a9 	.word	0x0800f0a9
 800ef84:	0800f0a9 	.word	0x0800f0a9
 800ef88:	0800f02d 	.word	0x0800f02d
 800ef8c:	0800f0a9 	.word	0x0800f0a9
 800ef90:	0800f0a9 	.word	0x0800f0a9
 800ef94:	0800f0a9 	.word	0x0800f0a9
 800ef98:	0800f0a9 	.word	0x0800f0a9
 800ef9c:	0800f0a9 	.word	0x0800f0a9
 800efa0:	0800eff1 	.word	0x0800eff1
 800efa4:	0800f0a9 	.word	0x0800f0a9
 800efa8:	0800f0a9 	.word	0x0800f0a9
 800efac:	0800f0a9 	.word	0x0800f0a9
 800efb0:	0800effd 	.word	0x0800effd
 800efb4:	0800f0a9 	.word	0x0800f0a9
 800efb8:	0800f0a9 	.word	0x0800f0a9
 800efbc:	0800f0a9 	.word	0x0800f0a9
 800efc0:	0800f0a9 	.word	0x0800f0a9
 800efc4:	0800f0a9 	.word	0x0800f0a9
 800efc8:	0800f0a9 	.word	0x0800f0a9
 800efcc:	0800f0a9 	.word	0x0800f0a9
 800efd0:	0800f009 	.word	0x0800f009
 800efd4:	0800f0a9 	.word	0x0800f0a9
 800efd8:	0800f0a9 	.word	0x0800f0a9
 800efdc:	0800f0a9 	.word	0x0800f0a9
 800efe0:	0800f015 	.word	0x0800f015
 800efe4:	0800f0a9 	.word	0x0800f0a9
 800efe8:	0800f021 	.word	0x0800f021
 800efec:	0800f03b 	.word	0x0800f03b
            {
                case 'b':
                    *output_pointer++ = '\b';
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	1c5a      	adds	r2, r3, #1
 800eff4:	60fa      	str	r2, [r7, #12]
 800eff6:	2208      	movs	r2, #8
 800eff8:	701a      	strb	r2, [r3, #0]
                    break;
 800effa:	e02b      	b.n	800f054 <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	60fa      	str	r2, [r7, #12]
 800f002:	220c      	movs	r2, #12
 800f004:	701a      	strb	r2, [r3, #0]
                    break;
 800f006:	e025      	b.n	800f054 <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	1c5a      	adds	r2, r3, #1
 800f00c:	60fa      	str	r2, [r7, #12]
 800f00e:	220a      	movs	r2, #10
 800f010:	701a      	strb	r2, [r3, #0]
                    break;
 800f012:	e01f      	b.n	800f054 <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	1c5a      	adds	r2, r3, #1
 800f018:	60fa      	str	r2, [r7, #12]
 800f01a:	220d      	movs	r2, #13
 800f01c:	701a      	strb	r2, [r3, #0]
                    break;
 800f01e:	e019      	b.n	800f054 <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	1c5a      	adds	r2, r3, #1
 800f024:	60fa      	str	r2, [r7, #12]
 800f026:	2209      	movs	r2, #9
 800f028:	701a      	strb	r2, [r3, #0]
                    break;
 800f02a:	e013      	b.n	800f054 <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	1c5a      	adds	r2, r3, #1
 800f030:	60fa      	str	r2, [r7, #12]
 800f032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f034:	7852      	ldrb	r2, [r2, #1]
 800f036:	701a      	strb	r2, [r3, #0]
                    break;
 800f038:	e00c      	b.n	800f054 <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800f03a:	f107 030c 	add.w	r3, r7, #12
 800f03e:	461a      	mov	r2, r3
 800f040:	6a39      	ldr	r1, [r7, #32]
 800f042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f044:	f7ff fdb4 	bl	800ebb0 <utf16_literal_to_utf8>
 800f048:	4603      	mov	r3, r0
 800f04a:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800f04c:	7dfb      	ldrb	r3, [r7, #23]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d02c      	beq.n	800f0ac <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 800f052:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 800f054:	7dfb      	ldrb	r3, [r7, #23]
 800f056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f058:	4413      	add	r3, r2
 800f05a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800f05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f05e:	6a3b      	ldr	r3, [r7, #32]
 800f060:	429a      	cmp	r2, r3
 800f062:	f4ff aefd 	bcc.w	800ee60 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2200      	movs	r2, #0
 800f06a:	701a      	strb	r2, [r3, #0]

    item->type = JString;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2210      	movs	r2, #16
 800f070:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	69fa      	ldr	r2, [r7, #28]
 800f076:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800f078:	6a3b      	ldr	r3, [r7, #32]
 800f07a:	683a      	ldr	r2, [r7, #0]
 800f07c:	6812      	ldr	r2, [r2, #0]
 800f07e:	1a9b      	subs	r3, r3, r2
 800f080:	461a      	mov	r2, r3
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	1c5a      	adds	r2, r3, #1
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	609a      	str	r2, [r3, #8]

    return true;
 800f090:	2301      	movs	r3, #1
 800f092:	e01d      	b.n	800f0d0 <parse_string+0x354>
        goto fail;
 800f094:	bf00      	nop
 800f096:	e00a      	b.n	800f0ae <parse_string+0x332>
                    goto fail;
 800f098:	bf00      	nop
 800f09a:	e008      	b.n	800f0ae <parse_string+0x332>

fail:
 800f09c:	bf00      	nop
 800f09e:	e006      	b.n	800f0ae <parse_string+0x332>
            goto fail; /* allocation failure */
 800f0a0:	bf00      	nop
 800f0a2:	e004      	b.n	800f0ae <parse_string+0x332>
                goto fail;
 800f0a4:	bf00      	nop
 800f0a6:	e002      	b.n	800f0ae <parse_string+0x332>
                    goto fail;
 800f0a8:	bf00      	nop
 800f0aa:	e000      	b.n	800f0ae <parse_string+0x332>
                        goto fail;
 800f0ac:	bf00      	nop
    if (output != NULL)
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d002      	beq.n	800f0ba <parse_string+0x33e>
    {
        _Free(output);
 800f0b4:	69f8      	ldr	r0, [r7, #28]
 800f0b6:	f001 fc4d 	bl	8010954 <NoteFree>
    }

    if (input_pointer != NULL)
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d006      	beq.n	800f0ce <parse_string+0x352>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800f0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c2:	683a      	ldr	r2, [r7, #0]
 800f0c4:	6812      	ldr	r2, [r2, #0]
 800f0c6:	1a9b      	subs	r3, r3, r2
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	609a      	str	r2, [r3, #8]
    }

    return false;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3728      	adds	r7, #40	; 0x28
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <htoa16>:

/* Convert a 16-bit number to 4 hex digits, null-terminating it */
void htoa16(uint16_t n, unsigned char *p)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	4603      	mov	r3, r0
 800f0e0:	6039      	str	r1, [r7, #0]
 800f0e2:	80fb      	strh	r3, [r7, #6]
    int i;
    for (i=0; i<4; i++)
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	60fb      	str	r3, [r7, #12]
 800f0e8:	e01c      	b.n	800f124 <htoa16+0x4c>
    {
        uint16_t nibble = (n >> 12) & 0xff;
 800f0ea:	88fb      	ldrh	r3, [r7, #6]
 800f0ec:	0b1b      	lsrs	r3, r3, #12
 800f0ee:	817b      	strh	r3, [r7, #10]
        n = n << 4;
 800f0f0:	88fb      	ldrh	r3, [r7, #6]
 800f0f2:	011b      	lsls	r3, r3, #4
 800f0f4:	80fb      	strh	r3, [r7, #6]
        if (nibble >= 10)
 800f0f6:	897b      	ldrh	r3, [r7, #10]
 800f0f8:	2b09      	cmp	r3, #9
 800f0fa:	d908      	bls.n	800f10e <htoa16+0x36>
            *p++ = 'A' + (nibble-10);
 800f0fc:	897b      	ldrh	r3, [r7, #10]
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	1c59      	adds	r1, r3, #1
 800f104:	6039      	str	r1, [r7, #0]
 800f106:	3237      	adds	r2, #55	; 0x37
 800f108:	b2d2      	uxtb	r2, r2
 800f10a:	701a      	strb	r2, [r3, #0]
 800f10c:	e007      	b.n	800f11e <htoa16+0x46>
        else
            *p++ = '0' + nibble;
 800f10e:	897b      	ldrh	r3, [r7, #10]
 800f110:	b2da      	uxtb	r2, r3
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	1c59      	adds	r1, r3, #1
 800f116:	6039      	str	r1, [r7, #0]
 800f118:	3230      	adds	r2, #48	; 0x30
 800f11a:	b2d2      	uxtb	r2, r2
 800f11c:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	3301      	adds	r3, #1
 800f122:	60fb      	str	r3, [r7, #12]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2b03      	cmp	r3, #3
 800f128:	dddf      	ble.n	800f0ea <htoa16+0x12>
    }
    *p = '\0';
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	2200      	movs	r2, #0
 800f12e:	701a      	strb	r2, [r3, #0]
}
 800f130:	bf00      	nop
 800f132:	3714      	adds	r7, #20
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr

0800f13c <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static Jbool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b088      	sub	sp, #32
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800f146:	2300      	movs	r3, #0
 800f148:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800f14a:	2300      	movs	r3, #0
 800f14c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800f14e:	2300      	movs	r3, #0
 800f150:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800f152:	2300      	movs	r3, #0
 800f154:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800f156:	2300      	movs	r3, #0
 800f158:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d101      	bne.n	800f164 <print_string_ptr+0x28>
    {
        return false;
 800f160:	2300      	movs	r3, #0
 800f162:	e0e1      	b.n	800f328 <print_string_ptr+0x1ec>
    }

    /* empty string */
    if (input == NULL)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d116      	bne.n	800f198 <print_string_ptr+0x5c>
    {
        output = ensure(output_buffer, 2);	// sizeof("\"\"")
 800f16a:	2102      	movs	r1, #2
 800f16c:	6838      	ldr	r0, [r7, #0]
 800f16e:	f7ff fb89 	bl	800e884 <ensure>
 800f172:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d101      	bne.n	800f17e <print_string_ptr+0x42>
        {
            return false;
 800f17a:	2300      	movs	r3, #0
 800f17c:	e0d4      	b.n	800f328 <print_string_ptr+0x1ec>
        }
		output[0] = '"';
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	2222      	movs	r2, #34	; 0x22
 800f182:	701a      	strb	r2, [r3, #0]
		output[1] = '"';
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	3301      	adds	r3, #1
 800f188:	2222      	movs	r2, #34	; 0x22
 800f18a:	701a      	strb	r2, [r3, #0]
		output[2] = '\0';
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	3302      	adds	r3, #2
 800f190:	2200      	movs	r2, #0
 800f192:	701a      	strb	r2, [r3, #0]

        return true;
 800f194:	2301      	movs	r3, #1
 800f196:	e0c7      	b.n	800f328 <print_string_ptr+0x1ec>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	61fb      	str	r3, [r7, #28]
 800f19c:	e01c      	b.n	800f1d8 <print_string_ptr+0x9c>
    {
        switch (*input_pointer)
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	2b0d      	cmp	r3, #13
 800f1a4:	dc05      	bgt.n	800f1b2 <print_string_ptr+0x76>
 800f1a6:	2b0c      	cmp	r3, #12
 800f1a8:	da07      	bge.n	800f1ba <print_string_ptr+0x7e>
 800f1aa:	3b08      	subs	r3, #8
 800f1ac:	2b02      	cmp	r3, #2
 800f1ae:	d808      	bhi.n	800f1c2 <print_string_ptr+0x86>
 800f1b0:	e003      	b.n	800f1ba <print_string_ptr+0x7e>
 800f1b2:	2b22      	cmp	r3, #34	; 0x22
 800f1b4:	d001      	beq.n	800f1ba <print_string_ptr+0x7e>
 800f1b6:	2b5c      	cmp	r3, #92	; 0x5c
 800f1b8:	d103      	bne.n	800f1c2 <print_string_ptr+0x86>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	617b      	str	r3, [r7, #20]
                break;
 800f1c0:	e007      	b.n	800f1d2 <print_string_ptr+0x96>
            default:
                if (*input_pointer < 32)
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	2b1f      	cmp	r3, #31
 800f1c8:	d802      	bhi.n	800f1d0 <print_string_ptr+0x94>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	3305      	adds	r3, #5
 800f1ce:	617b      	str	r3, [r7, #20]
                }
                break;
 800f1d0:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800f1d2:	69fb      	ldr	r3, [r7, #28]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	61fb      	str	r3, [r7, #28]
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d1de      	bne.n	800f19e <print_string_ptr+0x62>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800f1e0:	69fa      	ldr	r2, [r7, #28]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	1ad3      	subs	r3, r2, r3
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + 2);	// sizeof("\"\"")
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	3302      	adds	r3, #2
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	6838      	ldr	r0, [r7, #0]
 800f1f6:	f7ff fb45 	bl	800e884 <ensure>
 800f1fa:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d101      	bne.n	800f206 <print_string_ptr+0xca>
    {
        return false;
 800f202:	2300      	movs	r3, #0
 800f204:	e090      	b.n	800f328 <print_string_ptr+0x1ec>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d117      	bne.n	800f23c <print_string_ptr+0x100>
    {
        output[0] = '\"';
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	2222      	movs	r2, #34	; 0x22
 800f210:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	3301      	adds	r3, #1
 800f216:	68fa      	ldr	r2, [r7, #12]
 800f218:	6879      	ldr	r1, [r7, #4]
 800f21a:	4618      	mov	r0, r3
 800f21c:	f001 ffde 	bl	80111dc <memcpy>
        output[output_length + 1] = '\"';
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	3301      	adds	r3, #1
 800f224:	693a      	ldr	r2, [r7, #16]
 800f226:	4413      	add	r3, r2
 800f228:	2222      	movs	r2, #34	; 0x22
 800f22a:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3302      	adds	r3, #2
 800f230:	693a      	ldr	r2, [r7, #16]
 800f232:	4413      	add	r3, r2
 800f234:	2200      	movs	r2, #0
 800f236:	701a      	strb	r2, [r3, #0]

        return true;
 800f238:	2301      	movs	r3, #1
 800f23a:	e075      	b.n	800f328 <print_string_ptr+0x1ec>
    }

    output[0] = '\"';
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	2222      	movs	r2, #34	; 0x22
 800f240:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	3301      	adds	r3, #1
 800f246:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	61fb      	str	r3, [r7, #28]
 800f24c:	e05b      	b.n	800f306 <print_string_ptr+0x1ca>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	2b1f      	cmp	r3, #31
 800f254:	d90c      	bls.n	800f270 <print_string_ptr+0x134>
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	2b22      	cmp	r3, #34	; 0x22
 800f25c:	d008      	beq.n	800f270 <print_string_ptr+0x134>
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	2b5c      	cmp	r3, #92	; 0x5c
 800f264:	d004      	beq.n	800f270 <print_string_ptr+0x134>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	781a      	ldrb	r2, [r3, #0]
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	701a      	strb	r2, [r3, #0]
 800f26e:	e044      	b.n	800f2fa <print_string_ptr+0x1be>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800f270:	69bb      	ldr	r3, [r7, #24]
 800f272:	1c5a      	adds	r2, r3, #1
 800f274:	61ba      	str	r2, [r7, #24]
 800f276:	225c      	movs	r2, #92	; 0x5c
 800f278:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	2b0c      	cmp	r3, #12
 800f280:	d01b      	beq.n	800f2ba <print_string_ptr+0x17e>
 800f282:	2b0c      	cmp	r3, #12
 800f284:	dc06      	bgt.n	800f294 <print_string_ptr+0x158>
 800f286:	2b09      	cmp	r3, #9
 800f288:	d023      	beq.n	800f2d2 <print_string_ptr+0x196>
 800f28a:	2b0a      	cmp	r3, #10
 800f28c:	d019      	beq.n	800f2c2 <print_string_ptr+0x186>
 800f28e:	2b08      	cmp	r3, #8
 800f290:	d00f      	beq.n	800f2b2 <print_string_ptr+0x176>
 800f292:	e022      	b.n	800f2da <print_string_ptr+0x19e>
 800f294:	2b22      	cmp	r3, #34	; 0x22
 800f296:	d008      	beq.n	800f2aa <print_string_ptr+0x16e>
 800f298:	2b5c      	cmp	r3, #92	; 0x5c
 800f29a:	d002      	beq.n	800f2a2 <print_string_ptr+0x166>
 800f29c:	2b0d      	cmp	r3, #13
 800f29e:	d014      	beq.n	800f2ca <print_string_ptr+0x18e>
 800f2a0:	e01b      	b.n	800f2da <print_string_ptr+0x19e>
            {
                case '\\':
                    *output_pointer = '\\';
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	225c      	movs	r2, #92	; 0x5c
 800f2a6:	701a      	strb	r2, [r3, #0]
                    break;
 800f2a8:	e027      	b.n	800f2fa <print_string_ptr+0x1be>
                case '\"':
                    *output_pointer = '\"';
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	2222      	movs	r2, #34	; 0x22
 800f2ae:	701a      	strb	r2, [r3, #0]
                    break;
 800f2b0:	e023      	b.n	800f2fa <print_string_ptr+0x1be>
                case '\b':
                    *output_pointer = 'b';
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	2262      	movs	r2, #98	; 0x62
 800f2b6:	701a      	strb	r2, [r3, #0]
                    break;
 800f2b8:	e01f      	b.n	800f2fa <print_string_ptr+0x1be>
                case '\f':
                    *output_pointer = 'f';
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	2266      	movs	r2, #102	; 0x66
 800f2be:	701a      	strb	r2, [r3, #0]
                    break;
 800f2c0:	e01b      	b.n	800f2fa <print_string_ptr+0x1be>
                case '\n':
                    *output_pointer = 'n';
 800f2c2:	69bb      	ldr	r3, [r7, #24]
 800f2c4:	226e      	movs	r2, #110	; 0x6e
 800f2c6:	701a      	strb	r2, [r3, #0]
                    break;
 800f2c8:	e017      	b.n	800f2fa <print_string_ptr+0x1be>
                case '\r':
                    *output_pointer = 'r';
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	2272      	movs	r2, #114	; 0x72
 800f2ce:	701a      	strb	r2, [r3, #0]
                    break;
 800f2d0:	e013      	b.n	800f2fa <print_string_ptr+0x1be>
                case '\t':
                    *output_pointer = 't';
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	2274      	movs	r2, #116	; 0x74
 800f2d6:	701a      	strb	r2, [r3, #0]
                    break;
 800f2d8:	e00f      	b.n	800f2fa <print_string_ptr+0x1be>
                default:
                    /* escape and print as unicode codepoint */
                    *output_pointer++ = 'u';
 800f2da:	69bb      	ldr	r3, [r7, #24]
 800f2dc:	1c5a      	adds	r2, r3, #1
 800f2de:	61ba      	str	r2, [r7, #24]
 800f2e0:	2275      	movs	r2, #117	; 0x75
 800f2e2:	701a      	strb	r2, [r3, #0]
                    htoa16(*input_pointer, output_pointer);
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	69b9      	ldr	r1, [r7, #24]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7ff fef3 	bl	800f0d8 <htoa16>
                    output_pointer += 4;
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	3304      	adds	r3, #4
 800f2f6:	61bb      	str	r3, [r7, #24]
                    break;
 800f2f8:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	61fb      	str	r3, [r7, #28]
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	3301      	adds	r3, #1
 800f304:	61bb      	str	r3, [r7, #24]
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d19f      	bne.n	800f24e <print_string_ptr+0x112>
            }
        }
    }
    output[output_length + 1] = '\"';
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3301      	adds	r3, #1
 800f312:	693a      	ldr	r2, [r7, #16]
 800f314:	4413      	add	r3, r2
 800f316:	2222      	movs	r2, #34	; 0x22
 800f318:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	3302      	adds	r3, #2
 800f31e:	693a      	ldr	r2, [r7, #16]
 800f320:	4413      	add	r3, r2
 800f322:	2200      	movs	r2, #0
 800f324:	701a      	strb	r2, [r3, #0]

    return true;
 800f326:	2301      	movs	r3, #1
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3720      	adds	r7, #32
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static Jbool print_string(const J * const item, printbuffer * const p)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	691b      	ldr	r3, [r3, #16]
 800f33e:	6839      	ldr	r1, [r7, #0]
 800f340:	4618      	mov	r0, r3
 800f342:	f7ff fefb 	bl	800f13c <print_string_ptr>
 800f346:	4603      	mov	r3, r0
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <buffer_skip_whitespace>:
static Jbool parse_object(J * const item, parse_buffer * const input_buffer);
static Jbool print_object(const J * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d003      	beq.n	800f366 <buffer_skip_whitespace+0x16>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d106      	bne.n	800f374 <buffer_skip_whitespace+0x24>
    {
        return NULL;
 800f366:	2300      	movs	r3, #0
 800f368:	e021      	b.n	800f3ae <buffer_skip_whitespace+0x5e>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	689b      	ldr	r3, [r3, #8]
 800f36e:	1c5a      	adds	r2, r3, #1
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d00d      	beq.n	800f396 <buffer_skip_whitespace+0x46>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	689a      	ldr	r2, [r3, #8]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	429a      	cmp	r2, r3
 800f384:	d207      	bcs.n	800f396 <buffer_skip_whitespace+0x46>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	4413      	add	r3, r2
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	2b20      	cmp	r3, #32
 800f394:	d9e9      	bls.n	800f36a <buffer_skip_whitespace+0x1a>
    }

    if (buffer->offset == buffer->length)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	689a      	ldr	r2, [r3, #8]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d104      	bne.n	800f3ac <buffer_skip_whitespace+0x5c>
    {
        buffer->offset--;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	689b      	ldr	r3, [r3, #8]
 800f3a6:	1e5a      	subs	r2, r3, #1
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800f3ac:	687b      	ldr	r3, [r7, #4]
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	370c      	adds	r7, #12
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr
	...

0800f3bc <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d007      	beq.n	800f3da <skip_utf8_bom+0x1e>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d003      	beq.n	800f3da <skip_utf8_bom+0x1e>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	689b      	ldr	r3, [r3, #8]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d001      	beq.n	800f3de <skip_utf8_bom+0x22>
    {
        return NULL;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	e01c      	b.n	800f418 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d018      	beq.n	800f416 <skip_utf8_bom+0x5a>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	1d1a      	adds	r2, r3, #4
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d211      	bcs.n	800f416 <skip_utf8_bom+0x5a>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681a      	ldr	r2, [r3, #0]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	4413      	add	r3, r2
 800f3fc:	2203      	movs	r2, #3
 800f3fe:	4908      	ldr	r1, [pc, #32]	; (800f420 <skip_utf8_bom+0x64>)
 800f400:	4618      	mov	r0, r3
 800f402:	f002 f804 	bl	801140e <strncmp>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d104      	bne.n	800f416 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	1cda      	adds	r2, r3, #3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800f416:	687b      	ldr	r3, [r7, #4]
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3708      	adds	r7, #8
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}
 800f420:	08011ccc 	.word	0x08011ccc

0800f424 <JParseWithOpts>:

/* Parse an object - create a new root, and populate. */
N_CJSON_PUBLIC(J *) JParseWithOpts(const char *value, const char **return_parse_end, Jbool require_null_terminated)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b08c      	sub	sp, #48	; 0x30
 800f428:	af00      	add	r7, sp, #0
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	60b9      	str	r1, [r7, #8]
 800f42e:	607a      	str	r2, [r7, #4]
    parse_buffer buffer = { 0, 0, 0, 0 };
 800f430:	f107 031c 	add.w	r3, r7, #28
 800f434:	2200      	movs	r2, #0
 800f436:	601a      	str	r2, [r3, #0]
 800f438:	605a      	str	r2, [r3, #4]
 800f43a:	609a      	str	r2, [r3, #8]
 800f43c:	60da      	str	r2, [r3, #12]
    J *item = NULL;
 800f43e:	2300      	movs	r3, #0
 800f440:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* reset error position */
    global_error.json = NULL;
 800f442:	4b3e      	ldr	r3, [pc, #248]	; (800f53c <JParseWithOpts+0x118>)
 800f444:	2200      	movs	r2, #0
 800f446:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800f448:	4b3c      	ldr	r3, [pc, #240]	; (800f53c <JParseWithOpts+0x118>)
 800f44a:	2200      	movs	r2, #0
 800f44c:	605a      	str	r2, [r3, #4]

    if (value == NULL)
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d03c      	beq.n	800f4ce <JParseWithOpts+0xaa>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	61fb      	str	r3, [r7, #28]
    buffer.length = strlen((const char*)value) + 1;		// Trailing '\0'
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f7f0 fedb 	bl	8000214 <strlen>
 800f45e:	4603      	mov	r3, r0
 800f460:	3301      	adds	r3, #1
 800f462:	623b      	str	r3, [r7, #32]
    buffer.offset = 0;
 800f464:	2300      	movs	r3, #0
 800f466:	627b      	str	r3, [r7, #36]	; 0x24

    item = JNew_Item();
 800f468:	f7ff f87d 	bl	800e566 <JNew_Item>
 800f46c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (item == NULL) /* memory fail */
 800f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f470:	2b00      	cmp	r3, #0
 800f472:	d02e      	beq.n	800f4d2 <JParseWithOpts+0xae>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800f474:	f107 031c 	add.w	r3, r7, #28
 800f478:	4618      	mov	r0, r3
 800f47a:	f7ff ff9f 	bl	800f3bc <skip_utf8_bom>
 800f47e:	4603      	mov	r3, r0
 800f480:	4618      	mov	r0, r3
 800f482:	f7ff ff65 	bl	800f350 <buffer_skip_whitespace>
 800f486:	4603      	mov	r3, r0
 800f488:	4619      	mov	r1, r3
 800f48a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f48c:	f000 f8d8 	bl	800f640 <parse_value>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d01f      	beq.n	800f4d6 <JParseWithOpts+0xb2>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d00e      	beq.n	800f4ba <JParseWithOpts+0x96>
    {
        buffer_skip_whitespace(&buffer);
 800f49c:	f107 031c 	add.w	r3, r7, #28
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7ff ff55 	bl	800f350 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800f4a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4a8:	6a3b      	ldr	r3, [r7, #32]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d215      	bcs.n	800f4da <JParseWithOpts+0xb6>
 800f4ae:	69fa      	ldr	r2, [r7, #28]
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	4413      	add	r3, r2
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d10f      	bne.n	800f4da <JParseWithOpts+0xb6>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d004      	beq.n	800f4ca <JParseWithOpts+0xa6>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800f4c0:	69fa      	ldr	r2, [r7, #28]
 800f4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c4:	441a      	add	r2, r3
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	601a      	str	r2, [r3, #0]
    }

    return item;
 800f4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4cc:	e031      	b.n	800f532 <JParseWithOpts+0x10e>
        goto fail;
 800f4ce:	bf00      	nop
 800f4d0:	e004      	b.n	800f4dc <JParseWithOpts+0xb8>
        goto fail;
 800f4d2:	bf00      	nop
 800f4d4:	e002      	b.n	800f4dc <JParseWithOpts+0xb8>
        goto fail;
 800f4d6:	bf00      	nop
 800f4d8:	e000      	b.n	800f4dc <JParseWithOpts+0xb8>

fail:
 800f4da:	bf00      	nop
    if (item != NULL)
 800f4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d002      	beq.n	800f4e8 <JParseWithOpts+0xc4>
    {
        JDelete(item);
 800f4e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4e4:	f7ff f853 	bl	800e58e <JDelete>
    }

    if (value != NULL)
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d020      	beq.n	800f530 <JParseWithOpts+0x10c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	617b      	str	r3, [r7, #20]
        local_error.position = 0;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	61bb      	str	r3, [r7, #24]

        if (buffer.offset < buffer.length)
 800f4f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4f8:	6a3b      	ldr	r3, [r7, #32]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d202      	bcs.n	800f504 <JParseWithOpts+0xe0>
        {
            local_error.position = buffer.offset;
 800f4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f500:	61bb      	str	r3, [r7, #24]
 800f502:	e005      	b.n	800f510 <JParseWithOpts+0xec>
        }
        else if (buffer.length > 0)
 800f504:	6a3b      	ldr	r3, [r7, #32]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d002      	beq.n	800f510 <JParseWithOpts+0xec>
        {
            local_error.position = buffer.length - 1;
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	3b01      	subs	r3, #1
 800f50e:	61bb      	str	r3, [r7, #24]
        }

        if (return_parse_end != NULL)
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d004      	beq.n	800f520 <JParseWithOpts+0xfc>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800f516:	697a      	ldr	r2, [r7, #20]
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	441a      	add	r2, r3
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800f520:	4b06      	ldr	r3, [pc, #24]	; (800f53c <JParseWithOpts+0x118>)
 800f522:	461a      	mov	r2, r3
 800f524:	f107 0314 	add.w	r3, r7, #20
 800f528:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f52c:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800f530:	2300      	movs	r3, #0
}
 800f532:	4618      	mov	r0, r3
 800f534:	3730      	adds	r7, #48	; 0x30
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	2000023c 	.word	0x2000023c

0800f540 <JParse>:

/* Default options for JParse */
N_CJSON_PUBLIC(J *) JParse(const char *value)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
    return JParseWithOpts(value, 0, 0);
 800f548:	2200      	movs	r2, #0
 800f54a:	2100      	movs	r1, #0
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f7ff ff69 	bl	800f424 <JParseWithOpts>
 800f552:	4603      	mov	r3, r0
}
 800f554:	4618      	mov	r0, r3
 800f556:	3708      	adds	r7, #8
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <print>:

#define cjson_min(a, b) ((a < b) ? a : b)

static unsigned char *print(const J * const item, Jbool format)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b08a      	sub	sp, #40	; 0x28
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
    static const size_t default_buffer_size = 128;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800f566:	2300      	movs	r3, #0
 800f568:	627b      	str	r3, [r7, #36]	; 0x24

    memset(buffer, 0, sizeof(buffer));
 800f56a:	f107 030c 	add.w	r3, r7, #12
 800f56e:	2218      	movs	r2, #24
 800f570:	2100      	movs	r1, #0
 800f572:	4618      	mov	r0, r3
 800f574:	f001 fe56 	bl	8011224 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) _Malloc(default_buffer_size);
 800f578:	4b29      	ldr	r3, [pc, #164]	; (800f620 <print+0xc4>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f001 f9d3 	bl	8010928 <NoteMalloc>
 800f582:	4603      	mov	r3, r0
 800f584:	60fb      	str	r3, [r7, #12]
    buffer->length = default_buffer_size;
 800f586:	4b26      	ldr	r3, [pc, #152]	; (800f620 <print+0xc4>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	613b      	str	r3, [r7, #16]
    buffer->format = format;
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	623b      	str	r3, [r7, #32]
    if (buffer->buffer == NULL)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d02c      	beq.n	800f5f0 <print+0x94>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800f596:	f107 030c 	add.w	r3, r7, #12
 800f59a:	4619      	mov	r1, r3
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f000 f93d 	bl	800f81c <print_value>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d025      	beq.n	800f5f4 <print+0x98>
    {
        goto fail;
    }
    update_offset(buffer);
 800f5a8:	f107 030c 	add.w	r3, r7, #12
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7ff f9e6 	bl	800e97e <update_offset>

    /* copy the JSON over to a new buffer */
    printed = (unsigned char*) _Malloc(buffer->offset + 1);
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f001 f9b6 	bl	8010928 <NoteMalloc>
 800f5bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (printed == NULL)
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d019      	beq.n	800f5f8 <print+0x9c>
    {
        goto fail;
    }
    memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800f5c4:	68f9      	ldr	r1, [r7, #12]
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	1c5a      	adds	r2, r3, #1
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	bf28      	it	cs
 800f5d0:	4613      	movcs	r3, r2
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5d6:	f001 fe01 	bl	80111dc <memcpy>
    printed[buffer->offset] = '\0'; /* just to be sure */
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5de:	4413      	add	r3, r2
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	701a      	strb	r2, [r3, #0]

    /* free the buffer */
    _Free(buffer->buffer);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f001 f9b4 	bl	8010954 <NoteFree>

    return printed;
 800f5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ee:	e012      	b.n	800f616 <print+0xba>
        goto fail;
 800f5f0:	bf00      	nop
 800f5f2:	e002      	b.n	800f5fa <print+0x9e>
        goto fail;
 800f5f4:	bf00      	nop
 800f5f6:	e000      	b.n	800f5fa <print+0x9e>
        goto fail;
 800f5f8:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d003      	beq.n	800f608 <print+0xac>
    {
        _Free(buffer->buffer);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	4618      	mov	r0, r3
 800f604:	f001 f9a6 	bl	8010954 <NoteFree>
    }

    if (printed != NULL)
 800f608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d002      	beq.n	800f614 <print+0xb8>
    {
        _Free(printed);
 800f60e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f610:	f001 f9a0 	bl	8010954 <NoteFree>
    }

    return NULL;
 800f614:	2300      	movs	r3, #0
}
 800f616:	4618      	mov	r0, r3
 800f618:	3728      	adds	r7, #40	; 0x28
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	08011f58 	.word	0x08011f58

0800f624 <JPrintUnformatted>:
{
    return (char*)print(item, true);
}

N_CJSON_PUBLIC(char *) JPrintUnformatted(const J *item)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false);
 800f62c:	2100      	movs	r1, #0
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f7ff ff94 	bl	800f55c <print>
 800f634:	4603      	mov	r3, r0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3708      	adds	r7, #8
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
	...

0800f640 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static Jbool parse_value(J * const item, parse_buffer * const input_buffer)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d003      	beq.n	800f658 <parse_value+0x18>
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d101      	bne.n	800f65c <parse_value+0x1c>
    {
        return false; /* no input */
 800f658:	2300      	movs	r3, #0
 800f65a:	e0d5      	b.n	800f808 <parse_value+0x1c8>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), c_null, c_null_len) == 0))
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d01e      	beq.n	800f6a0 <parse_value+0x60>
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	689b      	ldr	r3, [r3, #8]
 800f666:	1d1a      	adds	r2, r3, #4
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d817      	bhi.n	800f6a0 <parse_value+0x60>
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	689b      	ldr	r3, [r3, #8]
 800f678:	18d0      	adds	r0, r2, r3
 800f67a:	4b65      	ldr	r3, [pc, #404]	; (800f810 <parse_value+0x1d0>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2204      	movs	r2, #4
 800f680:	4619      	mov	r1, r3
 800f682:	f001 fec4 	bl	801140e <strncmp>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d109      	bne.n	800f6a0 <parse_value+0x60>
    {
        item->type = JNULL;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2204      	movs	r2, #4
 800f690:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	689b      	ldr	r3, [r3, #8]
 800f696:	1d1a      	adds	r2, r3, #4
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	609a      	str	r2, [r3, #8]
        return true;
 800f69c:	2301      	movs	r3, #1
 800f69e:	e0b3      	b.n	800f808 <parse_value+0x1c8>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), c_false, c_false_len) == 0))
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d01e      	beq.n	800f6e4 <parse_value+0xa4>
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	1d5a      	adds	r2, r3, #5
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d817      	bhi.n	800f6e4 <parse_value+0xa4>
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	18d0      	adds	r0, r2, r3
 800f6be:	4b55      	ldr	r3, [pc, #340]	; (800f814 <parse_value+0x1d4>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2205      	movs	r2, #5
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	f001 fea2 	bl	801140e <strncmp>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d109      	bne.n	800f6e4 <parse_value+0xa4>
    {
        item->type = JFalse;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	689b      	ldr	r3, [r3, #8]
 800f6da:	1d5a      	adds	r2, r3, #5
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	609a      	str	r2, [r3, #8]
        return true;
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	e091      	b.n	800f808 <parse_value+0x1c8>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), c_true, c_true_len) == 0))
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d021      	beq.n	800f72e <parse_value+0xee>
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	1d1a      	adds	r2, r3, #4
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d81a      	bhi.n	800f72e <parse_value+0xee>
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	681a      	ldr	r2, [r3, #0]
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	689b      	ldr	r3, [r3, #8]
 800f700:	18d0      	adds	r0, r2, r3
 800f702:	4b45      	ldr	r3, [pc, #276]	; (800f818 <parse_value+0x1d8>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2204      	movs	r2, #4
 800f708:	4619      	mov	r1, r3
 800f70a:	f001 fe80 	bl	801140e <strncmp>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d10c      	bne.n	800f72e <parse_value+0xee>
    {
        item->type = JTrue;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2202      	movs	r2, #2
 800f718:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2201      	movs	r2, #1
 800f71e:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	689b      	ldr	r3, [r3, #8]
 800f724:	1d1a      	adds	r2, r3, #4
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	609a      	str	r2, [r3, #8]
        return true;
 800f72a:	2301      	movs	r3, #1
 800f72c:	e06c      	b.n	800f808 <parse_value+0x1c8>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d013      	beq.n	800f75c <parse_value+0x11c>
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	689a      	ldr	r2, [r3, #8]
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d20d      	bcs.n	800f75c <parse_value+0x11c>
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	689b      	ldr	r3, [r3, #8]
 800f748:	4413      	add	r3, r2
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	2b22      	cmp	r3, #34	; 0x22
 800f74e:	d105      	bne.n	800f75c <parse_value+0x11c>
    {
        return parse_string(item, input_buffer);
 800f750:	6839      	ldr	r1, [r7, #0]
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f7ff fb12 	bl	800ed7c <parse_string>
 800f758:	4603      	mov	r3, r0
 800f75a:	e055      	b.n	800f808 <parse_value+0x1c8>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d023      	beq.n	800f7aa <parse_value+0x16a>
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	689a      	ldr	r2, [r3, #8]
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d21d      	bcs.n	800f7aa <parse_value+0x16a>
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	689b      	ldr	r3, [r3, #8]
 800f776:	4413      	add	r3, r2
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	2b2d      	cmp	r3, #45	; 0x2d
 800f77c:	d00f      	beq.n	800f79e <parse_value+0x15e>
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	4413      	add	r3, r2
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	2b2f      	cmp	r3, #47	; 0x2f
 800f78c:	d90d      	bls.n	800f7aa <parse_value+0x16a>
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	4413      	add	r3, r2
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	2b39      	cmp	r3, #57	; 0x39
 800f79c:	d805      	bhi.n	800f7aa <parse_value+0x16a>
    {
        return parse_number(item, input_buffer);
 800f79e:	6839      	ldr	r1, [r7, #0]
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f7fe ff41 	bl	800e628 <parse_number>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	e02e      	b.n	800f808 <parse_value+0x1c8>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d013      	beq.n	800f7d8 <parse_value+0x198>
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	689a      	ldr	r2, [r3, #8]
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d20d      	bcs.n	800f7d8 <parse_value+0x198>
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	689b      	ldr	r3, [r3, #8]
 800f7c4:	4413      	add	r3, r2
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	2b5b      	cmp	r3, #91	; 0x5b
 800f7ca:	d105      	bne.n	800f7d8 <parse_value+0x198>
    {
        return parse_array(item, input_buffer);
 800f7cc:	6839      	ldr	r1, [r7, #0]
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 f8ca 	bl	800f968 <parse_array>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	e017      	b.n	800f808 <parse_value+0x1c8>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d013      	beq.n	800f806 <parse_value+0x1c6>
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	689a      	ldr	r2, [r3, #8]
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d20d      	bcs.n	800f806 <parse_value+0x1c6>
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	2b7b      	cmp	r3, #123	; 0x7b
 800f7f8:	d105      	bne.n	800f806 <parse_value+0x1c6>
    {
        return parse_object(item, input_buffer);
 800f7fa:	6839      	ldr	r1, [r7, #0]
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 f9f4 	bl	800fbea <parse_object>
 800f802:	4603      	mov	r3, r0
 800f804:	e000      	b.n	800f808 <parse_value+0x1c8>
    }

    return false;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	2000000c 	.word	0x2000000c
 800f814:	20000010 	.word	0x20000010
 800f818:	20000014 	.word	0x20000014

0800f81c <print_value>:

/* Render a value to text. */
static Jbool print_value(const J * const item, printbuffer * const output_buffer)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800f826:	2300      	movs	r3, #0
 800f828:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d002      	beq.n	800f836 <print_value+0x1a>
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d101      	bne.n	800f83a <print_value+0x1e>
    {
        return false;
 800f836:	2300      	movs	r3, #0
 800f838:	e08b      	b.n	800f952 <print_value+0x136>
    }

    switch ((item->type) & 0xFF)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b08      	cmp	r3, #8
 800f842:	d04a      	beq.n	800f8da <print_value+0xbe>
 800f844:	2b08      	cmp	r3, #8
 800f846:	dc06      	bgt.n	800f856 <print_value+0x3a>
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d034      	beq.n	800f8b6 <print_value+0x9a>
 800f84c:	2b04      	cmp	r3, #4
 800f84e:	d00e      	beq.n	800f86e <print_value+0x52>
 800f850:	2b01      	cmp	r3, #1
 800f852:	d01e      	beq.n	800f892 <print_value+0x76>
 800f854:	e07c      	b.n	800f950 <print_value+0x134>
 800f856:	2b20      	cmp	r3, #32
 800f858:	d06e      	beq.n	800f938 <print_value+0x11c>
 800f85a:	2b20      	cmp	r3, #32
 800f85c:	dc02      	bgt.n	800f864 <print_value+0x48>
 800f85e:	2b10      	cmp	r3, #16
 800f860:	d064      	beq.n	800f92c <print_value+0x110>
 800f862:	e075      	b.n	800f950 <print_value+0x134>
 800f864:	2b40      	cmp	r3, #64	; 0x40
 800f866:	d06d      	beq.n	800f944 <print_value+0x128>
 800f868:	2b80      	cmp	r3, #128	; 0x80
 800f86a:	d03c      	beq.n	800f8e6 <print_value+0xca>
 800f86c:	e070      	b.n	800f950 <print_value+0x134>
    {
        case JNULL:
            output = ensure(output_buffer, c_null_len+1);
 800f86e:	2105      	movs	r1, #5
 800f870:	6838      	ldr	r0, [r7, #0]
 800f872:	f7ff f807 	bl	800e884 <ensure>
 800f876:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d101      	bne.n	800f882 <print_value+0x66>
            {
                return false;
 800f87e:	2300      	movs	r3, #0
 800f880:	e067      	b.n	800f952 <print_value+0x136>
            }
            strcpy((char*)output, c_null);
 800f882:	4b36      	ldr	r3, [pc, #216]	; (800f95c <print_value+0x140>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	4619      	mov	r1, r3
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f001 fdb8 	bl	80113fe <strcpy>
            return true;
 800f88e:	2301      	movs	r3, #1
 800f890:	e05f      	b.n	800f952 <print_value+0x136>

        case JFalse:
            output = ensure(output_buffer, c_false_len+1);
 800f892:	2106      	movs	r1, #6
 800f894:	6838      	ldr	r0, [r7, #0]
 800f896:	f7fe fff5 	bl	800e884 <ensure>
 800f89a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d101      	bne.n	800f8a6 <print_value+0x8a>
            {
                return false;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e055      	b.n	800f952 <print_value+0x136>
            }
            strcpy((char*)output, c_false);
 800f8a6:	4b2e      	ldr	r3, [pc, #184]	; (800f960 <print_value+0x144>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f001 fda6 	bl	80113fe <strcpy>
            return true;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e04d      	b.n	800f952 <print_value+0x136>

        case JTrue:
            output = ensure(output_buffer, c_true_len+1);
 800f8b6:	2105      	movs	r1, #5
 800f8b8:	6838      	ldr	r0, [r7, #0]
 800f8ba:	f7fe ffe3 	bl	800e884 <ensure>
 800f8be:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d101      	bne.n	800f8ca <print_value+0xae>
            {
                return false;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	e043      	b.n	800f952 <print_value+0x136>
            }
            strcpy((char*)output, c_true);
 800f8ca:	4b26      	ldr	r3, [pc, #152]	; (800f964 <print_value+0x148>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	f001 fd94 	bl	80113fe <strcpy>
            return true;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e03b      	b.n	800f952 <print_value+0x136>

        case JNumber:
            return print_number(item, output_buffer);
 800f8da:	6839      	ldr	r1, [r7, #0]
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f7ff f86f 	bl	800e9c0 <print_number>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	e035      	b.n	800f952 <print_value+0x136>

        case JRaw:
        {
            size_t raw_length = 0;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	691b      	ldr	r3, [r3, #16]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d101      	bne.n	800f8f6 <print_value+0xda>
            {
                return false;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	e02d      	b.n	800f952 <print_value+0x136>
            }

            raw_length = strlen(item->valuestring) + 1;		// Trailing '\0';
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	691b      	ldr	r3, [r3, #16]
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7f0 fc8a 	bl	8000214 <strlen>
 800f900:	4603      	mov	r3, r0
 800f902:	3301      	adds	r3, #1
 800f904:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800f906:	68b9      	ldr	r1, [r7, #8]
 800f908:	6838      	ldr	r0, [r7, #0]
 800f90a:	f7fe ffbb 	bl	800e884 <ensure>
 800f90e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d101      	bne.n	800f91a <print_value+0xfe>
            {
                return false;
 800f916:	2300      	movs	r3, #0
 800f918:	e01b      	b.n	800f952 <print_value+0x136>
            }
            memcpy(output, item->valuestring, raw_length);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	691b      	ldr	r3, [r3, #16]
 800f91e:	68ba      	ldr	r2, [r7, #8]
 800f920:	4619      	mov	r1, r3
 800f922:	68f8      	ldr	r0, [r7, #12]
 800f924:	f001 fc5a 	bl	80111dc <memcpy>
            return true;
 800f928:	2301      	movs	r3, #1
 800f92a:	e012      	b.n	800f952 <print_value+0x136>
        }

        case JString:
            return print_string(item, output_buffer);
 800f92c:	6839      	ldr	r1, [r7, #0]
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f7ff fcfe 	bl	800f330 <print_string>
 800f934:	4603      	mov	r3, r0
 800f936:	e00c      	b.n	800f952 <print_value+0x136>

        case JArray:
            return print_array(item, output_buffer);
 800f938:	6839      	ldr	r1, [r7, #0]
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 f8cf 	bl	800fade <print_array>
 800f940:	4603      	mov	r3, r0
 800f942:	e006      	b.n	800f952 <print_value+0x136>

        case JObject:
            return print_object(item, output_buffer);
 800f944:	6839      	ldr	r1, [r7, #0]
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f000 fa41 	bl	800fdce <print_object>
 800f94c:	4603      	mov	r3, r0
 800f94e:	e000      	b.n	800f952 <print_value+0x136>

        default:
            return false;
 800f950:	2300      	movs	r3, #0
    }
}
 800f952:	4618      	mov	r0, r3
 800f954:	3710      	adds	r7, #16
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	2000000c 	.word	0x2000000c
 800f960:	20000010 	.word	0x20000010
 800f964:	20000014 	.word	0x20000014

0800f968 <parse_array>:

/* Build an array from input text. */
static Jbool parse_array(J * const item, parse_buffer * const input_buffer)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b086      	sub	sp, #24
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* head of the linked list */
 800f972:	2300      	movs	r3, #0
 800f974:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 800f976:	2300      	movs	r3, #0
 800f978:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f982:	d301      	bcc.n	800f988 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800f984:	2300      	movs	r3, #0
 800f986:	e0a6      	b.n	800fad6 <parse_array+0x16e>
    }
    input_buffer->depth++;
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	1c5a      	adds	r2, r3, #1
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	4413      	add	r3, r2
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	2b5b      	cmp	r3, #91	; 0x5b
 800f9a0:	f040 808b 	bne.w	800faba <parse_array+0x152>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	689b      	ldr	r3, [r3, #8]
 800f9a8:	1c5a      	adds	r2, r3, #1
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800f9ae:	6838      	ldr	r0, [r7, #0]
 800f9b0:	f7ff fcce 	bl	800f350 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00d      	beq.n	800f9d6 <parse_array+0x6e>
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	689a      	ldr	r2, [r3, #8]
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d207      	bcs.n	800f9d6 <parse_array+0x6e>
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	681a      	ldr	r2, [r3, #0]
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	689b      	ldr	r3, [r3, #8]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	2b5d      	cmp	r3, #93	; 0x5d
 800f9d4:	d05e      	beq.n	800fa94 <parse_array+0x12c>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d005      	beq.n	800f9e8 <parse_array+0x80>
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	689a      	ldr	r2, [r3, #8]
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d305      	bcc.n	800f9f4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	689b      	ldr	r3, [r3, #8]
 800f9ec:	1e5a      	subs	r2, r3, #1
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	609a      	str	r2, [r3, #8]
        goto fail;
 800f9f2:	e069      	b.n	800fac8 <parse_array+0x160>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	1e5a      	subs	r2, r3, #1
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item();
 800f9fe:	f7fe fdb2 	bl	800e566 <JNew_Item>
 800fa02:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d059      	beq.n	800fabe <parse_array+0x156>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d104      	bne.n	800fa1a <parse_array+0xb2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	617b      	str	r3, [r7, #20]
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	613b      	str	r3, [r7, #16]
 800fa18:	e007      	b.n	800fa2a <parse_array+0xc2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	693a      	ldr	r2, [r7, #16]
 800fa24:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	689b      	ldr	r3, [r3, #8]
 800fa2e:	1c5a      	adds	r2, r3, #1
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800fa34:	6838      	ldr	r0, [r7, #0]
 800fa36:	f7ff fc8b 	bl	800f350 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800fa3a:	6839      	ldr	r1, [r7, #0]
 800fa3c:	6938      	ldr	r0, [r7, #16]
 800fa3e:	f7ff fdff 	bl	800f640 <parse_value>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d03c      	beq.n	800fac2 <parse_array+0x15a>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800fa48:	6838      	ldr	r0, [r7, #0]
 800fa4a:	f7ff fc81 	bl	800f350 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d00d      	beq.n	800fa70 <parse_array+0x108>
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	689a      	ldr	r2, [r3, #8]
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d207      	bcs.n	800fa70 <parse_array+0x108>
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	689b      	ldr	r3, [r3, #8]
 800fa68:	4413      	add	r3, r2
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	2b2c      	cmp	r3, #44	; 0x2c
 800fa6e:	d0c6      	beq.n	800f9fe <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d027      	beq.n	800fac6 <parse_array+0x15e>
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	689a      	ldr	r2, [r3, #8]
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d221      	bcs.n	800fac6 <parse_array+0x15e>
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	689b      	ldr	r3, [r3, #8]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	2b5d      	cmp	r3, #93	; 0x5d
 800fa90:	d119      	bne.n	800fac6 <parse_array+0x15e>
    {
        goto fail; /* expected end of array */
    }

success:
 800fa92:	e000      	b.n	800fa96 <parse_array+0x12e>
        goto success;
 800fa94:	bf00      	nop
    input_buffer->depth--;
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	1e5a      	subs	r2, r3, #1
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	60da      	str	r2, [r3, #12]

    item->type = JArray;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2220      	movs	r2, #32
 800faa4:	60da      	str	r2, [r3, #12]
    item->child = head;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	697a      	ldr	r2, [r7, #20]
 800faaa:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	609a      	str	r2, [r3, #8]

    return true;
 800fab6:	2301      	movs	r3, #1
 800fab8:	e00d      	b.n	800fad6 <parse_array+0x16e>
        goto fail;
 800faba:	bf00      	nop
 800fabc:	e004      	b.n	800fac8 <parse_array+0x160>
            goto fail; /* allocation failure */
 800fabe:	bf00      	nop
 800fac0:	e002      	b.n	800fac8 <parse_array+0x160>
            goto fail; /* failed to parse value */
 800fac2:	bf00      	nop
 800fac4:	e000      	b.n	800fac8 <parse_array+0x160>

fail:
 800fac6:	bf00      	nop
    if (head != NULL)
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d002      	beq.n	800fad4 <parse_array+0x16c>
    {
        JDelete(head);
 800face:	6978      	ldr	r0, [r7, #20]
 800fad0:	f7fe fd5d 	bl	800e58e <JDelete>
    }

    return false;
 800fad4:	2300      	movs	r3, #0
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3718      	adds	r7, #24
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <print_array>:

/* Render an array to text */
static Jbool print_array(const J * const item, printbuffer * const output_buffer)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b086      	sub	sp, #24
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800fae8:	2300      	movs	r3, #0
 800faea:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800faec:	2300      	movs	r3, #0
 800faee:	60fb      	str	r3, [r7, #12]
    J *current_element = item->child;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	689b      	ldr	r3, [r3, #8]
 800faf4:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d101      	bne.n	800fb00 <print_array+0x22>
    {
        return false;
 800fafc:	2300      	movs	r3, #0
 800fafe:	e070      	b.n	800fbe2 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800fb00:	2101      	movs	r1, #1
 800fb02:	6838      	ldr	r0, [r7, #0]
 800fb04:	f7fe febe 	bl	800e884 <ensure>
 800fb08:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d101      	bne.n	800fb14 <print_array+0x36>
    {
        return false;
 800fb10:	2300      	movs	r3, #0
 800fb12:	e066      	b.n	800fbe2 <print_array+0x104>
    }

    *output_pointer = '[';
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	225b      	movs	r2, #91	; 0x5b
 800fb18:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	1c5a      	adds	r2, r3, #1
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	1c5a      	adds	r2, r3, #1
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800fb2e:	e03d      	b.n	800fbac <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800fb30:	6839      	ldr	r1, [r7, #0]
 800fb32:	6938      	ldr	r0, [r7, #16]
 800fb34:	f7ff fe72 	bl	800f81c <print_value>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <print_array+0x64>
        {
            return false;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	e04f      	b.n	800fbe2 <print_array+0x104>
        }
        update_offset(output_buffer);
 800fb42:	6838      	ldr	r0, [r7, #0]
 800fb44:	f7fe ff1b 	bl	800e97e <update_offset>
        if (current_element->next)
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d02a      	beq.n	800fba6 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	695b      	ldr	r3, [r3, #20]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d001      	beq.n	800fb5c <print_array+0x7e>
 800fb58:	2302      	movs	r3, #2
 800fb5a:	e000      	b.n	800fb5e <print_array+0x80>
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	3301      	adds	r3, #1
 800fb64:	4619      	mov	r1, r3
 800fb66:	6838      	ldr	r0, [r7, #0]
 800fb68:	f7fe fe8c 	bl	800e884 <ensure>
 800fb6c:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d101      	bne.n	800fb78 <print_array+0x9a>
            {
                return false;
 800fb74:	2300      	movs	r3, #0
 800fb76:	e034      	b.n	800fbe2 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	1c5a      	adds	r2, r3, #1
 800fb7c:	617a      	str	r2, [r7, #20]
 800fb7e:	222c      	movs	r2, #44	; 0x2c
 800fb80:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	695b      	ldr	r3, [r3, #20]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d004      	beq.n	800fb94 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	1c5a      	adds	r2, r3, #1
 800fb8e:	617a      	str	r2, [r7, #20]
 800fb90:	2220      	movs	r2, #32
 800fb92:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	2200      	movs	r2, #0
 800fb98:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	689a      	ldr	r2, [r3, #8]
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	441a      	add	r2, r3
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d1be      	bne.n	800fb30 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800fbb2:	2102      	movs	r1, #2
 800fbb4:	6838      	ldr	r0, [r7, #0]
 800fbb6:	f7fe fe65 	bl	800e884 <ensure>
 800fbba:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d101      	bne.n	800fbc6 <print_array+0xe8>
    {
        return false;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	e00d      	b.n	800fbe2 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	1c5a      	adds	r2, r3, #1
 800fbca:	617a      	str	r2, [r7, #20]
 800fbcc:	225d      	movs	r2, #93	; 0x5d
 800fbce:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	68db      	ldr	r3, [r3, #12]
 800fbda:	1e5a      	subs	r2, r3, #1
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	60da      	str	r2, [r3, #12]

    return true;
 800fbe0:	2301      	movs	r3, #1
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3718      	adds	r7, #24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}

0800fbea <parse_object>:

/* Build an object from the text. */
static Jbool parse_object(J * const item, parse_buffer * const input_buffer)
{
 800fbea:	b580      	push	{r7, lr}
 800fbec:	b086      	sub	sp, #24
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
 800fbf2:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* linked list head */
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	68db      	ldr	r3, [r3, #12]
 800fc00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fc04:	d301      	bcc.n	800fc0a <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800fc06:	2300      	movs	r3, #0
 800fc08:	e0dd      	b.n	800fdc6 <parse_object+0x1dc>
    }
    input_buffer->depth++;
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	68db      	ldr	r3, [r3, #12]
 800fc0e:	1c5a      	adds	r2, r3, #1
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f000 80c7 	beq.w	800fdaa <parse_object+0x1c0>
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	689a      	ldr	r2, [r3, #8]
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	f080 80c0 	bcs.w	800fdaa <parse_object+0x1c0>
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	689b      	ldr	r3, [r3, #8]
 800fc32:	4413      	add	r3, r2
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	2b7b      	cmp	r3, #123	; 0x7b
 800fc38:	f040 80b7 	bne.w	800fdaa <parse_object+0x1c0>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	689b      	ldr	r3, [r3, #8]
 800fc40:	1c5a      	adds	r2, r3, #1
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800fc46:	6838      	ldr	r0, [r7, #0]
 800fc48:	f7ff fb82 	bl	800f350 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d00e      	beq.n	800fc70 <parse_object+0x86>
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	689a      	ldr	r2, [r3, #8]
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d208      	bcs.n	800fc70 <parse_object+0x86>
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	681a      	ldr	r2, [r3, #0]
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	4413      	add	r3, r2
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	2b7d      	cmp	r3, #125	; 0x7d
 800fc6c:	f000 808a 	beq.w	800fd84 <parse_object+0x19a>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d005      	beq.n	800fc82 <parse_object+0x98>
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	689a      	ldr	r2, [r3, #8]
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d305      	bcc.n	800fc8e <parse_object+0xa4>
    {
        input_buffer->offset--;
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	1e5a      	subs	r2, r3, #1
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	609a      	str	r2, [r3, #8]
        goto fail;
 800fc8c:	e094      	b.n	800fdb8 <parse_object+0x1ce>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	1e5a      	subs	r2, r3, #1
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item();
 800fc98:	f7fe fc65 	bl	800e566 <JNew_Item>
 800fc9c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	f000 8084 	beq.w	800fdae <parse_object+0x1c4>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d104      	bne.n	800fcb6 <parse_object+0xcc>
        {
            /* start the linked list */
            current_item = head = new_item;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	617b      	str	r3, [r7, #20]
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	613b      	str	r3, [r7, #16]
 800fcb4:	e007      	b.n	800fcc6 <parse_object+0xdc>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	693a      	ldr	r2, [r7, #16]
 800fcc0:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	689b      	ldr	r3, [r3, #8]
 800fcca:	1c5a      	adds	r2, r3, #1
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800fcd0:	6838      	ldr	r0, [r7, #0]
 800fcd2:	f7ff fb3d 	bl	800f350 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800fcd6:	6839      	ldr	r1, [r7, #0]
 800fcd8:	6938      	ldr	r0, [r7, #16]
 800fcda:	f7ff f84f 	bl	800ed7c <parse_string>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d066      	beq.n	800fdb2 <parse_object+0x1c8>
        {
            goto fail; /* faile to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800fce4:	6838      	ldr	r0, [r7, #0]
 800fce6:	f7ff fb33 	bl	800f350 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	691a      	ldr	r2, [r3, #16]
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d055      	beq.n	800fdaa <parse_object+0x1c0>
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	689a      	ldr	r2, [r3, #8]
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d24f      	bcs.n	800fdaa <parse_object+0x1c0>
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	689b      	ldr	r3, [r3, #8]
 800fd12:	4413      	add	r3, r2
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	2b3a      	cmp	r3, #58	; 0x3a
 800fd18:	d147      	bne.n	800fdaa <parse_object+0x1c0>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800fd24:	6838      	ldr	r0, [r7, #0]
 800fd26:	f7ff fb13 	bl	800f350 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800fd2a:	6839      	ldr	r1, [r7, #0]
 800fd2c:	6938      	ldr	r0, [r7, #16]
 800fd2e:	f7ff fc87 	bl	800f640 <parse_value>
 800fd32:	4603      	mov	r3, r0
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d03e      	beq.n	800fdb6 <parse_object+0x1cc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800fd38:	6838      	ldr	r0, [r7, #0]
 800fd3a:	f7ff fb09 	bl	800f350 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d00d      	beq.n	800fd60 <parse_object+0x176>
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	689a      	ldr	r2, [r3, #8]
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d207      	bcs.n	800fd60 <parse_object+0x176>
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	689b      	ldr	r3, [r3, #8]
 800fd58:	4413      	add	r3, r2
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	2b2c      	cmp	r3, #44	; 0x2c
 800fd5e:	d09b      	beq.n	800fc98 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d021      	beq.n	800fdaa <parse_object+0x1c0>
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	689a      	ldr	r2, [r3, #8]
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d21b      	bcs.n	800fdaa <parse_object+0x1c0>
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	689b      	ldr	r3, [r3, #8]
 800fd7a:	4413      	add	r3, r2
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	2b7d      	cmp	r3, #125	; 0x7d
 800fd80:	d113      	bne.n	800fdaa <parse_object+0x1c0>
    {
        goto fail; /* expected end of object */
    }

success:
 800fd82:	e000      	b.n	800fd86 <parse_object+0x19c>
        goto success; /* empty object */
 800fd84:	bf00      	nop
    input_buffer->depth--;
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	1e5a      	subs	r2, r3, #1
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	60da      	str	r2, [r3, #12]

    item->type = JObject;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2240      	movs	r2, #64	; 0x40
 800fd94:	60da      	str	r2, [r3, #12]
    item->child = head;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	697a      	ldr	r2, [r7, #20]
 800fd9a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	1c5a      	adds	r2, r3, #1
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	609a      	str	r2, [r3, #8]
    return true;
 800fda6:	2301      	movs	r3, #1
 800fda8:	e00d      	b.n	800fdc6 <parse_object+0x1dc>

fail:
 800fdaa:	bf00      	nop
 800fdac:	e004      	b.n	800fdb8 <parse_object+0x1ce>
            goto fail; /* allocation failure */
 800fdae:	bf00      	nop
 800fdb0:	e002      	b.n	800fdb8 <parse_object+0x1ce>
            goto fail; /* faile to parse name */
 800fdb2:	bf00      	nop
 800fdb4:	e000      	b.n	800fdb8 <parse_object+0x1ce>
            goto fail; /* failed to parse value */
 800fdb6:	bf00      	nop
    if (head != NULL)
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d002      	beq.n	800fdc4 <parse_object+0x1da>
    {
        JDelete(head);
 800fdbe:	6978      	ldr	r0, [r7, #20]
 800fdc0:	f7fe fbe5 	bl	800e58e <JDelete>
    }

    return false;
 800fdc4:	2300      	movs	r3, #0
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3718      	adds	r7, #24
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <print_object>:

/* Render an object to text. */
static Jbool print_object(const J * const item, printbuffer * const output_buffer)
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b088      	sub	sp, #32
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
 800fdd6:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800fddc:	2300      	movs	r3, #0
 800fdde:	60fb      	str	r3, [r7, #12]
    J *current_item = item->child;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	689b      	ldr	r3, [r3, #8]
 800fde4:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d101      	bne.n	800fdf0 <print_object+0x22>
    {
        return false;
 800fdec:	2300      	movs	r3, #0
 800fdee:	e109      	b.n	8010004 <print_object+0x236>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	695b      	ldr	r3, [r3, #20]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d001      	beq.n	800fdfc <print_object+0x2e>
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	e000      	b.n	800fdfe <print_object+0x30>
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	3301      	adds	r3, #1
 800fe04:	4619      	mov	r1, r3
 800fe06:	6838      	ldr	r0, [r7, #0]
 800fe08:	f7fe fd3c 	bl	800e884 <ensure>
 800fe0c:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d101      	bne.n	800fe18 <print_object+0x4a>
    {
        return false;
 800fe14:	2300      	movs	r3, #0
 800fe16:	e0f5      	b.n	8010004 <print_object+0x236>
    }

    *output_pointer++ = '{';
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	1c5a      	adds	r2, r3, #1
 800fe1c:	61fa      	str	r2, [r7, #28]
 800fe1e:	227b      	movs	r2, #123	; 0x7b
 800fe20:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	1c5a      	adds	r2, r3, #1
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	695b      	ldr	r3, [r3, #20]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d004      	beq.n	800fe3e <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800fe34:	69fb      	ldr	r3, [r7, #28]
 800fe36:	1c5a      	adds	r2, r3, #1
 800fe38:	61fa      	str	r2, [r7, #28]
 800fe3a:	220a      	movs	r2, #10
 800fe3c:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	689a      	ldr	r2, [r3, #8]
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	441a      	add	r2, r3
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	609a      	str	r2, [r3, #8]

    while (current_item)
 800fe4a:	e0a1      	b.n	800ff90 <print_object+0x1c2>
    {
        if (output_buffer->format)
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	695b      	ldr	r3, [r3, #20]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d022      	beq.n	800fe9a <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	68db      	ldr	r3, [r3, #12]
 800fe58:	4619      	mov	r1, r3
 800fe5a:	6838      	ldr	r0, [r7, #0]
 800fe5c:	f7fe fd12 	bl	800e884 <ensure>
 800fe60:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800fe62:	69fb      	ldr	r3, [r7, #28]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d101      	bne.n	800fe6c <print_object+0x9e>
            {
                return false;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	e0cb      	b.n	8010004 <print_object+0x236>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	617b      	str	r3, [r7, #20]
 800fe70:	e007      	b.n	800fe82 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800fe72:	69fb      	ldr	r3, [r7, #28]
 800fe74:	1c5a      	adds	r2, r3, #1
 800fe76:	61fa      	str	r2, [r7, #28]
 800fe78:	2209      	movs	r2, #9
 800fe7a:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	617b      	str	r3, [r7, #20]
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	697a      	ldr	r2, [r7, #20]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d3f2      	bcc.n	800fe72 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	689a      	ldr	r2, [r3, #8]
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	441a      	add	r2, r3
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	6a1b      	ldr	r3, [r3, #32]
 800fe9e:	6839      	ldr	r1, [r7, #0]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7ff f94b 	bl	800f13c <print_string_ptr>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d101      	bne.n	800feb0 <print_object+0xe2>
        {
            return false;
 800feac:	2300      	movs	r3, #0
 800feae:	e0a9      	b.n	8010004 <print_object+0x236>
        }
        update_offset(output_buffer);
 800feb0:	6838      	ldr	r0, [r7, #0]
 800feb2:	f7fe fd64 	bl	800e97e <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	695b      	ldr	r3, [r3, #20]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d001      	beq.n	800fec2 <print_object+0xf4>
 800febe:	2302      	movs	r3, #2
 800fec0:	e000      	b.n	800fec4 <print_object+0xf6>
 800fec2:	2301      	movs	r3, #1
 800fec4:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800fec6:	68f9      	ldr	r1, [r7, #12]
 800fec8:	6838      	ldr	r0, [r7, #0]
 800feca:	f7fe fcdb 	bl	800e884 <ensure>
 800fece:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d101      	bne.n	800feda <print_object+0x10c>
        {
            return false;
 800fed6:	2300      	movs	r3, #0
 800fed8:	e094      	b.n	8010004 <print_object+0x236>
        }
        *output_pointer++ = ':';
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	1c5a      	adds	r2, r3, #1
 800fede:	61fa      	str	r2, [r7, #28]
 800fee0:	223a      	movs	r2, #58	; 0x3a
 800fee2:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	695b      	ldr	r3, [r3, #20]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d004      	beq.n	800fef6 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	1c5a      	adds	r2, r3, #1
 800fef0:	61fa      	str	r2, [r7, #28]
 800fef2:	2209      	movs	r2, #9
 800fef4:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	689a      	ldr	r2, [r3, #8]
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	441a      	add	r2, r3
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800ff02:	6839      	ldr	r1, [r7, #0]
 800ff04:	69b8      	ldr	r0, [r7, #24]
 800ff06:	f7ff fc89 	bl	800f81c <print_value>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d101      	bne.n	800ff14 <print_object+0x146>
        {
            return false;
 800ff10:	2300      	movs	r3, #0
 800ff12:	e077      	b.n	8010004 <print_object+0x236>
        }
        update_offset(output_buffer);
 800ff14:	6838      	ldr	r0, [r7, #0]
 800ff16:	f7fe fd32 	bl	800e97e <update_offset>

        /* print comma if not last */
        length = (size_t) ((output_buffer->format ? 1 : 0) + (current_item->next ? 1 : 0));
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	695b      	ldr	r3, [r3, #20]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	bf14      	ite	ne
 800ff22:	2301      	movne	r3, #1
 800ff24:	2300      	moveq	r3, #0
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	461a      	mov	r2, r3
 800ff2a:	69bb      	ldr	r3, [r7, #24]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	bf14      	ite	ne
 800ff32:	2301      	movne	r3, #1
 800ff34:	2300      	moveq	r3, #0
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	4413      	add	r3, r2
 800ff3a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	3301      	adds	r3, #1
 800ff40:	4619      	mov	r1, r3
 800ff42:	6838      	ldr	r0, [r7, #0]
 800ff44:	f7fe fc9e 	bl	800e884 <ensure>
 800ff48:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d101      	bne.n	800ff54 <print_object+0x186>
        {
            return false;
 800ff50:	2300      	movs	r3, #0
 800ff52:	e057      	b.n	8010004 <print_object+0x236>
        }
        if (current_item->next)
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d004      	beq.n	800ff66 <print_object+0x198>
        {
            *output_pointer++ = ',';
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	1c5a      	adds	r2, r3, #1
 800ff60:	61fa      	str	r2, [r7, #28]
 800ff62:	222c      	movs	r2, #44	; 0x2c
 800ff64:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	695b      	ldr	r3, [r3, #20]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d004      	beq.n	800ff78 <print_object+0x1aa>
        {
            *output_pointer++ = '\n';
 800ff6e:	69fb      	ldr	r3, [r7, #28]
 800ff70:	1c5a      	adds	r2, r3, #1
 800ff72:	61fa      	str	r2, [r7, #28]
 800ff74:	220a      	movs	r2, #10
 800ff76:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	689a      	ldr	r2, [r3, #8]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	441a      	add	r2, r3
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800ff90:	69bb      	ldr	r3, [r7, #24]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	f47f af5a 	bne.w	800fe4c <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	695b      	ldr	r3, [r3, #20]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d003      	beq.n	800ffa8 <print_object+0x1da>
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	e000      	b.n	800ffaa <print_object+0x1dc>
 800ffa8:	2302      	movs	r3, #2
 800ffaa:	4619      	mov	r1, r3
 800ffac:	6838      	ldr	r0, [r7, #0]
 800ffae:	f7fe fc69 	bl	800e884 <ensure>
 800ffb2:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d101      	bne.n	800ffbe <print_object+0x1f0>
    {
        return false;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	e022      	b.n	8010004 <print_object+0x236>
    }
    if (output_buffer->format)
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	695b      	ldr	r3, [r3, #20]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d010      	beq.n	800ffe8 <print_object+0x21a>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	613b      	str	r3, [r7, #16]
 800ffca:	e007      	b.n	800ffdc <print_object+0x20e>
        {
            *output_pointer++ = '\t';
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	1c5a      	adds	r2, r3, #1
 800ffd0:	61fa      	str	r2, [r7, #28]
 800ffd2:	2209      	movs	r2, #9
 800ffd4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	3301      	adds	r3, #1
 800ffda:	613b      	str	r3, [r7, #16]
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	693a      	ldr	r2, [r7, #16]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d3f1      	bcc.n	800ffcc <print_object+0x1fe>
        }
    }
    *output_pointer++ = '}';
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	1c5a      	adds	r2, r3, #1
 800ffec:	61fa      	str	r2, [r7, #28]
 800ffee:	227d      	movs	r2, #125	; 0x7d
 800fff0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	2200      	movs	r2, #0
 800fff6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	1e5a      	subs	r2, r3, #1
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	60da      	str	r2, [r3, #12]

    return true;
 8010002:	2301      	movs	r3, #1
}
 8010004:	4618      	mov	r0, r3
 8010006:	3720      	adds	r7, #32
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static J *get_object_item(const J * const object, const char * const name, const Jbool case_sensitive)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b086      	sub	sp, #24
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	607a      	str	r2, [r7, #4]
    J *current_element = NULL;
 8010018:	2300      	movs	r3, #0
 801001a:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d002      	beq.n	8010028 <get_object_item+0x1c>
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d101      	bne.n	801002c <get_object_item+0x20>
    {
        return NULL;
 8010028:	2300      	movs	r3, #0
 801002a:	e026      	b.n	801007a <get_object_item+0x6e>
    }

    current_element = object->child;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	689b      	ldr	r3, [r3, #8]
 8010030:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d013      	beq.n	8010060 <get_object_item+0x54>
    {
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8010038:	e002      	b.n	8010040 <get_object_item+0x34>
        {
            current_element = current_element->next;
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d018      	beq.n	8010078 <get_object_item+0x6c>
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	6a1b      	ldr	r3, [r3, #32]
 801004a:	4619      	mov	r1, r3
 801004c:	68b8      	ldr	r0, [r7, #8]
 801004e:	f7f0 f8d7 	bl	8000200 <strcmp>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d1f0      	bne.n	801003a <get_object_item+0x2e>
 8010058:	e00e      	b.n	8010078 <get_object_item+0x6c>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d008      	beq.n	8010078 <get_object_item+0x6c>
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	6a1b      	ldr	r3, [r3, #32]
 801006a:	4619      	mov	r1, r3
 801006c:	68b8      	ldr	r0, [r7, #8]
 801006e:	f7fe f9d9 	bl	800e424 <case_insensitive_strcmp>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d1f0      	bne.n	801005a <get_object_item+0x4e>
        }
    }

    return current_element;
 8010078:	697b      	ldr	r3, [r7, #20]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3718      	adds	r7, #24
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <JGetObjectItem>:

N_CJSON_PUBLIC(J *) JGetObjectItem(const J * const object, const char * const string)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b082      	sub	sp, #8
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
 801008a:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 801008c:	2200      	movs	r2, #0
 801008e:	6839      	ldr	r1, [r7, #0]
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7ff ffbb 	bl	801000c <get_object_item>
 8010096:	4603      	mov	r3, r0
}
 8010098:	4618      	mov	r0, r3
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <suffix_object>:
    return JGetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(J *prev, J *item)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	683a      	ldr	r2, [r7, #0]
 80100ae:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	687a      	ldr	r2, [r7, #4]
 80100b4:	605a      	str	r2, [r3, #4]
}
 80100b6:	bf00      	nop
 80100b8:	370c      	adds	r7, #12
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr

080100c2 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static Jbool add_item_to_array(J *array, J *item)
{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b084      	sub	sp, #16
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
 80100ca:	6039      	str	r1, [r7, #0]
    J *child = NULL;
 80100cc:	2300      	movs	r3, #0
 80100ce:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL))
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d002      	beq.n	80100dc <add_item_to_array+0x1a>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d101      	bne.n	80100e0 <add_item_to_array+0x1e>
    {
        return false;
 80100dc:	2300      	movs	r3, #0
 80100de:	e015      	b.n	801010c <add_item_to_array+0x4a>
    }

    child = array->child;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	60fb      	str	r3, [r7, #12]

    if (child == NULL)
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d106      	bne.n	80100fa <add_item_to_array+0x38>
    {
        /* list is empty, start new one */
        array->child = item;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	683a      	ldr	r2, [r7, #0]
 80100f0:	609a      	str	r2, [r3, #8]
 80100f2:	e00a      	b.n	801010a <add_item_to_array+0x48>
    else
    {
        /* append to the end */
        while (child->next)
        {
            child = child->next;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	60fb      	str	r3, [r7, #12]
        while (child->next)
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d1f8      	bne.n	80100f4 <add_item_to_array+0x32>
        }
        suffix_object(child, item);
 8010102:	6839      	ldr	r1, [r7, #0]
 8010104:	68f8      	ldr	r0, [r7, #12]
 8010106:	f7ff ffcb 	bl	80100a0 <suffix_object>
    }

    return true;
 801010a:	2301      	movs	r3, #1
}
 801010c:	4618      	mov	r0, r3
 801010e:	3710      	adds	r7, #16
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
    return (void*)string;
 801011c:	687b      	ldr	r3, [r7, #4]
}
 801011e:	4618      	mov	r0, r3
 8010120:	370c      	adds	r7, #12
 8010122:	46bd      	mov	sp, r7
 8010124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010128:	4770      	bx	lr

0801012a <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static Jbool add_item_to_object(J * const object, const char * const string, J * const item, const Jbool constant_key)
{
 801012a:	b580      	push	{r7, lr}
 801012c:	b086      	sub	sp, #24
 801012e:	af00      	add	r7, sp, #0
 8010130:	60f8      	str	r0, [r7, #12]
 8010132:	60b9      	str	r1, [r7, #8]
 8010134:	607a      	str	r2, [r7, #4]
 8010136:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8010138:	2300      	movs	r3, #0
 801013a:	617b      	str	r3, [r7, #20]
    int new_type = JInvalid;
 801013c:	2300      	movs	r3, #0
 801013e:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL))
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d005      	beq.n	8010152 <add_item_to_object+0x28>
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d002      	beq.n	8010152 <add_item_to_object+0x28>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d101      	bne.n	8010156 <add_item_to_object+0x2c>
    {
        return false;
 8010152:	2300      	movs	r3, #0
 8010154:	e034      	b.n	80101c0 <add_item_to_object+0x96>
    }

    if (constant_key)
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d009      	beq.n	8010170 <add_item_to_object+0x46>
    {
        new_key = (char*)cast_away_const(string);
 801015c:	68b8      	ldr	r0, [r7, #8]
 801015e:	f7ff ffd9 	bl	8010114 <cast_away_const>
 8010162:	6178      	str	r0, [r7, #20]
        new_type = item->type | JStringIsConst;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801016c:	613b      	str	r3, [r7, #16]
 801016e:	e00d      	b.n	801018c <add_item_to_object+0x62>
    }
    else
    {
        new_key = (char*)Jstrdup((const unsigned char*)string);
 8010170:	68b8      	ldr	r0, [r7, #8]
 8010172:	f7fe f9c7 	bl	800e504 <Jstrdup>
 8010176:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d101      	bne.n	8010182 <add_item_to_object+0x58>
        {
            return false;
 801017e:	2300      	movs	r3, #0
 8010180:	e01e      	b.n	80101c0 <add_item_to_object+0x96>
        }

        new_type = item->type & ~JStringIsConst;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	68db      	ldr	r3, [r3, #12]
 8010186:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801018a:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & JStringIsConst) && (item->string != NULL))
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010194:	2b00      	cmp	r3, #0
 8010196:	d108      	bne.n	80101aa <add_item_to_object+0x80>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6a1b      	ldr	r3, [r3, #32]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d004      	beq.n	80101aa <add_item_to_object+0x80>
    {
        _Free(item->string);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6a1b      	ldr	r3, [r3, #32]
 80101a4:	4618      	mov	r0, r3
 80101a6:	f000 fbd5 	bl	8010954 <NoteFree>
    }

    item->string = new_key;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	697a      	ldr	r2, [r7, #20]
 80101ae:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	693a      	ldr	r2, [r7, #16]
 80101b4:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 80101b6:	6879      	ldr	r1, [r7, #4]
 80101b8:	68f8      	ldr	r0, [r7, #12]
 80101ba:	f7ff ff82 	bl	80100c2 <add_item_to_array>
 80101be:	4603      	mov	r3, r0
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3718      	adds	r7, #24
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <JAddItemToObject>:

N_CJSON_PUBLIC(void) JAddItemToObject(J *object, const char *string, J *item)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b084      	sub	sp, #16
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	607a      	str	r2, [r7, #4]
    add_item_to_object(object, string, item, false);
 80101d4:	2300      	movs	r3, #0
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	68b9      	ldr	r1, [r7, #8]
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f7ff ffa5 	bl	801012a <add_item_to_object>
}
 80101e0:	bf00      	nop
 80101e2:	3710      	adds	r7, #16
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <JAddBoolToObject>:
    JDelete(false_item);
    return NULL;
}

N_CJSON_PUBLIC(J*) JAddBoolToObject(J * const object, const char * const name, const Jbool boolean)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b086      	sub	sp, #24
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]
    J *bool_item = JCreateBool(boolean);
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 f850 	bl	801029a <JCreateBool>
 80101fa:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, bool_item, false))
 80101fc:	2300      	movs	r3, #0
 80101fe:	697a      	ldr	r2, [r7, #20]
 8010200:	68b9      	ldr	r1, [r7, #8]
 8010202:	68f8      	ldr	r0, [r7, #12]
 8010204:	f7ff ff91 	bl	801012a <add_item_to_object>
 8010208:	4603      	mov	r3, r0
 801020a:	2b00      	cmp	r3, #0
 801020c:	d001      	beq.n	8010212 <JAddBoolToObject+0x2a>
    {
        return bool_item;
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	e003      	b.n	801021a <JAddBoolToObject+0x32>
    }

    JDelete(bool_item);
 8010212:	6978      	ldr	r0, [r7, #20]
 8010214:	f7fe f9bb 	bl	800e58e <JDelete>
    return NULL;
 8010218:	2300      	movs	r3, #0
}
 801021a:	4618      	mov	r0, r3
 801021c:	3718      	adds	r7, #24
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <JAddNumberToObject>:

N_CJSON_PUBLIC(J*) JAddNumberToObject(J * const object, const char * const name, const JNUMBER number)
{
 8010222:	b580      	push	{r7, lr}
 8010224:	b086      	sub	sp, #24
 8010226:	af00      	add	r7, sp, #0
 8010228:	60f8      	str	r0, [r7, #12]
 801022a:	60b9      	str	r1, [r7, #8]
 801022c:	ed87 0b00 	vstr	d0, [r7]
    J *number_item = JCreateNumber(number);
 8010230:	ed97 0b00 	vldr	d0, [r7]
 8010234:	f000 f848 	bl	80102c8 <JCreateNumber>
 8010238:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, false))
 801023a:	2300      	movs	r3, #0
 801023c:	697a      	ldr	r2, [r7, #20]
 801023e:	68b9      	ldr	r1, [r7, #8]
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f7ff ff72 	bl	801012a <add_item_to_object>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	d001      	beq.n	8010250 <JAddNumberToObject+0x2e>
    {
        return number_item;
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	e003      	b.n	8010258 <JAddNumberToObject+0x36>
    }

    JDelete(number_item);
 8010250:	6978      	ldr	r0, [r7, #20]
 8010252:	f7fe f99c 	bl	800e58e <JDelete>
    return NULL;
 8010256:	2300      	movs	r3, #0
}
 8010258:	4618      	mov	r0, r3
 801025a:	3718      	adds	r7, #24
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <JAddStringToObject>:

N_CJSON_PUBLIC(J*) JAddStringToObject(J * const object, const char * const name, const char * const string)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b086      	sub	sp, #24
 8010264:	af00      	add	r7, sp, #0
 8010266:	60f8      	str	r0, [r7, #12]
 8010268:	60b9      	str	r1, [r7, #8]
 801026a:	607a      	str	r2, [r7, #4]
    J *string_item = JCreateString(string);
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f000 f871 	bl	8010354 <JCreateString>
 8010272:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, false))
 8010274:	2300      	movs	r3, #0
 8010276:	697a      	ldr	r2, [r7, #20]
 8010278:	68b9      	ldr	r1, [r7, #8]
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	f7ff ff55 	bl	801012a <add_item_to_object>
 8010280:	4603      	mov	r3, r0
 8010282:	2b00      	cmp	r3, #0
 8010284:	d001      	beq.n	801028a <JAddStringToObject+0x2a>
    {
        return string_item;
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	e003      	b.n	8010292 <JAddStringToObject+0x32>
    }

    JDelete(string_item);
 801028a:	6978      	ldr	r0, [r7, #20]
 801028c:	f7fe f97f 	bl	800e58e <JDelete>
    return NULL;
 8010290:	2300      	movs	r3, #0
}
 8010292:	4618      	mov	r0, r3
 8010294:	3718      	adds	r7, #24
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <JCreateBool>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateBool(Jbool b)
{
 801029a:	b580      	push	{r7, lr}
 801029c:	b084      	sub	sp, #16
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item();
 80102a2:	f7fe f960 	bl	800e566 <JNew_Item>
 80102a6:	60f8      	str	r0, [r7, #12]
    if(item)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d007      	beq.n	80102be <JCreateBool+0x24>
    {
        item->type = b ? JTrue : JFalse;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d001      	beq.n	80102b8 <JCreateBool+0x1e>
 80102b4:	2202      	movs	r2, #2
 80102b6:	e000      	b.n	80102ba <JCreateBool+0x20>
 80102b8:	2201      	movs	r2, #1
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	60da      	str	r2, [r3, #12]
    }

    return item;
 80102be:	68fb      	ldr	r3, [r7, #12]
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <JCreateNumber>:

N_CJSON_PUBLIC(J *) JCreateNumber(JNUMBER num)
{
 80102c8:	b590      	push	{r4, r7, lr}
 80102ca:	b085      	sub	sp, #20
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	ed87 0b00 	vstr	d0, [r7]
    J *item = JNew_Item();
 80102d2:	f7fe f948 	bl	800e566 <JNew_Item>
 80102d6:	60f8      	str	r0, [r7, #12]
    if(item)
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d02c      	beq.n	8010338 <JCreateNumber+0x70>
    {
        item->type = JNumber;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2208      	movs	r2, #8
 80102e2:	60da      	str	r2, [r3, #12]
        item->valuenumber = num;
 80102e4:	68fa      	ldr	r2, [r7, #12]
 80102e6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80102ea:	e9c2 3406 	strd	r3, r4, [r2, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 80102ee:	a317      	add	r3, pc, #92	; (adr r3, 801034c <JCreateNumber+0x84>)
 80102f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80102f8:	f7f0 fc2c 	bl	8000b54 <__aeabi_dcmpge>
 80102fc:	4603      	mov	r3, r0
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d004      	beq.n	801030c <JCreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8010308:	615a      	str	r2, [r3, #20]
 801030a:	e015      	b.n	8010338 <JCreateNumber+0x70>
        }
        else if (num <= INT_MIN)
 801030c:	f04f 0200 	mov.w	r2, #0
 8010310:	4b0d      	ldr	r3, [pc, #52]	; (8010348 <JCreateNumber+0x80>)
 8010312:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010316:	f7f0 fc13 	bl	8000b40 <__aeabi_dcmple>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d004      	beq.n	801032a <JCreateNumber+0x62>
        {
            item->valueint = INT_MIN;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010326:	615a      	str	r2, [r3, #20]
 8010328:	e006      	b.n	8010338 <JCreateNumber+0x70>
        }
        else
        {
            item->valueint = (int)num;
 801032a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801032e:	f7f0 fc25 	bl	8000b7c <__aeabi_d2iz>
 8010332:	4602      	mov	r2, r0
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8010338:	68fb      	ldr	r3, [r7, #12]
}
 801033a:	4618      	mov	r0, r3
 801033c:	3714      	adds	r7, #20
 801033e:	46bd      	mov	sp, r7
 8010340:	bd90      	pop	{r4, r7, pc}
 8010342:	bf00      	nop
 8010344:	f3af 8000 	nop.w
 8010348:	c1e00000 	.word	0xc1e00000
 801034c:	ffc00000 	.word	0xffc00000
 8010350:	41dfffff 	.word	0x41dfffff

08010354 <JCreateString>:

N_CJSON_PUBLIC(J *) JCreateString(const char *string)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item();
 801035c:	f7fe f903 	bl	800e566 <JNew_Item>
 8010360:	60f8      	str	r0, [r7, #12]
    if(item)
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d011      	beq.n	801038c <JCreateString+0x38>
    {
        item->type = JString;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2210      	movs	r2, #16
 801036c:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)Jstrdup((const unsigned char*)string);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7fe f8c8 	bl	800e504 <Jstrdup>
 8010374:	4602      	mov	r2, r0
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	691b      	ldr	r3, [r3, #16]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d104      	bne.n	801038c <JCreateString+0x38>
        {
            JDelete(item);
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f7fe f903 	bl	800e58e <JDelete>
            return NULL;
 8010388:	2300      	movs	r3, #0
 801038a:	e000      	b.n	801038e <JCreateString+0x3a>
        }
    }

    return item;
 801038c:	68fb      	ldr	r3, [r7, #12]
}
 801038e:	4618      	mov	r0, r3
 8010390:	3710      	adds	r7, #16
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}

08010396 <JCreateObject>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateObject(void)
{
 8010396:	b580      	push	{r7, lr}
 8010398:	b082      	sub	sp, #8
 801039a:	af00      	add	r7, sp, #0
    J *item = JNew_Item();
 801039c:	f7fe f8e3 	bl	800e566 <JNew_Item>
 80103a0:	6078      	str	r0, [r7, #4]
    if (item)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d002      	beq.n	80103ae <JCreateObject+0x18>
    {
        item->type = JObject;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2240      	movs	r2, #64	; 0x40
 80103ac:	60da      	str	r2, [r3, #12]
    }

    return item;
 80103ae:	687b      	ldr	r3, [r7, #4]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3708      	adds	r7, #8
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <JIsString>:

    return (item->type & 0xFF) == JNumber;
}

N_CJSON_PUBLIC(Jbool) JIsString(const J * const item)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d101      	bne.n	80103ca <JIsString+0x12>
    {
        return false;
 80103c6:	2300      	movs	r3, #0
 80103c8:	e007      	b.n	80103da <JIsString+0x22>
    }

    return (item->type & 0xFF) == JString;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	68db      	ldr	r3, [r3, #12]
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	2b10      	cmp	r3, #16
 80103d2:	bf0c      	ite	eq
 80103d4:	2301      	moveq	r3, #1
 80103d6:	2300      	movne	r3, #0
 80103d8:	b2db      	uxtb	r3, r3
}
 80103da:	4618      	mov	r0, r3
 80103dc:	370c      	adds	r7, #12
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr

080103e6 <JIsNullString>:
    @param   rsp The JSON response object.
    @param   field The field to return.
    @returns bool. False if the field is not present, or NULL.
*/
/**************************************************************************/
bool JIsNullString(J *rsp, const char *field) {
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b084      	sub	sp, #16
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
 80103ee:	6039      	str	r1, [r7, #0]
	if (rsp == NULL)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d101      	bne.n	80103fa <JIsNullString+0x14>
		return false;
 80103f6:	2300      	movs	r3, #0
 80103f8:	e01f      	b.n	801043a <JIsNullString+0x54>
	J *item = JGetObjectItem(rsp, field);
 80103fa:	6839      	ldr	r1, [r7, #0]
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7ff fe40 	bl	8010082 <JGetObjectItem>
 8010402:	60f8      	str	r0, [r7, #12]
	if (item == NULL)
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d101      	bne.n	801040e <JIsNullString+0x28>
		return true;
 801040a:	2301      	movs	r3, #1
 801040c:	e015      	b.n	801043a <JIsNullString+0x54>
	if (!JIsString(item))
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f7ff ffd2 	bl	80103b8 <JIsString>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d101      	bne.n	801041e <JIsNullString+0x38>
		return false;
 801041a:	2300      	movs	r3, #0
 801041c:	e00d      	b.n	801043a <JIsNullString+0x54>
	if (item->valuestring == NULL)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	691b      	ldr	r3, [r3, #16]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d101      	bne.n	801042a <JIsNullString+0x44>
		return true;
 8010426:	2301      	movs	r3, #1
 8010428:	e007      	b.n	801043a <JIsNullString+0x54>
	if (item->valuestring[0] == '\0')
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	691b      	ldr	r3, [r3, #16]
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d101      	bne.n	8010438 <JIsNullString+0x52>
		return true;
 8010434:	2301      	movs	r3, #1
 8010436:	e000      	b.n	801043a <JIsNullString+0x54>
	return false;
 8010438:	2300      	movs	r3, #0
}
 801043a:	4618      	mov	r0, r3
 801043c:	3710      	adds	r7, #16
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
 8010442:	0000      	movs	r0, r0
 8010444:	0000      	movs	r0, r0
	...

08010448 <JNtoA>:
 */

#include "n_lib.h"

char * JNtoA(JNUMBER f, char * buf, int original_precision)
{
 8010448:	b5b0      	push	{r4, r5, r7, lr}
 801044a:	b0a4      	sub	sp, #144	; 0x90
 801044c:	af00      	add	r7, sp, #0
 801044e:	ed87 0b02 	vstr	d0, [r7, #8]
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	char * p = ptr;
 801045c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	char * p1;
	char c;
	long intPart;

	// For our low-SRAM devices we'd rather have this on the stack
	const JNUMBER rounders[JNTOA_PRECISION + 1] =
 8010464:	4aa0      	ldr	r2, [pc, #640]	; (80106e8 <JNtoA+0x2a0>)
 8010466:	f107 0318 	add.w	r3, r7, #24
 801046a:	4611      	mov	r1, r2
 801046c:	2258      	movs	r2, #88	; 0x58
 801046e:	4618      	mov	r0, r3
 8010470:	f000 feb4 	bl	80111dc <memcpy>
			0.00000000005		// 10
		};

	// Check specifically for uncommon but bad floating point numbers that can't be converted
	uint8_t fbytes[8];
	memcpy(&fbytes, &f, sizeof(fbytes));
 8010474:	f107 0310 	add.w	r3, r7, #16
 8010478:	f107 0208 	add.w	r2, r7, #8
 801047c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010480:	e883 0003 	stmia.w	r3, {r0, r1}
	bool wasFF = true;
 8010484:	2301      	movs	r3, #1
 8010486:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	int i;
	for (i=0; i<(int)sizeof(fbytes); i++)
 801048a:	2300      	movs	r3, #0
 801048c:	67bb      	str	r3, [r7, #120]	; 0x78
 801048e:	e00c      	b.n	80104aa <JNtoA+0x62>
		if (fbytes[i] != 0xff) wasFF = false;
 8010490:	f107 0210 	add.w	r2, r7, #16
 8010494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010496:	4413      	add	r3, r2
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	2bff      	cmp	r3, #255	; 0xff
 801049c:	d002      	beq.n	80104a4 <JNtoA+0x5c>
 801049e:	2300      	movs	r3, #0
 80104a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for (i=0; i<(int)sizeof(fbytes); i++)
 80104a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104a6:	3301      	adds	r3, #1
 80104a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80104aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104ac:	2b07      	cmp	r3, #7
 80104ae:	ddef      	ble.n	8010490 <JNtoA+0x48>
	if (wasFF)
 80104b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d005      	beq.n	80104c4 <JNtoA+0x7c>
		f = 0.0;
 80104b8:	f04f 0200 	mov.w	r2, #0
 80104bc:	f04f 0300 	mov.w	r3, #0
 80104c0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// check precision bounds
	int precision = original_precision;
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	677b      	str	r3, [r7, #116]	; 0x74
	if (precision < 0 || precision > JNTOA_PRECISION)
 80104c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	db02      	blt.n	80104d4 <JNtoA+0x8c>
 80104ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104d0:	2b0a      	cmp	r3, #10
 80104d2:	dd01      	ble.n	80104d8 <JNtoA+0x90>
		precision = JNTOA_PRECISION;
 80104d4:	230a      	movs	r3, #10
 80104d6:	677b      	str	r3, [r7, #116]	; 0x74

	// sign stuff
	if (f < 0)
 80104d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80104dc:	f04f 0200 	mov.w	r2, #0
 80104e0:	f04f 0300 	mov.w	r3, #0
 80104e4:	f7f0 fb22 	bl	8000b2c <__aeabi_dcmplt>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d00d      	beq.n	801050a <JNtoA+0xc2>
	{
		f = -f;
 80104ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80104f2:	4614      	mov	r4, r2
 80104f4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80104f8:	e9c7 4502 	strd	r4, r5, [r7, #8]
		*ptr++ = '-';
 80104fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010500:	1c5a      	adds	r2, r3, #1
 8010502:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010506:	222d      	movs	r2, #45	; 0x2d
 8010508:	701a      	strb	r2, [r3, #0]
	}

	if (original_precision < 0)	 // negative precision == automatic precision guess
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	2b00      	cmp	r3, #0
 801050e:	da4f      	bge.n	80105b0 <JNtoA+0x168>
	{
		if (f < 1.0) precision = 6;
 8010510:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010514:	f04f 0200 	mov.w	r2, #0
 8010518:	4b74      	ldr	r3, [pc, #464]	; (80106ec <JNtoA+0x2a4>)
 801051a:	f7f0 fb07 	bl	8000b2c <__aeabi_dcmplt>
 801051e:	4603      	mov	r3, r0
 8010520:	2b00      	cmp	r3, #0
 8010522:	d002      	beq.n	801052a <JNtoA+0xe2>
 8010524:	2306      	movs	r3, #6
 8010526:	677b      	str	r3, [r7, #116]	; 0x74
 8010528:	e042      	b.n	80105b0 <JNtoA+0x168>
		else if (f < 10.0) precision = 5;
 801052a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801052e:	f04f 0200 	mov.w	r2, #0
 8010532:	4b6f      	ldr	r3, [pc, #444]	; (80106f0 <JNtoA+0x2a8>)
 8010534:	f7f0 fafa 	bl	8000b2c <__aeabi_dcmplt>
 8010538:	4603      	mov	r3, r0
 801053a:	2b00      	cmp	r3, #0
 801053c:	d002      	beq.n	8010544 <JNtoA+0xfc>
 801053e:	2305      	movs	r3, #5
 8010540:	677b      	str	r3, [r7, #116]	; 0x74
 8010542:	e035      	b.n	80105b0 <JNtoA+0x168>
		else if (f < 100.0) precision = 4;
 8010544:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010548:	f04f 0200 	mov.w	r2, #0
 801054c:	4b69      	ldr	r3, [pc, #420]	; (80106f4 <JNtoA+0x2ac>)
 801054e:	f7f0 faed 	bl	8000b2c <__aeabi_dcmplt>
 8010552:	4603      	mov	r3, r0
 8010554:	2b00      	cmp	r3, #0
 8010556:	d002      	beq.n	801055e <JNtoA+0x116>
 8010558:	2304      	movs	r3, #4
 801055a:	677b      	str	r3, [r7, #116]	; 0x74
 801055c:	e028      	b.n	80105b0 <JNtoA+0x168>
		else if (f < 1000.0) precision = 3;
 801055e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010562:	f04f 0200 	mov.w	r2, #0
 8010566:	4b64      	ldr	r3, [pc, #400]	; (80106f8 <JNtoA+0x2b0>)
 8010568:	f7f0 fae0 	bl	8000b2c <__aeabi_dcmplt>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d002      	beq.n	8010578 <JNtoA+0x130>
 8010572:	2303      	movs	r3, #3
 8010574:	677b      	str	r3, [r7, #116]	; 0x74
 8010576:	e01b      	b.n	80105b0 <JNtoA+0x168>
		else if (f < 10000.0) precision = 2;
 8010578:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801057c:	a356      	add	r3, pc, #344	; (adr r3, 80106d8 <JNtoA+0x290>)
 801057e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010582:	f7f0 fad3 	bl	8000b2c <__aeabi_dcmplt>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d002      	beq.n	8010592 <JNtoA+0x14a>
 801058c:	2302      	movs	r3, #2
 801058e:	677b      	str	r3, [r7, #116]	; 0x74
 8010590:	e00e      	b.n	80105b0 <JNtoA+0x168>
		else if (f < 100000.0) precision = 1;
 8010592:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010596:	a352      	add	r3, pc, #328	; (adr r3, 80106e0 <JNtoA+0x298>)
 8010598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059c:	f7f0 fac6 	bl	8000b2c <__aeabi_dcmplt>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d002      	beq.n	80105ac <JNtoA+0x164>
 80105a6:	2301      	movs	r3, #1
 80105a8:	677b      	str	r3, [r7, #116]	; 0x74
 80105aa:	e001      	b.n	80105b0 <JNtoA+0x168>
		else precision = 0;
 80105ac:	2300      	movs	r3, #0
 80105ae:	677b      	str	r3, [r7, #116]	; 0x74
	}

	// round value according the precision
	if (precision)
 80105b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d011      	beq.n	80105da <JNtoA+0x192>
		f += rounders[precision];
 80105b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105b8:	00db      	lsls	r3, r3, #3
 80105ba:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80105be:	4413      	add	r3, r2
 80105c0:	3b78      	subs	r3, #120	; 0x78
 80105c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80105c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80105ca:	461a      	mov	r2, r3
 80105cc:	4623      	mov	r3, r4
 80105ce:	f7ef fe85 	bl	80002dc <__adddf3>
 80105d2:	4603      	mov	r3, r0
 80105d4:	460c      	mov	r4, r1
 80105d6:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = (int) f;
 80105da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80105de:	4618      	mov	r0, r3
 80105e0:	4621      	mov	r1, r4
 80105e2:	f7f0 facb 	bl	8000b7c <__aeabi_d2iz>
 80105e6:	4603      	mov	r3, r0
 80105e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	f -= intPart;
 80105ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80105f0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80105f4:	f7ef ffbe 	bl	8000574 <__aeabi_i2d>
 80105f8:	4602      	mov	r2, r0
 80105fa:	460b      	mov	r3, r1
 80105fc:	4620      	mov	r0, r4
 80105fe:	4629      	mov	r1, r5
 8010600:	f7ef fe6a 	bl	80002d8 <__aeabi_dsub>
 8010604:	4603      	mov	r3, r0
 8010606:	460c      	mov	r4, r1
 8010608:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 801060c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010610:	2b00      	cmp	r3, #0
 8010612:	d107      	bne.n	8010624 <JNtoA+0x1dc>
		*ptr++ = '0';
 8010614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010618:	1c5a      	adds	r2, r3, #1
 801061a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801061e:	2230      	movs	r2, #48	; 0x30
 8010620:	701a      	strb	r2, [r3, #0]
 8010622:	e04d      	b.n	80106c0 <JNtoA+0x278>
	else
	{
		// save start pointer
		p = ptr;
 8010624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		// convert (reverse order)
		while (intPart)
 801062c:	e01f      	b.n	801066e <JNtoA+0x226>
		{
			*p++ = '0' + intPart % 10;
 801062e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010632:	4b32      	ldr	r3, [pc, #200]	; (80106fc <JNtoA+0x2b4>)
 8010634:	fb83 1302 	smull	r1, r3, r3, r2
 8010638:	1099      	asrs	r1, r3, #2
 801063a:	17d3      	asrs	r3, r2, #31
 801063c:	1ac9      	subs	r1, r1, r3
 801063e:	460b      	mov	r3, r1
 8010640:	009b      	lsls	r3, r3, #2
 8010642:	440b      	add	r3, r1
 8010644:	005b      	lsls	r3, r3, #1
 8010646:	1ad1      	subs	r1, r2, r3
 8010648:	b2ca      	uxtb	r2, r1
 801064a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801064e:	1c59      	adds	r1, r3, #1
 8010650:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8010654:	3230      	adds	r2, #48	; 0x30
 8010656:	b2d2      	uxtb	r2, r2
 8010658:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 801065a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801065e:	4a27      	ldr	r2, [pc, #156]	; (80106fc <JNtoA+0x2b4>)
 8010660:	fb82 1203 	smull	r1, r2, r2, r3
 8010664:	1092      	asrs	r2, r2, #2
 8010666:	17db      	asrs	r3, r3, #31
 8010668:	1ad3      	subs	r3, r2, r3
 801066a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		while (intPart)
 801066e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1db      	bne.n	801062e <JNtoA+0x1e6>
		}

		// save end pos
		p1 = p;
 8010676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801067a:	673b      	str	r3, [r7, #112]	; 0x70

		// reverse result
		while (p > ptr)
 801067c:	e017      	b.n	80106ae <JNtoA+0x266>
		{
			c = *--p;
 801067e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010682:	3b01      	subs	r3, #1
 8010684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010688:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			*p = *ptr;
 8010692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010696:	781a      	ldrb	r2, [r3, #0]
 8010698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801069c:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 801069e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106a2:	1c5a      	adds	r2, r3, #1
 80106a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80106a8:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80106ac:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 80106ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80106b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d8e1      	bhi.n	801067e <JNtoA+0x236>
		}

		// restore end pos
		ptr = p1;
 80106ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}

	// decimal part
	if (precision)
 80106c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d057      	beq.n	8010776 <JNtoA+0x32e>
	{

		// place decimal point
		*ptr++ = '.';
 80106c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106ca:	1c5a      	adds	r2, r3, #1
 80106cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80106d0:	222e      	movs	r2, #46	; 0x2e
 80106d2:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 80106d4:	e04a      	b.n	801076c <JNtoA+0x324>
 80106d6:	bf00      	nop
 80106d8:	00000000 	.word	0x00000000
 80106dc:	40c38800 	.word	0x40c38800
 80106e0:	00000000 	.word	0x00000000
 80106e4:	40f86a00 	.word	0x40f86a00
 80106e8:	08011d08 	.word	0x08011d08
 80106ec:	3ff00000 	.word	0x3ff00000
 80106f0:	40240000 	.word	0x40240000
 80106f4:	40590000 	.word	0x40590000
 80106f8:	408f4000 	.word	0x408f4000
 80106fc:	66666667 	.word	0x66666667
		{
			f *= 10.0;
 8010700:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010704:	f04f 0200 	mov.w	r2, #0
 8010708:	4b35      	ldr	r3, [pc, #212]	; (80107e0 <JNtoA+0x398>)
 801070a:	f7ef ff9d 	bl	8000648 <__aeabi_dmul>
 801070e:	4603      	mov	r3, r0
 8010710:	460c      	mov	r4, r1
 8010712:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = (int) f;
 8010716:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801071a:	4618      	mov	r0, r3
 801071c:	4621      	mov	r1, r4
 801071e:	f7f0 fa2d 	bl	8000b7c <__aeabi_d2iz>
 8010722:	4603      	mov	r3, r0
 8010724:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			// Invalid floating point numbers (specifically 0xffffff) end up at this point
			// with a c == 255 after the coercion
			if (c > 9) c = 0;
 8010728:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801072c:	2b09      	cmp	r3, #9
 801072e:	d902      	bls.n	8010736 <JNtoA+0x2ee>
 8010730:	2300      	movs	r3, #0
 8010732:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			*ptr++ = '0' + c;
 8010736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801073a:	1c5a      	adds	r2, r3, #1
 801073c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010740:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8010744:	3230      	adds	r2, #48	; 0x30
 8010746:	b2d2      	uxtb	r2, r2
 8010748:	701a      	strb	r2, [r3, #0]
			f -= c;
 801074a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801074e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010752:	4618      	mov	r0, r3
 8010754:	f7ef ff0e 	bl	8000574 <__aeabi_i2d>
 8010758:	4602      	mov	r2, r0
 801075a:	460b      	mov	r3, r1
 801075c:	4620      	mov	r0, r4
 801075e:	4629      	mov	r1, r5
 8010760:	f7ef fdba 	bl	80002d8 <__aeabi_dsub>
 8010764:	4603      	mov	r3, r0
 8010766:	460c      	mov	r4, r1
 8010768:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 801076c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801076e:	1e5a      	subs	r2, r3, #1
 8010770:	677a      	str	r2, [r7, #116]	; 0x74
 8010772:	2b00      	cmp	r3, #0
 8010774:	d1c4      	bne.n	8010700 <JNtoA+0x2b8>
		}
	}

	// terminating zero
	*ptr = 0;
 8010776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801077a:	2200      	movs	r2, #0
 801077c:	701a      	strb	r2, [r3, #0]

	// Remove trailing zero's if automatic precision
	if (NULL != strchr(buf, '.')) {
 801077e:	212e      	movs	r1, #46	; 0x2e
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f000 fe2f 	bl	80113e4 <strchr>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d023      	beq.n	80107d4 <JNtoA+0x38c>
		if (original_precision < 0) {
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	da20      	bge.n	80107d4 <JNtoA+0x38c>
			--ptr;
 8010792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010796:	3b01      	subs	r3, #1
 8010798:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while (ptr > (buf+1) && *ptr == '0')
 801079c:	e006      	b.n	80107ac <JNtoA+0x364>
				*ptr-- = 0;
 801079e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107a2:	1e5a      	subs	r2, r3, #1
 80107a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80107a8:	2200      	movs	r2, #0
 80107aa:	701a      	strb	r2, [r3, #0]
			while (ptr > (buf+1) && *ptr == '0')
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	3301      	adds	r3, #1
 80107b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d904      	bls.n	80107c2 <JNtoA+0x37a>
 80107b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107bc:	781b      	ldrb	r3, [r3, #0]
 80107be:	2b30      	cmp	r3, #48	; 0x30
 80107c0:	d0ed      	beq.n	801079e <JNtoA+0x356>
			if (*ptr == '.')
 80107c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	2b2e      	cmp	r3, #46	; 0x2e
 80107ca:	d103      	bne.n	80107d4 <JNtoA+0x38c>
				*ptr = 0;
 80107cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107d0:	2200      	movs	r2, #0
 80107d2:	701a      	strb	r2, [r3, #0]
		}
	}

	return buf;
 80107d4:	687b      	ldr	r3, [r7, #4]
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3790      	adds	r7, #144	; 0x90
 80107da:	46bd      	mov	sp, r7
 80107dc:	bdb0      	pop	{r4, r5, r7, pc}
 80107de:	bf00      	nop
 80107e0:	40240000 	.word	0x40240000

080107e4 <NoteSetFn>:
                       function to use.
    @param   delayfn  The platform-specific delay function to use.
    @param   millisfn  The platform-specific 'millis' function to use.
*/
/**************************************************************************/
void NoteSetFn(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn) {
 80107e4:	b480      	push	{r7}
 80107e6:	b085      	sub	sp, #20
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	60f8      	str	r0, [r7, #12]
 80107ec:	60b9      	str	r1, [r7, #8]
 80107ee:	607a      	str	r2, [r7, #4]
 80107f0:	603b      	str	r3, [r7, #0]
    hookMalloc = mallocfn;
 80107f2:	4a09      	ldr	r2, [pc, #36]	; (8010818 <NoteSetFn+0x34>)
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6013      	str	r3, [r2, #0]
    hookFree = freefn;
 80107f8:	4a08      	ldr	r2, [pc, #32]	; (801081c <NoteSetFn+0x38>)
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	6013      	str	r3, [r2, #0]
    hookDelayMs = delayfn;
 80107fe:	4a08      	ldr	r2, [pc, #32]	; (8010820 <NoteSetFn+0x3c>)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6013      	str	r3, [r2, #0]
    hookGetMs = millisfn;
 8010804:	4a07      	ldr	r2, [pc, #28]	; (8010824 <NoteSetFn+0x40>)
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	6013      	str	r3, [r2, #0]
}
 801080a:	bf00      	nop
 801080c:	3714      	adds	r7, #20
 801080e:	46bd      	mov	sp, r7
 8010810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010814:	4770      	bx	lr
 8010816:	bf00      	nop
 8010818:	20000258 	.word	0x20000258
 801081c:	2000025c 	.word	0x2000025c
 8010820:	20000260 	.word	0x20000260
 8010824:	20000264 	.word	0x20000264

08010828 <NoteSetFnI2C>:
    @param   resetfn  The platform-specific I2C reset function to use.
    @param   transmitfn  The platform-specific I2C transmit function to use.
    @param   receivefn  The platform-specific I2C receive function to use.
*/
/**************************************************************************/
void NoteSetFnI2C(uint32_t i2caddress, uint32_t i2cmax, i2cResetFn resetfn, i2cTransmitFn transmitfn, i2cReceiveFn receivefn) {
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]
 8010834:	603b      	str	r3, [r7, #0]
    i2cAddress = i2caddress;
 8010836:	4a0f      	ldr	r2, [pc, #60]	; (8010874 <NoteSetFnI2C+0x4c>)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	6013      	str	r3, [r2, #0]
    i2cMax = i2cmax;
 801083c:	4a0e      	ldr	r2, [pc, #56]	; (8010878 <NoteSetFnI2C+0x50>)
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	6013      	str	r3, [r2, #0]

    hookActiveInterface = interfaceI2C;
 8010842:	4b0e      	ldr	r3, [pc, #56]	; (801087c <NoteSetFnI2C+0x54>)
 8010844:	2202      	movs	r2, #2
 8010846:	601a      	str	r2, [r3, #0]

    hookI2CReset = resetfn;
 8010848:	4a0d      	ldr	r2, [pc, #52]	; (8010880 <NoteSetFnI2C+0x58>)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6013      	str	r3, [r2, #0]
    hookI2CTransmit = transmitfn;
 801084e:	4a0d      	ldr	r2, [pc, #52]	; (8010884 <NoteSetFnI2C+0x5c>)
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	6013      	str	r3, [r2, #0]
    hookI2CReceive = receivefn;
 8010854:	4a0c      	ldr	r2, [pc, #48]	; (8010888 <NoteSetFnI2C+0x60>)
 8010856:	69bb      	ldr	r3, [r7, #24]
 8010858:	6013      	str	r3, [r2, #0]

    notecardReset = i2cNoteReset;
 801085a:	4b0c      	ldr	r3, [pc, #48]	; (801088c <NoteSetFnI2C+0x64>)
 801085c:	4a0c      	ldr	r2, [pc, #48]	; (8010890 <NoteSetFnI2C+0x68>)
 801085e:	601a      	str	r2, [r3, #0]
    notecardTransaction = i2cNoteTransaction;
 8010860:	4b0c      	ldr	r3, [pc, #48]	; (8010894 <NoteSetFnI2C+0x6c>)
 8010862:	4a0d      	ldr	r2, [pc, #52]	; (8010898 <NoteSetFnI2C+0x70>)
 8010864:	601a      	str	r2, [r3, #0]
}
 8010866:	bf00      	nop
 8010868:	3714      	adds	r7, #20
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	2000026c 	.word	0x2000026c
 8010878:	20000270 	.word	0x20000270
 801087c:	20000268 	.word	0x20000268
 8010880:	20000274 	.word	0x20000274
 8010884:	20000278 	.word	0x20000278
 8010888:	2000027c 	.word	0x2000027c
 801088c:	20000280 	.word	0x20000280
 8010890:	08010dd9 	.word	0x08010dd9
 8010894:	20000284 	.word	0x20000284
 8010898:	08010b61 	.word	0x08010b61

0801089c <NoteDebugln>:
/*!
    @brief  Write a to the debug stream and output a newline.
    @param   line  A debug string for output.
*/
/**************************************************************************/
void NoteDebugln(const char *line) {
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
	NoteDebug(line);
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f000 f80b 	bl	80108c0 <NoteDebug>
	NoteDebug(c_newline);
 80108aa:	4b04      	ldr	r3, [pc, #16]	; (80108bc <NoteDebugln+0x20>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f000 f806 	bl	80108c0 <NoteDebug>
}
 80108b4:	bf00      	nop
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	20000018 	.word	0x20000018

080108c0 <NoteDebug>:
/*!
    @brief  Write to the debug stream.
    @param   line  A debug string for output.
*/
/**************************************************************************/
void NoteDebug(const char *line) {
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
#ifndef NOTE_NODEBUG
    if (hookDebugOutput != NULL)
 80108c8:	4b05      	ldr	r3, [pc, #20]	; (80108e0 <NoteDebug+0x20>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d003      	beq.n	80108d8 <NoteDebug+0x18>
        hookDebugOutput(line);
 80108d0:	4b03      	ldr	r3, [pc, #12]	; (80108e0 <NoteDebug+0x20>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	4798      	blx	r3
#endif
}
 80108d8:	bf00      	nop
 80108da:	3708      	adds	r7, #8
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	20000244 	.word	0x20000244

080108e4 <NoteGetMs>:
    @brief  Get the current milliseconds value from the platform-specific
            hook.
    @returns  The current milliseconds value.
*/
/**************************************************************************/
long unsigned int NoteGetMs() {
 80108e4:	b580      	push	{r7, lr}
 80108e6:	af00      	add	r7, sp, #0
    if (hookGetMs == NULL)
 80108e8:	4b05      	ldr	r3, [pc, #20]	; (8010900 <NoteGetMs+0x1c>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d101      	bne.n	80108f4 <NoteGetMs+0x10>
        return 0;
 80108f0:	2300      	movs	r3, #0
 80108f2:	e003      	b.n	80108fc <NoteGetMs+0x18>
    return hookGetMs();
 80108f4:	4b02      	ldr	r3, [pc, #8]	; (8010900 <NoteGetMs+0x1c>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4798      	blx	r3
 80108fa:	4603      	mov	r3, r0
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	20000264 	.word	0x20000264

08010904 <NoteDelayMs>:
/*!
    @brief  Delay milliseconds using the platform-specific hook.
    @param   ms the milliseconds delay value.
*/
/**************************************************************************/
void NoteDelayMs(uint32_t ms) {
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
    if (hookDelayMs != NULL)
 801090c:	4b05      	ldr	r3, [pc, #20]	; (8010924 <NoteDelayMs+0x20>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d003      	beq.n	801091c <NoteDelayMs+0x18>
        hookDelayMs(ms);
 8010914:	4b03      	ldr	r3, [pc, #12]	; (8010924 <NoteDelayMs+0x20>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	4798      	blx	r3
}
 801091c:	bf00      	nop
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	20000260 	.word	0x20000260

08010928 <NoteMalloc>:
/*!
    @brief  Allocate a memory chunk using the platform-specific hook.
    @param   size the number of bytes to allocate.
*/
/**************************************************************************/
void *NoteMalloc(size_t size) {
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
    if (hookMalloc == NULL)
 8010930:	4b07      	ldr	r3, [pc, #28]	; (8010950 <NoteMalloc+0x28>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d101      	bne.n	801093c <NoteMalloc+0x14>
        return NULL;
 8010938:	2300      	movs	r3, #0
 801093a:	e004      	b.n	8010946 <NoteMalloc+0x1e>
#if NOTE_SHOW_MALLOC
	return malloc_show(size);
#else
    return hookMalloc(size);
 801093c:	4b04      	ldr	r3, [pc, #16]	; (8010950 <NoteMalloc+0x28>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	4798      	blx	r3
 8010944:	4603      	mov	r3, r0
#endif
}
 8010946:	4618      	mov	r0, r3
 8010948:	3708      	adds	r7, #8
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
 801094e:	bf00      	nop
 8010950:	20000258 	.word	0x20000258

08010954 <NoteFree>:
/*!
    @brief  Free memory using the platform-specific hook.
    @param   p A pointer to the memory address to free.
*/
/**************************************************************************/
void NoteFree(void *p) {
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
    if (hookFree != NULL)
 801095c:	4b05      	ldr	r3, [pc, #20]	; (8010974 <NoteFree+0x20>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d003      	beq.n	801096c <NoteFree+0x18>
        hookFree(p);
 8010964:	4b03      	ldr	r3, [pc, #12]	; (8010974 <NoteFree+0x20>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	4798      	blx	r3
}
 801096c:	bf00      	nop
 801096e:	3708      	adds	r7, #8
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	2000025c 	.word	0x2000025c

08010978 <NoteLockI2C>:
//**************************************************************************/
/*!
    @brief  Lock the I2C bus using the platform-specific hook.
*/
/**************************************************************************/
void NoteLockI2C() {
 8010978:	b580      	push	{r7, lr}
 801097a:	af00      	add	r7, sp, #0
    if (hookLockI2C != NULL)
 801097c:	4b04      	ldr	r3, [pc, #16]	; (8010990 <NoteLockI2C+0x18>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d002      	beq.n	801098a <NoteLockI2C+0x12>
        hookLockI2C();
 8010984:	4b02      	ldr	r3, [pc, #8]	; (8010990 <NoteLockI2C+0x18>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	4798      	blx	r3
}
 801098a:	bf00      	nop
 801098c:	bd80      	pop	{r7, pc}
 801098e:	bf00      	nop
 8010990:	20000248 	.word	0x20000248

08010994 <NoteUnlockI2C>:
//**************************************************************************/
/*!
    @brief  Unlock the I2C bus using the platform-specific hook.
*/
/**************************************************************************/
void NoteUnlockI2C() {
 8010994:	b580      	push	{r7, lr}
 8010996:	af00      	add	r7, sp, #0
    if (hookUnlockI2C != NULL)
 8010998:	4b04      	ldr	r3, [pc, #16]	; (80109ac <NoteUnlockI2C+0x18>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d002      	beq.n	80109a6 <NoteUnlockI2C+0x12>
        hookUnlockI2C();
 80109a0:	4b02      	ldr	r3, [pc, #8]	; (80109ac <NoteUnlockI2C+0x18>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4798      	blx	r3
}
 80109a6:	bf00      	nop
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	2000024c 	.word	0x2000024c

080109b0 <NoteLockNote>:
//**************************************************************************/
/*!
    @brief  Lock the Notecard using the platform-specific hook.
*/
/**************************************************************************/
void NoteLockNote() {
 80109b0:	b580      	push	{r7, lr}
 80109b2:	af00      	add	r7, sp, #0
    if (hookLockNote != NULL)
 80109b4:	4b04      	ldr	r3, [pc, #16]	; (80109c8 <NoteLockNote+0x18>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d002      	beq.n	80109c2 <NoteLockNote+0x12>
        hookLockNote();
 80109bc:	4b02      	ldr	r3, [pc, #8]	; (80109c8 <NoteLockNote+0x18>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4798      	blx	r3
}
 80109c2:	bf00      	nop
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	20000250 	.word	0x20000250

080109cc <NoteUnlockNote>:
//**************************************************************************/
/*!
    @brief  Unlock the Notecard using the platform-specific hook.
*/
/**************************************************************************/
void NoteUnlockNote() {
 80109cc:	b580      	push	{r7, lr}
 80109ce:	af00      	add	r7, sp, #0
    if (hookUnlockNote != NULL)
 80109d0:	4b04      	ldr	r3, [pc, #16]	; (80109e4 <NoteUnlockNote+0x18>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d002      	beq.n	80109de <NoteUnlockNote+0x12>
        hookUnlockNote();
 80109d8:	4b02      	ldr	r3, [pc, #8]	; (80109e4 <NoteUnlockNote+0x18>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	4798      	blx	r3
}
 80109de:	bf00      	nop
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	20000254 	.word	0x20000254

080109e8 <NoteI2CReset>:
/*!
    @brief  Reset the I2C bus using the platform-specific hook.
    @returns A boolean indicating whether the I2C bus was reset.
*/
/**************************************************************************/
bool NoteI2CReset() {
 80109e8:	b580      	push	{r7, lr}
 80109ea:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceI2C && hookI2CReset != NULL) {
 80109ec:	4b07      	ldr	r3, [pc, #28]	; (8010a0c <NoteI2CReset+0x24>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2b02      	cmp	r3, #2
 80109f2:	d108      	bne.n	8010a06 <NoteI2CReset+0x1e>
 80109f4:	4b06      	ldr	r3, [pc, #24]	; (8010a10 <NoteI2CReset+0x28>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d004      	beq.n	8010a06 <NoteI2CReset+0x1e>
        return hookI2CReset();
 80109fc:	4b04      	ldr	r3, [pc, #16]	; (8010a10 <NoteI2CReset+0x28>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4798      	blx	r3
 8010a02:	4603      	mov	r3, r0
 8010a04:	e000      	b.n	8010a08 <NoteI2CReset+0x20>
	}
	return false;
 8010a06:	2300      	movs	r3, #0
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	20000268 	.word	0x20000268
 8010a10:	20000274 	.word	0x20000274

08010a14 <NoteI2CTransmit>:
    @param   Size The length of bytes.
    @returns A c-string from the platform-specific hook, or an error string
             if the bus is not active.
*/
/**************************************************************************/
const char *NoteI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size) {
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	6039      	str	r1, [r7, #0]
 8010a1e:	80fb      	strh	r3, [r7, #6]
 8010a20:	4613      	mov	r3, r2
 8010a22:	80bb      	strh	r3, [r7, #4]
    if (hookActiveInterface == interfaceI2C && hookI2CTransmit != NULL) {
 8010a24:	4b0a      	ldr	r3, [pc, #40]	; (8010a50 <NoteI2CTransmit+0x3c>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	2b02      	cmp	r3, #2
 8010a2a:	d10b      	bne.n	8010a44 <NoteI2CTransmit+0x30>
 8010a2c:	4b09      	ldr	r3, [pc, #36]	; (8010a54 <NoteI2CTransmit+0x40>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d007      	beq.n	8010a44 <NoteI2CTransmit+0x30>
        return hookI2CTransmit(DevAddress, pBuffer, Size);
 8010a34:	4b07      	ldr	r3, [pc, #28]	; (8010a54 <NoteI2CTransmit+0x40>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	88ba      	ldrh	r2, [r7, #4]
 8010a3a:	88f8      	ldrh	r0, [r7, #6]
 8010a3c:	6839      	ldr	r1, [r7, #0]
 8010a3e:	4798      	blx	r3
 8010a40:	4603      	mov	r3, r0
 8010a42:	e000      	b.n	8010a46 <NoteI2CTransmit+0x32>
	}
    return "i2c not active";
 8010a44:	4b04      	ldr	r3, [pc, #16]	; (8010a58 <NoteI2CTransmit+0x44>)
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	20000268 	.word	0x20000268
 8010a54:	20000278 	.word	0x20000278
 8010a58:	08011d60 	.word	0x08011d60

08010a5c <NoteI2CReceive>:
    @param   available (out) The number of bytes left to read.
    @returns A c-string from the platform-specific hook, or an error string
             if the bus is not active.
*/
/**************************************************************************/
const char *NoteI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *available) {
 8010a5c:	b590      	push	{r4, r7, lr}
 8010a5e:	b085      	sub	sp, #20
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60b9      	str	r1, [r7, #8]
 8010a64:	607b      	str	r3, [r7, #4]
 8010a66:	4603      	mov	r3, r0
 8010a68:	81fb      	strh	r3, [r7, #14]
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	81bb      	strh	r3, [r7, #12]
    if (hookActiveInterface == interfaceI2C && hookI2CReceive != NULL) {
 8010a6e:	4b0b      	ldr	r3, [pc, #44]	; (8010a9c <NoteI2CReceive+0x40>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2b02      	cmp	r3, #2
 8010a74:	d10c      	bne.n	8010a90 <NoteI2CReceive+0x34>
 8010a76:	4b0a      	ldr	r3, [pc, #40]	; (8010aa0 <NoteI2CReceive+0x44>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d008      	beq.n	8010a90 <NoteI2CReceive+0x34>
        return hookI2CReceive(DevAddress, pBuffer, Size, available);
 8010a7e:	4b08      	ldr	r3, [pc, #32]	; (8010aa0 <NoteI2CReceive+0x44>)
 8010a80:	681c      	ldr	r4, [r3, #0]
 8010a82:	89ba      	ldrh	r2, [r7, #12]
 8010a84:	89f8      	ldrh	r0, [r7, #14]
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	68b9      	ldr	r1, [r7, #8]
 8010a8a:	47a0      	blx	r4
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	e000      	b.n	8010a92 <NoteI2CReceive+0x36>
	}
    return "i2c not active";
 8010a90:	4b04      	ldr	r3, [pc, #16]	; (8010aa4 <NoteI2CReceive+0x48>)
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3714      	adds	r7, #20
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd90      	pop	{r4, r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	20000268 	.word	0x20000268
 8010aa0:	2000027c 	.word	0x2000027c
 8010aa4:	08011d60 	.word	0x08011d60

08010aa8 <NoteI2CAddress>:
/*!
    @brief  Get the I2C address of the Notecard.
    @returns The current I2C address.
*/
/**************************************************************************/
uint32_t NoteI2CAddress() {
 8010aa8:	b480      	push	{r7}
 8010aaa:	af00      	add	r7, sp, #0
    if (i2cAddress == NOTE_I2C_MAX_DEFAULT)
 8010aac:	4b06      	ldr	r3, [pc, #24]	; (8010ac8 <NoteI2CAddress+0x20>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d101      	bne.n	8010ab8 <NoteI2CAddress+0x10>
        return 0x17;
 8010ab4:	2317      	movs	r3, #23
 8010ab6:	e001      	b.n	8010abc <NoteI2CAddress+0x14>
    return i2cAddress;
 8010ab8:	4b03      	ldr	r3, [pc, #12]	; (8010ac8 <NoteI2CAddress+0x20>)
 8010aba:	681b      	ldr	r3, [r3, #0]
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr
 8010ac6:	bf00      	nop
 8010ac8:	2000026c 	.word	0x2000026c

08010acc <NoteI2CMax>:
    @brief  Determine the maximum number of bytes for each segment of
            data sent to the Notecard over I2C.
    @returns A 32-bit integer of the maximum number of bytes per I2C segment.
*/
/**************************************************************************/
uint32_t NoteI2CMax() {
 8010acc:	b480      	push	{r7}
 8010ace:	af00      	add	r7, sp, #0
    // Many Arduino libraries (such as ESP32) have a limit less than 32, so if the max isn't specified
    // we must assume the worst and segment the I2C messages into very tiny chunks.
    if (i2cMax == NOTE_I2C_MAX_DEFAULT)
 8010ad0:	4b09      	ldr	r3, [pc, #36]	; (8010af8 <NoteI2CMax+0x2c>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d101      	bne.n	8010adc <NoteI2CMax+0x10>
        return 30;
 8010ad8:	231e      	movs	r3, #30
 8010ada:	e008      	b.n	8010aee <NoteI2CMax+0x22>
    // Note design specs
    if (i2cMax > 127)
 8010adc:	4b06      	ldr	r3, [pc, #24]	; (8010af8 <NoteI2CMax+0x2c>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8010ae2:	d902      	bls.n	8010aea <NoteI2CMax+0x1e>
        i2cMax = 127;
 8010ae4:	4b04      	ldr	r3, [pc, #16]	; (8010af8 <NoteI2CMax+0x2c>)
 8010ae6:	227f      	movs	r2, #127	; 0x7f
 8010ae8:	601a      	str	r2, [r3, #0]
    return i2cMax;
 8010aea:	4b03      	ldr	r3, [pc, #12]	; (8010af8 <NoteI2CMax+0x2c>)
 8010aec:	681b      	ldr	r3, [r3, #0]
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr
 8010af8:	20000270 	.word	0x20000270

08010afc <NoteHardReset>:
    @brief  Perform a hard reset on the Notecard using the platform-specific
            hook.
    @returns A boolean indicating whether the Notecard has been reset.
*/
/**************************************************************************/
bool NoteHardReset() {
 8010afc:	b580      	push	{r7, lr}
 8010afe:	af00      	add	r7, sp, #0
    if (notecardReset == NULL)
 8010b00:	4b05      	ldr	r3, [pc, #20]	; (8010b18 <NoteHardReset+0x1c>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d101      	bne.n	8010b0c <NoteHardReset+0x10>
        return false;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	e003      	b.n	8010b14 <NoteHardReset+0x18>
    return notecardReset();
 8010b0c:	4b02      	ldr	r3, [pc, #8]	; (8010b18 <NoteHardReset+0x1c>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4798      	blx	r3
 8010b12:	4603      	mov	r3, r0
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	20000280 	.word	0x20000280

08010b1c <NoteJSONTransaction>:
    @param   jsonResponse (out) A buffer with the JSON response.
    @returns NULL if successful, or an error string if the transaction failed
             or the hook has not been set.
*/
/**************************************************************************/
const char *NoteJSONTransaction(char *json, char **jsonResponse) {
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6039      	str	r1, [r7, #0]
    if (notecardTransaction == NULL)
 8010b26:	4b08      	ldr	r3, [pc, #32]	; (8010b48 <NoteJSONTransaction+0x2c>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d101      	bne.n	8010b32 <NoteJSONTransaction+0x16>
        return "notecard not initialized";
 8010b2e:	4b07      	ldr	r3, [pc, #28]	; (8010b4c <NoteJSONTransaction+0x30>)
 8010b30:	e005      	b.n	8010b3e <NoteJSONTransaction+0x22>
    return notecardTransaction(json, jsonResponse);
 8010b32:	4b05      	ldr	r3, [pc, #20]	; (8010b48 <NoteJSONTransaction+0x2c>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	6839      	ldr	r1, [r7, #0]
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	4798      	blx	r3
 8010b3c:	4603      	mov	r3, r0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3708      	adds	r7, #8
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	20000284 	.word	0x20000284
 8010b4c:	08011d70 	.word	0x08011d70

08010b50 <_DelayIO>:
						implementations of I2C, and as a result we introduce an intentional
						delay before each and every I2C I/O.The timing was computed
						empirically based on a number of commercial devices.
*/
/**************************************************************************/
static void _DelayIO() {
 8010b50:	b580      	push	{r7, lr}
 8010b52:	af00      	add	r7, sp, #0
	_DelayMs(6);
 8010b54:	2006      	movs	r0, #6
 8010b56:	f7ff fed5 	bl	8010904 <NoteDelayMs>
}
 8010b5a:	bf00      	nop
 8010b5c:	bd80      	pop	{r7, pc}
	...

08010b60 <i2cNoteTransaction>:
							 An out parameter c-string buffer that will contain the JSON
							 response from the Notercard.
	@returns a c-string with an error, or `NULL` if no error ocurred.
*/
/**************************************************************************/
const char *i2cNoteTransaction(char *json, char **jsonResponse) {
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b092      	sub	sp, #72	; 0x48
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]

	// Append '\n' to the transaction
	int jsonLen = strlen(json)+1;
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f7ef fb52 	bl	8000214 <strlen>
 8010b70:	4603      	mov	r3, r0
 8010b72:	3301      	adds	r3, #1
 8010b74:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t *transmitBuf = (uint8_t *) _Malloc(jsonLen);
 8010b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7ff fed5 	bl	8010928 <NoteMalloc>
 8010b7e:	6278      	str	r0, [r7, #36]	; 0x24
	if (transmitBuf == NULL)
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d101      	bne.n	8010b8a <i2cNoteTransaction+0x2a>
		return ERRSTR("insufficient memory",c_mem);
 8010b86:	4b8c      	ldr	r3, [pc, #560]	; (8010db8 <i2cNoteTransaction+0x258>)
 8010b88:	e112      	b.n	8010db0 <i2cNoteTransaction+0x250>
	memcpy(transmitBuf, json, jsonLen-1);
 8010b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b8c:	3b01      	subs	r3, #1
 8010b8e:	461a      	mov	r2, r3
 8010b90:	6879      	ldr	r1, [r7, #4]
 8010b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b94:	f000 fb22 	bl	80111dc <memcpy>
	transmitBuf[jsonLen-1] = '\n';
 8010b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b9a:	3b01      	subs	r3, #1
 8010b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b9e:	4413      	add	r3, r2
 8010ba0:	220a      	movs	r2, #10
 8010ba2:	701a      	strb	r2, [r3, #0]

	// Transmit the request in chunks, but also in segments so as not to overwhelm the notecard's interrupt buffers
	const char *estr;
	uint8_t *chunk = transmitBuf;
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba6:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t sentInSegment = 0;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (jsonLen > 0) {
 8010bac:	e04b      	b.n	8010c46 <i2cNoteTransaction+0xe6>
		int chunklen = (uint8_t) (jsonLen > (int)_I2CMax() ? (int)_I2CMax() : jsonLen);
 8010bae:	f7ff ff8d 	bl	8010acc <NoteI2CMax>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	dd04      	ble.n	8010bc6 <i2cNoteTransaction+0x66>
 8010bbc:	f7ff ff86 	bl	8010acc <NoteI2CMax>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	b2db      	uxtb	r3, r3
 8010bc4:	e001      	b.n	8010bca <i2cNoteTransaction+0x6a>
 8010bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	613b      	str	r3, [r7, #16]
		_LockI2C();
 8010bcc:	f7ff fed4 	bl	8010978 <NoteLockI2C>
		_DelayIO();
 8010bd0:	f7ff ffbe 	bl	8010b50 <_DelayIO>
		estr = _I2CTransmit(_I2CAddress(), chunk, chunklen);
 8010bd4:	f7ff ff68 	bl	8010aa8 <NoteI2CAddress>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	693a      	ldr	r2, [r7, #16]
 8010bde:	b292      	uxth	r2, r2
 8010be0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7ff ff16 	bl	8010a14 <NoteI2CTransmit>
 8010be8:	60f8      	str	r0, [r7, #12]
		if (estr != NULL) {
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d011      	beq.n	8010c14 <i2cNoteTransaction+0xb4>
			_Free(transmitBuf);
 8010bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bf2:	f7ff feaf 	bl	8010954 <NoteFree>
			_I2CReset();
 8010bf6:	f7ff fef7 	bl	80109e8 <NoteI2CReset>
			_UnlockI2C();
 8010bfa:	f7ff fecb 	bl	8010994 <NoteUnlockI2C>
#ifdef ERRDBG
			_Debug("i2c transmit: ");
 8010bfe:	486f      	ldr	r0, [pc, #444]	; (8010dbc <i2cNoteTransaction+0x25c>)
 8010c00:	f7ff fe5e 	bl	80108c0 <NoteDebug>
			_Debug(estr);
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f7ff fe5b 	bl	80108c0 <NoteDebug>
			_Debug("\n");
 8010c0a:	486d      	ldr	r0, [pc, #436]	; (8010dc0 <i2cNoteTransaction+0x260>)
 8010c0c:	f7ff fe58 	bl	80108c0 <NoteDebug>
#endif
			return estr;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	e0cd      	b.n	8010db0 <i2cNoteTransaction+0x250>
		}
		_UnlockI2C();
 8010c14:	f7ff febe 	bl	8010994 <NoteUnlockI2C>
		chunk += chunklen;
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010c1c:	4413      	add	r3, r2
 8010c1e:	643b      	str	r3, [r7, #64]	; 0x40
		jsonLen -= chunklen;
 8010c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c22:	693b      	ldr	r3, [r7, #16]
 8010c24:	1ad3      	subs	r3, r2, r3
 8010c26:	647b      	str	r3, [r7, #68]	; 0x44
		sentInSegment += chunklen;
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c2c:	4413      	add	r3, r2
 8010c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (sentInSegment > CARD_REQUEST_I2C_SEGMENT_MAX_LEN) {
 8010c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c32:	2bfa      	cmp	r3, #250	; 0xfa
 8010c34:	d904      	bls.n	8010c40 <i2cNoteTransaction+0xe0>
			sentInSegment = 0;
 8010c36:	2300      	movs	r3, #0
 8010c38:	63fb      	str	r3, [r7, #60]	; 0x3c
			_DelayMs(CARD_REQUEST_I2C_SEGMENT_DELAY_MS);
 8010c3a:	20fa      	movs	r0, #250	; 0xfa
 8010c3c:	f7ff fe62 	bl	8010904 <NoteDelayMs>
		}
		_DelayMs(CARD_REQUEST_I2C_CHUNK_DELAY_MS);
 8010c40:	2014      	movs	r0, #20
 8010c42:	f7ff fe5f 	bl	8010904 <NoteDelayMs>
	while (jsonLen > 0) {
 8010c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	dcb0      	bgt.n	8010bae <i2cNoteTransaction+0x4e>
	}

	// Free the transmit buffer
	_Free(transmitBuf);
 8010c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c4e:	f7ff fe81 	bl	8010954 <NoteFree>

	// Dynamically grow the buffer as we read.	Note that we always put the +1 in the alloc
	// so we can be assured that it can be null-terminated, which must be the case because
	// our json parser requires a null-terminated string.
	int growlen = ALLOC_CHUNK;
 8010c52:	2380      	movs	r3, #128	; 0x80
 8010c54:	623b      	str	r3, [r7, #32]
	int jsonbufAllocLen = growlen;
 8010c56:	6a3b      	ldr	r3, [r7, #32]
 8010c58:	63bb      	str	r3, [r7, #56]	; 0x38
	char *jsonbuf = (char *) _Malloc(jsonbufAllocLen+1);
 8010c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7ff fe62 	bl	8010928 <NoteMalloc>
 8010c64:	6378      	str	r0, [r7, #52]	; 0x34
	if (jsonbuf == NULL) {
 8010c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d104      	bne.n	8010c76 <i2cNoteTransaction+0x116>
#ifdef ERRDBG
		_Debug("transaction: jsonbuf malloc failed\n");
 8010c6c:	4855      	ldr	r0, [pc, #340]	; (8010dc4 <i2cNoteTransaction+0x264>)
 8010c6e:	f7ff fe27 	bl	80108c0 <NoteDebug>
#endif
		return ERRSTR("insufficient memory",c_mem);
 8010c72:	4b51      	ldr	r3, [pc, #324]	; (8010db8 <i2cNoteTransaction+0x258>)
 8010c74:	e09c      	b.n	8010db0 <i2cNoteTransaction+0x250>
	}

	// Loop, building a reply buffer out of received chunks.  We'll build the reply in the same
	// buffer we used to transmit, and will grow it as necessary.
	bool receivedNewline = false;
 8010c76:	2300      	movs	r3, #0
 8010c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int jsonbufLen = 0;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int chunklen = 0;
 8010c80:	2300      	movs	r3, #0
 8010c82:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t startMs = _GetMs();
 8010c84:	f7ff fe2e 	bl	80108e4 <NoteGetMs>
 8010c88:	61f8      	str	r0, [r7, #28]
	while (true) {

		// Grow the buffer as necessary to read this next chunk
		if (jsonbufLen + chunklen > jsonbufAllocLen) {
 8010c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8e:	4413      	add	r3, r2
 8010c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c92:	429a      	cmp	r2, r3
 8010c94:	da28      	bge.n	8010ce8 <i2cNoteTransaction+0x188>
			if (chunklen > growlen)
 8010c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c98:	6a3b      	ldr	r3, [r7, #32]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	dd04      	ble.n	8010ca8 <i2cNoteTransaction+0x148>
				jsonbufAllocLen += chunklen;
 8010c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca2:	4413      	add	r3, r2
 8010ca4:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ca6:	e003      	b.n	8010cb0 <i2cNoteTransaction+0x150>
			else
				jsonbufAllocLen += growlen;
 8010ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010caa:	6a3b      	ldr	r3, [r7, #32]
 8010cac:	4413      	add	r3, r2
 8010cae:	63bb      	str	r3, [r7, #56]	; 0x38
			char *jsonbufNew = (char *) _Malloc(jsonbufAllocLen+1);
 8010cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7ff fe37 	bl	8010928 <NoteMalloc>
 8010cba:	61b8      	str	r0, [r7, #24]
			if (jsonbufNew == NULL) {
 8010cbc:	69bb      	ldr	r3, [r7, #24]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d107      	bne.n	8010cd2 <i2cNoteTransaction+0x172>
#ifdef ERRDBG
				_Debug("transaction: jsonbuf grow malloc failed\n");
 8010cc2:	4841      	ldr	r0, [pc, #260]	; (8010dc8 <i2cNoteTransaction+0x268>)
 8010cc4:	f7ff fdfc 	bl	80108c0 <NoteDebug>
#endif
				_Free(jsonbuf);
 8010cc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010cca:	f7ff fe43 	bl	8010954 <NoteFree>
				return ERRSTR("insufficient memory",c_mem);
 8010cce:	4b3a      	ldr	r3, [pc, #232]	; (8010db8 <i2cNoteTransaction+0x258>)
 8010cd0:	e06e      	b.n	8010db0 <i2cNoteTransaction+0x250>
			}
			memcpy(jsonbufNew, jsonbuf, jsonbufLen);
 8010cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010cd8:	69b8      	ldr	r0, [r7, #24]
 8010cda:	f000 fa7f 	bl	80111dc <memcpy>
			_Free(jsonbuf);
 8010cde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ce0:	f7ff fe38 	bl	8010954 <NoteFree>
			jsonbuf = jsonbufNew;
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	637b      	str	r3, [r7, #52]	; 0x34
		}

		// Read the chunk
		uint32_t available;
		_LockI2C();
 8010ce8:	f7ff fe46 	bl	8010978 <NoteLockI2C>
		_DelayIO();
 8010cec:	f7ff ff30 	bl	8010b50 <_DelayIO>
		const char *err = _I2CReceive(_I2CAddress(), (uint8_t *) &jsonbuf[jsonbufLen], chunklen, &available);
 8010cf0:	f7ff feda 	bl	8010aa8 <NoteI2CAddress>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	b298      	uxth	r0, r3
 8010cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cfc:	18d1      	adds	r1, r2, r3
 8010cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d00:	b29a      	uxth	r2, r3
 8010d02:	f107 0308 	add.w	r3, r7, #8
 8010d06:	f7ff fea9 	bl	8010a5c <NoteI2CReceive>
 8010d0a:	6178      	str	r0, [r7, #20]
		_UnlockI2C();
 8010d0c:	f7ff fe42 	bl	8010994 <NoteUnlockI2C>
		if (err != NULL) {
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d007      	beq.n	8010d26 <i2cNoteTransaction+0x1c6>
			_Free(jsonbuf);
 8010d16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010d18:	f7ff fe1c 	bl	8010954 <NoteFree>
#ifdef ERRDBG
			_Debug("i2c receive error\n");
 8010d1c:	482b      	ldr	r0, [pc, #172]	; (8010dcc <i2cNoteTransaction+0x26c>)
 8010d1e:	f7ff fdcf 	bl	80108c0 <NoteDebug>
#endif
			return err;
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	e044      	b.n	8010db0 <i2cNoteTransaction+0x250>
		}

		// We've now received the chunk
		jsonbufLen += chunklen;
 8010d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2a:	4413      	add	r3, r2
 8010d2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		// If the last byte of the chunk is \n, chances are that we're done.  However, just so
		// that we pull everything pending from the module, we only exit when we've received
		// a newline AND there's nothing left available from the module.
		if (jsonbufLen > 0 && jsonbuf[jsonbufLen-1] == '\n')
 8010d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	dd09      	ble.n	8010d48 <i2cNoteTransaction+0x1e8>
 8010d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d36:	3b01      	subs	r3, #1
 8010d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d3a:	4413      	add	r3, r2
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	2b0a      	cmp	r3, #10
 8010d40:	d102      	bne.n	8010d48 <i2cNoteTransaction+0x1e8>
			receivedNewline = true;
 8010d42:	2301      	movs	r3, #1
 8010d44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// For the next iteration, read the min of what's available and what we're permitted to read
		chunklen = (int) (available > _I2CMax() ? _I2CMax() : available);
 8010d48:	f7ff fec0 	bl	8010acc <NoteI2CMax>
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d203      	bcs.n	8010d5c <i2cNoteTransaction+0x1fc>
 8010d54:	f7ff feba 	bl	8010acc <NoteI2CMax>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	e000      	b.n	8010d5e <i2cNoteTransaction+0x1fe>
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	62bb      	str	r3, [r7, #40]	; 0x28

		// If there's something available on the notecard for us to receive, do it
		if (chunklen > 0)
 8010d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	dc22      	bgt.n	8010dac <i2cNoteTransaction+0x24c>
			continue;

		// If there's nothing available AND we've received a newline, we're done
		if (receivedNewline)
 8010d66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d009      	beq.n	8010d82 <i2cNoteTransaction+0x222>
		_DelayMs(50);

	}

	// Null-terminate it, using the +1 space that we'd allocated in the buffer
	jsonbuf[jsonbufLen] = '\0';
 8010d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d72:	4413      	add	r3, r2
 8010d74:	2200      	movs	r2, #0
 8010d76:	701a      	strb	r2, [r3, #0]

	// Return it
	*jsonResponse = jsonbuf;
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d7c:	601a      	str	r2, [r3, #0]
	return NULL;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	e016      	b.n	8010db0 <i2cNoteTransaction+0x250>
		if (_GetMs() >= startMs + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 8010d82:	f7ff fdaf 	bl	80108e4 <NoteGetMs>
 8010d86:	4602      	mov	r2, r0
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8010d8e:	3310      	adds	r3, #16
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d307      	bcc.n	8010da4 <i2cNoteTransaction+0x244>
			_Free(jsonbuf);
 8010d94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010d96:	f7ff fddd 	bl	8010954 <NoteFree>
			_Debug("reply to request didn't arrive from module in time\n");
 8010d9a:	480d      	ldr	r0, [pc, #52]	; (8010dd0 <i2cNoteTransaction+0x270>)
 8010d9c:	f7ff fd90 	bl	80108c0 <NoteDebug>
			return ERRSTR("notecard request or response was lost",c_timeout);
 8010da0:	4b0c      	ldr	r3, [pc, #48]	; (8010dd4 <i2cNoteTransaction+0x274>)
 8010da2:	e005      	b.n	8010db0 <i2cNoteTransaction+0x250>
		_DelayMs(50);
 8010da4:	2032      	movs	r0, #50	; 0x32
 8010da6:	f7ff fdad 	bl	8010904 <NoteDelayMs>
 8010daa:	e76e      	b.n	8010c8a <i2cNoteTransaction+0x12a>
			continue;
 8010dac:	bf00      	nop
	while (true) {
 8010dae:	e76c      	b.n	8010c8a <i2cNoteTransaction+0x12a>
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3748      	adds	r7, #72	; 0x48
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	08011d8c 	.word	0x08011d8c
 8010dbc:	08011da0 	.word	0x08011da0
 8010dc0:	08011db0 	.word	0x08011db0
 8010dc4:	08011db4 	.word	0x08011db4
 8010dc8:	08011dd8 	.word	0x08011dd8
 8010dcc:	08011e04 	.word	0x08011e04
 8010dd0:	08011e18 	.word	0x08011e18
 8010dd4:	08011e4c 	.word	0x08011e4c

08010dd8 <i2cNoteReset>:
    @brief  Initialize or re-initialize the I2C subsystem, returning false if
            anything fails.
    @returns a boolean. `true` if the reset was successful, `false`, if not.
*/
/**************************************************************************/
bool i2cNoteReset() {
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b0a6      	sub	sp, #152	; 0x98
 8010ddc:	af00      	add	r7, sp, #0

	// Reset the I2C subsystem and exit if failure
	_LockI2C();
 8010dde:	f7ff fdcb 	bl	8010978 <NoteLockI2C>
	bool success = _I2CReset();
 8010de2:	f7ff fe01 	bl	80109e8 <NoteI2CReset>
 8010de6:	4603      	mov	r3, r0
 8010de8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	_UnlockI2C();
 8010dec:	f7ff fdd2 	bl	8010994 <NoteUnlockI2C>
	if (!success)
 8010df0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8010df4:	f083 0301 	eor.w	r3, r3, #1
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d001      	beq.n	8010e02 <i2cNoteReset+0x2a>
		return false;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	e06e      	b.n	8010ee0 <i2cNoteReset+0x108>

	// Synchronize by guaranteeing not only that I2C works, but that we drain the remainder of any
	// pending partial reply from a previously-aborted session.	 This outer loop does retries on
	// I2C error, and is simply here for robustness.
	bool notecardReady = false;
 8010e02:	2300      	movs	r3, #0
 8010e04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	int retries;
	for (retries=0; !notecardReady && retries<3; retries++) {
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010e0e:	e058      	b.n	8010ec2 <i2cNoteReset+0xea>

#ifdef ERRDBG
		_Debug("i2c reset\n");
 8010e10:	4835      	ldr	r0, [pc, #212]	; (8010ee8 <i2cNoteReset+0x110>)
 8010e12:	f7ff fd55 	bl	80108c0 <NoteDebug>
#endif

		// Loop to drain all chunks of data that may be ready to transmit to us
		int chunklen = 0;
 8010e16:	2300      	movs	r3, #0
 8010e18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while (true) {

			// Read the next chunk of available data
			uint32_t available;
			uint8_t buffer[128];
			chunklen = (chunklen > (int)sizeof(buffer)) ? (int)sizeof(buffer) : chunklen;
 8010e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e20:	2b80      	cmp	r3, #128	; 0x80
 8010e22:	bfa8      	it	ge
 8010e24:	2380      	movge	r3, #128	; 0x80
 8010e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			chunklen = (chunklen > (int)_I2CMax()) ? (int)_I2CMax() : chunklen;
 8010e2a:	f7ff fe4f 	bl	8010acc <NoteI2CMax>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	461a      	mov	r2, r3
 8010e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e36:	4293      	cmp	r3, r2
 8010e38:	dd03      	ble.n	8010e42 <i2cNoteReset+0x6a>
 8010e3a:	f7ff fe47 	bl	8010acc <NoteI2CMax>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	e001      	b.n	8010e46 <i2cNoteReset+0x6e>
 8010e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			_LockI2C();
 8010e4a:	f7ff fd95 	bl	8010978 <NoteLockI2C>
			_DelayIO();
 8010e4e:	f7ff fe7f 	bl	8010b50 <_DelayIO>
			const char *err = _I2CReceive(_I2CAddress(), buffer, chunklen, &available);
 8010e52:	f7ff fe29 	bl	8010aa8 <NoteI2CAddress>
 8010e56:	4603      	mov	r3, r0
 8010e58:	b298      	uxth	r0, r3
 8010e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010e64:	4639      	mov	r1, r7
 8010e66:	f7ff fdf9 	bl	8010a5c <NoteI2CReceive>
 8010e6a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			_UnlockI2C();
 8010e6e:	f7ff fd91 	bl	8010994 <NoteUnlockI2C>
			if (err) break;
 8010e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d10c      	bne.n	8010e94 <i2cNoteReset+0xbc>

			// If nothing left, we're ready to transmit a command to receive the data
			if (available == 0) {
 8010e7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d103      	bne.n	8010e8a <i2cNoteReset+0xb2>
				notecardReady = true;
 8010e82:	2301      	movs	r3, #1
 8010e84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8010e88:	e005      	b.n	8010e96 <i2cNoteReset+0xbe>
			}

			// Read everything that's left on the module
			chunklen = available;
 8010e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010e8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while (true) {
 8010e92:	e7c3      	b.n	8010e1c <i2cNoteReset+0x44>
			if (err) break;
 8010e94:	bf00      	nop

		}

		// Exit loop if success
		if (notecardReady)
 8010e96:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d11d      	bne.n	8010eda <i2cNoteReset+0x102>
			break;

		// Reinitialize i2c if there's no response
		_LockI2C();
 8010e9e:	f7ff fd6b 	bl	8010978 <NoteLockI2C>
		_I2CReset();
 8010ea2:	f7ff fda1 	bl	80109e8 <NoteI2CReset>
		_UnlockI2C();
 8010ea6:	f7ff fd75 	bl	8010994 <NoteUnlockI2C>
		_Debug(ERRSTR("notecard not responding\n", "no notecard\n"));
 8010eaa:	4810      	ldr	r0, [pc, #64]	; (8010eec <i2cNoteReset+0x114>)
 8010eac:	f7ff fd08 	bl	80108c0 <NoteDebug>
		_DelayMs(2000);
 8010eb0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010eb4:	f7ff fd26 	bl	8010904 <NoteDelayMs>
	for (retries=0; !notecardReady && retries<3; retries++) {
 8010eb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010ec2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010ec6:	f083 0301 	eor.w	r3, r3, #1
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d005      	beq.n	8010edc <i2cNoteReset+0x104>
 8010ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ed4:	2b02      	cmp	r3, #2
 8010ed6:	dd9b      	ble.n	8010e10 <i2cNoteReset+0x38>
 8010ed8:	e000      	b.n	8010edc <i2cNoteReset+0x104>
			break;
 8010eda:	bf00      	nop

	}

	// Done
	return notecardReady;
 8010edc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3798      	adds	r7, #152	; 0x98
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	08011e74 	.word	0x08011e74
 8010eec:	08011e80 	.word	0x08011e80

08010ef0 <errDoc>:
    @param   errmsg
               The error message from the Notecard
	@returns a `J` cJSON object with the error response.
*/
/**************************************************************************/
static J *errDoc(const char *errmsg) {
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b084      	sub	sp, #16
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
    J *rspdoc = JCreateObject();
 8010ef8:	f7ff fa4d 	bl	8010396 <JCreateObject>
 8010efc:	60f8      	str	r0, [r7, #12]
    if (rspdoc != NULL) {
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d006      	beq.n	8010f12 <errDoc+0x22>
        JAddStringToObject(rspdoc, c_err, errmsg);
 8010f04:	4b0c      	ldr	r3, [pc, #48]	; (8010f38 <errDoc+0x48>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	687a      	ldr	r2, [r7, #4]
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	68f8      	ldr	r0, [r7, #12]
 8010f0e:	f7ff f9a7 	bl	8010260 <JAddStringToObject>
	}
	if (suppressShowTransactions == 0) {
 8010f12:	4b0a      	ldr	r3, [pc, #40]	; (8010f3c <errDoc+0x4c>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d108      	bne.n	8010f2c <errDoc+0x3c>
	    _Debug("{\"err\":\"");
 8010f1a:	4809      	ldr	r0, [pc, #36]	; (8010f40 <errDoc+0x50>)
 8010f1c:	f7ff fcd0 	bl	80108c0 <NoteDebug>
		_Debug(errmsg);
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f7ff fccd 	bl	80108c0 <NoteDebug>
		_Debug("\"}\n");
 8010f26:	4807      	ldr	r0, [pc, #28]	; (8010f44 <errDoc+0x54>)
 8010f28:	f7ff fcca 	bl	80108c0 <NoteDebug>
	}
    return rspdoc;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3710      	adds	r7, #16
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	2000001c 	.word	0x2000001c
 8010f3c:	20000288 	.word	0x20000288
 8010f40:	08011e9c 	.word	0x08011e9c
 8010f44:	08011ea8 	.word	0x08011ea8

08010f48 <NoteNewRequest>:
    @param   request
               The name of the request, for example `hub.set`.
	@returns a `J` cJSON object with the request name pre-populated.
*/
/**************************************************************************/
J *NoteNewRequest(const char *request) {
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
    J *reqdoc = JCreateObject();
 8010f50:	f7ff fa21 	bl	8010396 <JCreateObject>
 8010f54:	60f8      	str	r0, [r7, #12]
    if (reqdoc != NULL)
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d006      	beq.n	8010f6a <NoteNewRequest+0x22>
        JAddStringToObject(reqdoc, c_req, request);
 8010f5c:	4b05      	ldr	r3, [pc, #20]	; (8010f74 <NoteNewRequest+0x2c>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	4619      	mov	r1, r3
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	f7ff f97b 	bl	8010260 <JAddStringToObject>
    return reqdoc;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3710      	adds	r7, #16
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	20000020 	.word	0x20000020

08010f78 <NoteRequest>:
	@returns a boolean. Returns `true` if successful or `false` if an error
            occurs, such as an out-of-memory or if an error was returned from
            the transaction in the c_err field.
*/
/**************************************************************************/
bool NoteRequest(J *req) {
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b084      	sub	sp, #16
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequest(NoteNewRequest("xxx"))
    if (req == NULL)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d101      	bne.n	8010f8a <NoteRequest+0x12>
        return false;
 8010f86:	2300      	movs	r3, #0
 8010f88:	e01a      	b.n	8010fc0 <NoteRequest+0x48>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 f81e 	bl	8010fcc <NoteTransaction>
 8010f90:	60f8      	str	r0, [r7, #12]
    if (rsp == NULL) {
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d104      	bne.n	8010fa2 <NoteRequest+0x2a>
        JDelete(req);
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f7fd faf8 	bl	800e58e <JDelete>
        return false;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	e00e      	b.n	8010fc0 <NoteRequest+0x48>
    }
    // Check for a transaction error, and exit
    bool success = JIsNullString(rsp, c_err);
 8010fa2:	4b09      	ldr	r3, [pc, #36]	; (8010fc8 <NoteRequest+0x50>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f7ff fa1c 	bl	80103e6 <JIsNullString>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	72fb      	strb	r3, [r7, #11]
    JDelete(req);
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f7fd faeb 	bl	800e58e <JDelete>
    JDelete(rsp);
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f7fd fae8 	bl	800e58e <JDelete>
    return success;
 8010fbe:	7afb      	ldrb	r3, [r7, #11]
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3710      	adds	r7, #16
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	2000001c 	.word	0x2000001c

08010fcc <NoteTransaction>:
               The `J` cJSON request object.
	@returns a `J` cJSON object with the response, or NULL if there is
             insufficient memory.
*/
/**************************************************************************/
J *NoteTransaction(J *req) {
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b08a      	sub	sp, #40	; 0x28
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]

    // If a reset of the module is required for any reason, do it now.
    // We must do this before acquiring lock.
    if (resetRequired) {
 8010fd4:	4b35      	ldr	r3, [pc, #212]	; (80110ac <NoteTransaction+0xe0>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d009      	beq.n	8010ff0 <NoteTransaction+0x24>
        if (!NoteReset())
 8010fdc:	f000 f87c 	bl	80110d8 <NoteReset>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	f083 0301 	eor.w	r3, r3, #1
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d001      	beq.n	8010ff0 <NoteTransaction+0x24>
            return NULL;
 8010fec:	2300      	movs	r3, #0
 8010fee:	e058      	b.n	80110a2 <NoteTransaction+0xd6>
    }

    // Lock
    _LockNote();
 8010ff0:	f7ff fcde 	bl	80109b0 <NoteLockNote>

    // Serialize the JSON requet
    char *json = JPrintUnformatted(req);
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7fe fb15 	bl	800f624 <JPrintUnformatted>
 8010ffa:	6278      	str	r0, [r7, #36]	; 0x24
    if (json == NULL) {
 8010ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d107      	bne.n	8011012 <NoteTransaction+0x46>
        J *rsp = errDoc(ERRSTR("can't convert to JSON",c_bad));
 8011002:	482b      	ldr	r0, [pc, #172]	; (80110b0 <NoteTransaction+0xe4>)
 8011004:	f7ff ff74 	bl	8010ef0 <errDoc>
 8011008:	6138      	str	r0, [r7, #16]
        _UnlockNote();
 801100a:	f7ff fcdf 	bl	80109cc <NoteUnlockNote>
        return rsp;
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	e047      	b.n	80110a2 <NoteTransaction+0xd6>
    }
    
	if (suppressShowTransactions == 0) {
 8011012:	4b28      	ldr	r3, [pc, #160]	; (80110b4 <NoteTransaction+0xe8>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d102      	bne.n	8011020 <NoteTransaction+0x54>
	    _Debugln(json);
 801101a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801101c:	f7ff fc3e 	bl	801089c <NoteDebugln>
	}

    // Pertform the transaction
    char *responseJSON;
    const char *errStr = _Transaction(json, &responseJSON);
 8011020:	f107 030c 	add.w	r3, r7, #12
 8011024:	4619      	mov	r1, r3
 8011026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011028:	f7ff fd78 	bl	8010b1c <NoteJSONTransaction>
 801102c:	6238      	str	r0, [r7, #32]

    // Free the json
    JFree(json);
 801102e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011030:	f7fd fa8e 	bl	800e550 <JFree>

    // If error, queue up a reset
    if (errStr != NULL) {
 8011034:	6a3b      	ldr	r3, [r7, #32]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d009      	beq.n	801104e <NoteTransaction+0x82>
		NoteResetRequired();
 801103a:	f000 f841 	bl	80110c0 <NoteResetRequired>
        J *rsp = errDoc(errStr);
 801103e:	6a38      	ldr	r0, [r7, #32]
 8011040:	f7ff ff56 	bl	8010ef0 <errDoc>
 8011044:	6178      	str	r0, [r7, #20]
        _UnlockNote();
 8011046:	f7ff fcc1 	bl	80109cc <NoteUnlockNote>
        return rsp;
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	e029      	b.n	80110a2 <NoteTransaction+0xd6>
    }

    // Parse the reply from the card on the input stream
    J *rspdoc = JParse(responseJSON);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	4618      	mov	r0, r3
 8011052:	f7fe fa75 	bl	800f540 <JParse>
 8011056:	61f8      	str	r0, [r7, #28]
    if (rspdoc == NULL) {
 8011058:	69fb      	ldr	r3, [r7, #28]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d112      	bne.n	8011084 <NoteTransaction+0xb8>
        _Debug("invalid JSON: ");
 801105e:	4816      	ldr	r0, [pc, #88]	; (80110b8 <NoteTransaction+0xec>)
 8011060:	f7ff fc2e 	bl	80108c0 <NoteDebug>
		_Debug(responseJSON);
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	4618      	mov	r0, r3
 8011068:	f7ff fc2a 	bl	80108c0 <NoteDebug>
        _Free(responseJSON);
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	4618      	mov	r0, r3
 8011070:	f7ff fc70 	bl	8010954 <NoteFree>
        J *rsp = errDoc(ERRSTR("unrecognized response from card",c_bad));
 8011074:	4811      	ldr	r0, [pc, #68]	; (80110bc <NoteTransaction+0xf0>)
 8011076:	f7ff ff3b 	bl	8010ef0 <errDoc>
 801107a:	61b8      	str	r0, [r7, #24]
        _UnlockNote();
 801107c:	f7ff fca6 	bl	80109cc <NoteUnlockNote>
        return rsp;
 8011080:	69bb      	ldr	r3, [r7, #24]
 8011082:	e00e      	b.n	80110a2 <NoteTransaction+0xd6>
    }

    // Debug
	if (suppressShowTransactions == 0) {
 8011084:	4b0b      	ldr	r3, [pc, #44]	; (80110b4 <NoteTransaction+0xe8>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d103      	bne.n	8011094 <NoteTransaction+0xc8>
	    _Debugln(responseJSON);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	4618      	mov	r0, r3
 8011090:	f7ff fc04 	bl	801089c <NoteDebugln>
	}

    // Discard the buffer now that it's parsed
    _Free(responseJSON);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	4618      	mov	r0, r3
 8011098:	f7ff fc5c 	bl	8010954 <NoteFree>

    // Unlock
    _UnlockNote();
 801109c:	f7ff fc96 	bl	80109cc <NoteUnlockNote>

    // Done
    return rspdoc;
 80110a0:	69fb      	ldr	r3, [r7, #28]
    
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3728      	adds	r7, #40	; 0x28
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	20000024 	.word	0x20000024
 80110b0:	08011eac 	.word	0x08011eac
 80110b4:	20000288 	.word	0x20000288
 80110b8:	08011ec4 	.word	0x08011ec4
 80110bc:	08011ed4 	.word	0x08011ed4

080110c0 <NoteResetRequired>:
/*!
    @brief  Mark that a reset will be required before doing further I/O on
            a given port.
*/
/**************************************************************************/
void NoteResetRequired() {
 80110c0:	b480      	push	{r7}
 80110c2:	af00      	add	r7, sp, #0
    resetRequired = true;
 80110c4:	4b03      	ldr	r3, [pc, #12]	; (80110d4 <NoteResetRequired+0x14>)
 80110c6:	2201      	movs	r2, #1
 80110c8:	701a      	strb	r2, [r3, #0]
}
 80110ca:	bf00      	nop
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr
 80110d4:	20000024 	.word	0x20000024

080110d8 <NoteReset>:
    @brief  Initialize or re-initialize the module, returning false if
            anything fails.
    @returns a boolean. `true` if the reset was successful, `false`, if not.
*/
/**************************************************************************/
bool NoteReset() {
 80110d8:	b580      	push	{r7, lr}
 80110da:	af00      	add	r7, sp, #0
    _LockNote();
 80110dc:	f7ff fc68 	bl	80109b0 <NoteLockNote>
    resetRequired = !_Reset();
 80110e0:	f7ff fd0c 	bl	8010afc <NoteHardReset>
 80110e4:	4603      	mov	r3, r0
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	bf14      	ite	ne
 80110ea:	2301      	movne	r3, #1
 80110ec:	2300      	moveq	r3, #0
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	f083 0301 	eor.w	r3, r3, #1
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	f003 0301 	and.w	r3, r3, #1
 80110fa:	b2da      	uxtb	r2, r3
 80110fc:	4b09      	ldr	r3, [pc, #36]	; (8011124 <NoteReset+0x4c>)
 80110fe:	701a      	strb	r2, [r3, #0]
    _UnlockNote();
 8011100:	f7ff fc64 	bl	80109cc <NoteUnlockNote>
    return !resetRequired;
 8011104:	4b07      	ldr	r3, [pc, #28]	; (8011124 <NoteReset+0x4c>)
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	bf14      	ite	ne
 801110c:	2301      	movne	r3, #1
 801110e:	2300      	moveq	r3, #0
 8011110:	b2db      	uxtb	r3, r3
 8011112:	f083 0301 	eor.w	r3, r3, #1
 8011116:	b2db      	uxtb	r3, r3
 8011118:	f003 0301 	and.w	r3, r3, #1
 801111c:	b2db      	uxtb	r3, r3
}
 801111e:	4618      	mov	r0, r3
 8011120:	bd80      	pop	{r7, pc}
 8011122:	bf00      	nop
 8011124:	20000024 	.word	0x20000024

08011128 <__errno>:
 8011128:	4b01      	ldr	r3, [pc, #4]	; (8011130 <__errno+0x8>)
 801112a:	6818      	ldr	r0, [r3, #0]
 801112c:	4770      	bx	lr
 801112e:	bf00      	nop
 8011130:	20000028 	.word	0x20000028

08011134 <__libc_init_array>:
 8011134:	b570      	push	{r4, r5, r6, lr}
 8011136:	4e0d      	ldr	r6, [pc, #52]	; (801116c <__libc_init_array+0x38>)
 8011138:	4c0d      	ldr	r4, [pc, #52]	; (8011170 <__libc_init_array+0x3c>)
 801113a:	1ba4      	subs	r4, r4, r6
 801113c:	10a4      	asrs	r4, r4, #2
 801113e:	2500      	movs	r5, #0
 8011140:	42a5      	cmp	r5, r4
 8011142:	d109      	bne.n	8011158 <__libc_init_array+0x24>
 8011144:	4e0b      	ldr	r6, [pc, #44]	; (8011174 <__libc_init_array+0x40>)
 8011146:	4c0c      	ldr	r4, [pc, #48]	; (8011178 <__libc_init_array+0x44>)
 8011148:	f000 fc8a 	bl	8011a60 <_init>
 801114c:	1ba4      	subs	r4, r4, r6
 801114e:	10a4      	asrs	r4, r4, #2
 8011150:	2500      	movs	r5, #0
 8011152:	42a5      	cmp	r5, r4
 8011154:	d105      	bne.n	8011162 <__libc_init_array+0x2e>
 8011156:	bd70      	pop	{r4, r5, r6, pc}
 8011158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801115c:	4798      	blx	r3
 801115e:	3501      	adds	r5, #1
 8011160:	e7ee      	b.n	8011140 <__libc_init_array+0xc>
 8011162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011166:	4798      	blx	r3
 8011168:	3501      	adds	r5, #1
 801116a:	e7f2      	b.n	8011152 <__libc_init_array+0x1e>
 801116c:	080120a4 	.word	0x080120a4
 8011170:	080120a4 	.word	0x080120a4
 8011174:	080120a4 	.word	0x080120a4
 8011178:	080120a8 	.word	0x080120a8

0801117c <__locale_ctype_ptr>:
 801117c:	4b04      	ldr	r3, [pc, #16]	; (8011190 <__locale_ctype_ptr+0x14>)
 801117e:	4a05      	ldr	r2, [pc, #20]	; (8011194 <__locale_ctype_ptr+0x18>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	6a1b      	ldr	r3, [r3, #32]
 8011184:	2b00      	cmp	r3, #0
 8011186:	bf08      	it	eq
 8011188:	4613      	moveq	r3, r2
 801118a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801118e:	4770      	bx	lr
 8011190:	20000028 	.word	0x20000028
 8011194:	2000008c 	.word	0x2000008c

08011198 <malloc>:
 8011198:	4b02      	ldr	r3, [pc, #8]	; (80111a4 <malloc+0xc>)
 801119a:	4601      	mov	r1, r0
 801119c:	6818      	ldr	r0, [r3, #0]
 801119e:	f000 b897 	b.w	80112d0 <_malloc_r>
 80111a2:	bf00      	nop
 80111a4:	20000028 	.word	0x20000028

080111a8 <free>:
 80111a8:	4b02      	ldr	r3, [pc, #8]	; (80111b4 <free+0xc>)
 80111aa:	4601      	mov	r1, r0
 80111ac:	6818      	ldr	r0, [r3, #0]
 80111ae:	f000 b841 	b.w	8011234 <_free_r>
 80111b2:	bf00      	nop
 80111b4:	20000028 	.word	0x20000028

080111b8 <__ascii_mbtowc>:
 80111b8:	b082      	sub	sp, #8
 80111ba:	b901      	cbnz	r1, 80111be <__ascii_mbtowc+0x6>
 80111bc:	a901      	add	r1, sp, #4
 80111be:	b142      	cbz	r2, 80111d2 <__ascii_mbtowc+0x1a>
 80111c0:	b14b      	cbz	r3, 80111d6 <__ascii_mbtowc+0x1e>
 80111c2:	7813      	ldrb	r3, [r2, #0]
 80111c4:	600b      	str	r3, [r1, #0]
 80111c6:	7812      	ldrb	r2, [r2, #0]
 80111c8:	1c10      	adds	r0, r2, #0
 80111ca:	bf18      	it	ne
 80111cc:	2001      	movne	r0, #1
 80111ce:	b002      	add	sp, #8
 80111d0:	4770      	bx	lr
 80111d2:	4610      	mov	r0, r2
 80111d4:	e7fb      	b.n	80111ce <__ascii_mbtowc+0x16>
 80111d6:	f06f 0001 	mvn.w	r0, #1
 80111da:	e7f8      	b.n	80111ce <__ascii_mbtowc+0x16>

080111dc <memcpy>:
 80111dc:	b510      	push	{r4, lr}
 80111de:	1e43      	subs	r3, r0, #1
 80111e0:	440a      	add	r2, r1
 80111e2:	4291      	cmp	r1, r2
 80111e4:	d100      	bne.n	80111e8 <memcpy+0xc>
 80111e6:	bd10      	pop	{r4, pc}
 80111e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111f0:	e7f7      	b.n	80111e2 <memcpy+0x6>

080111f2 <memmove>:
 80111f2:	4288      	cmp	r0, r1
 80111f4:	b510      	push	{r4, lr}
 80111f6:	eb01 0302 	add.w	r3, r1, r2
 80111fa:	d807      	bhi.n	801120c <memmove+0x1a>
 80111fc:	1e42      	subs	r2, r0, #1
 80111fe:	4299      	cmp	r1, r3
 8011200:	d00a      	beq.n	8011218 <memmove+0x26>
 8011202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011206:	f802 4f01 	strb.w	r4, [r2, #1]!
 801120a:	e7f8      	b.n	80111fe <memmove+0xc>
 801120c:	4283      	cmp	r3, r0
 801120e:	d9f5      	bls.n	80111fc <memmove+0xa>
 8011210:	1881      	adds	r1, r0, r2
 8011212:	1ad2      	subs	r2, r2, r3
 8011214:	42d3      	cmn	r3, r2
 8011216:	d100      	bne.n	801121a <memmove+0x28>
 8011218:	bd10      	pop	{r4, pc}
 801121a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801121e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011222:	e7f7      	b.n	8011214 <memmove+0x22>

08011224 <memset>:
 8011224:	4402      	add	r2, r0
 8011226:	4603      	mov	r3, r0
 8011228:	4293      	cmp	r3, r2
 801122a:	d100      	bne.n	801122e <memset+0xa>
 801122c:	4770      	bx	lr
 801122e:	f803 1b01 	strb.w	r1, [r3], #1
 8011232:	e7f9      	b.n	8011228 <memset+0x4>

08011234 <_free_r>:
 8011234:	b538      	push	{r3, r4, r5, lr}
 8011236:	4605      	mov	r5, r0
 8011238:	2900      	cmp	r1, #0
 801123a:	d045      	beq.n	80112c8 <_free_r+0x94>
 801123c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011240:	1f0c      	subs	r4, r1, #4
 8011242:	2b00      	cmp	r3, #0
 8011244:	bfb8      	it	lt
 8011246:	18e4      	addlt	r4, r4, r3
 8011248:	f000 f900 	bl	801144c <__malloc_lock>
 801124c:	4a1f      	ldr	r2, [pc, #124]	; (80112cc <_free_r+0x98>)
 801124e:	6813      	ldr	r3, [r2, #0]
 8011250:	4610      	mov	r0, r2
 8011252:	b933      	cbnz	r3, 8011262 <_free_r+0x2e>
 8011254:	6063      	str	r3, [r4, #4]
 8011256:	6014      	str	r4, [r2, #0]
 8011258:	4628      	mov	r0, r5
 801125a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801125e:	f000 b8f6 	b.w	801144e <__malloc_unlock>
 8011262:	42a3      	cmp	r3, r4
 8011264:	d90c      	bls.n	8011280 <_free_r+0x4c>
 8011266:	6821      	ldr	r1, [r4, #0]
 8011268:	1862      	adds	r2, r4, r1
 801126a:	4293      	cmp	r3, r2
 801126c:	bf04      	itt	eq
 801126e:	681a      	ldreq	r2, [r3, #0]
 8011270:	685b      	ldreq	r3, [r3, #4]
 8011272:	6063      	str	r3, [r4, #4]
 8011274:	bf04      	itt	eq
 8011276:	1852      	addeq	r2, r2, r1
 8011278:	6022      	streq	r2, [r4, #0]
 801127a:	6004      	str	r4, [r0, #0]
 801127c:	e7ec      	b.n	8011258 <_free_r+0x24>
 801127e:	4613      	mov	r3, r2
 8011280:	685a      	ldr	r2, [r3, #4]
 8011282:	b10a      	cbz	r2, 8011288 <_free_r+0x54>
 8011284:	42a2      	cmp	r2, r4
 8011286:	d9fa      	bls.n	801127e <_free_r+0x4a>
 8011288:	6819      	ldr	r1, [r3, #0]
 801128a:	1858      	adds	r0, r3, r1
 801128c:	42a0      	cmp	r0, r4
 801128e:	d10b      	bne.n	80112a8 <_free_r+0x74>
 8011290:	6820      	ldr	r0, [r4, #0]
 8011292:	4401      	add	r1, r0
 8011294:	1858      	adds	r0, r3, r1
 8011296:	4282      	cmp	r2, r0
 8011298:	6019      	str	r1, [r3, #0]
 801129a:	d1dd      	bne.n	8011258 <_free_r+0x24>
 801129c:	6810      	ldr	r0, [r2, #0]
 801129e:	6852      	ldr	r2, [r2, #4]
 80112a0:	605a      	str	r2, [r3, #4]
 80112a2:	4401      	add	r1, r0
 80112a4:	6019      	str	r1, [r3, #0]
 80112a6:	e7d7      	b.n	8011258 <_free_r+0x24>
 80112a8:	d902      	bls.n	80112b0 <_free_r+0x7c>
 80112aa:	230c      	movs	r3, #12
 80112ac:	602b      	str	r3, [r5, #0]
 80112ae:	e7d3      	b.n	8011258 <_free_r+0x24>
 80112b0:	6820      	ldr	r0, [r4, #0]
 80112b2:	1821      	adds	r1, r4, r0
 80112b4:	428a      	cmp	r2, r1
 80112b6:	bf04      	itt	eq
 80112b8:	6811      	ldreq	r1, [r2, #0]
 80112ba:	6852      	ldreq	r2, [r2, #4]
 80112bc:	6062      	str	r2, [r4, #4]
 80112be:	bf04      	itt	eq
 80112c0:	1809      	addeq	r1, r1, r0
 80112c2:	6021      	streq	r1, [r4, #0]
 80112c4:	605c      	str	r4, [r3, #4]
 80112c6:	e7c7      	b.n	8011258 <_free_r+0x24>
 80112c8:	bd38      	pop	{r3, r4, r5, pc}
 80112ca:	bf00      	nop
 80112cc:	2000028c 	.word	0x2000028c

080112d0 <_malloc_r>:
 80112d0:	b570      	push	{r4, r5, r6, lr}
 80112d2:	1ccd      	adds	r5, r1, #3
 80112d4:	f025 0503 	bic.w	r5, r5, #3
 80112d8:	3508      	adds	r5, #8
 80112da:	2d0c      	cmp	r5, #12
 80112dc:	bf38      	it	cc
 80112de:	250c      	movcc	r5, #12
 80112e0:	2d00      	cmp	r5, #0
 80112e2:	4606      	mov	r6, r0
 80112e4:	db01      	blt.n	80112ea <_malloc_r+0x1a>
 80112e6:	42a9      	cmp	r1, r5
 80112e8:	d903      	bls.n	80112f2 <_malloc_r+0x22>
 80112ea:	230c      	movs	r3, #12
 80112ec:	6033      	str	r3, [r6, #0]
 80112ee:	2000      	movs	r0, #0
 80112f0:	bd70      	pop	{r4, r5, r6, pc}
 80112f2:	f000 f8ab 	bl	801144c <__malloc_lock>
 80112f6:	4a21      	ldr	r2, [pc, #132]	; (801137c <_malloc_r+0xac>)
 80112f8:	6814      	ldr	r4, [r2, #0]
 80112fa:	4621      	mov	r1, r4
 80112fc:	b991      	cbnz	r1, 8011324 <_malloc_r+0x54>
 80112fe:	4c20      	ldr	r4, [pc, #128]	; (8011380 <_malloc_r+0xb0>)
 8011300:	6823      	ldr	r3, [r4, #0]
 8011302:	b91b      	cbnz	r3, 801130c <_malloc_r+0x3c>
 8011304:	4630      	mov	r0, r6
 8011306:	f000 f83d 	bl	8011384 <_sbrk_r>
 801130a:	6020      	str	r0, [r4, #0]
 801130c:	4629      	mov	r1, r5
 801130e:	4630      	mov	r0, r6
 8011310:	f000 f838 	bl	8011384 <_sbrk_r>
 8011314:	1c43      	adds	r3, r0, #1
 8011316:	d124      	bne.n	8011362 <_malloc_r+0x92>
 8011318:	230c      	movs	r3, #12
 801131a:	6033      	str	r3, [r6, #0]
 801131c:	4630      	mov	r0, r6
 801131e:	f000 f896 	bl	801144e <__malloc_unlock>
 8011322:	e7e4      	b.n	80112ee <_malloc_r+0x1e>
 8011324:	680b      	ldr	r3, [r1, #0]
 8011326:	1b5b      	subs	r3, r3, r5
 8011328:	d418      	bmi.n	801135c <_malloc_r+0x8c>
 801132a:	2b0b      	cmp	r3, #11
 801132c:	d90f      	bls.n	801134e <_malloc_r+0x7e>
 801132e:	600b      	str	r3, [r1, #0]
 8011330:	50cd      	str	r5, [r1, r3]
 8011332:	18cc      	adds	r4, r1, r3
 8011334:	4630      	mov	r0, r6
 8011336:	f000 f88a 	bl	801144e <__malloc_unlock>
 801133a:	f104 000b 	add.w	r0, r4, #11
 801133e:	1d23      	adds	r3, r4, #4
 8011340:	f020 0007 	bic.w	r0, r0, #7
 8011344:	1ac3      	subs	r3, r0, r3
 8011346:	d0d3      	beq.n	80112f0 <_malloc_r+0x20>
 8011348:	425a      	negs	r2, r3
 801134a:	50e2      	str	r2, [r4, r3]
 801134c:	e7d0      	b.n	80112f0 <_malloc_r+0x20>
 801134e:	428c      	cmp	r4, r1
 8011350:	684b      	ldr	r3, [r1, #4]
 8011352:	bf16      	itet	ne
 8011354:	6063      	strne	r3, [r4, #4]
 8011356:	6013      	streq	r3, [r2, #0]
 8011358:	460c      	movne	r4, r1
 801135a:	e7eb      	b.n	8011334 <_malloc_r+0x64>
 801135c:	460c      	mov	r4, r1
 801135e:	6849      	ldr	r1, [r1, #4]
 8011360:	e7cc      	b.n	80112fc <_malloc_r+0x2c>
 8011362:	1cc4      	adds	r4, r0, #3
 8011364:	f024 0403 	bic.w	r4, r4, #3
 8011368:	42a0      	cmp	r0, r4
 801136a:	d005      	beq.n	8011378 <_malloc_r+0xa8>
 801136c:	1a21      	subs	r1, r4, r0
 801136e:	4630      	mov	r0, r6
 8011370:	f000 f808 	bl	8011384 <_sbrk_r>
 8011374:	3001      	adds	r0, #1
 8011376:	d0cf      	beq.n	8011318 <_malloc_r+0x48>
 8011378:	6025      	str	r5, [r4, #0]
 801137a:	e7db      	b.n	8011334 <_malloc_r+0x64>
 801137c:	2000028c 	.word	0x2000028c
 8011380:	20000290 	.word	0x20000290

08011384 <_sbrk_r>:
 8011384:	b538      	push	{r3, r4, r5, lr}
 8011386:	4c06      	ldr	r4, [pc, #24]	; (80113a0 <_sbrk_r+0x1c>)
 8011388:	2300      	movs	r3, #0
 801138a:	4605      	mov	r5, r0
 801138c:	4608      	mov	r0, r1
 801138e:	6023      	str	r3, [r4, #0]
 8011390:	f7f3 fac4 	bl	800491c <_sbrk>
 8011394:	1c43      	adds	r3, r0, #1
 8011396:	d102      	bne.n	801139e <_sbrk_r+0x1a>
 8011398:	6823      	ldr	r3, [r4, #0]
 801139a:	b103      	cbz	r3, 801139e <_sbrk_r+0x1a>
 801139c:	602b      	str	r3, [r5, #0]
 801139e:	bd38      	pop	{r3, r4, r5, pc}
 80113a0:	20000e4c 	.word	0x20000e4c

080113a4 <siprintf>:
 80113a4:	b40e      	push	{r1, r2, r3}
 80113a6:	b500      	push	{lr}
 80113a8:	b09c      	sub	sp, #112	; 0x70
 80113aa:	ab1d      	add	r3, sp, #116	; 0x74
 80113ac:	9002      	str	r0, [sp, #8]
 80113ae:	9006      	str	r0, [sp, #24]
 80113b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80113b4:	4809      	ldr	r0, [pc, #36]	; (80113dc <siprintf+0x38>)
 80113b6:	9107      	str	r1, [sp, #28]
 80113b8:	9104      	str	r1, [sp, #16]
 80113ba:	4909      	ldr	r1, [pc, #36]	; (80113e0 <siprintf+0x3c>)
 80113bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80113c0:	9105      	str	r1, [sp, #20]
 80113c2:	6800      	ldr	r0, [r0, #0]
 80113c4:	9301      	str	r3, [sp, #4]
 80113c6:	a902      	add	r1, sp, #8
 80113c8:	f000 f89c 	bl	8011504 <_svfiprintf_r>
 80113cc:	9b02      	ldr	r3, [sp, #8]
 80113ce:	2200      	movs	r2, #0
 80113d0:	701a      	strb	r2, [r3, #0]
 80113d2:	b01c      	add	sp, #112	; 0x70
 80113d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80113d8:	b003      	add	sp, #12
 80113da:	4770      	bx	lr
 80113dc:	20000028 	.word	0x20000028
 80113e0:	ffff0208 	.word	0xffff0208

080113e4 <strchr>:
 80113e4:	b2c9      	uxtb	r1, r1
 80113e6:	4603      	mov	r3, r0
 80113e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113ec:	b11a      	cbz	r2, 80113f6 <strchr+0x12>
 80113ee:	428a      	cmp	r2, r1
 80113f0:	d1f9      	bne.n	80113e6 <strchr+0x2>
 80113f2:	4618      	mov	r0, r3
 80113f4:	4770      	bx	lr
 80113f6:	2900      	cmp	r1, #0
 80113f8:	bf18      	it	ne
 80113fa:	2300      	movne	r3, #0
 80113fc:	e7f9      	b.n	80113f2 <strchr+0xe>

080113fe <strcpy>:
 80113fe:	4603      	mov	r3, r0
 8011400:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011404:	f803 2b01 	strb.w	r2, [r3], #1
 8011408:	2a00      	cmp	r2, #0
 801140a:	d1f9      	bne.n	8011400 <strcpy+0x2>
 801140c:	4770      	bx	lr

0801140e <strncmp>:
 801140e:	b510      	push	{r4, lr}
 8011410:	b16a      	cbz	r2, 801142e <strncmp+0x20>
 8011412:	3901      	subs	r1, #1
 8011414:	1884      	adds	r4, r0, r2
 8011416:	f810 3b01 	ldrb.w	r3, [r0], #1
 801141a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801141e:	4293      	cmp	r3, r2
 8011420:	d103      	bne.n	801142a <strncmp+0x1c>
 8011422:	42a0      	cmp	r0, r4
 8011424:	d001      	beq.n	801142a <strncmp+0x1c>
 8011426:	2b00      	cmp	r3, #0
 8011428:	d1f5      	bne.n	8011416 <strncmp+0x8>
 801142a:	1a98      	subs	r0, r3, r2
 801142c:	bd10      	pop	{r4, pc}
 801142e:	4610      	mov	r0, r2
 8011430:	e7fc      	b.n	801142c <strncmp+0x1e>

08011432 <__ascii_wctomb>:
 8011432:	b149      	cbz	r1, 8011448 <__ascii_wctomb+0x16>
 8011434:	2aff      	cmp	r2, #255	; 0xff
 8011436:	bf85      	ittet	hi
 8011438:	238a      	movhi	r3, #138	; 0x8a
 801143a:	6003      	strhi	r3, [r0, #0]
 801143c:	700a      	strbls	r2, [r1, #0]
 801143e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011442:	bf98      	it	ls
 8011444:	2001      	movls	r0, #1
 8011446:	4770      	bx	lr
 8011448:	4608      	mov	r0, r1
 801144a:	4770      	bx	lr

0801144c <__malloc_lock>:
 801144c:	4770      	bx	lr

0801144e <__malloc_unlock>:
 801144e:	4770      	bx	lr

08011450 <__ssputs_r>:
 8011450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011454:	688e      	ldr	r6, [r1, #8]
 8011456:	429e      	cmp	r6, r3
 8011458:	4682      	mov	sl, r0
 801145a:	460c      	mov	r4, r1
 801145c:	4690      	mov	r8, r2
 801145e:	4699      	mov	r9, r3
 8011460:	d837      	bhi.n	80114d2 <__ssputs_r+0x82>
 8011462:	898a      	ldrh	r2, [r1, #12]
 8011464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011468:	d031      	beq.n	80114ce <__ssputs_r+0x7e>
 801146a:	6825      	ldr	r5, [r4, #0]
 801146c:	6909      	ldr	r1, [r1, #16]
 801146e:	1a6f      	subs	r7, r5, r1
 8011470:	6965      	ldr	r5, [r4, #20]
 8011472:	2302      	movs	r3, #2
 8011474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011478:	fb95 f5f3 	sdiv	r5, r5, r3
 801147c:	f109 0301 	add.w	r3, r9, #1
 8011480:	443b      	add	r3, r7
 8011482:	429d      	cmp	r5, r3
 8011484:	bf38      	it	cc
 8011486:	461d      	movcc	r5, r3
 8011488:	0553      	lsls	r3, r2, #21
 801148a:	d530      	bpl.n	80114ee <__ssputs_r+0x9e>
 801148c:	4629      	mov	r1, r5
 801148e:	f7ff ff1f 	bl	80112d0 <_malloc_r>
 8011492:	4606      	mov	r6, r0
 8011494:	b950      	cbnz	r0, 80114ac <__ssputs_r+0x5c>
 8011496:	230c      	movs	r3, #12
 8011498:	f8ca 3000 	str.w	r3, [sl]
 801149c:	89a3      	ldrh	r3, [r4, #12]
 801149e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114a2:	81a3      	strh	r3, [r4, #12]
 80114a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114ac:	463a      	mov	r2, r7
 80114ae:	6921      	ldr	r1, [r4, #16]
 80114b0:	f7ff fe94 	bl	80111dc <memcpy>
 80114b4:	89a3      	ldrh	r3, [r4, #12]
 80114b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80114ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114be:	81a3      	strh	r3, [r4, #12]
 80114c0:	6126      	str	r6, [r4, #16]
 80114c2:	6165      	str	r5, [r4, #20]
 80114c4:	443e      	add	r6, r7
 80114c6:	1bed      	subs	r5, r5, r7
 80114c8:	6026      	str	r6, [r4, #0]
 80114ca:	60a5      	str	r5, [r4, #8]
 80114cc:	464e      	mov	r6, r9
 80114ce:	454e      	cmp	r6, r9
 80114d0:	d900      	bls.n	80114d4 <__ssputs_r+0x84>
 80114d2:	464e      	mov	r6, r9
 80114d4:	4632      	mov	r2, r6
 80114d6:	4641      	mov	r1, r8
 80114d8:	6820      	ldr	r0, [r4, #0]
 80114da:	f7ff fe8a 	bl	80111f2 <memmove>
 80114de:	68a3      	ldr	r3, [r4, #8]
 80114e0:	1b9b      	subs	r3, r3, r6
 80114e2:	60a3      	str	r3, [r4, #8]
 80114e4:	6823      	ldr	r3, [r4, #0]
 80114e6:	441e      	add	r6, r3
 80114e8:	6026      	str	r6, [r4, #0]
 80114ea:	2000      	movs	r0, #0
 80114ec:	e7dc      	b.n	80114a8 <__ssputs_r+0x58>
 80114ee:	462a      	mov	r2, r5
 80114f0:	f000 fa88 	bl	8011a04 <_realloc_r>
 80114f4:	4606      	mov	r6, r0
 80114f6:	2800      	cmp	r0, #0
 80114f8:	d1e2      	bne.n	80114c0 <__ssputs_r+0x70>
 80114fa:	6921      	ldr	r1, [r4, #16]
 80114fc:	4650      	mov	r0, sl
 80114fe:	f7ff fe99 	bl	8011234 <_free_r>
 8011502:	e7c8      	b.n	8011496 <__ssputs_r+0x46>

08011504 <_svfiprintf_r>:
 8011504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011508:	461d      	mov	r5, r3
 801150a:	898b      	ldrh	r3, [r1, #12]
 801150c:	061f      	lsls	r7, r3, #24
 801150e:	b09d      	sub	sp, #116	; 0x74
 8011510:	4680      	mov	r8, r0
 8011512:	460c      	mov	r4, r1
 8011514:	4616      	mov	r6, r2
 8011516:	d50f      	bpl.n	8011538 <_svfiprintf_r+0x34>
 8011518:	690b      	ldr	r3, [r1, #16]
 801151a:	b96b      	cbnz	r3, 8011538 <_svfiprintf_r+0x34>
 801151c:	2140      	movs	r1, #64	; 0x40
 801151e:	f7ff fed7 	bl	80112d0 <_malloc_r>
 8011522:	6020      	str	r0, [r4, #0]
 8011524:	6120      	str	r0, [r4, #16]
 8011526:	b928      	cbnz	r0, 8011534 <_svfiprintf_r+0x30>
 8011528:	230c      	movs	r3, #12
 801152a:	f8c8 3000 	str.w	r3, [r8]
 801152e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011532:	e0c8      	b.n	80116c6 <_svfiprintf_r+0x1c2>
 8011534:	2340      	movs	r3, #64	; 0x40
 8011536:	6163      	str	r3, [r4, #20]
 8011538:	2300      	movs	r3, #0
 801153a:	9309      	str	r3, [sp, #36]	; 0x24
 801153c:	2320      	movs	r3, #32
 801153e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011542:	2330      	movs	r3, #48	; 0x30
 8011544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011548:	9503      	str	r5, [sp, #12]
 801154a:	f04f 0b01 	mov.w	fp, #1
 801154e:	4637      	mov	r7, r6
 8011550:	463d      	mov	r5, r7
 8011552:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011556:	b10b      	cbz	r3, 801155c <_svfiprintf_r+0x58>
 8011558:	2b25      	cmp	r3, #37	; 0x25
 801155a:	d13e      	bne.n	80115da <_svfiprintf_r+0xd6>
 801155c:	ebb7 0a06 	subs.w	sl, r7, r6
 8011560:	d00b      	beq.n	801157a <_svfiprintf_r+0x76>
 8011562:	4653      	mov	r3, sl
 8011564:	4632      	mov	r2, r6
 8011566:	4621      	mov	r1, r4
 8011568:	4640      	mov	r0, r8
 801156a:	f7ff ff71 	bl	8011450 <__ssputs_r>
 801156e:	3001      	adds	r0, #1
 8011570:	f000 80a4 	beq.w	80116bc <_svfiprintf_r+0x1b8>
 8011574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011576:	4453      	add	r3, sl
 8011578:	9309      	str	r3, [sp, #36]	; 0x24
 801157a:	783b      	ldrb	r3, [r7, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	f000 809d 	beq.w	80116bc <_svfiprintf_r+0x1b8>
 8011582:	2300      	movs	r3, #0
 8011584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801158c:	9304      	str	r3, [sp, #16]
 801158e:	9307      	str	r3, [sp, #28]
 8011590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011594:	931a      	str	r3, [sp, #104]	; 0x68
 8011596:	462f      	mov	r7, r5
 8011598:	2205      	movs	r2, #5
 801159a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801159e:	4850      	ldr	r0, [pc, #320]	; (80116e0 <_svfiprintf_r+0x1dc>)
 80115a0:	f7ee fe46 	bl	8000230 <memchr>
 80115a4:	9b04      	ldr	r3, [sp, #16]
 80115a6:	b9d0      	cbnz	r0, 80115de <_svfiprintf_r+0xda>
 80115a8:	06d9      	lsls	r1, r3, #27
 80115aa:	bf44      	itt	mi
 80115ac:	2220      	movmi	r2, #32
 80115ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80115b2:	071a      	lsls	r2, r3, #28
 80115b4:	bf44      	itt	mi
 80115b6:	222b      	movmi	r2, #43	; 0x2b
 80115b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80115bc:	782a      	ldrb	r2, [r5, #0]
 80115be:	2a2a      	cmp	r2, #42	; 0x2a
 80115c0:	d015      	beq.n	80115ee <_svfiprintf_r+0xea>
 80115c2:	9a07      	ldr	r2, [sp, #28]
 80115c4:	462f      	mov	r7, r5
 80115c6:	2000      	movs	r0, #0
 80115c8:	250a      	movs	r5, #10
 80115ca:	4639      	mov	r1, r7
 80115cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115d0:	3b30      	subs	r3, #48	; 0x30
 80115d2:	2b09      	cmp	r3, #9
 80115d4:	d94d      	bls.n	8011672 <_svfiprintf_r+0x16e>
 80115d6:	b1b8      	cbz	r0, 8011608 <_svfiprintf_r+0x104>
 80115d8:	e00f      	b.n	80115fa <_svfiprintf_r+0xf6>
 80115da:	462f      	mov	r7, r5
 80115dc:	e7b8      	b.n	8011550 <_svfiprintf_r+0x4c>
 80115de:	4a40      	ldr	r2, [pc, #256]	; (80116e0 <_svfiprintf_r+0x1dc>)
 80115e0:	1a80      	subs	r0, r0, r2
 80115e2:	fa0b f000 	lsl.w	r0, fp, r0
 80115e6:	4318      	orrs	r0, r3
 80115e8:	9004      	str	r0, [sp, #16]
 80115ea:	463d      	mov	r5, r7
 80115ec:	e7d3      	b.n	8011596 <_svfiprintf_r+0x92>
 80115ee:	9a03      	ldr	r2, [sp, #12]
 80115f0:	1d11      	adds	r1, r2, #4
 80115f2:	6812      	ldr	r2, [r2, #0]
 80115f4:	9103      	str	r1, [sp, #12]
 80115f6:	2a00      	cmp	r2, #0
 80115f8:	db01      	blt.n	80115fe <_svfiprintf_r+0xfa>
 80115fa:	9207      	str	r2, [sp, #28]
 80115fc:	e004      	b.n	8011608 <_svfiprintf_r+0x104>
 80115fe:	4252      	negs	r2, r2
 8011600:	f043 0302 	orr.w	r3, r3, #2
 8011604:	9207      	str	r2, [sp, #28]
 8011606:	9304      	str	r3, [sp, #16]
 8011608:	783b      	ldrb	r3, [r7, #0]
 801160a:	2b2e      	cmp	r3, #46	; 0x2e
 801160c:	d10c      	bne.n	8011628 <_svfiprintf_r+0x124>
 801160e:	787b      	ldrb	r3, [r7, #1]
 8011610:	2b2a      	cmp	r3, #42	; 0x2a
 8011612:	d133      	bne.n	801167c <_svfiprintf_r+0x178>
 8011614:	9b03      	ldr	r3, [sp, #12]
 8011616:	1d1a      	adds	r2, r3, #4
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	9203      	str	r2, [sp, #12]
 801161c:	2b00      	cmp	r3, #0
 801161e:	bfb8      	it	lt
 8011620:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011624:	3702      	adds	r7, #2
 8011626:	9305      	str	r3, [sp, #20]
 8011628:	4d2e      	ldr	r5, [pc, #184]	; (80116e4 <_svfiprintf_r+0x1e0>)
 801162a:	7839      	ldrb	r1, [r7, #0]
 801162c:	2203      	movs	r2, #3
 801162e:	4628      	mov	r0, r5
 8011630:	f7ee fdfe 	bl	8000230 <memchr>
 8011634:	b138      	cbz	r0, 8011646 <_svfiprintf_r+0x142>
 8011636:	2340      	movs	r3, #64	; 0x40
 8011638:	1b40      	subs	r0, r0, r5
 801163a:	fa03 f000 	lsl.w	r0, r3, r0
 801163e:	9b04      	ldr	r3, [sp, #16]
 8011640:	4303      	orrs	r3, r0
 8011642:	3701      	adds	r7, #1
 8011644:	9304      	str	r3, [sp, #16]
 8011646:	7839      	ldrb	r1, [r7, #0]
 8011648:	4827      	ldr	r0, [pc, #156]	; (80116e8 <_svfiprintf_r+0x1e4>)
 801164a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801164e:	2206      	movs	r2, #6
 8011650:	1c7e      	adds	r6, r7, #1
 8011652:	f7ee fded 	bl	8000230 <memchr>
 8011656:	2800      	cmp	r0, #0
 8011658:	d038      	beq.n	80116cc <_svfiprintf_r+0x1c8>
 801165a:	4b24      	ldr	r3, [pc, #144]	; (80116ec <_svfiprintf_r+0x1e8>)
 801165c:	bb13      	cbnz	r3, 80116a4 <_svfiprintf_r+0x1a0>
 801165e:	9b03      	ldr	r3, [sp, #12]
 8011660:	3307      	adds	r3, #7
 8011662:	f023 0307 	bic.w	r3, r3, #7
 8011666:	3308      	adds	r3, #8
 8011668:	9303      	str	r3, [sp, #12]
 801166a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801166c:	444b      	add	r3, r9
 801166e:	9309      	str	r3, [sp, #36]	; 0x24
 8011670:	e76d      	b.n	801154e <_svfiprintf_r+0x4a>
 8011672:	fb05 3202 	mla	r2, r5, r2, r3
 8011676:	2001      	movs	r0, #1
 8011678:	460f      	mov	r7, r1
 801167a:	e7a6      	b.n	80115ca <_svfiprintf_r+0xc6>
 801167c:	2300      	movs	r3, #0
 801167e:	3701      	adds	r7, #1
 8011680:	9305      	str	r3, [sp, #20]
 8011682:	4619      	mov	r1, r3
 8011684:	250a      	movs	r5, #10
 8011686:	4638      	mov	r0, r7
 8011688:	f810 2b01 	ldrb.w	r2, [r0], #1
 801168c:	3a30      	subs	r2, #48	; 0x30
 801168e:	2a09      	cmp	r2, #9
 8011690:	d903      	bls.n	801169a <_svfiprintf_r+0x196>
 8011692:	2b00      	cmp	r3, #0
 8011694:	d0c8      	beq.n	8011628 <_svfiprintf_r+0x124>
 8011696:	9105      	str	r1, [sp, #20]
 8011698:	e7c6      	b.n	8011628 <_svfiprintf_r+0x124>
 801169a:	fb05 2101 	mla	r1, r5, r1, r2
 801169e:	2301      	movs	r3, #1
 80116a0:	4607      	mov	r7, r0
 80116a2:	e7f0      	b.n	8011686 <_svfiprintf_r+0x182>
 80116a4:	ab03      	add	r3, sp, #12
 80116a6:	9300      	str	r3, [sp, #0]
 80116a8:	4622      	mov	r2, r4
 80116aa:	4b11      	ldr	r3, [pc, #68]	; (80116f0 <_svfiprintf_r+0x1ec>)
 80116ac:	a904      	add	r1, sp, #16
 80116ae:	4640      	mov	r0, r8
 80116b0:	f3af 8000 	nop.w
 80116b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80116b8:	4681      	mov	r9, r0
 80116ba:	d1d6      	bne.n	801166a <_svfiprintf_r+0x166>
 80116bc:	89a3      	ldrh	r3, [r4, #12]
 80116be:	065b      	lsls	r3, r3, #25
 80116c0:	f53f af35 	bmi.w	801152e <_svfiprintf_r+0x2a>
 80116c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116c6:	b01d      	add	sp, #116	; 0x74
 80116c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116cc:	ab03      	add	r3, sp, #12
 80116ce:	9300      	str	r3, [sp, #0]
 80116d0:	4622      	mov	r2, r4
 80116d2:	4b07      	ldr	r3, [pc, #28]	; (80116f0 <_svfiprintf_r+0x1ec>)
 80116d4:	a904      	add	r1, sp, #16
 80116d6:	4640      	mov	r0, r8
 80116d8:	f000 f882 	bl	80117e0 <_printf_i>
 80116dc:	e7ea      	b.n	80116b4 <_svfiprintf_r+0x1b0>
 80116de:	bf00      	nop
 80116e0:	08012067 	.word	0x08012067
 80116e4:	0801206d 	.word	0x0801206d
 80116e8:	08012071 	.word	0x08012071
 80116ec:	00000000 	.word	0x00000000
 80116f0:	08011451 	.word	0x08011451

080116f4 <_printf_common>:
 80116f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116f8:	4691      	mov	r9, r2
 80116fa:	461f      	mov	r7, r3
 80116fc:	688a      	ldr	r2, [r1, #8]
 80116fe:	690b      	ldr	r3, [r1, #16]
 8011700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011704:	4293      	cmp	r3, r2
 8011706:	bfb8      	it	lt
 8011708:	4613      	movlt	r3, r2
 801170a:	f8c9 3000 	str.w	r3, [r9]
 801170e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011712:	4606      	mov	r6, r0
 8011714:	460c      	mov	r4, r1
 8011716:	b112      	cbz	r2, 801171e <_printf_common+0x2a>
 8011718:	3301      	adds	r3, #1
 801171a:	f8c9 3000 	str.w	r3, [r9]
 801171e:	6823      	ldr	r3, [r4, #0]
 8011720:	0699      	lsls	r1, r3, #26
 8011722:	bf42      	ittt	mi
 8011724:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011728:	3302      	addmi	r3, #2
 801172a:	f8c9 3000 	strmi.w	r3, [r9]
 801172e:	6825      	ldr	r5, [r4, #0]
 8011730:	f015 0506 	ands.w	r5, r5, #6
 8011734:	d107      	bne.n	8011746 <_printf_common+0x52>
 8011736:	f104 0a19 	add.w	sl, r4, #25
 801173a:	68e3      	ldr	r3, [r4, #12]
 801173c:	f8d9 2000 	ldr.w	r2, [r9]
 8011740:	1a9b      	subs	r3, r3, r2
 8011742:	42ab      	cmp	r3, r5
 8011744:	dc28      	bgt.n	8011798 <_printf_common+0xa4>
 8011746:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801174a:	6822      	ldr	r2, [r4, #0]
 801174c:	3300      	adds	r3, #0
 801174e:	bf18      	it	ne
 8011750:	2301      	movne	r3, #1
 8011752:	0692      	lsls	r2, r2, #26
 8011754:	d42d      	bmi.n	80117b2 <_printf_common+0xbe>
 8011756:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801175a:	4639      	mov	r1, r7
 801175c:	4630      	mov	r0, r6
 801175e:	47c0      	blx	r8
 8011760:	3001      	adds	r0, #1
 8011762:	d020      	beq.n	80117a6 <_printf_common+0xb2>
 8011764:	6823      	ldr	r3, [r4, #0]
 8011766:	68e5      	ldr	r5, [r4, #12]
 8011768:	f8d9 2000 	ldr.w	r2, [r9]
 801176c:	f003 0306 	and.w	r3, r3, #6
 8011770:	2b04      	cmp	r3, #4
 8011772:	bf08      	it	eq
 8011774:	1aad      	subeq	r5, r5, r2
 8011776:	68a3      	ldr	r3, [r4, #8]
 8011778:	6922      	ldr	r2, [r4, #16]
 801177a:	bf0c      	ite	eq
 801177c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011780:	2500      	movne	r5, #0
 8011782:	4293      	cmp	r3, r2
 8011784:	bfc4      	itt	gt
 8011786:	1a9b      	subgt	r3, r3, r2
 8011788:	18ed      	addgt	r5, r5, r3
 801178a:	f04f 0900 	mov.w	r9, #0
 801178e:	341a      	adds	r4, #26
 8011790:	454d      	cmp	r5, r9
 8011792:	d11a      	bne.n	80117ca <_printf_common+0xd6>
 8011794:	2000      	movs	r0, #0
 8011796:	e008      	b.n	80117aa <_printf_common+0xb6>
 8011798:	2301      	movs	r3, #1
 801179a:	4652      	mov	r2, sl
 801179c:	4639      	mov	r1, r7
 801179e:	4630      	mov	r0, r6
 80117a0:	47c0      	blx	r8
 80117a2:	3001      	adds	r0, #1
 80117a4:	d103      	bne.n	80117ae <_printf_common+0xba>
 80117a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ae:	3501      	adds	r5, #1
 80117b0:	e7c3      	b.n	801173a <_printf_common+0x46>
 80117b2:	18e1      	adds	r1, r4, r3
 80117b4:	1c5a      	adds	r2, r3, #1
 80117b6:	2030      	movs	r0, #48	; 0x30
 80117b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80117bc:	4422      	add	r2, r4
 80117be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117c6:	3302      	adds	r3, #2
 80117c8:	e7c5      	b.n	8011756 <_printf_common+0x62>
 80117ca:	2301      	movs	r3, #1
 80117cc:	4622      	mov	r2, r4
 80117ce:	4639      	mov	r1, r7
 80117d0:	4630      	mov	r0, r6
 80117d2:	47c0      	blx	r8
 80117d4:	3001      	adds	r0, #1
 80117d6:	d0e6      	beq.n	80117a6 <_printf_common+0xb2>
 80117d8:	f109 0901 	add.w	r9, r9, #1
 80117dc:	e7d8      	b.n	8011790 <_printf_common+0x9c>
	...

080117e0 <_printf_i>:
 80117e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80117e8:	460c      	mov	r4, r1
 80117ea:	7e09      	ldrb	r1, [r1, #24]
 80117ec:	b085      	sub	sp, #20
 80117ee:	296e      	cmp	r1, #110	; 0x6e
 80117f0:	4617      	mov	r7, r2
 80117f2:	4606      	mov	r6, r0
 80117f4:	4698      	mov	r8, r3
 80117f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117f8:	f000 80b3 	beq.w	8011962 <_printf_i+0x182>
 80117fc:	d822      	bhi.n	8011844 <_printf_i+0x64>
 80117fe:	2963      	cmp	r1, #99	; 0x63
 8011800:	d036      	beq.n	8011870 <_printf_i+0x90>
 8011802:	d80a      	bhi.n	801181a <_printf_i+0x3a>
 8011804:	2900      	cmp	r1, #0
 8011806:	f000 80b9 	beq.w	801197c <_printf_i+0x19c>
 801180a:	2958      	cmp	r1, #88	; 0x58
 801180c:	f000 8083 	beq.w	8011916 <_printf_i+0x136>
 8011810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011814:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011818:	e032      	b.n	8011880 <_printf_i+0xa0>
 801181a:	2964      	cmp	r1, #100	; 0x64
 801181c:	d001      	beq.n	8011822 <_printf_i+0x42>
 801181e:	2969      	cmp	r1, #105	; 0x69
 8011820:	d1f6      	bne.n	8011810 <_printf_i+0x30>
 8011822:	6820      	ldr	r0, [r4, #0]
 8011824:	6813      	ldr	r3, [r2, #0]
 8011826:	0605      	lsls	r5, r0, #24
 8011828:	f103 0104 	add.w	r1, r3, #4
 801182c:	d52a      	bpl.n	8011884 <_printf_i+0xa4>
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	6011      	str	r1, [r2, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	da03      	bge.n	801183e <_printf_i+0x5e>
 8011836:	222d      	movs	r2, #45	; 0x2d
 8011838:	425b      	negs	r3, r3
 801183a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801183e:	486f      	ldr	r0, [pc, #444]	; (80119fc <_printf_i+0x21c>)
 8011840:	220a      	movs	r2, #10
 8011842:	e039      	b.n	80118b8 <_printf_i+0xd8>
 8011844:	2973      	cmp	r1, #115	; 0x73
 8011846:	f000 809d 	beq.w	8011984 <_printf_i+0x1a4>
 801184a:	d808      	bhi.n	801185e <_printf_i+0x7e>
 801184c:	296f      	cmp	r1, #111	; 0x6f
 801184e:	d020      	beq.n	8011892 <_printf_i+0xb2>
 8011850:	2970      	cmp	r1, #112	; 0x70
 8011852:	d1dd      	bne.n	8011810 <_printf_i+0x30>
 8011854:	6823      	ldr	r3, [r4, #0]
 8011856:	f043 0320 	orr.w	r3, r3, #32
 801185a:	6023      	str	r3, [r4, #0]
 801185c:	e003      	b.n	8011866 <_printf_i+0x86>
 801185e:	2975      	cmp	r1, #117	; 0x75
 8011860:	d017      	beq.n	8011892 <_printf_i+0xb2>
 8011862:	2978      	cmp	r1, #120	; 0x78
 8011864:	d1d4      	bne.n	8011810 <_printf_i+0x30>
 8011866:	2378      	movs	r3, #120	; 0x78
 8011868:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801186c:	4864      	ldr	r0, [pc, #400]	; (8011a00 <_printf_i+0x220>)
 801186e:	e055      	b.n	801191c <_printf_i+0x13c>
 8011870:	6813      	ldr	r3, [r2, #0]
 8011872:	1d19      	adds	r1, r3, #4
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	6011      	str	r1, [r2, #0]
 8011878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801187c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011880:	2301      	movs	r3, #1
 8011882:	e08c      	b.n	801199e <_printf_i+0x1be>
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	6011      	str	r1, [r2, #0]
 8011888:	f010 0f40 	tst.w	r0, #64	; 0x40
 801188c:	bf18      	it	ne
 801188e:	b21b      	sxthne	r3, r3
 8011890:	e7cf      	b.n	8011832 <_printf_i+0x52>
 8011892:	6813      	ldr	r3, [r2, #0]
 8011894:	6825      	ldr	r5, [r4, #0]
 8011896:	1d18      	adds	r0, r3, #4
 8011898:	6010      	str	r0, [r2, #0]
 801189a:	0628      	lsls	r0, r5, #24
 801189c:	d501      	bpl.n	80118a2 <_printf_i+0xc2>
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	e002      	b.n	80118a8 <_printf_i+0xc8>
 80118a2:	0668      	lsls	r0, r5, #25
 80118a4:	d5fb      	bpl.n	801189e <_printf_i+0xbe>
 80118a6:	881b      	ldrh	r3, [r3, #0]
 80118a8:	4854      	ldr	r0, [pc, #336]	; (80119fc <_printf_i+0x21c>)
 80118aa:	296f      	cmp	r1, #111	; 0x6f
 80118ac:	bf14      	ite	ne
 80118ae:	220a      	movne	r2, #10
 80118b0:	2208      	moveq	r2, #8
 80118b2:	2100      	movs	r1, #0
 80118b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80118b8:	6865      	ldr	r5, [r4, #4]
 80118ba:	60a5      	str	r5, [r4, #8]
 80118bc:	2d00      	cmp	r5, #0
 80118be:	f2c0 8095 	blt.w	80119ec <_printf_i+0x20c>
 80118c2:	6821      	ldr	r1, [r4, #0]
 80118c4:	f021 0104 	bic.w	r1, r1, #4
 80118c8:	6021      	str	r1, [r4, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d13d      	bne.n	801194a <_printf_i+0x16a>
 80118ce:	2d00      	cmp	r5, #0
 80118d0:	f040 808e 	bne.w	80119f0 <_printf_i+0x210>
 80118d4:	4665      	mov	r5, ip
 80118d6:	2a08      	cmp	r2, #8
 80118d8:	d10b      	bne.n	80118f2 <_printf_i+0x112>
 80118da:	6823      	ldr	r3, [r4, #0]
 80118dc:	07db      	lsls	r3, r3, #31
 80118de:	d508      	bpl.n	80118f2 <_printf_i+0x112>
 80118e0:	6923      	ldr	r3, [r4, #16]
 80118e2:	6862      	ldr	r2, [r4, #4]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	bfde      	ittt	le
 80118e8:	2330      	movle	r3, #48	; 0x30
 80118ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80118ee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80118f2:	ebac 0305 	sub.w	r3, ip, r5
 80118f6:	6123      	str	r3, [r4, #16]
 80118f8:	f8cd 8000 	str.w	r8, [sp]
 80118fc:	463b      	mov	r3, r7
 80118fe:	aa03      	add	r2, sp, #12
 8011900:	4621      	mov	r1, r4
 8011902:	4630      	mov	r0, r6
 8011904:	f7ff fef6 	bl	80116f4 <_printf_common>
 8011908:	3001      	adds	r0, #1
 801190a:	d14d      	bne.n	80119a8 <_printf_i+0x1c8>
 801190c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011910:	b005      	add	sp, #20
 8011912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011916:	4839      	ldr	r0, [pc, #228]	; (80119fc <_printf_i+0x21c>)
 8011918:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801191c:	6813      	ldr	r3, [r2, #0]
 801191e:	6821      	ldr	r1, [r4, #0]
 8011920:	1d1d      	adds	r5, r3, #4
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	6015      	str	r5, [r2, #0]
 8011926:	060a      	lsls	r2, r1, #24
 8011928:	d50b      	bpl.n	8011942 <_printf_i+0x162>
 801192a:	07ca      	lsls	r2, r1, #31
 801192c:	bf44      	itt	mi
 801192e:	f041 0120 	orrmi.w	r1, r1, #32
 8011932:	6021      	strmi	r1, [r4, #0]
 8011934:	b91b      	cbnz	r3, 801193e <_printf_i+0x15e>
 8011936:	6822      	ldr	r2, [r4, #0]
 8011938:	f022 0220 	bic.w	r2, r2, #32
 801193c:	6022      	str	r2, [r4, #0]
 801193e:	2210      	movs	r2, #16
 8011940:	e7b7      	b.n	80118b2 <_printf_i+0xd2>
 8011942:	064d      	lsls	r5, r1, #25
 8011944:	bf48      	it	mi
 8011946:	b29b      	uxthmi	r3, r3
 8011948:	e7ef      	b.n	801192a <_printf_i+0x14a>
 801194a:	4665      	mov	r5, ip
 801194c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011950:	fb02 3311 	mls	r3, r2, r1, r3
 8011954:	5cc3      	ldrb	r3, [r0, r3]
 8011956:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801195a:	460b      	mov	r3, r1
 801195c:	2900      	cmp	r1, #0
 801195e:	d1f5      	bne.n	801194c <_printf_i+0x16c>
 8011960:	e7b9      	b.n	80118d6 <_printf_i+0xf6>
 8011962:	6813      	ldr	r3, [r2, #0]
 8011964:	6825      	ldr	r5, [r4, #0]
 8011966:	6961      	ldr	r1, [r4, #20]
 8011968:	1d18      	adds	r0, r3, #4
 801196a:	6010      	str	r0, [r2, #0]
 801196c:	0628      	lsls	r0, r5, #24
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	d501      	bpl.n	8011976 <_printf_i+0x196>
 8011972:	6019      	str	r1, [r3, #0]
 8011974:	e002      	b.n	801197c <_printf_i+0x19c>
 8011976:	066a      	lsls	r2, r5, #25
 8011978:	d5fb      	bpl.n	8011972 <_printf_i+0x192>
 801197a:	8019      	strh	r1, [r3, #0]
 801197c:	2300      	movs	r3, #0
 801197e:	6123      	str	r3, [r4, #16]
 8011980:	4665      	mov	r5, ip
 8011982:	e7b9      	b.n	80118f8 <_printf_i+0x118>
 8011984:	6813      	ldr	r3, [r2, #0]
 8011986:	1d19      	adds	r1, r3, #4
 8011988:	6011      	str	r1, [r2, #0]
 801198a:	681d      	ldr	r5, [r3, #0]
 801198c:	6862      	ldr	r2, [r4, #4]
 801198e:	2100      	movs	r1, #0
 8011990:	4628      	mov	r0, r5
 8011992:	f7ee fc4d 	bl	8000230 <memchr>
 8011996:	b108      	cbz	r0, 801199c <_printf_i+0x1bc>
 8011998:	1b40      	subs	r0, r0, r5
 801199a:	6060      	str	r0, [r4, #4]
 801199c:	6863      	ldr	r3, [r4, #4]
 801199e:	6123      	str	r3, [r4, #16]
 80119a0:	2300      	movs	r3, #0
 80119a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119a6:	e7a7      	b.n	80118f8 <_printf_i+0x118>
 80119a8:	6923      	ldr	r3, [r4, #16]
 80119aa:	462a      	mov	r2, r5
 80119ac:	4639      	mov	r1, r7
 80119ae:	4630      	mov	r0, r6
 80119b0:	47c0      	blx	r8
 80119b2:	3001      	adds	r0, #1
 80119b4:	d0aa      	beq.n	801190c <_printf_i+0x12c>
 80119b6:	6823      	ldr	r3, [r4, #0]
 80119b8:	079b      	lsls	r3, r3, #30
 80119ba:	d413      	bmi.n	80119e4 <_printf_i+0x204>
 80119bc:	68e0      	ldr	r0, [r4, #12]
 80119be:	9b03      	ldr	r3, [sp, #12]
 80119c0:	4298      	cmp	r0, r3
 80119c2:	bfb8      	it	lt
 80119c4:	4618      	movlt	r0, r3
 80119c6:	e7a3      	b.n	8011910 <_printf_i+0x130>
 80119c8:	2301      	movs	r3, #1
 80119ca:	464a      	mov	r2, r9
 80119cc:	4639      	mov	r1, r7
 80119ce:	4630      	mov	r0, r6
 80119d0:	47c0      	blx	r8
 80119d2:	3001      	adds	r0, #1
 80119d4:	d09a      	beq.n	801190c <_printf_i+0x12c>
 80119d6:	3501      	adds	r5, #1
 80119d8:	68e3      	ldr	r3, [r4, #12]
 80119da:	9a03      	ldr	r2, [sp, #12]
 80119dc:	1a9b      	subs	r3, r3, r2
 80119de:	42ab      	cmp	r3, r5
 80119e0:	dcf2      	bgt.n	80119c8 <_printf_i+0x1e8>
 80119e2:	e7eb      	b.n	80119bc <_printf_i+0x1dc>
 80119e4:	2500      	movs	r5, #0
 80119e6:	f104 0919 	add.w	r9, r4, #25
 80119ea:	e7f5      	b.n	80119d8 <_printf_i+0x1f8>
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d1ac      	bne.n	801194a <_printf_i+0x16a>
 80119f0:	7803      	ldrb	r3, [r0, #0]
 80119f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119fa:	e76c      	b.n	80118d6 <_printf_i+0xf6>
 80119fc:	08012078 	.word	0x08012078
 8011a00:	08012089 	.word	0x08012089

08011a04 <_realloc_r>:
 8011a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a06:	4607      	mov	r7, r0
 8011a08:	4614      	mov	r4, r2
 8011a0a:	460e      	mov	r6, r1
 8011a0c:	b921      	cbnz	r1, 8011a18 <_realloc_r+0x14>
 8011a0e:	4611      	mov	r1, r2
 8011a10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011a14:	f7ff bc5c 	b.w	80112d0 <_malloc_r>
 8011a18:	b922      	cbnz	r2, 8011a24 <_realloc_r+0x20>
 8011a1a:	f7ff fc0b 	bl	8011234 <_free_r>
 8011a1e:	4625      	mov	r5, r4
 8011a20:	4628      	mov	r0, r5
 8011a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a24:	f000 f814 	bl	8011a50 <_malloc_usable_size_r>
 8011a28:	42a0      	cmp	r0, r4
 8011a2a:	d20f      	bcs.n	8011a4c <_realloc_r+0x48>
 8011a2c:	4621      	mov	r1, r4
 8011a2e:	4638      	mov	r0, r7
 8011a30:	f7ff fc4e 	bl	80112d0 <_malloc_r>
 8011a34:	4605      	mov	r5, r0
 8011a36:	2800      	cmp	r0, #0
 8011a38:	d0f2      	beq.n	8011a20 <_realloc_r+0x1c>
 8011a3a:	4631      	mov	r1, r6
 8011a3c:	4622      	mov	r2, r4
 8011a3e:	f7ff fbcd 	bl	80111dc <memcpy>
 8011a42:	4631      	mov	r1, r6
 8011a44:	4638      	mov	r0, r7
 8011a46:	f7ff fbf5 	bl	8011234 <_free_r>
 8011a4a:	e7e9      	b.n	8011a20 <_realloc_r+0x1c>
 8011a4c:	4635      	mov	r5, r6
 8011a4e:	e7e7      	b.n	8011a20 <_realloc_r+0x1c>

08011a50 <_malloc_usable_size_r>:
 8011a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a54:	1f18      	subs	r0, r3, #4
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	bfbc      	itt	lt
 8011a5a:	580b      	ldrlt	r3, [r1, r0]
 8011a5c:	18c0      	addlt	r0, r0, r3
 8011a5e:	4770      	bx	lr

08011a60 <_init>:
 8011a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a62:	bf00      	nop
 8011a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a66:	bc08      	pop	{r3}
 8011a68:	469e      	mov	lr, r3
 8011a6a:	4770      	bx	lr

08011a6c <_fini>:
 8011a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a6e:	bf00      	nop
 8011a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a72:	bc08      	pop	{r3}
 8011a74:	469e      	mov	lr, r3
 8011a76:	4770      	bx	lr
